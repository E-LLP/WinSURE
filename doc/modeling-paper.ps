%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 46 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Palatino-Roman FMFONTDEFINE
2 0 /Palatino-Italic FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
7 0 /Courier FMFONTDEFINE
8 0 /Times-BoldItalic FMFONTDEFINE
9 1 /ZapfDingbats FMFONTDEFINE
10 0 /Helvetica-Oblique FMFONTDEFINE
11 0 /Helvetica-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72 633 191 733 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 633 191 733 R
7 X
0 0 0 1 0 0 0 K
V
0 230 401 343 495 113 94 75 636 FMBEGINEPSF
%%BeginDocument: /home/working/Frame/meatball.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (meatballbw.ps)
%%CreationDate: (11/5/93) (11:57 AM)
%%BoundingBox: 230 401 343 495
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
%%EndSetup
0 A
u
0 O
0 0 0 1 k
1 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note: AI COREL DRAW Export
0 D
327.9931 448.4585 m
327.7418 445.9452 l
327.7418 443.6833 l
327.4905 441.4213 l
326.9878 439.1594 l
326.4851 437.1487 l
325.9825 434.8868 l
325.2285 432.8762 l
324.4745 430.6142 l
323.4692 428.6036 l
322.4639 426.8443 l
321.4586 424.8336 l
320.202 423.0743 l
318.9453 421.3151 l
317.4373 419.5557 l
315.9294 418.0478 l
314.4214 416.2885 l
312.9134 414.7805 l
311.4054 413.2725 l
309.6461 412.0158 l
307.8868 410.7592 l
306.1275 409.5026 l
304.1169 408.4973 l
302.1063 407.492 l
300.0956 406.4866 l
298.085 405.7326 l
296.0744 404.9787 l
293.8124 404.476 l
291.5505 403.9734 l
289.5399 403.4707 l
287.2779 403.2194 l
284.7646 402.968 l
282.5026 402.968 l
282.5026 402.968 l
280.2407 402.968 l
277.9787 403.2194 l
275.7168 403.4707 l
273.4548 403.9734 l
271.4442 404.476 l
269.1822 404.9787 l
266.9203 405.7326 l
264.9096 406.4866 l
262.899 407.492 l
260.8884 408.4973 l
259.1291 409.5026 l
257.3698 410.7592 l
255.6105 412.0158 l
253.5999 413.2725 l
252.0919 414.7805 l
250.5839 416.2885 l
249.0759 418.0478 l
247.568 419.5557 l
246.3113 421.3151 l
245.0547 423.0743 l
243.798 424.8336 l
242.7927 426.8443 l
241.7874 428.6036 l
240.7821 430.6142 l
240.0281 432.8762 l
239.2741 434.8868 l
238.5202 437.1487 l
238.0175 439.1594 l
237.5149 441.4213 l
237.2635 443.6833 l
237.2635 445.9452 l
237.0122 448.4585 l
237.0122 448.4585 l
237.2635 450.7205 l
237.2635 452.9824 l
237.5149 455.2444 l
238.0175 457.5064 l
238.5202 459.517 l
239.2741 461.779 l
240.0281 463.7896 l
240.7821 466.0515 l
241.7874 468.0622 l
242.7927 469.8215 l
243.798 471.8321 l
245.0547 473.5914 l
246.3113 475.3507 l
247.568 477.11 l
249.0759 478.6179 l
250.5839 480.3773 l
252.0919 481.8852 l
253.5999 483.3932 l
255.6105 484.6499 l
257.3698 485.9065 l
259.1291 487.1631 l
260.8884 488.1685 l
262.899 489.1738 l
264.9096 490.1791 l
266.9203 490.9331 l
269.1822 491.6871 l
271.4442 492.1897 l
273.4548 492.6923 l
275.7168 493.195 l
277.9787 493.4464 l
280.2407 493.6977 l
282.5026 493.6977 l
282.5026 493.6977 l
284.7646 493.6977 l
287.2779 493.4464 l
289.5399 493.195 l
291.5505 492.6923 l
293.8124 492.1897 l
296.0744 491.6871 l
298.085 490.9331 l
300.0956 490.1791 l
302.1063 489.1738 l
304.1169 488.1685 l
306.1275 487.1631 l
307.8868 485.9065 l
309.6461 484.6499 l
311.4054 483.3932 l
312.9134 481.8852 l
314.4214 480.3773 l
315.9294 478.6179 l
317.4373 477.11 l
318.9453 475.3507 l
320.202 473.5914 l
321.4586 471.8321 l
322.4639 469.8215 l
323.4692 468.0622 l
324.4745 466.0515 l
325.2285 463.7896 l
325.9825 461.779 l
326.4851 459.517 l
326.9878 457.5064 l
327.4905 455.2444 l
327.7418 452.9824 l
327.7418 450.7205 l
327.9931 448.4585 l
327.9931 448.4585 l
f
0 0 0 0.35 k
232.9909 434.6354 m
235.5042 435.8921 l
238.0175 437.1487 l
240.7821 438.4054 l
243.5467 439.4107 l
246.5626 440.416 l
249.5786 441.4213 l
252.5946 442.4266 l
255.8618 443.4319 l
259.1291 444.1859 l
262.6477 444.9399 l
265.915 445.9452 l
269.4336 446.6992 l
272.9522 447.7046 l
276.4708 448.4585 l
279.9894 449.4639 l
283.508 450.4692 l
287.0266 451.4745 l
290.5452 452.4798 l
294.0638 453.4851 l
297.5823 454.7417 l
300.8496 455.9984 l
304.3683 457.255 l
307.6355 458.763 l
310.9028 460.271 l
314.1701 462.0303 l
317.186 463.7896 l
320.202 465.8002 l
322.9666 467.8108 l
325.7312 470.0728 l
328.4958 472.3347 l
330.7577 475.0994 l
333.2711 477.6127 l
333.2711 477.6127 l
333.2711 477.864 l
333.5224 478.1153 l
333.7737 478.6179 l
334.2764 478.8693 l
334.5277 479.1206 l
334.779 479.3719 l
335.0303 479.8746 l
335.2817 480.3773 l
335.533 480.6286 l
335.7843 481.1313 l
336.0356 481.3826 l
336.287 481.8852 l
336.5383 482.3879 l
337.041 482.6392 l
337.2923 483.1419 l
337.5436 483.3932 l
337.795 483.8959 l
338.0463 484.3985 l
338.2976 484.6499 l
338.8003 485.1525 l
339.0516 485.6552 l
339.3029 485.9065 l
339.5543 486.4091 l
339.8056 486.6605 l
340.0569 487.1631 l
340.3082 487.4145 l
340.3082 487.9171 l
340.5596 488.1685 l
340.8109 488.4198 l
341.0622 488.9225 l
341.0622 489.1738 l
341.3135 489.4251 l
341.3135 489.4251 l
340.8109 488.6711 l
340.3082 487.9171 l
339.5543 487.1631 l
339.0516 486.4091 l
338.2976 485.6552 l
337.795 484.9012 l
337.041 484.1472 l
336.287 483.3932 l
335.533 482.6392 l
334.5277 481.8852 l
333.7737 481.1313 l
332.7684 480.3773 l
332.0144 479.6233 l
331.0091 478.8693 l
330.2551 478.1153 l
329.2498 477.3613 l
328.2445 476.8587 l
327.4905 476.1047 l
326.4851 475.3507 l
325.4798 474.848 l
324.4745 474.0941 l
323.7206 473.5914 l
322.7153 473.0887 l
321.7099 472.3347 l
320.7046 471.8321 l
319.9506 471.3294 l
318.9453 470.8268 l
317.94 470.3241 l
317.186 469.8215 l
316.1807 469.3188 l
315.4267 468.8161 l
314.6727 468.5648 l
314.6727 468.5648 l
312.9134 467.5595 l
311.1541 466.8055 l
309.6461 466.0515 l
308.1382 465.2976 l
306.3789 464.5436 l
304.8709 463.7896 l
303.3629 463.0356 l
301.6036 462.533 l
300.0956 461.779 l
298.5877 461.025 l
297.0797 460.5223 l
295.5717 460.0196 l
293.8124 459.2657 l
292.3045 458.763 l
290.7965 458.2603 l
289.2885 457.5064 l
287.7806 457.0037 l
286.0213 456.501 l
284.5133 455.9984 l
283.0053 455.4957 l
281.4974 454.9931 l
279.738 454.2391 l
278.2301 453.7364 l
276.4708 453.2338 l
274.9628 452.7311 l
273.2035 452.2285 l
271.6955 451.7258 l
269.9362 451.2231 l
268.1769 450.4692 l
266.4177 449.9665 l
264.6583 449.4639 l
262.899 448.7098 l
262.899 448.7098 l
261.6424 448.4585 l
260.3857 447.9559 l
259.1291 447.4532 l
257.8724 446.9505 l
256.8671 446.6992 l
255.6105 446.1965 l
254.3538 445.6939 l
253.3486 445.4426 l
252.3432 444.9399 l
251.3379 444.6886 l
250.3326 444.1859 l
249.3273 443.6833 l
248.3219 443.4319 l
247.568 442.9293 l
246.5626 442.6779 l
245.5573 442.1753 l
244.8033 441.6726 l
243.798 441.4213 l
243.044 440.9187 l
242.2901 440.416 l
241.2847 440.1647 l
240.5308 439.662 l
239.7768 439.1594 l
238.7715 438.6567 l
238.0175 438.154 l
237.2635 437.9027 l
236.2582 437.4001 l
235.7555 436.8974 l
235.0015 436.3948 l
233.9962 435.8921 l
233.2422 435.3894 l
232.4882 434.8868 l
232.4882 434.8868 l
232.9909 434.6354 l
232.9909 434.6354 l
f
0 0 0 0 k
283.2566 489.6764 m
283.2566 489.4251 l
283.0053 489.4251 l
283.0053 489.4251 l
283.0053 489.1738 l
283.0053 489.1738 l
282.754 489.1738 l
282.754 489.1738 l
282.754 489.1738 l
282.5026 489.1738 l
282.5026 489.4251 l
282.5026 489.4251 l
282.5026 489.4251 l
282.5026 489.6764 l
282.5026 489.6764 l
282.5026 489.6764 l
282.5026 489.6764 l
282.5026 489.9277 l
282.5026 489.9277 l
282.754 489.9277 l
282.754 489.9277 l
282.754 489.9277 l
283.0053 489.9277 l
283.0053 489.9277 l
283.0053 489.9277 l
283.0053 489.6764 l
283.2566 489.6764 l
283.2566 489.6764 l
283.2566 489.6764 l
f
285.7699 484.1472 m
285.7699 483.8959 l
285.7699 483.8959 l
285.5186 483.6445 l
285.5186 483.6445 l
285.5186 483.6445 l
285.2673 483.6445 l
285.2673 483.6445 l
285.2673 483.6445 l
285.2673 483.6445 l
285.0159 483.6445 l
285.0159 483.6445 l
285.0159 483.6445 l
284.7646 483.8959 l
284.7646 483.8959 l
284.7646 484.1472 l
284.7646 484.1472 l
284.7646 484.1472 l
284.7646 484.1472 l
285.0159 484.3985 l
285.0159 484.3985 l
285.0159 484.3985 l
285.0159 484.3985 l
285.2673 484.3985 l
285.2673 484.3985 l
285.2673 484.3985 l
285.5186 484.3985 l
285.5186 484.3985 l
285.5186 484.3985 l
285.5186 484.1472 l
285.7699 484.1472 l
285.7699 484.1472 l
285.7699 484.1472 l
f
292.3045 474.848 m
292.3045 474.848 l
292.3045 474.5967 l
292.3045 474.5967 l
292.3045 474.5967 l
292.0531 474.3454 l
292.0531 474.3454 l
292.0531 474.3454 l
292.0531 474.3454 l
291.8018 474.3454 l
291.8018 474.3454 l
291.8018 474.3454 l
291.5505 474.5967 l
291.5505 474.5967 l
291.5505 474.5967 l
291.5505 474.848 l
291.5505 474.848 l
291.5505 474.848 l
291.5505 475.0994 l
291.5505 475.0994 l
291.8018 475.0994 l
291.8018 475.0994 l
291.8018 475.3507 l
292.0531 475.3507 l
292.0531 475.3507 l
292.0531 475.3507 l
292.0531 475.0994 l
292.3045 475.0994 l
292.3045 475.0994 l
292.3045 475.0994 l
292.3045 474.848 l
292.3045 474.848 l
292.3045 474.848 l
f
281.7487 480.8799 m
281.7487 480.8799 l
281.7487 480.6286 l
281.4974 480.6286 l
281.4974 480.6286 l
281.4974 480.6286 l
281.246 480.6286 l
281.246 480.6286 l
281.246 480.6286 l
281.246 480.6286 l
280.9947 480.6286 l
280.9947 480.6286 l
280.9947 480.8799 l
280.9947 480.8799 l
280.9947 480.8799 l
280.9947 480.8799 l
280.9947 481.1313 l
280.9947 481.1313 l
281.246 481.1313 l
281.246 481.1313 l
281.246 481.3826 l
281.246 481.3826 l
281.4974 481.1313 l
281.4974 481.1313 l
281.4974 481.1313 l
281.7487 481.1313 l
281.7487 480.8799 l
281.7487 480.8799 l
281.7487 480.8799 l
f
285.5186 478.6179 m
285.5186 478.6179 l
285.5186 478.6179 l
285.5186 478.3666 l
285.5186 478.3666 l
285.2673 478.3666 l
285.2673 478.3666 l
285.2673 478.3666 l
285.2673 478.3666 l
285.0159 478.3666 l
285.0159 478.3666 l
285.0159 478.3666 l
285.0159 478.6179 l
285.0159 478.6179 l
285.0159 478.6179 l
285.0159 478.8693 l
285.0159 478.8693 l
285.0159 478.8693 l
285.0159 478.8693 l
285.2673 479.1206 l
285.2673 479.1206 l
285.2673 479.1206 l
285.2673 479.1206 l
285.5186 479.1206 l
285.5186 478.8693 l
285.5186 478.8693 l
285.5186 478.8693 l
285.5186 478.6179 l
285.5186 478.6179 l
f
280.492 484.6499 m
280.492 484.6499 l
280.492 484.3985 l
280.492 484.3985 l
280.2407 484.3985 l
280.2407 484.1472 l
280.2407 484.1472 l
279.9894 484.1472 l
279.9894 484.1472 l
279.9894 484.1472 l
279.9894 484.1472 l
279.738 484.3985 l
279.738 484.3985 l
279.738 484.3985 l
279.738 484.6499 l
279.738 484.6499 l
279.738 484.6499 l
279.738 484.6499 l
279.738 484.9012 l
279.738 484.9012 l
279.738 484.9012 l
279.738 484.9012 l
279.9894 485.1525 l
279.9894 485.1525 l
279.9894 485.1525 l
280.2407 485.1525 l
280.2407 485.1525 l
280.2407 484.9012 l
280.492 484.9012 l
280.492 484.9012 l
280.492 484.6499 l
280.492 484.6499 l
280.492 484.6499 l
f
274.4601 481.1313 m
274.4601 480.8799 l
274.4601 480.8799 l
274.4601 480.6286 l
274.4601 480.6286 l
274.2088 480.6286 l
274.2088 480.6286 l
274.2088 480.6286 l
273.9575 480.6286 l
273.9575 480.6286 l
273.9575 480.6286 l
273.9575 480.8799 l
273.7061 480.8799 l
273.7061 481.1313 l
273.7061 481.1313 l
273.7061 481.1313 l
273.9575 481.1313 l
273.9575 481.3826 l
273.9575 481.3826 l
273.9575 481.3826 l
274.2088 481.3826 l
274.2088 481.3826 l
274.2088 481.3826 l
274.2088 481.3826 l
274.4601 481.3826 l
274.4601 481.1313 l
274.4601 481.1313 l
274.4601 481.1313 l
274.4601 481.1313 l
f
275.7168 480.3773 m
275.4654 480.1259 l
275.4654 479.8746 l
275.4654 479.8746 l
275.4654 479.8746 l
275.2141 479.8746 l
275.2141 479.8746 l
275.2141 479.8746 l
275.2141 479.8746 l
274.9628 479.8746 l
274.9628 479.8746 l
274.9628 479.8746 l
274.9628 480.1259 l
274.9628 480.3773 l
274.9628 480.3773 l
274.9628 480.3773 l
274.9628 480.3773 l
274.9628 480.6286 l
274.9628 480.6286 l
275.2141 480.6286 l
275.2141 480.6286 l
275.2141 480.6286 l
275.2141 480.6286 l
275.4654 480.6286 l
275.4654 480.6286 l
275.4654 480.3773 l
275.4654 480.3773 l
275.7168 480.3773 l
275.7168 480.3773 l
f
276.7221 479.3719 m
276.7221 479.3719 l
276.7221 479.1206 l
276.4708 479.1206 l
276.4708 479.1206 l
276.4708 479.1206 l
276.2194 479.1206 l
276.2194 479.1206 l
276.2194 479.1206 l
276.2194 479.1206 l
275.9681 479.1206 l
275.9681 479.1206 l
275.9681 479.3719 l
275.9681 479.3719 l
275.9681 479.3719 l
275.9681 479.6233 l
275.9681 479.6233 l
275.9681 479.6233 l
276.2194 479.6233 l
276.2194 479.8746 l
276.2194 479.8746 l
276.2194 479.8746 l
276.4708 479.8746 l
276.4708 479.6233 l
276.4708 479.6233 l
276.7221 479.6233 l
276.7221 479.6233 l
276.7221 479.3719 l
276.7221 479.3719 l
f
274.9628 478.1153 m
274.9628 477.864 l
274.9628 477.864 l
274.9628 477.864 l
274.9628 477.6127 l
274.7115 477.6127 l
274.7115 477.6127 l
274.7115 477.6127 l
274.4601 477.6127 l
274.4601 477.6127 l
274.4601 477.864 l
274.4601 477.864 l
274.2088 477.864 l
274.2088 478.1153 l
274.2088 478.1153 l
274.2088 478.1153 l
274.4601 478.1153 l
274.4601 478.3666 l
274.4601 478.3666 l
274.4601 478.3666 l
274.7115 478.3666 l
274.7115 478.3666 l
274.7115 478.3666 l
274.7115 478.3666 l
274.9628 478.3666 l
274.9628 478.1153 l
274.9628 478.1153 l
274.9628 478.1153 l
274.9628 478.1153 l
f
266.4177 472.0834 m
266.4177 471.8321 l
266.4177 471.8321 l
266.1663 471.8321 l
266.1663 471.8321 l
266.1663 471.5808 l
265.915 471.5808 l
265.915 471.5808 l
265.915 471.5808 l
265.915 471.5808 l
265.6636 471.8321 l
265.6636 471.8321 l
265.6636 471.8321 l
265.6636 472.0834 l
265.6636 472.0834 l
265.6636 472.0834 l
265.6636 472.0834 l
265.6636 472.3347 l
265.915 472.3347 l
265.915 472.3347 l
265.915 472.3347 l
265.915 472.3347 l
266.1663 472.3347 l
266.1663 472.3347 l
266.1663 472.3347 l
266.4177 472.3347 l
266.4177 472.0834 l
266.4177 472.0834 l
266.4177 472.0834 l
f
267.9256 470.0728 m
267.9256 470.0728 l
267.9256 469.8215 l
267.9256 469.8215 l
267.6742 469.8215 l
267.6742 469.8215 l
267.6742 469.8215 l
267.6742 469.8215 l
267.4229 469.8215 l
267.4229 469.8215 l
267.4229 469.8215 l
267.1716 469.8215 l
267.1716 470.0728 l
267.1716 470.0728 l
267.1716 470.0728 l
267.1716 470.0728 l
267.1716 470.3241 l
267.4229 470.3241 l
267.4229 470.3241 l
267.4229 470.3241 l
267.6742 470.5754 l
267.6742 470.5754 l
267.6742 470.5754 l
267.6742 470.3241 l
267.9256 470.3241 l
267.9256 470.3241 l
267.9256 470.3241 l
267.9256 470.0728 l
267.9256 470.0728 l
f
266.6689 438.908 m
266.6689 438.908 l
266.6689 438.6567 l
266.6689 438.6567 l
266.6689 438.6567 l
266.4177 438.6567 l
266.4177 438.4054 l
266.4177 438.4054 l
266.1663 438.4054 l
266.1663 438.6567 l
266.1663 438.6567 l
266.1663 438.6567 l
265.915 438.6567 l
265.915 438.908 l
265.915 438.908 l
265.915 438.908 l
265.915 439.1594 l
266.1663 439.1594 l
266.1663 439.1594 l
266.1663 439.1594 l
266.4177 439.1594 l
266.4177 439.1594 l
266.4177 439.1594 l
266.4177 439.1594 l
266.6689 439.1594 l
266.6689 439.1594 l
266.6689 438.908 l
266.6689 438.908 l
266.6689 438.908 l
f
266.9203 430.1115 m
266.9203 430.1115 l
266.9203 430.1115 l
266.9203 429.8602 l
266.6689 429.8602 l
266.6689 429.8602 l
266.6689 429.8602 l
266.4177 429.8602 l
266.4177 429.8602 l
266.4177 429.8602 l
266.4177 429.8602 l
266.1663 429.8602 l
266.1663 429.8602 l
266.1663 430.1115 l
266.1663 430.1115 l
266.1663 430.1115 l
266.1663 430.1115 l
266.1663 430.3628 l
266.1663 430.3628 l
266.1663 430.3628 l
266.1663 430.6142 l
266.1663 430.6142 l
266.4177 430.6142 l
266.4177 430.6142 l
266.4177 430.6142 l
266.6689 430.6142 l
266.6689 430.6142 l
266.6689 430.6142 l
266.9203 430.6142 l
266.9203 430.3628 l
266.9203 430.3628 l
266.9203 430.1115 l
266.9203 430.1115 l
f
262.145 425.839 m
262.145 425.839 l
262.145 425.5876 l
261.8937 425.5876 l
261.8937 425.5876 l
261.8937 425.5876 l
261.6424 425.5876 l
261.6424 425.5876 l
261.6424 425.5876 l
261.6424 425.5876 l
261.3911 425.5876 l
261.3911 425.5876 l
261.3911 425.839 l
261.3911 425.839 l
261.3911 425.839 l
261.3911 425.839 l
261.3911 426.0903 l
261.3911 426.0903 l
261.6424 426.0903 l
261.6424 426.0903 l
261.6424 426.0903 l
261.6424 426.0903 l
261.8937 426.0903 l
261.8937 426.0903 l
261.8937 426.0903 l
262.145 426.0903 l
262.145 425.839 l
262.145 425.839 l
262.145 425.839 l
f
256.3645 424.0797 m
256.3645 424.0797 l
256.1132 423.8283 l
256.1132 423.8283 l
256.1132 423.8283 l
256.1132 423.577 l
255.8618 423.577 l
255.8618 423.577 l
255.8618 423.577 l
255.8618 423.577 l
255.6105 423.577 l
255.6105 423.8283 l
255.6105 423.8283 l
255.3592 423.8283 l
255.3592 423.8283 l
255.3592 424.0797 l
255.3592 424.0797 l
255.3592 424.0797 l
255.3592 424.331 l
255.3592 424.331 l
255.6105 424.331 l
255.6105 424.331 l
255.6105 424.5823 l
255.8618 424.5823 l
255.8618 424.5823 l
255.8618 424.5823 l
256.1132 424.331 l
256.1132 424.331 l
256.1132 424.331 l
256.1132 424.331 l
256.3645 424.0797 l
256.3645 424.0797 l
256.3645 424.0797 l
f
255.1078 428.1009 m
255.1078 427.8496 l
255.1078 427.8496 l
255.1078 427.8496 l
254.8565 427.5982 l
254.8565 427.5982 l
254.6052 427.5982 l
254.6052 427.5982 l
254.6052 427.5982 l
254.3538 427.5982 l
254.3538 427.5982 l
254.3538 427.5982 l
254.1025 427.8496 l
254.1025 427.8496 l
254.1025 427.8496 l
254.1025 428.1009 l
254.1025 428.1009 l
254.1025 428.1009 l
254.1025 428.1009 l
254.1025 428.3522 l
254.3538 428.3522 l
254.3538 428.3522 l
254.3538 428.3522 l
254.6052 428.3522 l
254.6052 428.3522 l
254.6052 428.3522 l
254.6052 428.3522 l
254.8565 428.3522 l
255.1078 428.3522 l
255.1078 428.1009 l
255.1078 428.1009 l
255.1078 428.1009 l
255.1078 428.1009 l
f
254.3538 425.5876 m
254.3538 425.3363 l
254.3538 425.3363 l
254.1025 425.3363 l
254.1025 425.085 l
254.1025 425.085 l
253.8512 425.085 l
253.8512 425.085 l
253.8512 425.085 l
253.8512 425.085 l
253.5999 425.3363 l
253.5999 425.3363 l
253.5999 425.3363 l
253.5999 425.5876 l
253.5999 425.5876 l
253.5999 425.5876 l
253.5999 425.5876 l
253.5999 425.839 l
253.8512 425.839 l
253.8512 425.839 l
253.8512 425.839 l
253.8512 425.839 l
254.1025 425.839 l
254.1025 425.839 l
254.1025 425.839 l
254.3538 425.5876 l
254.3538 425.5876 l
254.3538 425.5876 l
254.3538 425.5876 l
f
249.8299 427.5982 m
249.8299 427.5982 l
249.8299 427.3469 l
249.8299 427.3469 l
249.8299 427.3469 l
249.5786 427.3469 l
249.5786 427.3469 l
249.5786 427.3469 l
249.5786 427.3469 l
249.3273 427.3469 l
249.3273 427.3469 l
249.3273 427.3469 l
249.3273 427.5982 l
249.3273 427.5982 l
249.3273 427.5982 l
249.3273 427.5982 l
249.3273 427.8496 l
249.3273 427.8496 l
249.3273 427.8496 l
249.5786 427.8496 l
249.5786 427.8496 l
249.5786 427.8496 l
249.5786 427.8496 l
249.8299 427.8496 l
249.8299 427.8496 l
249.8299 427.8496 l
249.8299 427.5982 l
249.8299 427.5982 l
249.8299 427.5982 l
f
265.161 420.5611 m
265.161 420.5611 l
265.161 420.3097 l
265.161 420.3097 l
265.161 420.3097 l
264.9096 420.3097 l
264.9096 420.0584 l
264.9096 420.0584 l
264.9096 420.0584 l
264.6583 420.3097 l
264.6583 420.3097 l
264.6583 420.3097 l
264.6583 420.3097 l
264.407 420.5611 l
264.407 420.5611 l
264.407 420.5611 l
264.6583 420.8123 l
264.6583 420.8123 l
264.6583 420.8123 l
264.6583 420.8123 l
264.9096 420.8123 l
264.9096 420.8123 l
264.9096 420.8123 l
265.161 420.8123 l
265.161 420.8123 l
265.161 420.8123 l
265.161 420.5611 l
265.161 420.5611 l
265.161 420.5611 l
f
269.9362 423.8283 m
269.9362 423.8283 l
269.6849 423.577 l
269.6849 423.577 l
269.6849 423.577 l
269.6849 423.577 l
269.4336 423.577 l
269.4336 423.577 l
269.4336 423.577 l
269.1822 423.577 l
269.1822 423.577 l
269.1822 423.577 l
268.9309 423.577 l
268.9309 423.577 l
268.9309 423.8283 l
268.9309 423.8283 l
268.9309 423.8283 l
268.9309 424.0797 l
268.9309 424.0797 l
268.9309 424.0797 l
269.1822 424.331 l
269.1822 424.331 l
269.1822 424.331 l
269.4336 424.331 l
269.4336 424.331 l
269.4336 424.331 l
269.6849 424.331 l
269.6849 424.331 l
269.6849 424.0797 l
269.6849 424.0797 l
269.6849 424.0797 l
269.9362 423.8283 l
269.9362 423.8283 l
f
270.4389 419.5557 m
270.4389 419.5557 l
270.1876 419.3044 l
270.1876 419.3044 l
270.1876 419.3044 l
270.1876 419.3044 l
269.9362 419.3044 l
269.9362 419.3044 l
269.9362 419.3044 l
269.6849 419.3044 l
269.6849 419.3044 l
269.6849 419.3044 l
269.6849 419.5557 l
269.6849 419.5557 l
269.6849 419.5557 l
269.6849 419.5557 l
269.6849 419.8071 l
269.6849 419.8071 l
269.6849 419.8071 l
269.9362 419.8071 l
269.9362 420.0584 l
269.9362 420.0584 l
269.9362 419.8071 l
270.1876 419.8071 l
270.1876 419.8071 l
270.1876 419.8071 l
270.1876 419.5557 l
270.4389 419.5557 l
270.4389 419.5557 l
f
289.2885 423.577 m
289.2885 423.577 l
289.2885 423.577 l
289.2885 423.3257 l
289.2885 423.3257 l
289.0372 423.3257 l
289.0372 423.3257 l
289.0372 423.3257 l
288.7859 423.3257 l
288.7859 423.3257 l
288.7859 423.3257 l
288.7859 423.577 l
288.5345 423.577 l
288.5345 423.577 l
288.5345 423.577 l
288.5345 423.8283 l
288.7859 423.8283 l
288.7859 423.8283 l
288.7859 424.0797 l
288.7859 424.0797 l
289.0372 424.0797 l
289.0372 424.0797 l
289.0372 424.0797 l
289.2885 424.0797 l
289.2885 423.8283 l
289.2885 423.8283 l
289.2885 423.8283 l
289.2885 423.577 l
289.2885 423.577 l
f
280.492 420.5611 m
280.492 420.5611 l
280.492 420.3097 l
280.492 420.3097 l
280.2407 420.3097 l
280.2407 420.3097 l
280.2407 420.3097 l
280.2407 420.3097 l
279.9894 420.3097 l
279.9894 420.3097 l
279.9894 420.3097 l
279.738 420.3097 l
279.738 420.5611 l
279.738 420.5611 l
279.738 420.5611 l
279.738 420.5611 l
279.738 420.8123 l
279.9894 420.8123 l
279.9894 420.8123 l
279.9894 420.8123 l
280.2407 421.0637 l
280.2407 421.0637 l
280.2407 421.0637 l
280.2407 420.8123 l
280.492 420.8123 l
280.492 420.8123 l
280.492 420.8123 l
280.492 420.5611 l
280.492 420.5611 l
f
304.3683 416.0371 m
304.3683 415.7858 l
304.1169 415.7858 l
304.1169 415.7858 l
304.1169 415.7858 l
304.1169 415.5345 l
303.8656 415.5345 l
303.8656 415.5345 l
303.8656 415.5345 l
303.6143 415.7858 l
303.6143 415.7858 l
303.6143 415.7858 l
303.6143 415.7858 l
303.6143 416.0371 l
303.6143 416.0371 l
303.6143 416.0371 l
303.6143 416.2885 l
303.6143 416.2885 l
303.6143 416.2885 l
303.8656 416.2885 l
303.8656 416.2885 l
303.8656 416.2885 l
304.1169 416.2885 l
304.1169 416.2885 l
304.1169 416.2885 l
304.1169 416.2885 l
304.3683 416.0371 l
304.3683 416.0371 l
304.3683 416.0371 l
f
306.1275 433.6301 m
306.1275 433.6301 l
306.1275 433.3788 l
306.1275 433.3788 l
306.1275 433.3788 l
305.8762 433.1275 l
305.8762 433.1275 l
305.8762 433.1275 l
305.8762 433.1275 l
305.6249 433.1275 l
305.6249 433.1275 l
305.3736 433.3788 l
305.3736 433.3788 l
305.3736 433.3788 l
305.3736 433.3788 l
305.3736 433.6301 l
305.3736 433.6301 l
305.3736 433.6301 l
305.3736 433.8815 l
305.3736 433.8815 l
305.3736 433.8815 l
305.6249 433.8815 l
305.6249 434.1328 l
305.8762 434.1328 l
305.8762 434.1328 l
305.8762 434.1328 l
305.8762 433.8815 l
306.1275 433.8815 l
306.1275 433.8815 l
306.1275 433.8815 l
306.1275 433.6301 l
306.1275 433.6301 l
306.1275 433.6301 l
f
302.3576 431.1168 m
302.3576 430.8655 l
302.3576 430.8655 l
302.3576 430.8655 l
302.3576 430.6142 l
302.1063 430.6142 l
302.1063 430.6142 l
302.1063 430.6142 l
302.1063 430.6142 l
301.855 430.6142 l
301.855 430.8655 l
301.855 430.8655 l
301.855 430.8655 l
301.6036 431.1168 l
301.6036 431.1168 l
301.6036 431.1168 l
301.855 431.1168 l
301.855 431.3682 l
301.855 431.3682 l
301.855 431.3682 l
302.1063 431.3682 l
302.1063 431.3682 l
302.1063 431.3682 l
302.3576 431.3682 l
302.3576 431.3682 l
302.3576 431.1168 l
302.3576 431.1168 l
302.3576 431.1168 l
302.3576 431.1168 l
f
306.1275 430.3628 m
306.1275 430.3628 l
306.1275 430.1115 l
306.1275 430.1115 l
305.8762 430.1115 l
305.8762 429.8602 l
305.8762 429.8602 l
305.6249 429.8602 l
305.6249 429.8602 l
305.6249 429.8602 l
305.3736 429.8602 l
305.3736 429.8602 l
305.3736 430.1115 l
305.3736 430.1115 l
305.3736 430.1115 l
305.1222 430.3628 l
305.1222 430.3628 l
305.1222 430.3628 l
305.3736 430.6142 l
305.3736 430.6142 l
305.3736 430.6142 l
305.3736 430.6142 l
305.6249 430.8655 l
305.6249 430.8655 l
305.6249 430.8655 l
305.8762 430.8655 l
305.8762 430.6142 l
305.8762 430.6142 l
306.1275 430.6142 l
306.1275 430.6142 l
306.1275 430.3628 l
306.1275 430.3628 l
306.1275 430.3628 l
f
302.3576 425.839 m
302.3576 425.839 l
302.3576 425.839 l
302.3576 425.5876 l
302.3576 425.5876 l
302.1063 425.5876 l
302.1063 425.5876 l
302.1063 425.5876 l
302.1063 425.5876 l
301.855 425.5876 l
301.855 425.5876 l
301.855 425.839 l
301.855 425.839 l
301.6036 425.839 l
301.6036 425.839 l
301.6036 426.0903 l
301.855 426.0903 l
301.855 426.0903 l
301.855 426.3416 l
301.855 426.3416 l
302.1063 426.3416 l
302.1063 426.3416 l
302.1063 426.3416 l
302.3576 426.3416 l
302.3576 426.0903 l
302.3576 426.0903 l
302.3576 426.0903 l
302.3576 425.839 l
302.3576 425.839 l
f
311.6568 436.1434 m
311.6568 435.8921 l
311.6568 435.8921 l
311.6568 435.8921 l
311.6568 435.6408 l
311.4054 435.6408 l
311.4054 435.6408 l
311.4054 435.6408 l
311.4054 435.6408 l
311.1541 435.6408 l
311.1541 435.8921 l
311.1541 435.8921 l
311.1541 435.8921 l
311.1541 436.1434 l
311.1541 436.1434 l
311.1541 436.1434 l
311.1541 436.1434 l
311.1541 436.3948 l
311.1541 436.3948 l
311.4054 436.3948 l
311.4054 436.3948 l
311.4054 436.3948 l
311.4054 436.3948 l
311.6568 436.3948 l
311.6568 436.3948 l
311.6568 436.1434 l
311.6568 436.1434 l
311.6568 436.1434 l
311.6568 436.1434 l
f
312.6621 433.8815 m
312.6621 433.6301 l
312.6621 433.6301 l
312.6621 433.6301 l
312.4108 433.3788 l
312.4108 433.3788 l
312.4108 433.3788 l
312.1594 433.3788 l
312.1594 433.3788 l
312.1594 433.3788 l
312.1594 433.3788 l
311.9081 433.3788 l
311.9081 433.6301 l
311.9081 433.6301 l
311.9081 433.6301 l
311.9081 433.8815 l
311.9081 433.8815 l
311.9081 433.8815 l
311.9081 434.1328 l
311.9081 434.1328 l
311.9081 434.1328 l
311.9081 434.1328 l
312.1594 434.1328 l
312.1594 434.3842 l
312.1594 434.3842 l
312.4108 434.3842 l
312.4108 434.1328 l
312.4108 434.1328 l
312.6621 434.1328 l
312.6621 434.1328 l
312.6621 433.8815 l
312.6621 433.8815 l
312.6621 433.8815 l
f
319.1967 431.1168 m
319.1967 430.8655 l
319.1967 430.8655 l
318.9453 430.8655 l
318.9453 430.6142 l
318.9453 430.6142 l
318.694 430.6142 l
318.694 430.6142 l
318.694 430.6142 l
318.694 430.6142 l
318.4427 430.6142 l
318.4427 430.6142 l
318.4427 430.8655 l
318.1913 430.8655 l
318.1913 430.8655 l
318.1913 431.1168 l
318.1913 431.1168 l
318.1913 431.1168 l
318.1913 431.3682 l
318.4427 431.3682 l
318.4427 431.3682 l
318.4427 431.3682 l
318.4427 431.3682 l
318.694 431.6195 l
318.694 431.6195 l
318.694 431.3682 l
318.9453 431.3682 l
318.9453 431.3682 l
318.9453 431.3682 l
318.9453 431.3682 l
319.1967 431.1168 l
319.1967 431.1168 l
319.1967 431.1168 l
f
312.6621 426.3416 m
312.6621 426.3416 l
312.4108 426.0903 l
312.4108 426.0903 l
312.4108 426.0903 l
312.4108 426.0903 l
312.1594 426.0903 l
312.1594 426.0903 l
312.1594 426.0903 l
311.9081 426.0903 l
311.9081 426.0903 l
311.9081 426.0903 l
311.9081 426.3416 l
311.9081 426.3416 l
311.9081 426.3416 l
311.9081 426.3416 l
311.9081 426.593 l
311.9081 426.593 l
311.9081 426.593 l
312.1594 426.593 l
312.1594 426.593 l
312.1594 426.593 l
312.4108 426.593 l
312.4108 426.593 l
312.4108 426.593 l
312.4108 426.593 l
312.6621 426.3416 l
312.6621 426.3416 l
312.6621 426.3416 l
f
316.6834 430.1115 m
316.6834 430.1115 l
316.6834 430.1115 l
316.432 429.8602 l
316.432 429.8602 l
316.432 429.8602 l
316.1807 429.8602 l
316.1807 429.8602 l
316.1807 429.8602 l
316.1807 429.8602 l
315.9294 429.8602 l
315.9294 429.8602 l
315.9294 430.1115 l
315.9294 430.1115 l
315.9294 430.1115 l
315.9294 430.3628 l
315.9294 430.3628 l
315.9294 430.3628 l
316.1807 430.3628 l
316.1807 430.6142 l
316.1807 430.6142 l
316.1807 430.6142 l
316.432 430.6142 l
316.432 430.6142 l
316.432 430.3628 l
316.6834 430.3628 l
316.6834 430.3628 l
316.6834 430.1115 l
316.6834 430.1115 l
f
315.9294 424.331 m
315.9294 424.0797 l
315.9294 424.0797 l
315.6781 424.0797 l
315.6781 423.8283 l
315.6781 423.8283 l
315.4267 423.8283 l
315.4267 423.8283 l
315.4267 423.8283 l
315.4267 423.8283 l
315.1754 424.0797 l
315.1754 424.0797 l
315.1754 424.0797 l
315.1754 424.331 l
315.1754 424.331 l
315.1754 424.331 l
315.1754 424.331 l
315.1754 424.5823 l
315.4267 424.5823 l
315.4267 424.5823 l
315.4267 424.5823 l
315.4267 424.5823 l
315.6781 424.5823 l
315.6781 424.5823 l
315.6781 424.5823 l
315.9294 424.331 l
315.9294 424.331 l
315.9294 424.331 l
315.9294 424.331 l
f
317.6887 434.1328 m
317.6887 434.1328 l
317.4373 434.1328 l
317.4373 433.8815 l
317.4373 433.8815 l
317.4373 433.8815 l
317.186 433.6301 l
317.186 433.6301 l
316.9347 433.6301 l
316.9347 433.6301 l
316.9347 433.6301 l
316.9347 433.6301 l
316.6834 433.8815 l
316.6834 433.8815 l
316.6834 433.8815 l
316.432 434.1328 l
316.432 434.1328 l
316.432 434.1328 l
316.432 434.1328 l
316.432 434.3842 l
316.432 434.3842 l
316.6834 434.6354 l
316.6834 434.6354 l
316.6834 434.6354 l
316.9347 434.6354 l
316.9347 434.8868 l
316.9347 434.8868 l
316.9347 434.8868 l
317.186 434.8868 l
317.186 434.6354 l
317.4373 434.6354 l
317.4373 434.6354 l
317.4373 434.6354 l
317.4373 434.3842 l
317.6887 434.3842 l
317.6887 434.1328 l
317.6887 434.1328 l
f
313.6674 424.331 m
313.6674 424.0797 l
313.6674 424.0797 l
313.6674 424.0797 l
313.4161 423.8283 l
313.4161 423.8283 l
313.4161 423.8283 l
313.1648 423.8283 l
313.1648 423.8283 l
313.1648 423.8283 l
312.9134 423.8283 l
312.9134 423.8283 l
312.6621 423.8283 l
312.6621 423.8283 l
312.6621 424.0797 l
312.6621 424.0797 l
312.6621 424.0797 l
312.6621 424.331 l
312.6621 424.331 l
312.6621 424.331 l
312.6621 424.5823 l
312.6621 424.5823 l
312.6621 424.5823 l
312.6621 424.8336 l
312.9134 424.8336 l
312.9134 424.8336 l
313.1648 424.8336 l
313.1648 424.8336 l
313.1648 424.8336 l
313.4161 424.8336 l
313.4161 424.8336 l
313.4161 424.5823 l
313.6674 424.5823 l
313.6674 424.5823 l
313.6674 424.331 l
313.6674 424.331 l
313.6674 424.331 l
f
271.4442 471.3294 m
271.1929 471.0781 l
271.1929 471.0781 l
271.1929 470.8268 l
271.1929 470.8268 l
271.1929 470.8268 l
270.9415 470.8268 l
270.9415 470.8268 l
270.6902 470.8268 l
270.6902 470.8268 l
270.4389 470.8268 l
270.4389 470.8268 l
270.4389 470.8268 l
270.1876 470.8268 l
270.1876 470.8268 l
270.1876 471.0781 l
270.1876 471.0781 l
270.1876 471.3294 l
270.1876 471.3294 l
270.1876 471.3294 l
270.1876 471.5808 l
270.1876 471.5808 l
270.1876 471.5808 l
270.4389 471.8321 l
270.4389 471.8321 l
270.4389 471.8321 l
270.6902 471.8321 l
270.6902 471.8321 l
270.9415 471.8321 l
270.9415 471.8321 l
271.1929 471.8321 l
271.1929 471.5808 l
271.1929 471.5808 l
271.1929 471.5808 l
271.1929 471.3294 l
271.4442 471.3294 l
271.4442 471.3294 l
f
292.3045 485.1525 m
292.3045 484.9012 l
292.3045 484.9012 l
292.3045 484.6499 l
292.3045 484.6499 l
292.0531 484.6499 l
292.0531 484.6499 l
292.0531 484.3985 l
291.8018 484.3985 l
291.8018 484.3985 l
291.8018 484.3985 l
291.5505 484.6499 l
291.5505 484.6499 l
291.5505 484.6499 l
291.2992 484.6499 l
291.2992 484.9012 l
291.2992 484.9012 l
291.2992 485.1525 l
291.2992 485.1525 l
291.2992 485.1525 l
291.2992 485.1525 l
291.2992 485.4038 l
291.5505 485.4038 l
291.5505 485.4038 l
291.5505 485.6552 l
291.8018 485.6552 l
291.8018 485.6552 l
291.8018 485.6552 l
292.0531 485.6552 l
292.0531 485.6552 l
292.0531 485.4038 l
292.3045 485.4038 l
292.3045 485.4038 l
292.3045 485.1525 l
292.3045 485.1525 l
292.3045 485.1525 l
292.3045 485.1525 l
f
266.6689 415.0318 m
266.6689 415.0318 l
266.6689 415.0318 l
266.6689 414.7805 l
266.4177 414.7805 l
266.4177 414.7805 l
266.4177 414.5292 l
266.1663 414.5292 l
266.1663 414.5292 l
266.1663 414.5292 l
265.915 414.5292 l
265.915 414.5292 l
265.915 414.7805 l
265.6636 414.7805 l
265.6636 414.7805 l
265.6636 415.0318 l
265.6636 415.0318 l
265.6636 415.0318 l
265.6636 415.0318 l
265.6636 415.2832 l
265.6636 415.2832 l
265.6636 415.5345 l
265.6636 415.5345 l
265.915 415.5345 l
265.915 415.5345 l
265.915 415.7858 l
266.1663 415.7858 l
266.1663 415.7858 l
266.1663 415.7858 l
266.4177 415.5345 l
266.4177 415.5345 l
266.4177 415.5345 l
266.6689 415.5345 l
266.6689 415.2832 l
266.6689 415.2832 l
266.6689 415.0318 l
266.6689 415.0318 l
f
299.593 450.4692 m
300.5983 448.7098 l
301.101 448.9612 l
300.0956 450.9718 l
299.593 450.4692 l
299.593 450.4692 l
f
0 0 0 0.35 k
238.2688 438.4054 m
238.0175 438.4054 l
237.7662 438.154 l
237.5149 438.154 l
237.2635 437.9027 l
237.0122 437.9027 l
236.7608 437.6514 l
236.7608 437.6514 l
236.5095 437.6514 l
236.2582 437.4001 l
236.0069 437.4001 l
236.0069 437.1487 l
235.7555 437.1487 l
235.5042 436.8974 l
235.2529 436.8974 l
235.0015 436.8974 l
235.0015 436.6461 l
234.7502 436.6461 l
234.4989 436.3948 l
234.2476 436.3948 l
233.9962 436.1434 l
233.9962 436.1434 l
233.7449 435.8921 l
233.4935 435.8921 l
233.2422 435.8921 l
233.2422 435.6408 l
232.9909 435.6408 l
232.7396 435.3894 l
232.4882 435.3894 l
232.4882 435.1381 l
232.2369 435.1381 l
231.9856 435.1381 l
231.9856 434.8868 l
231.9856 434.8868 l
232.9909 434.6354 l
232.9909 434.6354 l
233.2422 434.6354 l
233.2422 434.6354 l
233.4935 434.8868 l
233.7449 434.8868 l
233.7449 434.8868 l
233.9962 435.1381 l
233.9962 435.1381 l
234.2476 435.3894 l
234.4989 435.3894 l
234.4989 435.3894 l
234.7502 435.6408 l
235.0015 435.6408 l
235.0015 435.6408 l
235.2529 435.8921 l
235.5042 435.8921 l
235.5042 436.1434 l
235.7555 436.1434 l
236.0069 436.1434 l
236.0069 436.3948 l
236.2582 436.3948 l
236.5095 436.3948 l
236.5095 436.6461 l
236.7608 436.6461 l
237.0122 436.6461 l
237.0122 436.8974 l
237.2635 436.8974 l
237.5149 437.1487 l
237.7662 437.1487 l
237.7662 437.1487 l
238.0175 437.4001 l
238.2688 437.4001 l
238.5202 437.4001 l
238.2688 438.4054 l
f
251.0866 415.5345 m
251.0866 415.5345 l
250.8352 415.2832 l
250.5839 415.0318 l
250.3326 414.7805 l
250.0813 414.7805 l
249.8299 414.5292 l
249.8299 414.2778 l
249.5786 414.0265 l
249.3273 414.0265 l
249.0759 413.7752 l
248.8246 413.5238 l
248.5733 413.2725 l
248.3219 413.2725 l
248.3219 413.0212 l
248.0706 412.7698 l
247.8193 412.5185 l
247.568 412.5185 l
247.3166 412.2672 l
247.0653 412.0158 l
246.814 411.7645 l
246.814 411.5132 l
246.5626 411.5132 l
246.3113 411.2619 l
246.06 411.0105 l
245.8087 410.7592 l
245.5573 410.5079 l
245.306 410.5079 l
245.306 410.2566 l
245.0547 410.0053 l
244.8033 409.7539 l
244.552 409.5026 l
244.3007 409.5026 l
244.3007 409.5026 l
244.3007 407.7433 l
244.3007 407.7433 l
244.3007 407.9946 l
244.552 408.2459 l
244.8033 408.4973 l
245.0547 408.7486 l
245.306 408.7486 l
245.5573 408.9999 l
245.8087 409.2513 l
245.8087 409.5026 l
246.06 409.7539 l
246.3113 410.0053 l
246.5626 410.2566 l
246.814 410.2566 l
247.0653 410.5079 l
247.3166 410.7592 l
247.568 411.0105 l
247.8193 411.2619 l
248.0706 411.5132 l
248.3219 411.7645 l
248.5733 412.0158 l
248.8246 412.0158 l
249.0759 412.2672 l
249.3273 412.5185 l
249.5786 412.7698 l
249.8299 413.0212 l
250.0813 413.2725 l
250.3326 413.5238 l
250.5839 413.7752 l
250.8352 414.0265 l
251.0866 414.2778 l
251.3379 414.5292 l
251.5892 414.7805 l
251.8406 414.7805 l
251.0866 415.5345 l
f
298.839 449.7152 m
286.5239 441.924 l
287.0266 439.9134 l
300.0956 448.7098 l
298.839 449.7152 l
298.839 449.7152 l
f
0 0 0 0 k
258.3751 446.1965 m
258.3751 447.7046 l
258.3751 450.7205 l
258.3751 453.4851 l
258.3751 454.7417 l
258.3751 454.7417 l
256.8671 456.501 l
262.3964 456.501 l
260.6371 454.7417 l
260.6371 441.924 l
262.6477 439.9134 l
255.3592 439.9134 l
248.8246 450.7205 l
248.8246 450.7205 l
248.8246 449.2125 l
248.8246 446.1965 l
248.8246 443.1806 l
248.8246 441.924 l
248.8246 441.924 l
250.5839 439.9134 l
244.552 439.9134 l
246.5626 441.924 l
246.5626 454.7417 l
244.8033 456.501 l
252.0919 456.501 l
258.3751 446.1965 l
258.3751 446.1965 l
f
300.8496 452.2285 m
300.5983 457.5064 l
298.839 456.2497 l
298.839 456.2497 l
298.839 456.2497 l
298.5877 456.2497 l
298.3364 456.501 l
298.085 456.501 l
297.8337 456.501 l
297.5823 456.501 l
297.3311 456.7524 l
297.0797 456.7524 l
296.8284 456.7524 l
296.5771 456.7524 l
296.3258 456.7524 l
296.0744 456.7524 l
295.8231 456.7524 l
295.5717 456.7524 l
295.3204 456.7524 l
295.0691 456.7524 l
294.8177 456.7524 l
294.5664 456.7524 l
294.5664 456.7524 l
294.3151 456.7524 l
294.0638 456.7524 l
293.8124 456.7524 l
293.5611 456.7524 l
293.3098 456.7524 l
293.0585 456.501 l
292.8071 456.501 l
292.8071 456.501 l
292.5558 456.501 l
292.3045 456.2497 l
292.0531 456.2497 l
291.8018 456.2497 l
291.8018 455.9984 l
291.8018 455.9984 l
291.5505 455.9984 l
291.2992 455.9984 l
291.2992 455.7471 l
291.0478 455.7471 l
290.7965 455.4957 l
290.5452 455.4957 l
290.5452 455.4957 l
290.2939 455.2444 l
290.0425 455.2444 l
290.0425 454.9931 l
289.7912 454.7417 l
289.7912 454.7417 l
289.5399 454.4904 l
289.2885 454.4904 l
289.2885 454.2391 l
289.0372 453.9878 l
289.0372 453.9878 l
288.7859 453.7364 l
288.7859 453.4851 l
288.5345 453.4851 l
288.5345 453.2338 l
288.5345 452.9824 l
288.2832 452.7311 l
288.2832 452.4798 l
288.2832 452.4798 l
288.2832 452.2285 l
288.0319 451.9771 l
288.0319 451.7258 l
288.0319 451.4745 l
288.0319 451.2231 l
288.0319 450.9718 l
288.0319 450.7205 l
288.0319 450.7205 l
288.0319 450.4692 l
288.2832 450.2178 l
288.2832 449.9665 l
288.2832 449.9665 l
288.2832 449.7152 l
288.5345 449.4639 l
288.5345 449.2125 l
288.5345 448.9612 l
288.7859 448.9612 l
288.7859 448.7098 l
288.7859 448.4585 l
289.0372 448.4585 l
289.0372 448.2072 l
289.2885 447.9559 l
289.5399 447.9559 l
289.5399 447.7046 l
289.7912 447.7046 l
289.7912 447.4532 l
290.0425 447.4532 l
290.2939 447.2019 l
290.2939 447.2019 l
290.5452 446.9505 l
290.5452 446.9505 l
290.7965 446.9505 l
291.0478 446.6992 l
291.2992 446.6992 l
291.2992 446.6992 l
291.5505 446.4479 l
291.8018 446.4479 l
291.8018 446.4479 l
292.0531 446.1965 l
292.3045 446.1965 l
292.3045 446.1965 l
292.5558 446.1965 l
292.5558 445.9452 l
292.8071 445.9452 l
293.0585 445.6939 l
293.3098 445.6939 l
293.5611 445.6939 l
293.8124 445.4426 l
294.0638 445.4426 l
294.3151 445.4426 l
294.3151 445.4426 l
294.5664 445.1913 l
294.8177 445.1913 l
295.0691 445.1913 l
295.0691 444.9399 l
295.3204 444.9399 l
295.5717 444.9399 l
295.8231 444.6886 l
295.8231 444.6886 l
296.0744 444.6886 l
296.0744 444.6886 l
296.3258 444.4373 l
296.5771 444.4373 l
296.5771 444.1859 l
296.5771 444.1859 l
296.8284 444.1859 l
296.8284 443.9346 l
296.8284 443.9346 l
297.0797 443.9346 l
297.0797 443.6833 l
297.0797 443.6833 l
297.0797 443.4319 l
297.0797 443.4319 l
297.0797 443.4319 l
297.0797 443.1806 l
297.0797 443.1806 l
297.0797 443.1806 l
297.0797 442.9293 l
296.8284 442.9293 l
296.8284 442.6779 l
296.8284 442.6779 l
296.8284 442.6779 l
296.5771 442.4266 l
296.5771 442.4266 l
296.3258 442.4266 l
296.3258 442.1753 l
296.0744 442.1753 l
296.0744 442.1753 l
295.8231 442.1753 l
295.8231 441.924 l
295.5717 441.924 l
295.3204 441.924 l
295.3204 441.924 l
295.3204 441.924 l
295.0691 441.924 l
294.8177 441.924 l
294.8177 441.924 l
294.5664 441.924 l
294.3151 441.924 l
294.3151 441.924 l
294.3151 441.924 l
294.3151 441.924 l
294.0638 441.924 l
293.8124 441.924 l
293.8124 441.924 l
293.5611 441.924 l
293.3098 441.924 l
293.3098 441.924 l
293.0585 441.924 l
292.8071 441.924 l
292.5558 441.924 l
292.5558 441.924 l
292.3045 442.1753 l
292.0531 442.1753 l
291.8018 442.1753 l
291.5505 442.1753 l
291.2992 442.4266 l
291.0478 442.4266 l
290.7965 442.4266 l
290.5452 442.6779 l
290.2939 442.6779 l
290.2939 442.6779 l
290.0425 442.9293 l
289.7912 442.9293 l
289.5399 443.1806 l
289.2885 443.1806 l
289.0372 443.4319 l
288.7859 443.4319 l
288.7859 443.6833 l
288.5345 443.9346 l
288.2832 443.9346 l
288.0319 444.1859 l
288.0319 444.1859 l
288.5345 438.908 l
290.2939 440.1647 l
290.2939 440.1647 l
290.5452 440.1647 l
290.7965 440.1647 l
291.0478 440.1647 l
291.2992 439.9134 l
291.5505 439.9134 l
291.8018 439.9134 l
292.0531 439.9134 l
292.3045 439.662 l
292.5558 439.662 l
292.8071 439.662 l
293.0585 439.662 l
293.3098 439.662 l
293.3098 439.662 l
293.5611 439.4107 l
293.8124 439.4107 l
294.0638 439.4107 l
294.3151 439.4107 l
294.5664 439.4107 l
294.8177 439.4107 l
295.0691 439.4107 l
295.3204 439.4107 l
295.5717 439.4107 l
295.8231 439.4107 l
296.0744 439.4107 l
296.3258 439.662 l
296.5771 439.662 l
296.8284 439.662 l
297.0797 439.662 l
297.3311 439.662 l
297.5823 439.9134 l
297.8337 439.9134 l
298.085 439.9134 l
298.085 439.9134 l
298.3364 439.9134 l
298.5877 440.1647 l
298.839 440.1647 l
299.0903 440.416 l
299.3417 440.416 l
299.593 440.6673 l
299.8443 440.6673 l
300.0956 440.9187 l
300.347 440.9187 l
300.5983 441.17 l
300.5983 441.4213 l
300.8496 441.4213 l
301.101 441.6726 l
301.3523 441.924 l
301.3523 441.924 l
301.6036 442.1753 l
301.855 442.4266 l
301.855 442.6779 l
302.1063 442.9293 l
302.1063 443.1806 l
302.1063 443.4319 l
302.3576 443.6833 l
302.3576 443.9346 l
302.3576 444.1859 l
302.3576 444.4373 l
302.3576 444.6886 l
302.3576 445.1913 l
302.3576 445.4426 l
302.3576 445.6939 l
302.1063 446.1965 l
302.1063 446.4479 l
301.855 446.6992 l
301.855 446.6992 l
301.855 446.9505 l
301.855 446.9505 l
301.855 447.2019 l
301.6036 447.4532 l
301.6036 447.4532 l
301.6036 447.7046 l
301.3523 447.7046 l
301.3523 447.9559 l
301.101 447.9559 l
301.101 448.2072 l
300.8496 448.4585 l
300.8496 448.4585 l
300.8496 448.7098 l
300.5983 448.7098 l
300.5983 448.7098 l
300.347 448.9612 l
300.347 448.9612 l
300.0956 448.9612 l
300.0956 449.2125 l
299.8443 449.2125 l
299.8443 449.2125 l
299.593 449.4639 l
299.593 449.4639 l
299.3417 449.4639 l
299.3417 449.7152 l
299.0903 449.7152 l
299.0903 449.7152 l
298.839 449.7152 l
298.839 449.9665 l
298.5877 449.9665 l
298.5877 449.9665 l
298.5877 449.9665 l
298.3364 449.9665 l
298.3364 449.9665 l
298.085 450.2178 l
298.085 450.2178 l
297.8337 450.2178 l
297.8337 450.2178 l
297.5823 450.4692 l
297.3311 450.4692 l
297.3311 450.4692 l
297.0797 450.4692 l
296.8284 450.7205 l
296.8284 450.7205 l
296.5771 450.7205 l
296.3258 450.7205 l
296.0744 450.9718 l
296.0744 450.9718 l
295.8231 450.9718 l
295.5717 451.2231 l
295.5717 451.2231 l
295.3204 451.2231 l
295.0691 451.4745 l
294.8177 451.4745 l
294.8177 451.4745 l
294.5664 451.4745 l
294.5664 451.7258 l
294.3151 451.7258 l
294.0638 451.7258 l
294.0638 451.7258 l
293.8124 451.9771 l
293.8124 451.9771 l
293.8124 451.9771 l
293.5611 451.9771 l
293.5611 451.9771 l
293.5611 451.9771 l
293.5611 452.2285 l
293.3098 452.2285 l
293.3098 452.2285 l
293.3098 452.4798 l
293.0585 452.4798 l
293.0585 452.7311 l
293.0585 452.7311 l
293.0585 452.9824 l
293.0585 452.9824 l
293.0585 453.2338 l
293.0585 453.2338 l
293.3098 453.4851 l
293.3098 453.4851 l
293.3098 453.7364 l
293.5611 453.7364 l
293.5611 453.9878 l
293.8124 453.9878 l
294.0638 454.2391 l
294.3151 454.2391 l
294.5664 454.2391 l
294.8177 454.4904 l
295.0691 454.4904 l
295.0691 454.4904 l
295.3204 454.4904 l
295.5717 454.4904 l
295.8231 454.4904 l
296.0744 454.4904 l
296.0744 454.4904 l
296.3258 454.4904 l
296.5771 454.4904 l
296.8284 454.2391 l
297.0797 454.2391 l
297.3311 454.2391 l
297.5823 454.2391 l
297.5823 453.9878 l
297.8337 453.9878 l
298.085 453.9878 l
298.3364 453.7364 l
298.5877 453.7364 l
298.839 453.7364 l
298.839 453.4851 l
299.0903 453.4851 l
299.3417 453.4851 l
299.593 453.2338 l
299.593 453.2338 l
299.8443 452.9824 l
300.0956 452.9824 l
300.0956 452.9824 l
300.347 452.7311 l
300.347 452.7311 l
300.5983 452.7311 l
300.5983 452.4798 l
300.5983 452.4798 l
300.8496 452.4798 l
300.8496 452.2285 l
300.8496 452.2285 l
f
272.1982 446.1965 m
270.9415 446.1965 l
272.7008 452.2285 l
274.9628 446.1965 l
272.1982 446.1965 l
272.1982 446.1965 l
272.9522 443.6833 l
275.9681 443.6833 l
276.7221 441.924 l
274.7115 439.9134 l
285.2673 439.9134 l
283.2566 441.924 l
277.4761 456.501 l
269.4336 456.501 l
271.1929 454.7417 l
267.4229 441.924 l
265.4123 439.9134 l
270.9415 439.9134 l
269.4336 441.6726 l
270.1876 443.6833 l
272.9522 443.6833 l
272.1982 446.1965 l
f
307.3842 448.4585 m
309.1435 455.4957 l
307.3842 456.501 l
315.4267 456.501 l
321.4586 441.924 l
323.2179 439.9134 l
312.6621 439.9134 l
314.6727 441.924 l
313.9187 443.6833 l
308.1382 443.6833 l
307.6355 441.6726 l
308.8921 439.9134 l
303.3629 439.9134 l
305.3736 441.924 l
307.3842 448.4585 l
309.3948 448.4585 l
308.8921 446.1965 l
312.9134 446.1965 l
310.6514 452.2285 l
309.3948 448.2072 l
307.3842 448.4585 l
307.3842 448.4585 l
f
0 0 0 0.35 k
330.2551 474.5967 m
327.9931 472.5861 l
325.7312 470.5754 l
323.7206 468.8161 l
321.7099 467.0569 l
319.6993 465.2976 l
317.6887 463.7896 l
315.9294 462.2816 l
314.4214 460.7736 l
312.6621 459.517 l
311.1541 458.2603 l
309.6461 457.255 l
308.1382 455.9984 l
306.6302 454.9931 l
305.3736 453.9878 l
303.8656 452.9824 l
302.6089 452.2285 l
301.3523 451.2231 l
300.0956 450.4692 l
298.839 449.7152 l
297.5823 448.9612 l
296.3258 447.9559 l
295.0691 447.4532 l
294.0638 446.6992 l
292.8071 445.9452 l
291.5505 445.1913 l
290.2939 444.4373 l
289.2885 443.6833 l
288.0319 442.9293 l
286.5239 442.1753 l
285.2673 441.17 l
284.0106 440.416 l
282.754 439.4107 l
282.754 439.4107 l
282 438.908 l
281.246 438.6567 l
280.492 438.154 l
279.738 437.4001 l
278.9841 436.8974 l
277.9787 436.3948 l
277.2247 435.8921 l
276.2194 435.3894 l
275.4654 434.6354 l
274.4601 434.1328 l
273.4548 433.3788 l
272.4495 432.8762 l
271.6955 432.1222 l
270.4389 431.3682 l
269.4336 430.6142 l
268.4282 429.8602 l
267.4229 429.1062 l
266.1663 428.3522 l
265.161 427.5982 l
264.1557 426.8443 l
263.1504 426.0903 l
261.8937 425.085 l
260.8884 424.331 l
259.6317 423.3257 l
258.6264 422.3203 l
257.3698 421.3151 l
256.3645 420.3097 l
255.1078 419.3044 l
253.8512 418.2991 l
252.8459 417.2938 l
251.5892 416.0371 l
250.5839 415.0318 l
250.5839 415.0318 l
251.5892 414.5292 l
251.5892 414.5292 l
252.3432 415.2832 l
253.3486 416.0371 l
254.1025 416.7911 l
255.1078 417.5451 l
256.1132 418.2991 l
256.8671 419.0531 l
257.8724 419.8071 l
258.8778 420.5611 l
259.8831 421.3151 l
260.8884 422.069 l
261.8937 422.823 l
262.6477 423.577 l
263.653 424.0797 l
264.6583 424.8336 l
265.6636 425.5876 l
266.6689 426.3416 l
267.6742 427.0956 l
268.9309 427.8496 l
269.9362 428.6036 l
270.9415 429.3576 l
271.9468 430.1115 l
273.2035 430.6142 l
274.2088 431.3682 l
275.2141 432.1222 l
276.2194 432.8762 l
277.2247 433.6301 l
278.2301 434.3842 l
279.2354 435.1381 l
280.2407 435.6408 l
281.4974 436.3948 l
282.5026 437.1487 l
283.508 437.6514 l
283.508 437.6514 l
285.5186 439.1594 l
288.0319 440.6673 l
290.0425 441.924 l
292.3045 443.4319 l
294.5664 444.9399 l
296.8284 446.1965 l
299.0903 447.7046 l
301.3523 449.2125 l
303.6143 450.7205 l
305.8762 452.2285 l
308.1382 453.7364 l
310.1488 455.2444 l
312.4108 456.7524 l
314.4214 458.2603 l
316.432 459.7683 l
318.4427 461.5276 l
320.4533 463.0356 l
322.4639 464.7949 l
324.2232 466.3029 l
325.9825 468.0622 l
327.7418 469.5701 l
329.5011 471.3294 l
331.0091 473.0887 l
332.5171 474.5967 l
334.025 476.356 l
335.2817 478.1153 l
336.5383 479.8746 l
337.795 481.8852 l
338.8003 483.6445 l
339.8056 485.6552 l
340.5596 487.4145 l
341.3135 489.4251 l
330.2551 474.5967 l
f
283.508 439.9134 m
284.5133 440.6673 l
285.7699 440.416 l
284.7646 439.662 l
283.508 439.9134 l
283.508 439.9134 l
f
0 0 0 0 k
291.2992 485.1525 m
291.2992 485.1525 l
291.2992 485.1525 l
291.2992 485.4038 l
291.2992 485.4038 l
291.5505 485.4038 l
291.5505 485.4038 l
291.5505 485.4038 l
291.5505 485.4038 l
291.8018 486.4091 l
292.0531 485.4038 l
292.0531 485.4038 l
292.0531 485.4038 l
292.0531 485.4038 l
292.3045 485.4038 l
292.3045 485.4038 l
292.3045 485.1525 l
292.3045 485.1525 l
292.3045 485.1525 l
292.3045 485.1525 l
293.3098 484.9012 l
292.3045 484.6499 l
292.3045 484.6499 l
292.3045 484.6499 l
292.3045 484.6499 l
292.3045 484.3985 l
292.3045 484.3985 l
292.0531 484.3985 l
292.0531 484.3985 l
292.0531 484.3985 l
292.0531 484.3985 l
291.8018 483.3932 l
291.5505 484.3985 l
291.5505 484.3985 l
291.5505 484.3985 l
291.5505 484.3985 l
291.2992 484.3985 l
291.2992 484.3985 l
291.2992 484.6499 l
291.2992 484.6499 l
291.2992 484.6499 l
291.2992 484.6499 l
290.2939 484.9012 l
291.2992 485.1525 l
291.2992 485.1525 l
f
265.6636 415.2832 m
265.6636 415.2832 l
265.6636 415.5345 l
265.6636 415.5345 l
265.915 415.5345 l
265.915 415.5345 l
265.915 415.5345 l
266.1663 415.7858 l
266.1663 415.7858 l
266.1663 416.7911 l
266.4177 415.7858 l
266.4177 415.7858 l
266.4177 415.5345 l
266.6689 415.5345 l
266.6689 415.5345 l
266.6689 415.5345 l
266.6689 415.2832 l
266.9203 415.2832 l
266.9203 415.2832 l
266.9203 415.2832 l
267.9256 415.0318 l
266.9203 414.7805 l
266.9203 414.7805 l
266.9203 414.7805 l
266.6689 414.7805 l
266.6689 414.7805 l
266.6689 414.5292 l
266.6689 414.5292 l
266.4177 414.5292 l
266.4177 414.5292 l
266.4177 414.5292 l
266.1663 413.5238 l
266.1663 414.5292 l
266.1663 414.5292 l
265.915 414.5292 l
265.915 414.5292 l
265.915 414.5292 l
265.6636 414.7805 l
265.6636 414.7805 l
265.6636 414.7805 l
265.6636 415.0318 l
265.6636 415.0318 l
264.6583 415.0318 l
265.6636 415.2832 l
265.6636 415.2832 l
f
312.4108 424.331 m
312.6621 424.331 l
312.6621 424.5823 l
312.6621 424.5823 l
312.6621 424.5823 l
312.9134 424.5823 l
312.9134 424.5823 l
312.9134 424.8336 l
312.9134 424.8336 l
313.1648 425.5876 l
313.4161 424.8336 l
313.4161 424.8336 l
313.4161 424.5823 l
313.4161 424.5823 l
313.6674 424.5823 l
313.6674 424.5823 l
313.6674 424.331 l
313.6674 424.331 l
313.6674 424.331 l
313.6674 424.331 l
314.6727 424.0797 l
313.6674 423.8283 l
313.6674 423.8283 l
313.6674 423.8283 l
313.6674 423.8283 l
313.6674 423.8283 l
313.6674 423.577 l
313.4161 423.577 l
313.4161 423.577 l
313.4161 423.577 l
313.4161 423.577 l
313.1648 422.5717 l
312.9134 423.577 l
312.9134 423.577 l
312.9134 423.577 l
312.9134 423.577 l
312.6621 423.577 l
312.6621 423.8283 l
312.6621 423.8283 l
312.6621 423.8283 l
312.4108 424.0797 l
312.4108 424.0797 l
311.6568 424.0797 l
312.4108 424.331 l
312.4108 424.331 l
f
316.1807 434.3842 m
316.1807 434.3842 l
316.1807 434.6354 l
316.432 434.6354 l
316.432 434.6354 l
316.432 434.6354 l
316.6834 434.8868 l
316.6834 434.8868 l
316.6834 434.8868 l
316.9347 435.8921 l
316.9347 434.8868 l
316.9347 434.8868 l
317.186 434.8868 l
317.186 434.6354 l
317.186 434.6354 l
317.4373 434.6354 l
317.4373 434.6354 l
317.4373 434.3842 l
317.4373 434.3842 l
317.4373 434.3842 l
318.4427 434.1328 l
317.4373 434.1328 l
317.4373 434.1328 l
317.4373 433.8815 l
317.4373 433.8815 l
317.186 433.8815 l
317.186 433.6301 l
317.186 433.6301 l
317.186 433.6301 l
316.9347 433.6301 l
316.9347 433.6301 l
316.9347 432.3735 l
316.6834 433.6301 l
316.6834 433.6301 l
316.6834 433.6301 l
316.432 433.6301 l
316.432 433.6301 l
316.432 433.8815 l
316.1807 433.8815 l
316.1807 433.8815 l
316.1807 434.1328 l
316.1807 434.1328 l
315.1754 434.1328 l
316.1807 434.3842 l
316.1807 434.3842 l
f
270.1876 471.3294 m
270.1876 471.3294 l
270.1876 471.5808 l
270.1876 471.5808 l
270.4389 471.5808 l
270.4389 471.8321 l
270.4389 471.8321 l
270.6902 471.8321 l
270.6902 471.8321 l
270.9415 472.8374 l
271.1929 471.8321 l
271.1929 471.8321 l
271.1929 471.8321 l
271.1929 471.8321 l
271.1929 471.5808 l
271.4442 471.5808 l
271.4442 471.5808 l
271.4442 471.3294 l
271.4442 471.3294 l
271.4442 471.3294 l
272.4495 471.0781 l
271.4442 471.0781 l
271.4442 471.0781 l
271.4442 470.8268 l
271.4442 470.8268 l
271.4442 470.8268 l
271.1929 470.8268 l
271.1929 470.5754 l
271.1929 470.5754 l
270.9415 470.5754 l
270.9415 470.5754 l
270.9415 469.5701 l
270.6902 470.5754 l
270.6902 470.5754 l
270.4389 470.5754 l
270.4389 470.5754 l
270.4389 470.8268 l
270.1876 470.8268 l
270.1876 470.8268 l
270.1876 470.8268 l
270.1876 471.0781 l
270.1876 471.0781 l
269.1822 471.0781 l
270.1876 471.3294 l
270.1876 471.3294 l
f
0 0 0 1 k
341.3135 489.4251 m
340.8109 488.1685 l
340.3082 486.9118 l
339.8056 485.6552 l
339.3029 484.3985 l
338.5489 483.1419 l
338.0463 482.1366 l
337.2923 480.8799 l
336.5383 479.6233 l
335.7843 478.6179 l
335.0303 477.6127 l
334.2764 476.356 l
333.2711 475.3507 l
332.5171 474.3454 l
331.5117 473.5914 l
330.7577 472.5861 l
330.0038 471.5808 l
328.9985 470.8268 l
328.2445 470.0728 l
327.4905 469.0675 l
326.7365 468.3135 l
325.7312 467.8108 l
324.9772 467.0569 l
324.2232 466.3029 l
323.7206 465.8002 l
322.9666 465.0462 l
322.2126 464.5436 l
321.7099 464.0409 l
321.2073 463.5382 l
320.7046 463.0356 l
320.202 462.7843 l
319.6993 462.533 l
319.448 462.2816 l
319.448 462.2816 l
319.448 462.2816 l
319.448 462.533 l
319.448 462.7843 l
319.448 463.0356 l
319.6993 463.7896 l
319.6993 464.2922 l
319.6993 464.7949 l
319.9506 465.0462 l
319.9506 465.5489 l
320.202 465.8002 l
320.202 465.8002 l
320.4533 466.0515 l
320.9559 466.3029 l
321.4586 466.5542 l
321.9613 467.0569 l
322.4639 467.3082 l
323.2179 467.8108 l
323.7206 468.3135 l
324.4745 468.8161 l
324.9772 469.5701 l
325.7312 470.0728 l
326.4851 470.8268 l
327.2391 471.5808 l
327.9931 472.0834 l
328.7471 472.8374 l
329.5011 473.5914 l
330.2551 474.3454 l
331.0091 475.3507 l
331.7631 476.1047 l
332.5171 476.8587 l
333.2711 477.864 l
334.2764 478.6179 l
335.0303 479.6233 l
335.7843 480.6286 l
336.5383 481.6339 l
337.041 482.6392 l
337.795 483.6445 l
338.5489 484.3985 l
339.0516 485.4038 l
339.8056 486.4091 l
340.3082 487.4145 l
340.8109 488.4198 l
341.3135 489.4251 l
341.3135 489.4251 l
341.3135 489.4251 l
341.3135 489.4251 l
f
0 0 0 0.35 k
306.6302 454.9931 m
309.8975 457.255 l
312.4108 457.0037 l
307.8868 453.7364 l
306.6302 454.9931 l
306.6302 454.9931 l
f
0 0 0 0 k
292.8071 424.5823 m
294.5664 423.8283 l
296.0744 423.3257 l
297.5823 422.823 l
299.0903 422.823 l
300.0956 422.5717 l
301.3523 422.823 l
302.3576 422.823 l
303.3629 423.3257 l
304.1169 423.577 l
304.8709 424.331 l
305.3736 424.8336 l
305.8762 425.5876 l
306.1275 426.3416 l
306.6302 427.3469 l
306.6302 428.3522 l
306.8815 429.3576 l
306.8815 430.6142 l
306.6302 431.8708 l
306.6302 433.1275 l
306.3789 434.3842 l
306.1275 435.8921 l
305.6249 437.1487 l
305.1222 438.6567 l
304.6196 440.1647 l
304.1169 441.6726 l
303.6143 443.1806 l
302.8603 444.6886 l
301.855 446.1965 l
301.101 447.7046 l
300.347 449.2125 l
299.3417 450.7205 l
298.3364 452.2285 l
298.3364 452.2285 l
297.8337 452.9824 l
297.3311 453.7364 l
296.8284 454.4904 l
296.0744 455.2444 l
295.5717 455.9984 l
295.0691 456.7524 l
294.3151 457.5064 l
293.8124 458.2603 l
293.3098 459.0143 l
292.5558 459.7683 l
292.0531 460.5223 l
291.2992 461.2763 l
290.7965 461.779 l
290.2939 462.533 l
289.5399 463.0356 l
289.0372 463.7896 l
288.2832 464.5436 l
287.7806 465.0462 l
287.2779 465.8002 l
286.5239 466.3029 l
286.0213 466.8055 l
285.2673 467.3082 l
284.7646 467.8108 l
284.2619 468.3135 l
283.7593 468.8161 l
283.0053 469.3188 l
282.5026 469.8215 l
282 470.0728 l
281.4974 470.5754 l
280.9947 471.0781 l
280.7433 471.3294 l
280.2407 471.5808 l
280.2407 471.5808 l
278.7327 472.5861 l
277.2247 473.5914 l
275.9681 474.3454 l
274.4601 475.0994 l
273.2035 475.8534 l
271.9468 476.356 l
270.6902 476.6073 l
269.4336 476.8587 l
268.4282 477.11 l
267.4229 477.11 l
266.4177 477.11 l
265.4123 477.11 l
264.6583 476.8587 l
263.9044 476.356 l
263.1504 475.8534 l
262.6477 475.3507 l
262.145 474.848 l
261.6424 474.0941 l
261.3911 473.0887 l
261.1397 472.3347 l
260.8884 471.3294 l
260.8884 470.0728 l
260.8884 468.8161 l
260.8884 467.5595 l
261.1397 466.0515 l
261.3911 464.5436 l
261.8937 462.7843 l
262.3964 461.025 l
262.899 459.2657 l
263.653 457.255 l
264.6583 455.2444 l
265.6636 453.2338 l
265.6636 453.2338 l
265.915 452.4798 l
266.1663 451.9771 l
266.6689 451.2231 l
266.9203 450.7205 l
267.4229 449.9665 l
267.6742 449.4639 l
268.1769 448.7098 l
268.4282 447.9559 l
268.9309 447.4532 l
269.1822 446.9505 l
269.6849 446.1965 l
269.9362 445.6939 l
270.4389 445.1913 l
270.9415 444.6886 l
271.1929 444.1859 l
271.6955 443.6833 l
271.9468 443.1806 l
272.4495 442.6779 l
272.7008 442.1753 l
273.2035 441.6726 l
273.7061 441.17 l
273.9575 440.6673 l
274.4601 440.1647 l
274.7115 439.662 l
275.2141 439.1594 l
275.4654 438.6567 l
275.9681 438.4054 l
276.2194 437.9027 l
276.4708 437.4001 l
276.9734 436.8974 l
277.2247 436.3948 l
277.7274 436.1434 l
277.7274 436.1434 l
277.9787 435.6408 l
278.2301 435.3894 l
278.4814 435.1381 l
278.7327 434.8868 l
278.9841 434.3842 l
279.4867 434.1328 l
279.738 433.8815 l
279.9894 433.6301 l
280.2407 433.3788 l
280.7433 433.1275 l
280.9947 432.8762 l
281.246 432.6248 l
281.7487 432.3735 l
282 432.1222 l
282.2513 431.8708 l
282.5026 431.6195 l
282.754 431.3682 l
283.0053 431.3682 l
283.2566 431.1168 l
283.508 430.8655 l
283.7593 430.6142 l
283.7593 430.6142 l
284.0106 430.3628 l
284.0106 430.1115 l
284.2619 430.1115 l
284.2619 429.8602 l
284.2619 429.6089 l
284.2619 429.6089 l
284.2619 429.3576 l
284.2619 429.1062 l
284.0106 429.1062 l
284.0106 428.8549 l
284.0106 428.8549 l
283.7593 428.6036 l
283.508 428.6036 l
283.2566 428.6036 l
283.0053 428.6036 l
282.754 428.6036 l
282.5026 428.8549 l
282 428.8549 l
281.7487 429.1062 l
281.4974 429.3576 l
281.246 429.6089 l
280.9947 429.8602 l
280.7433 430.1115 l
280.2407 430.3628 l
279.9894 430.6142 l
279.738 431.1168 l
279.4867 431.3682 l
279.2354 431.8708 l
278.7327 432.1222 l
278.4814 432.3735 l
278.2301 432.8762 l
277.9787 433.3788 l
277.7274 433.6301 l
277.4761 433.8815 l
277.4761 434.1328 l
277.2247 434.3842 l
276.9734 434.6354 l
276.9734 434.8868 l
276.7221 435.1381 l
276.7221 435.3894 l
276.7221 435.3894 l
276.4708 435.3894 l
276.4708 435.6408 l
276.4708 435.6408 l
276.2194 435.8921 l
275.7168 436.3948 l
275.4654 436.8974 l
275.2141 437.4001 l
274.7115 437.6514 l
274.4601 438.154 l
273.9575 438.6567 l
273.7061 439.1594 l
273.4548 439.662 l
272.9522 439.9134 l
272.7008 440.416 l
272.1982 440.9187 l
271.9468 441.4213 l
271.6955 441.924 l
271.1929 442.4266 l
270.9415 442.9293 l
270.4389 443.4319 l
270.1876 443.9346 l
269.6849 444.4373 l
269.4336 444.9399 l
268.9309 445.4426 l
268.6796 445.9452 l
268.4282 446.4479 l
267.9256 447.2019 l
267.6742 447.7046 l
267.1716 448.4585 l
266.9203 448.9612 l
266.6689 449.4639 l
266.1663 450.2178 l
265.915 450.7205 l
265.4123 451.4745 l
265.161 451.9771 l
265.161 451.9771 l
264.407 453.4851 l
263.653 454.9931 l
262.899 456.2497 l
262.3964 457.7577 l
261.8937 459.2657 l
261.3911 460.5223 l
260.8884 462.0303 l
260.6371 463.2869 l
260.3857 464.7949 l
260.1344 466.0515 l
259.8831 467.3082 l
259.8831 468.5648 l
259.8831 469.5701 l
259.8831 470.5754 l
260.1344 471.8321 l
260.1344 472.5861 l
260.3857 473.5914 l
260.8884 474.3454 l
261.1397 475.0994 l
261.6424 475.8534 l
262.145 476.6073 l
262.899 477.11 l
263.653 477.3613 l
264.407 477.864 l
265.161 478.1153 l
266.1663 478.1153 l
267.1716 478.1153 l
268.1769 478.1153 l
269.4336 477.864 l
270.6902 477.6127 l
272.1982 477.11 l
273.4548 476.6073 l
273.4548 476.6073 l
274.7115 475.8534 l
275.9681 475.3507 l
277.2247 474.5967 l
278.4814 473.8427 l
279.738 473.0887 l
280.7433 472.3347 l
282 471.3294 l
283.2566 470.3241 l
284.2619 469.3188 l
285.5186 468.3135 l
286.5239 467.3082 l
287.7806 466.3029 l
289.0372 465.2976 l
290.0425 464.0409 l
291.0478 462.7843 l
292.0531 461.5276 l
293.0585 460.5223 l
294.0638 459.2657 l
295.0691 458.009 l
296.0744 456.7524 l
296.8284 455.4957 l
297.8337 454.2391 l
298.5877 453.2338 l
299.3417 451.9771 l
300.0956 450.7205 l
300.8496 449.4639 l
301.6036 448.2072 l
302.3576 446.9505 l
303.1116 445.6939 l
303.6143 444.6886 l
304.1169 443.4319 l
304.6196 442.4266 l
304.6196 442.4266 l
304.8709 441.924 l
305.1222 441.17 l
305.3736 440.416 l
305.6249 439.662 l
305.8762 438.908 l
306.1275 437.9027 l
306.3789 437.1487 l
306.6302 436.1434 l
306.8815 435.1381 l
307.1329 434.1328 l
307.1329 433.1275 l
307.3842 431.8708 l
307.3842 430.8655 l
307.3842 429.8602 l
307.3842 428.8549 l
307.3842 428.1009 l
307.1329 427.0956 l
306.8815 426.3416 l
306.6302 425.5876 l
306.3789 424.8336 l
305.8762 424.0797 l
305.1222 423.577 l
304.6196 423.0743 l
303.8656 422.5717 l
302.8603 422.3203 l
301.6036 422.3203 l
300.5983 422.3203 l
299.3417 422.3203 l
297.8337 422.5717 l
296.3258 423.0743 l
294.8177 423.577 l
292.8071 424.331 l
292.8071 424.5823 l
f
0 0 0 0.35 k
269.9362 451.2231 m
268.6796 446.4479 l
268.4282 446.4479 l
266.1663 449.9665 l
268.1769 450.4692 l
269.9362 451.2231 l
269.9362 451.2231 l
f
283.508 439.9134 m
276.2194 435.1381 l
277.9787 436.3948 l
279.2354 435.1381 l
277.4761 433.6301 l
276.2194 435.1381 l
276.2194 435.1381 l
283.508 439.9134 l
f
311.9081 456.501 m
310.9028 458.2603 l
310.6514 458.009 l
311.6568 456.501 l
311.9081 456.501 l
311.9081 456.501 l
f
0 0 0 0.36 k
310.6514 458.009 m
310.9028 458.2603 l
312.1594 456.7524 l
311.9081 456.501 l
310.6514 458.009 l
310.6514 458.009 l
f
310.9028 458.2603 m
311.1541 458.2603 l
312.4108 456.7524 l
311.9081 456.7524 l
310.9028 458.2603 l
310.9028 458.2603 l
f
0 0 0 0.37 k
310.9028 458.2603 m
311.4054 458.5117 l
312.4108 457.0037 l
312.1594 456.7524 l
310.9028 458.2603 l
310.9028 458.2603 l
f
0 0 0 0.38 k
311.1541 458.5117 m
311.4054 458.5117 l
312.6621 457.0037 l
312.4108 456.7524 l
311.1541 458.5117 l
311.1541 458.5117 l
f
311.4054 458.5117 m
311.6568 458.763 l
312.6621 457.255 l
312.4108 457.0037 l
311.4054 458.5117 l
311.4054 458.5117 l
f
0 0 0 0.39 k
311.4054 458.5117 m
311.6568 458.763 l
312.9134 457.255 l
312.6621 457.0037 l
311.4054 458.5117 l
311.4054 458.5117 l
f
0 0 0 0.4 k
311.6568 458.763 m
311.9081 459.0143 l
313.1648 457.5064 l
312.6621 457.255 l
311.6568 458.763 l
311.6568 458.763 l
f
311.6568 458.763 m
312.1594 459.0143 l
313.1648 457.5064 l
312.9134 457.255 l
311.6568 458.763 l
311.6568 458.763 l
f
0 0 0 0.41 k
311.9081 459.0143 m
312.1594 459.2657 l
313.4161 457.7577 l
313.1648 457.5064 l
311.9081 459.0143 l
311.9081 459.0143 l
f
312.1594 459.0143 m
312.4108 459.2657 l
313.4161 457.7577 l
313.1648 457.5064 l
312.1594 459.0143 l
312.1594 459.0143 l
f
0 0 0 0.42 k
312.1594 459.2657 m
312.4108 459.517 l
313.6674 457.7577 l
313.4161 457.7577 l
312.1594 459.2657 l
312.1594 459.2657 l
f
0 0 0 0.43 k
312.4108 459.2657 m
312.6621 459.517 l
313.9187 458.009 l
313.6674 457.7577 l
312.4108 459.2657 l
312.4108 459.2657 l
f
312.4108 459.517 m
312.9134 459.7683 l
313.9187 458.009 l
313.6674 457.7577 l
312.4108 459.517 l
312.4108 459.517 l
f
0 0 0 0.44 k
312.6621 459.517 m
312.9134 459.7683 l
314.1701 458.2603 l
313.9187 458.009 l
312.6621 459.517 l
312.6621 459.517 l
f
0 0 0 0.45 k
312.9134 459.7683 m
313.1648 460.0196 l
314.4214 458.2603 l
313.9187 458.009 l
312.9134 459.7683 l
312.9134 459.7683 l
f
312.9134 459.7683 m
313.1648 460.0196 l
314.4214 458.5117 l
314.1701 458.2603 l
312.9134 459.7683 l
312.9134 459.7683 l
f
0 0 0 0.46 k
313.1648 460.0196 m
313.4161 460.271 l
314.6727 458.5117 l
314.4214 458.2603 l
313.1648 460.0196 l
313.1648 460.0196 l
f
0 0 0 0.47 k
313.1648 460.0196 m
313.6674 460.271 l
314.9241 458.763 l
314.4214 458.5117 l
313.1648 460.0196 l
313.1648 460.0196 l
f
313.4161 460.271 m
313.6674 460.5223 l
314.9241 458.763 l
314.6727 458.5117 l
313.4161 460.271 l
313.4161 460.271 l
f
0 0 0 0.48 k
313.6674 460.271 m
313.9187 460.5223 l
315.1754 459.0143 l
314.6727 458.763 l
313.6674 460.271 l
313.6674 460.271 l
f
0 0 0 0.49 k
313.6674 460.271 m
313.9187 460.5223 l
315.1754 459.0143 l
314.9241 458.763 l
313.6674 460.271 l
313.6674 460.271 l
f
313.9187 460.5223 m
314.1701 460.7736 l
315.4267 459.2657 l
315.1754 459.0143 l
313.9187 460.5223 l
313.9187 460.5223 l
f
0 0 0 0.5 k
314.1701 460.7736 m
314.4214 460.7736 l
315.6781 459.2657 l
315.1754 459.0143 l
314.1701 460.7736 l
314.1701 460.7736 l
f
314.1701 460.7736 m
314.4214 461.025 l
315.6781 459.517 l
315.4267 459.2657 l
314.1701 460.7736 l
314.1701 460.7736 l
f
0 0 0 0.51 k
314.4214 460.7736 m
314.6727 461.025 l
315.9294 459.517 l
315.6781 459.2657 l
314.4214 460.7736 l
314.4214 460.7736 l
f
0 0 0 0.52 k
314.4214 461.025 m
314.6727 461.2763 l
315.9294 459.517 l
315.6781 459.2657 l
314.4214 461.025 l
314.4214 461.025 l
f
314.6727 461.025 m
314.9241 461.2763 l
316.1807 459.7683 l
315.9294 459.517 l
314.6727 461.025 l
314.6727 461.025 l
f
0 0 0 0.53 k
314.6727 461.2763 m
315.1754 461.5276 l
316.432 459.7683 l
315.9294 459.517 l
314.6727 461.2763 l
314.6727 461.2763 l
f
0 0 0 0.54 k
314.9241 461.2763 m
315.1754 461.5276 l
316.432 460.0196 l
316.1807 459.7683 l
314.9241 461.2763 l
314.9241 461.2763 l
f
315.1754 461.5276 m
315.4267 461.779 l
316.6834 460.0196 l
316.432 459.7683 l
315.1754 461.5276 l
315.1754 461.5276 l
f
0 0 0 0.55 k
315.1754 461.5276 m
315.4267 461.779 l
316.9347 460.271 l
316.432 460.0196 l
315.1754 461.5276 l
315.1754 461.5276 l
f
0 0 0 0.56 k
315.4267 461.779 m
315.6781 462.0303 l
316.9347 460.271 l
316.6834 460.0196 l
315.4267 461.779 l
315.4267 461.779 l
f
315.4267 461.779 m
315.6781 462.0303 l
317.186 460.5223 l
316.9347 460.271 l
315.4267 461.779 l
315.4267 461.779 l
f
0 0 0 0.57 k
315.6781 462.0303 m
315.9294 462.2816 l
317.186 460.5223 l
316.9347 460.271 l
315.6781 462.0303 l
315.6781 462.0303 l
f
0 0 0 0.58 k
315.9294 462.0303 m
316.1807 462.2816 l
317.4373 460.7736 l
317.186 460.5223 l
315.9294 462.0303 l
315.9294 462.0303 l
f
315.9294 462.2816 m
316.1807 462.533 l
317.6887 460.7736 l
317.186 460.5223 l
315.9294 462.2816 l
315.9294 462.2816 l
f
0 0 0 0.59 k
316.1807 462.2816 m
316.432 462.533 l
317.6887 461.025 l
317.4373 460.7736 l
316.1807 462.2816 l
316.1807 462.2816 l
f
316.1807 462.533 m
316.6834 462.7843 l
317.94 461.025 l
317.6887 460.7736 l
316.1807 462.533 l
316.1807 462.533 l
f
0 0 0 0.6 k
316.432 462.533 m
316.6834 462.7843 l
317.94 461.2763 l
317.6887 461.025 l
316.432 462.533 l
316.432 462.533 l
f
0 0 0 0.61 k
316.432 462.7843 m
316.9347 463.0356 l
318.1913 461.2763 l
317.94 461.025 l
316.432 462.7843 l
316.432 462.7843 l
f
316.6834 462.7843 m
316.9347 463.0356 l
318.4427 461.2763 l
317.94 461.025 l
316.6834 462.7843 l
316.6834 462.7843 l
f
0 0 0 0.62 k
316.9347 463.0356 m
317.186 463.2869 l
318.694 461.5276 l
318.4427 461.2763 l
316.9347 463.0356 l
316.9347 463.0356 l
f
0 0 0 0.63 k
316.9347 463.0356 m
317.186 463.2869 l
318.694 461.5276 l
318.4427 461.2763 l
316.9347 463.0356 l
316.9347 463.0356 l
f
317.186 463.2869 m
317.4373 463.5382 l
318.9453 461.779 l
318.694 461.5276 l
317.186 463.2869 l
317.186 463.2869 l
f
0 0 0 0.64 k
317.186 463.2869 m
317.6887 463.5382 l
318.9453 461.779 l
318.694 461.5276 l
317.186 463.2869 l
317.186 463.2869 l
f
0 0 0 0.65 k
317.4373 463.5382 m
317.6887 463.7896 l
319.1967 462.0303 l
318.9453 461.779 l
317.4373 463.5382 l
317.4373 463.5382 l
f
317.6887 463.5382 m
317.94 463.7896 l
319.448 462.0303 l
319.1967 461.779 l
317.6887 463.5382 l
317.6887 463.5382 l
f
0 0 0 0.66 k
317.6887 463.7896 m
317.94 464.0409 l
319.448 462.2816 l
319.1967 462.0303 l
317.6887 463.7896 l
317.6887 463.7896 l
f
0 0 0 0.67 k
317.94 463.7896 m
318.4427 464.0409 l
319.6993 462.2816 l
319.448 462.0303 l
317.94 463.7896 l
317.94 463.7896 l
f
317.94 464.0409 m
318.4427 464.2922 l
319.9506 462.533 l
319.448 462.2816 l
317.94 464.0409 l
317.94 464.0409 l
f
0 0 0 0.68 k
318.1913 464.2922 m
318.694 464.5436 l
319.9506 462.533 l
319.6993 462.2816 l
318.1913 464.2922 l
318.1913 464.2922 l
f
318.4427 464.2922 m
318.694 464.5436 l
320.202 462.7843 l
319.9506 462.533 l
318.4427 464.2922 l
318.4427 464.2922 l
f
0 0 0 0.69 k
318.694 464.5436 m
318.9453 464.5436 l
320.202 462.7843 l
319.9506 462.533 l
318.694 464.5436 l
318.694 464.5436 l
f
0 0 0 0.7 k
318.694 464.5436 m
319.1967 464.7949 l
320.4533 463.0356 l
320.202 462.7843 l
318.694 464.5436 l
318.694 464.5436 l
f
318.9453 464.7949 m
319.1967 464.7949 l
320.7046 463.0356 l
320.202 462.7843 l
318.9453 464.7949 l
318.9453 464.7949 l
f
0 0 0 0.71 k
319.1967 464.7949 m
319.448 465.0462 l
320.7046 463.2869 l
320.4533 463.0356 l
319.1967 464.7949 l
319.1967 464.7949 l
f
0 0 0 0.72 k
319.1967 464.7949 m
319.448 465.0462 l
320.9559 463.2869 l
320.7046 463.0356 l
319.1967 464.7949 l
319.1967 464.7949 l
f
319.448 465.0462 m
319.6993 465.2976 l
320.9559 463.5382 l
320.7046 463.2869 l
319.448 465.0462 l
319.448 465.0462 l
f
0 0 0 0.73 k
319.448 465.0462 m
319.6993 465.2976 l
321.2073 463.5382 l
320.9559 463.2869 l
319.448 465.0462 l
319.448 465.0462 l
f
0 0 0 0.74 k
319.6993 465.2976 m
319.9506 465.5489 l
321.4586 463.7896 l
320.9559 463.5382 l
319.6993 465.2976 l
319.6993 465.2976 l
f
319.6993 465.2976 m
320.202 465.5489 l
321.4586 463.7896 l
321.2073 463.5382 l
319.6993 465.2976 l
319.6993 465.2976 l
f
0 0 0 0.75 k
319.9506 465.5489 m
320.202 465.8002 l
321.7099 464.0409 l
321.4586 463.7896 l
319.9506 465.5489 l
319.9506 465.5489 l
f
0 0 0 0.76 k
320.202 465.5489 m
320.4533 465.8002 l
321.7099 464.2922 l
321.4586 463.7896 l
320.202 465.5489 l
320.202 465.5489 l
f
320.202 465.8002 m
320.7046 466.0515 l
321.9613 464.2922 l
321.7099 464.0409 l
320.202 465.8002 l
320.202 465.8002 l
f
0 0 0 0.77 k
320.4533 465.8002 m
320.7046 466.0515 l
322.2126 464.5436 l
321.7099 464.2922 l
320.4533 465.8002 l
320.4533 465.8002 l
f
320.7046 466.0515 m
320.9559 466.3029 l
322.2126 464.5436 l
321.9613 464.2922 l
320.7046 466.0515 l
320.7046 466.0515 l
f
0 0 0 0.78 k
320.7046 466.0515 m
321.2073 466.3029 l
322.4639 464.7949 l
322.2126 464.5436 l
320.7046 466.0515 l
320.7046 466.0515 l
f
0 0 0 0.79 k
320.9559 466.3029 m
321.2073 466.5542 l
322.4639 464.7949 l
322.2126 464.5436 l
320.9559 466.3029 l
320.9559 466.3029 l
f
321.2073 466.3029 m
321.4586 466.5542 l
322.7153 465.0462 l
322.4639 464.7949 l
321.2073 466.3029 l
321.2073 466.3029 l
f
0 0 0 0.8 k
321.2073 466.5542 m
321.4586 466.5542 l
322.9666 465.0462 l
322.4639 464.7949 l
321.2073 466.5542 l
321.2073 466.5542 l
f
0 0 0 0.81 k
321.4586 466.5542 m
321.7099 466.8055 l
322.9666 465.2976 l
322.7153 465.0462 l
321.4586 466.5542 l
321.4586 466.5542 l
f
321.4586 466.5542 m
321.9613 466.8055 l
323.2179 465.2976 l
322.9666 465.0462 l
321.4586 466.5542 l
321.4586 466.5542 l
f
0 0 0 0.82 k
321.7099 466.8055 m
321.9613 467.0569 l
323.2179 465.5489 l
322.9666 465.2976 l
321.7099 466.8055 l
321.7099 466.8055 l
f
0 0 0 0.83 k
321.9613 466.8055 m
322.2126 467.0569 l
323.4692 465.5489 l
323.2179 465.2976 l
321.9613 466.8055 l
321.9613 466.8055 l
f
321.9613 467.0569 m
322.2126 467.3082 l
323.4692 465.8002 l
323.2179 465.5489 l
321.9613 467.0569 l
321.9613 467.0569 l
f
0 0 0 0.84 k
322.2126 467.0569 m
322.4639 467.3082 l
323.7206 465.8002 l
323.4692 465.5489 l
322.2126 467.0569 l
322.2126 467.0569 l
f
0 0 0 0.85 k
322.4639 467.3082 m
322.7153 467.5595 l
323.9719 466.0515 l
323.4692 465.8002 l
322.4639 467.3082 l
322.4639 467.3082 l
f
322.4639 467.3082 m
322.7153 467.5595 l
323.9719 466.0515 l
323.7206 465.8002 l
322.4639 467.3082 l
322.4639 467.3082 l
f
0 0 0 0.86 k
322.7153 467.5595 m
322.9666 467.8108 l
324.2232 466.3029 l
323.9719 466.0515 l
322.7153 467.5595 l
322.7153 467.5595 l
f
322.7153 467.5595 m
322.9666 467.8108 l
324.2232 466.3029 l
323.9719 466.0515 l
322.7153 467.5595 l
322.7153 467.5595 l
f
0 0 0 0.87 k
322.9666 467.8108 m
323.2179 468.0622 l
324.4745 466.5542 l
324.2232 466.3029 l
322.9666 467.8108 l
322.9666 467.8108 l
f
0 0 0 0.88 k
322.9666 467.8108 m
323.4692 468.0622 l
324.7259 466.5542 l
324.2232 466.3029 l
322.9666 467.8108 l
322.9666 467.8108 l
f
323.2179 468.0622 m
323.4692 468.3135 l
324.7259 466.8055 l
324.4745 466.5542 l
323.2179 468.0622 l
323.2179 468.0622 l
f
0 0 0 0.89 k
323.4692 468.0622 m
323.7206 468.3135 l
324.9772 466.8055 l
324.7259 466.5542 l
323.4692 468.0622 l
323.4692 468.0622 l
f
0 0 0 0.9 k
323.4692 468.3135 m
323.7206 468.5648 l
324.9772 467.0569 l
324.7259 466.8055 l
323.4692 468.3135 l
323.4692 468.3135 l
f
323.7206 468.3135 m
323.9719 468.5648 l
325.2285 467.0569 l
324.9772 466.8055 l
323.7206 468.3135 l
323.7206 468.3135 l
f
0 0 0 0.91 k
323.7206 468.5648 m
324.2232 468.8161 l
325.2285 467.3082 l
324.9772 467.0569 l
323.7206 468.5648 l
323.7206 468.5648 l
f
0 0 0 0.92 k
323.9719 468.5648 m
324.2232 468.8161 l
325.4798 467.3082 l
325.2285 467.0569 l
323.9719 468.5648 l
323.9719 468.5648 l
f
324.2232 468.8161 m
324.4745 469.0675 l
325.7312 467.5595 l
325.2285 467.3082 l
324.2232 468.8161 l
324.2232 468.8161 l
f
0 0 0 0.93 k
324.2232 468.8161 m
324.4745 469.0675 l
325.7312 467.5595 l
325.4798 467.3082 l
324.2232 468.8161 l
324.2232 468.8161 l
f
0 0 0 0.94 k
324.4745 469.0675 m
324.7259 469.3188 l
325.9825 467.8108 l
325.7312 467.5595 l
324.4745 469.0675 l
324.4745 469.0675 l
f
324.4745 469.0675 m
324.9772 469.3188 l
325.9825 467.8108 l
325.7312 467.5595 l
324.4745 469.0675 l
324.4745 469.0675 l
f
0 0 0 0.95 k
324.7259 469.3188 m
324.9772 469.5701 l
326.2338 468.0622 l
325.7312 467.8108 l
324.7259 469.3188 l
324.7259 469.3188 l
f
324.9772 469.3188 m
325.2285 469.5701 l
326.2338 468.3135 l
325.9825 467.8108 l
324.9772 469.3188 l
324.9772 469.3188 l
f
0 0 0 0.96 k
324.9772 469.5701 m
325.2285 469.8215 l
326.4851 468.3135 l
326.2338 468.0622 l
324.9772 469.5701 l
324.9772 469.5701 l
f
0 0 0 0.97 k
325.2285 469.5701 m
325.4798 469.8215 l
326.7365 468.5648 l
326.2338 468.0622 l
325.2285 469.5701 l
325.2285 469.5701 l
f
325.2285 469.8215 m
325.4798 470.0728 l
326.7365 468.5648 l
326.4851 468.3135 l
325.2285 469.8215 l
325.2285 469.8215 l
f
0 0 0 0.98 k
325.4798 469.8215 m
325.7312 470.0728 l
326.9878 468.8161 l
326.7365 468.5648 l
325.4798 469.8215 l
325.4798 469.8215 l
f
0 0 0 0.99 k
325.4798 470.0728 m
325.9825 470.3241 l
326.9878 468.8161 l
326.7365 468.5648 l
325.4798 470.0728 l
325.4798 470.0728 l
f
325.7312 470.0728 m
325.9825 470.3241 l
327.2391 469.0675 l
326.9878 468.8161 l
325.7312 470.0728 l
325.7312 470.0728 l
f
0 0 0 1 k
327.2391 469.0675 m
326.2338 470.5754 l
325.9825 470.3241 l
326.9878 468.8161 l
327.2391 469.0675 l
327.2391 469.0675 l
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
0 0 612 792 C
0 66 576 66 2 L
9 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 72 576 98 R
7 X
V
0 10 Q
0 X
(National Aeronautics and Space Administration) 72 91.33 T
(Langley Research Center) 72 79.33 T
0 14 Q
(\245) 188.16 79.33 T
0 10 Q
( Hampton, Virginia 23681-0001) 193.06 79.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318 634 576 730 R
7 X
V
1 15.5 Q
0 X
(NASA Reference Publication 1348) 343.02 719.67 T
72 103 576 615 R
7 X
V
1 24 Q
0 X
(T) 72 599 T
(echniques for Modeling the Reliability of) 84.5 599 T
(Fault-T) 72 574 T
(olerant Systems W) 147.12 574 T
(ith the Markov) 343.46 574 T
72 531 576 541 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 531.64 610 531.64 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 24 Q
0 X
0 0 0 1 0 0 0 K
(State-) 72 549 T
(Space Appr) 131.74 549 T
(oach) 255.48 549 T
2 12 Q
(Ricky W) 72 513 T
(. Butler and Sally C. Johnson) 113.22 513 T
(Langley Resear) 72 499 T
(ch Center \245 Hampton, V) 145.46 499 T
(ir) 263.8 499 T
(ginia) 271.58 499 T
72 40 576 57 R
7 X
V
1 15.5 Q
0 X
(September 1995) 467.96 46.67 T
72 144 320 387 R
7 X
V
330 144 576 240 R
V
195 632 314 733 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
195 632 314 733 R
7 X
0 0 0 1 0 0 0 K
V
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
66.06 65.5 570 129 R
7 X
0 0 0 1 0 0 0 K
V
3 9 Q
0 X
(Printed copies available from the following:) 66.06 123 T
(NASA Center for AeroSpace Information) 66.06 101 T
(National Technical Information Service \050NTIS\051) 270.06 101 T
(800 Elkridge Landing Road) 66.06 90 T
(5285 Port Royal Road) 270.06 90 T
(Linthicum Heights, MD 21090-2934) 66.06 79 T
(Springfield, VA 22161-2171) 270.06 79 T
(\050301\051 621-0390) 66.06 68 T
(\050703\051 487-4650) 270.06 68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
66 142 572 151 R
7 X
V
0 X
(Available electronically at the following URL address:) 66 145 T
(http://techreports.larc.nasa.gov/ltrs/ltrs.html) 270.22 145 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(iii) 301.62 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
(Contents) 78 718 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(1. Introduction) 78 699.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 145.75 699.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 528.5 699.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2. Introduction to Markov Modeling) 78 682.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.25 682.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 528.5 682.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3. Modeling Nonreconfigurable Systems) 78 665.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258.5 665.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 528.5 665.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.1. Simplex Computer) 87 648.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189.75 648.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 528.5 648.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2. Static Redundancy) 87 631.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189.75 631.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 528.5 631.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.3. Analytic Solution to TMR Model) 87 614.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.75 614.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 528.5 614.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.4. N-Modular-Redundant System) 87 597.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 244.75 597.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 528.5 597.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4. Modeling Reconfigurable Systems) 78 582.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 242 582.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 528.5 582.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.1. Degradable Triad) 87 565.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 184.25 565.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 528.5 565.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.2. Triad to Simplex) 87 548.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 181.5 548.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 523 548.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.3. Degradable Quadraplex System) 87 531.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 247.5 531.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 523 531.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.4. Triad With One Spare) 87 514.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 206.25 514.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11) 523 514.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5. Reliability Analysis During Design and Validation) 87 497.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 330 497.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 523 497.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5. Reliability Analysis Programs) 78 482.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222.75 482.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 523 482.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.1. Overview of SURE) 87 465.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 465.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 523 465.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2. Model Definition Syntax) 87 448.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 217.25 448.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 523 448.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2.1. Lexical details) 96 433.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189.75 433.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 523 433.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2.2. Constant definitions) 96 420.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 214.5 420.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 523 420.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2.3. Variable definition) 96 407.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 209 407.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 523 407.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2.4. Expressions) 96 394.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 178.75 394.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 523 394.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2.5. Slow transition description) 96 381.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 244.75 381.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 523 381.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2.6. Fast transition description) 96 368.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.25 368.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 523 368.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2.7. FAST exponential transition description) 96 355.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.5 355.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 523 355.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3. SURE Commands) 87 338.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189.75 338.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 523 338.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3.1. READ command) 96 323.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.75 323.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 523 323.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3.2. RUN command) 96 310.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195.25 310.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 523 310.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3.3. LIST constant) 96 297.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 187 297.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 523 297.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3.4. START constant) 96 284.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 198 284.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 523 284.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3.5. TIME constant) 96 271.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 271.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 523 271.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3.6. PRUNE and WARNDIG constants) 96 258.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 280.5 258.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 523 258.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.4. Overview of  STEM and PAWS Programs) 87 241.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 294.25 241.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 523 241.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.5. Introduction to SURE Mathematics) 87 224.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 264 224.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 523 224.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.5.1. Path-step classification and notation) 96 209.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 283.25 209.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 523 209.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.5.2. Class 1 path step; slow on path, slow off path) 96 196.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 324.5 196.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 523 196.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.5.3. Class 2 path step; fast on path, arbitrary off path) 96 183.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 338.25 183.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 523 183.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.5.4. Class 3 path step; slow on path, fast off path) 96 170.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 319 170.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 523 170.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.5.5. SURE bounding theorem) 96 157.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.5 157.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 523 157.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.5.6. Algebraic analysis with SURE upper bound) 96 144.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 319 144.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 523 144.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6. Reconfiguration by Degradation) 78 131.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 233.75 131.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 523 131.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.1. Degradable 6-Plex) 87 114.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189.75 114.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 523 114.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.2. Single-Point Failures) 87 97.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.75 97.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 523 97.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.3. Fail-Stop Dual System) 87 80.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 209 80.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 523 80.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iii" 3
%%Page: "iv" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(iv) 301.92 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(6.4. Self-Checking Pair Architecture) 87 718.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 250.25 718.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 523 718.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.5. Degradable Quadraplex With Partial Fail Stop or Self Test) 87 701.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 365.75 701.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 523 701.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.6. Incomplete Reconfiguration) 87 684.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 684.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 523 684.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7. Reconfiguration By Sparing) 78 669.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 214.5 669.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(33) 523 669.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7.1. Triad With Two Cold Spares) 87 652.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 236.5 652.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(34) 523 652.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7.2. Triad With Two Warm Spares) 87 635.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 242 635.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 523 635.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8. The ASSIST Model Specification Language) 78 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 286 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 523 620.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1. Abstract Language Syntax) 87 603.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225.5 603.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 523 603.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.1. Constant-definition statement) 96 588.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.75 588.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 523 588.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.2. SPACE statement) 96 575.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.5 575.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 523 575.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.3. IMPLICIT statement) 96 562.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 217.25 562.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 523 562.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.4. START statement) 96 549.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 203.5 549.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 523 549.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.5. DEATHIF statement) 96 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 217.25 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 523 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.6. TRANTO statement) 96 523.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 214.5 523.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 523 523.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.7. Model generation algorithm) 96 510.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 247.5 510.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 523 510.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.2. Illustrative Example of SIFT-Like Architecture) 87 493.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 316.25 493.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 523 493.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9. Reconfigurable Triad Systems) 78 478.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225.5 478.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 523 478.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.1. Triad With Cold Spares) 87 461.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 211.75 461.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 523 461.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.2. Triad With Instantaneous Detection of Warm Spare Failure) 87 444.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 368.5 444.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 523 444.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.3. Degradable Triad With Nondetectable Spare Failure) 87 427.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 338.25 427.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(46) 523 427.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.4. Degradable Triad With Partial Detection of Spare Failure) 87 410.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 360.25 410.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(47) 523 410.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.5. Byzantine Faults) 87 393.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 181.5 393.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(48) 523 393.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10. Systems With Multiple Independent Subsystems) 78 378.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 310.75 378.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 523 378.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10.1. System With Two Independent Triad-to-Simplex Subsystems) 87 361.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . .) 385 361.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(51) 523 361.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10.2. ASSIST Model for N Independent Triads) 87 344.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 294.25 344.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(52) 523 344.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10.3. The Additive Law of Probability) 87 327.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 258.5 327.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(53) 523 327.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11. Model Pruning) 78 312.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 162.25 312.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(55) 523 312.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12. Multiple Subsystems With Failure Dependencies) 78 295.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 310.75 295.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 523 295.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12.1. Simple Flight Control System) 87 278.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 244.75 278.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 523 278.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12.2. Flight Control System With Failure Dependency) 87 261.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 327.25 261.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(60) 523 261.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12.3. Monitored Sensors) 87 244.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195.25 244.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(68) 523 244.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12.4. Two Triads With Three Power Supplies) 87 227.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 288.75 227.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 523 227.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12.5. Failure Rate Dependencies) 87 210.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 210.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(69) 523 210.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12.6. Recovery Rate Dependencies) 87 193.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 242 193.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 523 193.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13. Multiple Triads With Pooled Spares) 78 178.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255.75 178.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(70) 523 178.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.1. Two Triads With Pooled Cold Spares) 87 161.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 277.75 161.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(71) 523 161.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.2. Two Triads With Pooled Cold Spares Reducible to One Triad) 87 144.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . .) 385 144.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(72) 523 144.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.3. Two Degradable Triads With Pooled Cold Spares) 87 127.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 332.75 127.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(73) 523 127.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.4. Two Degradable Triads With Pooled Warm Spares) 87 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 338.25 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(75) 523 110.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.5. Multiple Nondegradable Triads With Pooled Cold Spares) 87 93.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 365.75 93.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(76) 523 93.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.6. Multiple Triads With Pooled Cold Spares Reducible to One) 87 76.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 376.75 76.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(77) 523 76.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iv" 4
%%Page: "v" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(v) 303.38 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(13.7. Multiple Reducible Triads With Pooled Warm Spares) 87 718.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 349.25 718.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(78) 523 718.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.8. Multiple Competing Recoveries) 87 701.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 253 701.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(79) 523 701.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14. Multiple Triads With Other Dependencies) 78 686.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 280.5 686.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 523 686.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14.1. Modeling Multiple Identical Triads) 87 669.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 269.5 669.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(81) 523 669.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14.2. Multiple Triad Systems With Limited Ability to Handle Multiple Faults) 87 652.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . .) 429 652.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 523 652.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14.2.1. Two triads) 96 637.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 178.75 637.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(83) 523 637.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14.2.2. N triads) 96 624.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 165 624.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(84) 523 624.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14.3. ASSIST Trimming) 87 607.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 198 607.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(88) 523 607.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14.4. Trimming Example) 87 590.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200.75 590.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(89) 523 590.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15. Transient and Intermittent Faults) 78 575.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.25 575.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(95) 523 575.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.1. Transient Fault Behavior) 87 558.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222.75 558.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(96) 523 558.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.2. Modeling Transient Faults) 87 541.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 541.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 523 541.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.2.1. Degradable triad subject to transient faults) 96 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 316.25 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(97) 523 526.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.2.2. The SURE program and loop truncation) 96 513.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 308 513.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(98) 523 513.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.2.3. Nonreconfigurable system subject to transient faults) 96 500.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 360.25 500.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(99) 523 500.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.3. Degradable Quadraplex Subject to Transient and Permanent Faults) 87 483.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . .) 407 483.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(102) 517.5 483.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.4. NMR With Imperfect Recovery From Transient Faults) 87 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 354.75 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(102) 517.5 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.5. Degradable NMR With Perfect Transient Fault Recovery) 87 449.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 365.75 449.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(103) 517.5 449.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.5.1. Two permanent faults in one state) 96 434.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 280.5 434.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(105) 517.5 434.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.5.2. Two transient faults in one state) 96 421.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 272.25 421.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(105) 517.5 421.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.5.3.  One transient and  one permanent fault in one state) 96 408.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 357.5 408.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(106) 517.5 408.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.6.  Fault-Tolerant Processor) 87 391.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225.5 391.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(108) 517.5 391.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.7. Modeling Intermittent Faults) 87 374.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.25 374.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(110) 517.5 374.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16. Sequences of Reliability Models) 78 359.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 239.25 359.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(112) 517.5 359.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16.1. Phased Missions) 87 342.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 187 342.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(113) 517.5 342.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16.2. Nonconstant Failure Rates) 87 325.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 231 325.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(116) 517.5 325.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16.3. Continuously Varying Failure Rates) 87 308.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 272.25 308.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(119) 517.5 308.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17. Concluding Remarks) 78 293.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 189.75 293.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(120) 517.5 293.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Appendix\321Additional SURE Mathematics) 78 276.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 272.25 276.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(121) 517.5 276.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(References) 78 259.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 129.25 259.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(124) 517.5 259.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "v" 5
%%Page: "vi" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
FMENDPAGE
%%EndPage: "vi" 6
%%Page: "1" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Abstract) 292.67 718 T
5 11 Q
0.5 (This paper presents a step-by-step tutorial of the methods and the) 177 688.44 P
1.44 (tools that were used for the reliability analysis of fault-tolerant sys-) 159 675.44 P
2.27 (tems. The approach of this paper is the Markov \050or semi-Markov\051) 159 662.44 P
0.37 (state-space method. The paper is intended for design engineers with a) 159 649.44 P
0.54 (basic understanding of computer architecture and fault tolerance, but) 159 636.44 P
0.92 (little knowledge of reliability modeling.  The representation of archi-) 159 623.44 P
1.84 (tectural features in mathematical models is emphasized. This paper) 159 610.45 P
0.71 (does not present details of the mathematical solution of complex reli-) 159 597.45 P
0.89 (ability models. Instead, it describes the use of several recently devel-) 159 584.45 P
2.15 (oped computer programs\321SURE, ASSIST, STEM, and PAWS\321that) 159 571.45 P
(automate the generation and the solution of these models.) 159 558.45 T
4 12 Q
( 1. Intr) 87 529.56 T
(oduction) 122.45 529.56 T
3 11 Q
0.04 (The rapid growth of digital electronics technology has led to the proliferation of sophisticated com-) 105 509 P
-0.11 (puter systems capable of achieving very high reliability requirements. Reliability requirements for com-) 87 496 P
0.49 (puter systems used in military aircraft, for example, are typically in the range of 1) 87 483 P
6 F
0.49 (-) 456.47 483 P
3 F
0.49 (10) 465.26 483 P
6 8.8 Q
0.39 (-) 476.26 487.4 P
3 F
0.39 (7) 481.09 487.4 P
3 11 Q
0.49 ( per mission,) 485.49 483 P
0.23 (and reliability requirements of 1) 87 470 P
6 F
0.23 (-) 232.44 470 P
3 F
0.23 (10) 241.23 470 P
6 8.8 Q
0.19 (-) 252.23 474.4 P
3 F
0.19 (9) 257.06 474.4 P
3 11 Q
0.23 ( for a 10-hr flight are often expressed for flight-crucial avionics) 261.46 470 P
0.79 (systems. To achieve such optimistic reliability goals, computer systems have been designed to recog-) 87 457 P
0.69 (nize and tolerate their own faults. Although capable of tolerating certain faults, these systems are still) 87 444 P
1.05 (susceptible to failure. Thus, the reliability of these systems must be evaluated to ensure that require-) 87 431 P
(ments are met.) 87 418 T
-0.17 (The reliability analysis of a fault-tolerant computer system is a complex problem.  Lifetime tests are) 105 396.78 P
-0.24 (typically used to determine the reliability or \322lifetime\323 of a diversity of products such as light bulbs, bat-) 87 383.78 P
-0.24 (teries, and electronic devices. The lifetime test methodology is clearly impractical, though, for computer) 87 370.78 P
0.45 (systems with reliability goals in the order of 1) 87 357.78 P
6 F
0.45 (-) 295.63 357.78 P
3 F
0.45 (10) 304.42 357.78 P
6 8.8 Q
0.36 (-) 315.42 362.18 P
3 F
0.36 (7) 320.25 362.18 P
3 11 Q
0.45 ( or higher; hence, an alternate approach is neces-) 324.65 357.78 P
(sary. The approach generally taken to investigate the reliability of a highly reliable system is) 87 344.78 T
(1.) 105 323.56 T
(Develop a mathematical reliability model of the system) 117 323.56 T
(2.) 105 302.33 T
(Measure or estimate the parameters of the model) 117 302.33 T
(3.) 105 281.11 T
(Compute system reliability based upon the model and the specified parameters) 117 281.11 T
1.03 (The estimated system reliability is consequently strongly dependent on the model itself. Because) 105 259.89 P
0.69 (the behavior of a fault-tolerant, highly reliable system is complex, formulating models that accurately) 87 246.89 P
0.12 (represent that behavior can be a difficult task. Mathematical models of fault-tolerant systems must cap-) 87 233.89 P
1.12 (ture the processes that lead to system failure and the system capabilities that enable operation in the) 87 220.89 P
0.41 (presence of failing components. Current manufacturing techniques cannot produce circuitry that meets) 87 207.89 P
0.78 (ultrahigh reliability requirements. Therefore, highly reliable systems use redundancy techniques, such) 87 194.89 P
0.91 (as parallel redundant units or dissimilar algorithms for computing the same function, to achieve fault) 87 181.89 P
0.47 (tolerance. Reconfiguration, the process of removing faulty components and either replacing them with) 87 168.89 P
0.12 (spares or degrading to an alternate configuration, is another method often utilized to increase reliability) 87 155.89 P
(without the overhead of more redundancy.) 87 142.89 T
-0.25 (Fortunately, most of the detailed instruction-level activities of a system do not directly affect system) 105 121.67 P
0.08 (reliability. Only the macroscopic fault-related events must be included in the reliability model. Further-) 87 108.67 P
0.38 (more, experimentally testing the correctness of the model would require at least as much experimenta-) 87 95.67 P
0.09 (tion as is required for life testing. Consequently, the best approach is to carefully develop the reliability) 87 82.67 P
0.23 (model and subject it to scrutiny by a team of experts. The process of reliability modeling is thus not an) 87 69.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 7
%%Page: "2" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(2) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.03 (exact science, and at best, should be called an art. The goal of this paper is to look into this craft of) 87 718.67 P
(reliability modeling.) 87 705.67 T
1.69 (The paper is structured in a tutorial style rather than as a catalog of reliability models. Conse-) 105 685.33 P
0.44 (quently, elementary concepts are introduced first and are followed by increasingly more complex con-) 87 672.33 P
1.74 (cepts. Thus, the paper begins with an overview of essential aspects of Markov state-space models.) 87 659.33 P
-0.12 (Next, the fundamental techniques that were used for modeling the nonreconfigurable systems are devel-) 87 646.33 P
1.99 (oped. Then, the basic techniques that were used in modeling reconfigurable systems are explored.) 87 633.33 P
-0.01 (Before examining more complicated models, the computer program SURE \050Semi-Markov Unreliability) 87 620.33 P
0.34 (Range Evaluator\051, which can be used to solve the reliability models numerically, is introduced \050ref.) 87 607.33 P
0.34 (1\051.) 531.09 607.33 P
0.14 (Next, two basic reconfigurations\321degradation and sparing\321are examined in more detail with the help) 87 594.33 P
(of the SURE input language.) 87 581.33 T
0.21 (At this point, the paper introduces a new language, ASSIST, for describing reliability models. This) 105 561 P
0.95 (language is necessary because the models presented in the later sections are very large and complex.) 87 548 P
-0.15 (The expressiveness of the ASSIST language allows complex models to be defined in a succinct manner.) 87 535 P
-0.05 (Next, complex systems consisting of multiple triads that use various forms of reconfiguration are inves-) 87 522 P
-0.01 (tigated. Then the techniques that were used to model transient and intermittent faults are presented. The) 87 509 P
-0.21 (next section explores the techniques that were used to model the components of control system architec-) 87 496 P
1.1 (tures, which include sensors, buses, and actuators. Finally, some specialized topics such as sequence) 87 483 P
(dependencies, phased missions, and nonconstant failure rate models are presented.) 87 470 T
4 12 Q
( 2. Intr) 87 443 T
(oduction to Markov Modeling) 122.45 443 T
3 11 Q
0.42 (Traditionally, the reliability analysis of a complex system has been accomplished with combinato-) 105 423.33 P
1 (rial mathematics. The standard fault-tree method of reliability analysis is based on such mathematics) 87 410.33 P
0.39 (\050ref. 2\051. Unfortunately, the fault-tree approach is incapable of analyzing systems in which reconfigura-) 87 397.33 P
-0.19 (tion is possible. \050Work that augments fault-tree notation for the purpose of generating Markov models is) 87 384.33 P
(not included in this statement.\051 Basically, a fault tree can be used to model a system with) 87 371.33 T
(1.) 105 351 T
(Only permanent faults \050no transient or intermittent faults\051) 117 351 T
(2.) 105 330.67 T
(No reconfiguration) 117 330.67 T
(3.) 105 310.33 T
(No time or sequence failure dependencies) 117 310.33 T
(4.) 105 290 T
(No state-dependent behavior \050e.g., state-dependent failure rates\051) 117 290 T
1.22 (Because fault trees are easier to solve than Markov models, fault trees should be used wherever) 105 269.67 P
(these fundamental assumptions are not violated.  \050For more information see ref. 3.\051) 87 256.67 T
0.09 (In reconfigurable systems, the critical factor often becomes the effectiveness of the dynamic recon-) 105 236.33 P
0.05 (figuration process. It is necessary to model such systems by using the more powerful Markov modeling) 87 223.33 P
-0.27 (technique. A Markov process is a stochastic process whose behavior depends only upon the current state) 87 210.33 P
2.44 (of the system. The particular sequence of steps by which the system entered the current state is) 87 197.33 P
(irrelevant to its future behavior. Markov state-space models have four main categories:) 87 184.33 T
(1.) 105 164 T
(Discrete space and discrete time) 117 164 T
(2.) 105 143.67 T
(Discrete space and continuous time) 117 143.67 T
(3.) 105 123.33 T
(Continuous space and discrete time) 117 123.33 T
(4.) 105 103 T
(Continuous space and continuous time) 117 103 T
0.5 (The first two categories involve a discrete space; that is, the states of the system can be numbered) 105 82.67 P
1.88 (with an integer. In the last two categories, the states of the system must be numbered with a real) 87 69.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 8
%%Page: "3" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(3) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.26 (number.  In the first and the third categories, the system changes by discrete time steps and in the second) 87 718.67 P
(and the fourth categories, the system transitions occur over continuous time.) 87 705.67 T
0.38 (The second category is the one most useful for modeling fault-tolerant systems and will always be) 105 686.02 P
0.09 (used in this paper. Only models that contain a finite number of states will be used. However, the transi-) 87 673.02 P
0.49 (tion time between the states is not discrete and can take on any real value. For a more detailed mathe-) 87 660.02 P
(matical description of Markov analysis, see reference 4.) 87 647.02 T
0.42 (The first step in modeling a system with a discrete-space and continuous-time Markov model is to) 105 627.37 P
0.59 (represent the state of the system with a vector of attributes that change over time. These attributes are) 87 614.37 P
-0.09 (typically system characteristics such as the number of working processors, the number of spare units, or) 87 601.37 P
0.5 (the number of faulty units that have not been removed. The more attributes included in the model, the) 87 588.37 P
1.04 (more complex the model will be. Thus, the smallest set of attributes that can accurately describe the) 87 575.37 P
-0.24 (fault-related behavior of the system is typically chosen. The next step in the modeling process is to char-) 87 562.37 P
-0.17 (acterize the transition time from one state to another. Because this transition time is rarely deterministic,) 87 549.37 P
(the transition times are described with a probability distribution.) 87 536.37 T
0.79 (Certain states in the system represent system failure, while others represent fault-free behavior or) 105 516.72 P
0.03 (correct operation in the presence of faults. The model chosen for the system must represent system fail-) 87 503.72 P
-0.14 (ure properly. Defining exactly what constitutes system failure is difficult because system failure is often) 87 490.72 P
0.87 (an extremely complex function of external events, software state, and hardware state. The modeler is) 87 477.72 P
-0.22 (forced to choose between conservative or nonconservative assumptions about system failure. If  the reli-) 87 464.72 P
0.13 (ability of the system must be higher than a specific value, then conservative assumptions are made. For) 87 451.72 P
-0.13 (example, in a triple modular redundant \050TMR\051 system of computers, the presence of two faulty comput-) 87 438.72 P
0.53 (ers is considered to be system failure. This assumption is conservative because the two faults may not) 87 425.72 P
1.32 (actually corrupt data in a manner that would defeat the voter. This assumption simplifies the model) 87 412.72 P
0.45 (because the probabilities of collusion of the faulty pair does not have to be modeled. In this paper, the) 87 399.72 P
(conservative approach will be used exclusively.) 87 386.72 T
0.11 (It is important that all transitions in the reliability model be measurable. This measurability often is) 105 367.07 P
1.34 (the primary consideration when developing a model for a system. Although a particular model may) 87 354.07 P
0.97 (elegantly describe the behavior of the system, if it depends upon unmeasurable parameters, then it is) 87 341.07 P
(useless.) 87 328.07 T
-0.03 (Typically, the transitions of a fault-tolerant system model fall into two categories: slow failure tran-) 105 308.42 P
-0.11 (sitions and fast recovery transitions. If the states of the model are defined properly, then the slow failure) 87 295.42 P
0.4 (transitions can be obtained from field data and/or MIL-STD 217F calculations \050ref. 5\051. The fast recov-) 87 282.42 P
1.4 (ery transition corresponds to system responses to fault arrivals and can be measured experimentally) 87 269.42 P
0.49 (with fault injection. The primary problem is to properly model the system so that the determination of) 87 256.42 P
0.67 (these transitions is facilitated. If the model is too coarse, the transitions become experimentally unob-) 87 243.42 P
-0.17 (servable. If the model is too detailed, the number of transitions that must be measured can be) 87 230.42 P
-0.17 (exorbitant.) 495.64 230.42 P
-0.16 ( This paper explores the methods and the assumptions that were used in the development of reliabil-) 105 210.77 P
(ity models for fault-tolerant computer systems.) 87 197.77 T
4 12 Q
(3. Modeling Nonr) 87 171.45 T
(econ\336gurable Systems) 177.12 171.45 T
3 11 Q
-0.24 (The simplest systems to model are nonreconfigurable systems. This section introduces the basic ele-) 105 152.47 P
0.22 (ments of reliability modeling by describing how to model simple nonreconfigurable systems that range) 87 139.47 P
(from a single simplex computer through a majority-voting) 87 126.47 T
5 F
(N) 346.09 126.47 T
3 F
(-modular-redundant \050NMR\051 system.) 353.43 126.47 T
4 10.5 Q
(3.1. Simplex Computer) 105 101.15 T
3 11 Q
0.13 (The first example is a system consisting of a single computer. First, let) 105 82.67 P
5 F
0.13 (T) 420.47 82.67 P
3 F
0.13 (be a random variable rep-) 429.47 82.67 P
1.63 (resenting the time to failure of the computer. Next, define a distribution for) 87 69.67 P
5 F
1.63 (T) 441.55 69.67 P
3 F
1.63 (, say) 447.67 69.67 P
5 F
1.63 (F) 473.85 69.67 P
3 F
1.63 (\050) 480.57 69.67 P
5 F
1.63 (t) 484.23 69.67 P
3 F
1.63 (\051. Typically,) 487.29 69.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 9
%%Page: "4" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(4) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.83 (electronic components, and consequently computers, are assumed to fail according to the exponential) 87 718.67 P
(distribution) 87 705.67 T
0.38 (The parameter) 105 659.45 P
6 F
0.38 (l) 172.34 659.45 P
3 F
0.38 ( completely defines this distribution. An important concept in reliability modeling) 178.38 659.45 P
(is the failure rate \050or hazard rate\051,) 87 646.45 T
5 F
(h) 237.27 646.45 T
3 F
(\050) 242.77 646.45 T
5 F
(t) 246.43 646.45 T
3 F
(\051 defined as follows:) 249.49 646.45 T
0.91 (For the exponential distribution, the hazard rate) 105 601.21 P
5 F
0.91 (h) 323.37 601.21 P
3 F
0.91 (\050) 328.87 601.21 P
5 F
0.91 (t) 332.53 601.21 P
3 F
0.91 (\051 =) 335.59 601.21 P
6 F
0.91 (l) 352.77 601.21 P
3 F
0.91 (. The exponential distribution is the only) 358.81 601.21 P
-0.22 (distribution with a constant hazard rate. The Markov model representing this system is given in figure 1.) 87 588.21 P
0.89 (In this Markov model, state \0501\051 represents the operational state in which the simplex computer is) 105 501.89 P
0.32 (working, state \0502\051 represents the system failure state in which the simplex computer has failed, and the) 87 488.89 P
-0.28 (transition from state \0501\051 to state \0502\051 represents the occurrence of the failure of the simplex computer. The) 87 475.89 P
(transitions of a Markov model are exponential, and thus, can be labeled by the constant hazard rate.) 87 462.89 T
-0.03 (For reliability modeling purposes, electronic components are generally assumed to fail according to) 105 441.52 P
-0.03 (the exponential distribution.  Some immature devices may exhibit a somewhat higher failure rate due to) 87 428.52 P
0.46 (insufficient testing before product delivery; however, mature devices have been shown experimentally) 87 415.52 P
0.62 (to fail according to the exponential distribution \050ref. 6\051.  The MIL-STD 217F handbook offers a more) 87 402.52 P
1.28 (complete discussion on the problem of estimating the reliability of electronic components. Once the) 87 389.52 P
0.59 (reliability of each component \050e.g., a chip\051 in a computer is known, the failure rate of the computer is) 87 376.52 P
-0.07 (simply the sum of the failure rates of the individual components. For example suppose) 87 363.52 P
6 F
-0.07 (l) 469.44 363.52 P
3 8.8 Q
-0.06 (1) 475.48 360.77 P
3 11 Q
-0.07 (,) 479.88 363.52 P
6 F
-0.07 (l) 485.3 363.52 P
3 8.8 Q
-0.06 (2) 491.34 360.77 P
3 11 Q
-0.07 (,...,) 495.74 363.52 P
6 F
-0.07 (l) 512.17 363.52 P
5 8.8 Q
-0.06 (n) 518.21 360.77 P
3 11 Q
-0.07 ( rep-) 522.61 363.52 P
0.08 (resent the failure rates of the components in the computer.  Letting) 87 350.52 P
5 F
0.08 (T) 384.04 350.52 P
3 F
0.08 (be a random variable representing) 392.99 350.52 P
0.26 (the time of failure of the computer and) 87 337.52 P
5 F
0.26 (T) 262.02 337.52 P
5 8.8 Q
0.21 (i) 268.13 334.77 P
3 11 Q
0.26 ( represent the time the) 270.58 337.52 P
5 F
0.26 (i) 372.4 337.52 P
3 F
0.26 (th component fails, the distribution of) 375.46 337.52 P
(failure for the computer) 87 324.52 T
(is determined as follows:) 223.64 324.52 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
(Assuming that the components fail independently, then) 105 223.94 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
(which is an exponential distribution with failure rate) 87 69.67 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
(.) 366.93 69.67 T
3 9 Q
(Figure 1.  Model of simplex computer.) 245.26 528.59 T
241.96 677.15 388.04 695.63 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(F) 244.47 681.77 T
(t) 257.76 681.77 T
6 F
(\050) 253.26 681.77 T
(\051) 261.16 681.77 T
3 F
(P) 282.83 681.77 T
(r) 288.67 681.77 T
(o) 292.17 681.77 T
(b) 297.42 681.77 T
5 F
(T) 309.54 681.77 T
(t) 326.39 681.77 T
6 F
(<) 318.01 681.77 T
([) 305.04 681.77 T
(]) 329.8 681.77 T
3 F
(1) 351.47 681.77 T
5 F
(e) 367.21 681.77 T
6 8.5 Q
(l) 376.85 688.26 T
5 F
(t) 382.17 688.26 T
3 F
(\320) 372.28 688.26 T
3 10.5 Q
(\320) 359.34 681.77 T
(=) 271.66 681.77 T
(=) 340.3 681.77 T
0 0 612 792 C
254.27 618.91 375.73 632.41 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(h) 255.27 623.54 T
(t) 267.4 623.54 T
6 F
(\050) 262.89 623.54 T
(\051) 270.8 623.54 T
5 F
(F) 292.47 623.54 T
6 F
(\242) 299.51 623.54 T
5 F
(t) 308.98 623.54 T
6 F
(\050) 304.47 623.54 T
(\051) 312.38 623.54 T
3 F
(/) 318.25 623.54 T
(1) 328.04 623.54 T
5 F
(F) 346.05 623.54 T
(t) 359.34 623.54 T
6 F
(\050) 354.84 623.54 T
(\051) 362.74 623.54 T
3 F
(\320) 337.16 623.54 T
6 F
([) 323.54 623.54 T
(]) 368.48 623.54 T
3 F
(=) 281.3 623.54 T
0 0 612 792 C
87 534.59 543 572.55 C
249.5 545.59 380.5 572.55 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 491 283 517 119 26 255.5 545.55 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig1.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig1.ps)
%%CreationDate: (4/14/95) (7:36 AM)
%%BoundingBox: 164 491 283 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
258 503 l
S
u
270.5 493.8076 m
275.5767 493.8076 279.6924 497.9233 279.6924 503 c
279.6924 508.0767 275.5767 512.1924 270.5 512.1924 c
265.4233 512.1924 261.3076 508.0767 261.3076 503 c
261.3076 497.9233 265.4233 493.8076 270.5 493.8076 c
s
270.5 503 m
S
U
0 To
1 0 0 1 270.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 222.5 507 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
261.2588 503 m
254.7075 501.4565 l
256.1138 503 L
254.7075 504.5435 l
261.2588 503 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 534.59 543 572.55 C
0 0 612 792 C
194.52 316.22 223.64 333.4 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(F) 195.52 324.52 T
5 8.5 Q
(c) 202.34 320.35 T
5 10.5 Q
(t) 212.99 324.52 T
6 F
(\050) 208.49 324.52 T
(\051) 216.39 324.52 T
0 0 612 792 C
218.38 241.64 411.62 310.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(F) 219.38 301.61 T
5 8.5 Q
(c) 226.2 297.44 T
5 10.5 Q
(t) 236.85 301.61 T
6 F
(\050) 232.34 301.61 T
(\051) 240.25 301.61 T
3 F
(P) 261.92 301.61 T
(r) 267.76 301.61 T
(o) 271.25 301.61 T
(b) 276.5 301.61 T
5 F
(T) 288.63 301.61 T
(t) 305.48 301.61 T
6 F
(<) 297.09 301.61 T
([) 284.13 301.61 T
(]) 308.88 301.61 T
3 F
(=) 250.75 301.61 T
(P) 261.92 275.78 T
(r) 267.76 275.78 T
(o) 271.25 275.78 T
(b) 276.5 275.78 T
(m) 288.63 275.78 T
(i) 296.8 275.78 T
(n) 299.72 275.78 T
5 F
(T) 313.39 275.78 T
3 8.5 Q
(1) 319.62 271.6 T
5 10.5 Q
(T) 329.12 275.78 T
3 8.5 Q
(2) 335.36 271.6 T
3 10.5 Q
(.) 344.86 275.78 T
(.) 347.49 275.78 T
(.) 350.11 275.78 T
5 F
(T) 357.99 275.78 T
5 8.5 Q
(n) 364.22 271.6 T
6 10.5 Q
(,) 323.88 275.78 T
(,) 339.61 275.78 T
(,) 352.74 275.78 T
({) 307.34 275.78 T
(}) 368.96 275.78 T
5 F
(t) 386.76 275.78 T
6 F
(<) 378.37 275.78 T
3 F
(=) 250.75 275.78 T
(1) 261.92 249.94 T
(P) 277.67 249.94 T
(r) 283.51 249.94 T
(o) 287 249.94 T
(b) 292.25 249.94 T
5 F
(T) 307 249.94 T
3 8.5 Q
(1) 313.24 245.77 T
5 10.5 Q
(t) 328.5 249.94 T
(T) 336.67 249.94 T
3 8.5 Q
(2) 342.91 245.77 T
5 10.5 Q
(t) 358.17 249.94 T
3 F
(.) 366.34 249.94 T
(.) 368.97 249.94 T
(.) 371.59 249.94 T
5 F
(T) 379.47 249.94 T
5 8.5 Q
(n) 385.7 245.77 T
5 10.5 Q
(t) 400.97 249.94 T
6 F
(>) 392.58 249.94 T
(,) 361.09 249.94 T
(,) 374.22 249.94 T
(>) 349.78 249.94 T
(,) 331.42 249.94 T
(>) 320.11 249.94 T
([) 302.5 249.94 T
(]) 404.37 249.94 T
3 F
(\320) 269.79 249.94 T
(=) 250.75 249.94 T
287.62 265.16 284.47 265.16 284.47 287.96 3 L
0.47 H
2 Z
N
284.47 287.96 287.62 287.96 2 L
N
390.17 265.16 393.31 265.16 393.31 287.96 3 L
N
393.31 287.96 390.17 287.96 2 L
N
0 0 612 792 C
243.06 87.37 386.94 209.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(F) 244.56 188.06 T
5 8.5 Q
(c) 251.38 183.89 T
5 10.5 Q
(t) 262.03 188.06 T
6 F
(\050) 257.52 188.06 T
(\051) 265.43 188.06 T
3 F
(1) 287.1 188.06 T
5 8.5 Q
(i) 302.85 173.35 T
3 F
(1) 315.67 173.35 T
(=) 308.04 173.35 T
5 F
(n) 309.26 202.53 T
6 17.5 Q
(\325) 304.18 184.64 T
3 10.5 Q
(P) 329.46 188.06 T
(r) 335.3 188.06 T
(o) 338.8 188.06 T
(b) 344.05 188.06 T
5 F
(T) 356.17 188.06 T
5 8.5 Q
(i) 362.41 183.89 T
5 10.5 Q
(t) 375.79 188.06 T
6 F
(>) 367.4 188.06 T
([) 351.67 188.06 T
(]) 379.19 188.06 T
3 F
(\320) 294.98 188.06 T
(=) 275.93 188.06 T
(1) 287.1 146.7 T
5 8.5 Q
(i) 302.85 131.99 T
3 F
(1) 315.67 131.99 T
(=) 308.04 131.99 T
5 F
(n) 309.26 161.17 T
6 17.5 Q
(\325) 304.18 143.28 T
3 10.5 Q
(e) 332.09 146.7 T
(x) 336.75 146.7 T
(p) 342 146.7 T
6 F
(l) 359.77 146.7 T
5 8.5 Q
(i) 365.94 142.53 T
5 10.5 Q
(t) 368.92 146.7 T
3 F
(\320) 354.12 146.7 T
6 F
(\050) 349.62 146.7 T
(\051) 372.32 146.7 T
3 F
(\320) 294.98 146.7 T
(=) 275.93 146.7 T
(1) 287.1 105.27 T
(e) 302.85 105.27 T
(x) 307.51 105.27 T
(p) 312.76 105.27 T
(\320) 294.98 105.27 T
6 F
(l) 359.21 105.27 T
5 8.5 Q
(i) 365.37 101.1 T
5 10.5 Q
(t) 368.35 105.27 T
5 8.5 Q
(i) 341.09 90.49 T
3 F
(1) 353.91 90.49 T
(=) 346.28 90.49 T
5 F
(n) 347.5 119.82 T
6 17.5 Q
(\345) 343.38 101.91 T
3 10.5 Q
(\320) 335.44 105.27 T
6 F
(\350) 329.18 96.67 T
(\370) 371.75 96.67 T
(\347) 329.18 105.67 T
(\367) 371.75 105.67 T
(\346) 329.18 114.67 T
(\366) 371.75 114.67 T
3 F
(+) 320.64 105.27 T
(=) 275.93 105.27 T
0 0 612 792 C
320.42 61.37 366.93 83.53 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 8.5 Q
0 X
0 0 0 1 0 0 0 K
(i) 337.47 65.49 T
3 F
(1) 350.29 65.49 T
(=) 342.66 65.49 T
5 F
(n) 337.47 76.15 T
6 17.5 Q
(\345) 321.42 66.3 T
6 10.5 Q
(l) 358.28 69.67 T
5 8.5 Q
(i) 364.45 65.49 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 10
%%Page: "5" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(5) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.18 (This technique does not work for parallel redundant systems. The time of failure of a redundant sys-) 105 718.67 P
0.14 (tem is not merely the time that the first component fails.  Such systems will be examined in the follow-) 87 705.67 P
(ing sections.) 87 692.67 T
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
4 10.5 Q
(3.2. Static Redundancy) 105 664.9 T
3 11 Q
-0.03 (The triple modular redundant \050TMR\051 system is one of the simplest fault-tolerant computer architec-) 105 643.96 P
0.03 (tures. The system consists of three computers; all performing exactly the same computations on exactly) 87 630.96 P
0.41 (the same inputs. The computers are assumed to be physically isolated so that a failed computer cannot) 87 617.96 P
-0.21 (affect another working computer. Mathematically, therefore, the computers are assumed to fail indepen-) 87 604.96 P
0.64 (dently. It is further assumed that the outputs are voted prior to being used by the external system \050not) 87 591.96 P
0.21 (included in this model\051, and thus, a single failure does not propagate its erroneous value to the external) 87 578.96 P
0.91 (world. Thus, system failure does not occur until two computers fail. The model of figure 2 describes) 87 565.96 P
(such a system.) 87 552.96 T
-0.09 (State \0501\051 represents the initial condition of three working computers. The transition from state \0501\051 to) 105 467.08 P
-0.06 (state \0502\051 is labeled 3) 87 454.08 P
6 F
-0.06 (l) 175.35 454.08 P
3 F
-0.06 ( to represent the rate at which any one of the three computers fails. Because all the) 181.38 454.08 P
(computers are identical, the failure rate) 87 441.08 T
6 F
(l) 262.03 441.08 T
3 F
(is the same for each computer.) 270.82 441.08 T
-0.23 (The system is in state \0502\051 when one processor has failed. The transition from state \0502\051 to state \0503\051 has) 105 418.98 P
1.49 (rate 2) 87 405.98 P
6 F
1.49 (l) 113.22 405.98 P
3 F
1.49 ( because only two working computers can fail. State \0503\051 represents system failure because a) 119.26 405.98 P
(majority of the computers in the system have failed. The processor failure rate is) 87 392.98 T
6 F
(l) 444.13 392.98 T
3 F
( =  10) 450.17 392.98 T
6 8.8 Q
(-) 475.62 397.38 T
3 F
(4) 480.45 397.38 T
3 11 Q
(/hr.) 484.85 392.98 T
(In figure 3, the probability of system failure as a function of mission time is shown.) 105 370.88 T
(It can be seen that high reliability is strongly dependent on a short mission time.) 87 116.77 T
0.87 (The system was implicitly assumed to start with no failed components \050Probability in state \0501\051 at) 105 95.67 P
1.84 (time 0) 87 82.67 P
1.84 (=) 119.4 82.67 P
1.84 (1\051. This probability is equivalent to assuming perfect maintenance between missions. The) 128.35 82.67 P
(probability of system failure as a function of the processor failure rate) 87 69.67 T
6 F
(l) 397.38 69.67 T
3 F
( is plotted in figure 4.) 403.42 69.67 T
3 9 Q
(Figure 2.  Model of TMR system.) 254.25 494.51 T
(Figure 3.  Failure probability as function of mission time.) 211.63 154.2 T
87 500.51 543 537.3 C
202.5 511.51 427.5 537.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 491 377 517 213 26 208.5 510.85 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig2.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig2.ps)
%%CreationDate: (4/21/95) (12:43 PM)
%%BoundingBox: 164 491 377 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
257.8125 503 l
S
u
270.5 493.8076 m
275.5767 493.8076 279.6924 497.9233 279.6924 503 c
279.6924 508.0767 275.5767 512.1924 270.5 512.1924 c
265.4233 512.1924 261.3076 508.0767 261.3076 503 c
261.3076 497.9233 265.4233 493.8076 270.5 493.8076 c
s
270.5 503 m
S
U
0 To
1 0 0 1 270.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 222.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
279.6875 503 m
351.4375 503 l
S
u
364.6875 493.8076 m
369.7642 493.8076 373.8799 497.9233 373.8799 503 c
373.8799 508.0767 369.7642 512.1924 364.6875 512.1924 c
359.6108 512.1924 355.4951 508.0767 355.4951 503 c
355.4951 497.9233 359.6108 493.8076 364.6875 493.8076 c
s
364.6875 503 m
S
U
0 To
1 0 0 1 364.6875 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 315.25 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
261.3381 503 m
254.7868 501.4565 l
256.1931 503 L
254.7868 504.5435 l
261.3381 503 L
f
U
u
355.5256 503 m
348.9743 501.4565 l
350.3806 503 L
348.9743 504.5435 l
355.5256 503 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 500.51 543 537.3 C
0 0 612 792 C
87 160.2 543 343.21 C
207.5 171.2 422.5 343.21 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 128 363 327 528 199 165 211 172.71 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig3.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig3.ps)
%%CreationDate: (4/20/95) (1:26 PM)
%%BoundingBox: 128 363 327 528
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
177.6 494.376 m
174 494.376 l
S
290.4012 392.45 m
290.4012 395.45 l
S
177.6 517.0263 m
174 517.0263 l
174 392.45 l
309.6014 392.45 l
309.6014 395.45 l
S
271.201 392.45 m
271.201 395.45 l
S
252.1508 392.45 m
252.1508 395.45 l
S
232.2006 392.45 m
232.2006 395.45 l
S
213.1504 392.45 m
213.1504 395.45 l
S
193.6502 392.45 m
193.6502 395.45 l
S
177.6 469.8508 m
174 469.8508 l
S
177.6 444.6505 m
174 444.6505 l
S
177.6 418.7003 m
174 418.7003 l
S
174.15 398.4501 m
217.5004 456.3506 224.1005 464.7507 v
230.7006 473.1508 241.2007 485.3009 245.2507 488.901 c
249.3008 492.501 254.7008 495.201 264.9009 495.201 c
275.101 495.201 309.3014 495.201 y
S
0 To
1 0 0 1 170 515 0 Tp
TP
-13.5 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(10) Tx 
4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 170 491.5 0 Tp
TP
-13.5 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 170 467.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\62) Tx 
(\r) TX 
TO
0 To
1 0 0 1 170 442.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
1 0 0 1 170 416 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
1 0 0 1 170 389.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\3208) Tx 
(\r) TX 
TO
0 To
1 0 0 1 173.5 379.75 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
4 Ts
(0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 191.75 379.75 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 213.25 379.75 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 232.5 379.75 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 252.5 379.75 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 271.5 379.75 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 290.75 379.75 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 310.5 379.75 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.5 365.75 0 Tp
TP
-15.494 0 Td
0 Tr
0 Ts
(Time, hr) Tx 
(\r) TX 
TO
0 To
1 0 0 1 142 457.5 0 Tp
TP
-3.999 0 Td
0 Tr
/_Times-Italic 9 Tf
(P) Tx 
-4 Ts
(f) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 160.2 543 343.21 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 11
%%Page: "6" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(6) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.09 (This probability was calculated for a mission time of 10 hr. Throughout this paper, unless otherwise) 87 531.5 P
(stated, a mission time of 10 hr will be used.) 87 518.5 T
1.25 (The model shown in figure 2 uses the technique of state \322aggregation\323 to reduce the number of) 105 500.28 P
(states. The model in figure 5 also shows a TMR system, but without state aggregation.) 87 487.28 T
1.05 (This model does not take advantage of the inherent symmetry of the system. Each component is) 105 235.83 P
-0.21 (given a separate failure transition. Thus, three transition rates) 87 222.83 P
6 F
-0.21 (l) 357.33 222.83 P
3 8.8 Q
-0.17 (1) 363.37 220.08 P
3 11 Q
-0.21 (,) 367.77 222.83 P
6 F
-0.21 (l) 373.06 222.83 P
3 8.8 Q
-0.17 (2) 379.1 220.08 P
3 11 Q
-0.21 (, and) 383.5 222.83 P
6 F
-0.21 (l) 407.22 222.83 P
3 8.8 Q
-0.17 (3) 413.26 220.08 P
3 11 Q
-0.21 ( are used.  In a TMR system,) 417.66 222.83 P
0.09 (these three rates are all equal because the redundant channels are identical.  A comparison of the model) 87 209.83 P
-0.24 (in figure 2 with the model in figure 5 shows the significant reductions in the number of states that can be) 87 196.83 P
-0.22 (obtained by use of aggregation. Throughout the rest of the report, aggregated models will be used unless) 87 183.83 P
(an asymmetry exists in the system that prevents this usage.) 87 170.83 T
4 10.5 Q
(3.3. Analytic Solution to TMR Model) 105 145.95 T
3 11 Q
0.01 (In this section, the basic technique for solving a Markov model analytically is presented. A detailed) 105 127.89 P
0.48 (understanding of this section is not necessary to understand the rest of this paper. This section may be) 87 114.89 P
(omitted on the first reading.) 87 101.89 T
0.69 (The solution of a Markov model is conceptually simple, although the details can be cumbersome.) 105 82.67 P
1.08 (An) 87 69.67 P
5 F
1.08 (n) 104.28 69.67 P
3 F
1.08 (-state Markov model leads to a system of) 109.78 69.67 P
5 F
1.08 (n) 302.36 69.67 P
3 F
1.08 (-coupled differential equations. These equations can) 307.86 69.67 P
3 9 Q
(Figure 4.  Failure probability as function of) 232.29 563.83 T
6 F
(l.) 390.52 563.83 T
3 F
(Figure 5.  Nonaggregated model of TMR system.) 226.13 270.39 T
87 569.83 543 726 C
209.5 580.83 420.5 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 133 371 336 514 203 143 212 582.17 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig4.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig4.ps)
%%CreationDate: (4/20/95) (1:39 PM)
%%BoundingBox: 133 371 336 514
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
291.5511 401 m
291.5511 404 l
S
186.1 503.526 m
182.5 503.526 l
182.5 401 l
319.0014 401 l
319.0014 404 l
S
263.9508 401 m
263.9508 404 l
S
236.9506 401 m
236.9506 404 l
S
209.9503 401 m
209.9503 404 l
S
186.1 453.6505 m
182.5 453.6505 l
S
0 To
1 0 0 1 178.5 501 0 Tp
TP
-13.5 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(10) Tx 
4 Ts
(0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 178.5 451.5 0 Tp
TP
-22.5 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
1 0 0 1 178.5 397.75 0 Tp
TP
-22.5 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\62\60) Tx 
(\r) TX 
TO
0 To
1 0 0 1 182 388 0 Tp
TP
-11.25 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
4 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
1 0 0 1 211.25 388 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\3208) Tx 
(\r) TX 
TO
0 To
1 0 0 1 237.75 388 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
1 0 0 1 265 388 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292 388 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\62) Tx 
(\r) TX 
TO
0 To
1 0 0 1 320 388 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 251.5 374 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 146.5 453 0 Tp
TP
-3.999 0 Td
0 Tr
/_Times-Italic 9 Tf
(P) Tx 
-4 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
182.5 413.9001 m
273.1009 482.0008 283.001 489.2009 v
292.9011 496.401 300.7012 503.601 311.2013 503.601 c
318.1014 503.601 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 569.83 543 726 C
0 0 612 792 C
87 276.39 543 459.61 C
226.5 287.39 403.5 459.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 416 329 590 165 174 232.5 286.28 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig5.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig5.ps)
%%CreationDate: (4/21/95) (12:45 PM)
%%BoundingBox: 164 416 329 590
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
257.75 503 l
S
u
270.5 493.8076 m
275.5767 493.8076 279.6924 497.9233 279.6924 503 c
279.6924 508.0767 275.5767 512.1924 270.5 512.1924 c
265.4233 512.1924 261.3076 508.0767 261.3076 503 c
261.3076 497.9233 265.4233 493.8076 270.5 493.8076 c
s
270.5 503 m
S
U
0 To
1 0 0 1 270.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 220.75 539.75 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 Ts
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
270.5 550.3076 m
275.5767 550.3076 279.6924 554.4233 279.6924 559.5 c
279.6924 564.5767 275.5767 568.6924 270.5 568.6924 c
265.4233 568.6924 261.3076 564.5767 261.3076 559.5 c
261.3076 554.4233 265.4233 550.3076 270.5 550.3076 c
s
270.5 559.5 m
S
U
0 To
1 0 0 1 270.5 556 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
315.25 568.8076 m
320.3267 568.8076 324.4424 572.9233 324.4424 578 c
324.4424 583.0767 320.3267 587.1924 315.25 587.1924 c
310.1733 587.1924 306.0576 583.0767 306.0576 578 c
306.0576 572.9233 310.1733 568.8076 315.25 568.8076 c
s
315.25 578 m
S
U
0 To
1 0 0 1 315.25 574.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
315.25 555.1924 m
320.3267 555.1924 324.4424 551.0767 324.4424 546 c
324.4424 540.9233 320.3267 536.8076 315.25 536.8076 c
310.1733 536.8076 306.0576 540.9233 306.0576 546 c
306.0576 551.0767 310.1733 555.1924 315.25 555.1924 c
s
315.25 546 m
S
U
0 To
1 0 0 1 315.25 544 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
183.75 509 m
259.8314 552.5782 l
S
278 565 m
302.8579 572.9288 l
S
279.1621 556.1137 m
302.7611 550.6758 l
S
u
270.5 455.6924 m
275.5767 455.6924 279.6924 451.5767 279.6924 446.5 c
279.6924 441.4233 275.5767 437.3076 270.5 437.3076 c
265.4233 437.3076 261.3076 441.4233 261.3076 446.5 c
261.3076 451.5767 265.4233 455.6924 270.5 455.6924 c
s
270.5 446.5 m
S
U
u
315.25 437.1924 m
320.3267 437.1924 324.4424 433.0767 324.4424 428 c
324.4424 422.9233 320.3267 418.8076 315.25 418.8076 c
310.1733 418.8076 306.0576 422.9233 306.0576 428 c
306.0576 433.0767 310.1733 437.1924 315.25 437.1924 c
s
315.25 428 m
S
U
u
315.25 450.8076 m
320.3267 450.8076 324.4424 454.9233 324.4424 460 c
324.4424 465.0767 320.3267 469.1924 315.25 469.1924 c
310.1733 469.1924 306.0576 465.0767 306.0576 460 c
306.0576 454.9233 310.1733 450.8076 315.25 450.8076 c
s
315.25 460 m
S
U
183.75 497 m
259.5881 453.5611 l
S
278 441 m
304.8908 432.4227 l
S
279.1621 449.8863 m
303.8032 455.5643 l
S
u
315.25 512.0576 m
320.3267 512.0576 324.4424 516.1733 324.4424 521.25 c
324.4424 526.3267 320.3267 530.4424 315.25 530.4424 c
310.1733 530.4424 306.0576 526.3267 306.0576 521.25 c
306.0576 516.1733 310.1733 512.0576 315.25 512.0576 c
s
315.25 521.25 m
S
U
0 To
1 0 0 1 315.25 517.75 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
315.25 498.4424 m
320.3267 498.4424 324.4424 494.3267 324.4424 489.25 c
324.4424 484.1733 320.3267 480.0576 315.25 480.0576 c
310.1733 480.0576 306.0576 484.1733 306.0576 489.25 c
306.0576 494.3267 310.1733 498.4424 315.25 498.4424 c
s
315.25 489.25 m
S
U
0 To
1 0 0 1 315.25 487.25 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
278 508.25 m
304.4772 516.6953 l
S
279.1621 499.3637 m
304.5327 493.5176 l
S
0 To
1 0 0 1 270.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 315.25 457.75 0 Tp
TP
-2.25 0 Td
0 Tr
(9) Tx 
(\r) TX 
TO
0 To
1 0 0 1 315.25 425 0 Tp
TP
-4.5 0 Td
0 Tr
(10) Tx 
(\r) TX 
TO
0 To
1 0 0 1 220.75 508.5 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 220.75 480.75 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292.75 576.75 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292.75 557.75 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292.75 519.25 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292.75 501.25 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292.75 459.25 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292.75 441.25 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
261.3381 503 m
254.7868 501.4565 l
256.1931 503 L
254.7868 504.5435 l
261.3381 503 L
f
U
u
262.8557 554.3498 m
257.9551 549.7362 l
258.4007 551.7762 L
256.4109 552.4092 l
262.8557 554.3498 L
f
U
u
262.8303 451.5084 m
256.4163 453.5487 l
258.4157 454.1508 L
258.0018 456.1974 l
262.8303 451.5084 L
f
U
u
306.8506 574.1048 m
301.042 570.7045 l
301.9327 572.5931 L
300.1349 573.6552 l
306.8506 574.1048 L
f
U
u
306.7354 549.8071 m
300.0049 549.762 l
301.7197 550.9534 L
300.6926 552.7714 l
306.7354 549.8071 L
f
U
u
306.8506 517.3548 m
301.042 513.9545 l
301.9327 515.8431 L
300.1349 516.9052 l
306.8506 517.3548 L
f
U
u
306.7354 493.0571 m
300.0049 493.012 l
301.7197 494.2034 L
300.6926 496.0214 l
306.7354 493.0571 L
f
U
u
306.8506 456.6048 m
301.042 453.2045 l
301.9327 455.0931 L
300.1349 456.1552 l
306.8506 456.6048 L
f
U
u
306.7354 432.3071 m
300.0049 432.262 l
301.7197 433.4534 L
300.6926 435.2714 l
306.7354 432.3071 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 276.39 543 459.61 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 12
%%Page: "7" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(7) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.17 (most simply be represented with vector notation. Let) 87 718.67 P
-0.17 ( be a vector that gives the probability of being) 342.01 718.67 P
(in each state at time) 87 705.67 T
5 F
(t) 177.12 705.67 T
3 F
(. For the three-state Markov model in figure 2) 180.18 705.67 T
(The system of differential equations is given by) 87 651.38 T
(where) 87 600.76 T
(In nonmatrix form) 87 512.35 T
0.52 (The matrix) 87 404.24 P
4 F
0.52 (A) 139.37 404.24 P
3 F
0.52 ( is easily constructed by thinking of the Markov model in terms of flow in and flow out.) 147.31 404.24 P
0.49 (One begins with the off-diagonal components.  Because there is a transition from state \0501\051 to state) 87 391.24 P
0.49 (\0502\051,) 527.42 391.24 P
0.67 (the entry at) 87 378.24 P
5 F
0.67 ( a) 137.82 378.24 P
3 8.8 Q
0.53 (12) 146.74 375.49 P
3 11 Q
0.67 (is nonzero. The value of) 163.73 378.24 P
5 F
0.67 (a) 276.42 378.24 P
3 8.8 Q
0.53 (12) 281.92 375.49 P
3 11 Q
0.67 ( is the transition rate 3) 290.72 378.24 P
6 F
0.67 (l) 392.12 378.24 P
3 F
0.67 (. The transition from state \0502\051 to) 398.16 378.24 P
0.54 (state \0503\051 leads to the only other nonzero \050nondiagonal\051 entry,) 87 365.24 P
5 F
0.54 (a) 362.15 365.24 P
3 8.8 Q
0.43 (23) 367.65 362.49 P
3 11 Q
0.54 (. Its value is 2) 376.45 365.24 P
6 F
0.54 (l) 440.03 365.24 P
3 F
0.54 (. The diagonal entries) 446.06 365.24 P
0.2 (are obtained by summing all  nondiagonal entries on the same row and negating it. The solution can be) 87 352.24 P
(written as) 87 339.24 T
0.56 (The solution requires knowledge of the initial state probabilities) 87 283.64 P
0.56 (. If the system begins in a fault-) 399.76 283.64 P
(free state, this is given by) 87 270.64 T
(If the model is changed as shown in figure 6, the matrix) 105 220.03 T
4 F
( A) 350.63 220.03 T
3 F
(becomes) 364.07 220.03 T
3 9 Q
(Figure 6.  Altered model.) 269.51 69 T
320.56 714.04 342.01 727.54 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 321.56 718.67 T
(t) 334.86 718.67 T
6 F
(\050) 330.35 718.67 T
(\051) 338.26 718.67 T
0 0 612 792 C
244.93 671.77 385.07 688.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 245.93 680.07 T
(t) 259.22 680.07 T
6 F
(\050) 254.72 680.07 T
(\051) 262.62 680.07 T
5 F
(p) 290.55 680.07 T
3 8.5 Q
(1) 296.2 675.89 T
5 10.5 Q
(t) 307.33 680.07 T
6 F
(\050) 302.83 680.07 T
(\051) 310.73 680.07 T
5 F
(p) 321.23 680.07 T
3 8.5 Q
(2) 326.88 675.89 T
5 10.5 Q
(t) 338.01 680.07 T
6 F
(\050) 333.5 680.07 T
(\051) 341.41 680.07 T
5 F
(p) 351.91 680.07 T
3 8.5 Q
(3) 357.56 675.89 T
5 10.5 Q
(t) 368.68 680.07 T
6 F
(\050) 364.18 680.07 T
(\051) 372.09 680.07 T
(,) 315.98 680.07 T
(,) 346.66 680.07 T
([) 286.05 680.07 T
(]) 377.82 680.07 T
3 F
(=) 273.12 680.07 T
0 0 612 792 C
277.64 621.15 352.36 634.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 278.64 625.78 T
6 F
(\242) 285.67 625.78 T
5 F
(t) 295.14 625.78 T
6 F
(\050) 290.64 625.78 T
(\051) 298.55 625.78 T
5 F
(P) 320.22 625.78 T
(t) 333.51 625.78 T
6 F
(\050) 329.01 625.78 T
(\051) 336.91 625.78 T
4 F
(A) 342.78 625.78 T
3 F
(=) 309.05 625.78 T
0 0 612 792 C
254.71 532.74 375.29 584.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(A) 255.71 556.62 T
3 F
(3) 290.03 568.86 T
6 F
(l) 295.9 568.86 T
3 F
(\320) 284.38 568.86 T
(3) 325.23 568.86 T
6 F
(l) 331.1 568.86 T
3 F
(0) 357.62 568.86 T
(0) 290.08 554.16 T
(2) 325.74 554.16 T
6 F
(l) 331.61 554.16 T
3 F
(\320) 320.09 554.16 T
(2) 357.93 554.16 T
6 F
(l) 363.8 554.16 T
3 F
(0) 290.08 539.46 T
(0) 326.11 539.46 T
(0) 357.62 539.46 T
(=) 268.54 556.62 T
284.96 536.84 281.81 536.84 281.81 580.93 3 L
0.47 H
2 Z
N
281.81 580.93 284.96 580.93 2 L
N
368.05 536.84 371.19 536.84 371.19 580.93 3 L
N
371.19 580.93 368.05 580.93 2 L
N
0 0 612 792 C
247.9 424.64 382.1 495.62 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 248.9 481.76 T
3 8.5 Q
(1) 255.71 477.58 T
6 F
(\242) 255.71 485.75 T
5 10.5 Q
(t) 266.84 481.76 T
6 F
(\050) 262.33 481.76 T
(\051) 270.24 481.76 T
3 F
(3) 297.56 481.76 T
6 F
(l) 303.43 481.76 T
5 F
(P) 309.81 481.76 T
3 8.5 Q
(1) 316.63 477.58 T
5 10.5 Q
(t) 327.75 481.76 T
6 F
(\050) 323.25 481.76 T
(\051) 331.16 481.76 T
3 F
(\320) 291.91 481.76 T
(=) 280.74 481.76 T
5 F
(P) 248.9 457.35 T
3 8.5 Q
(2) 255.71 453.17 T
6 F
(\242) 255.71 461.33 T
5 10.5 Q
(t) 266.84 457.35 T
6 F
(\050) 262.33 457.35 T
(\051) 270.24 457.35 T
3 F
(3) 291.91 457.35 T
6 F
(l) 297.78 457.35 T
5 F
(P) 304.16 457.35 T
3 8.5 Q
(1) 310.98 453.17 T
5 10.5 Q
(t) 322.11 457.35 T
6 F
(\050) 317.6 457.35 T
(\051) 325.51 457.35 T
3 F
(2) 341.26 457.35 T
6 F
(l) 347.12 457.35 T
5 F
(P) 353.51 457.35 T
3 8.5 Q
(2) 360.32 453.17 T
5 10.5 Q
(t) 371.45 457.35 T
6 F
(\050) 366.95 457.35 T
(\051) 374.85 457.35 T
3 F
(\320) 333.38 457.35 T
(=) 280.74 457.35 T
5 F
(P) 248.9 432.94 T
3 8.5 Q
(3) 255.71 428.76 T
6 F
(\242) 255.71 436.92 T
5 10.5 Q
(t) 266.84 432.94 T
6 F
(\050) 262.33 432.94 T
(\051) 270.24 432.94 T
3 F
(2) 291.91 432.94 T
6 F
(l) 297.78 432.94 T
5 F
(P) 304.16 432.94 T
3 8.5 Q
(2) 310.98 428.76 T
5 10.5 Q
(t) 322.11 432.94 T
6 F
(\050) 317.6 432.94 T
(\051) 325.51 432.94 T
3 F
(=) 280.74 432.94 T
0 0 612 792 C
274.76 304.03 355.24 322.52 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 275.76 308.66 T
(t) 289.06 308.66 T
6 F
(\050) 284.55 308.66 T
(\051) 292.46 308.66 T
5 F
(P) 314.13 308.66 T
3 F
(0) 327.42 308.66 T
6 F
(\050) 322.92 308.66 T
(\051) 333.15 308.66 T
5 F
(e) 339.02 308.66 T
4 8.5 Q
(A) 344.08 315.14 T
5 F
(t) 350.87 315.14 T
3 10.5 Q
(=) 302.96 308.66 T
0 0 612 792 C
376.49 279.02 399.76 292.52 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 377.49 283.64 T
3 F
(0) 390.78 283.64 T
6 F
(\050) 386.28 283.64 T
(\051) 396.52 283.64 T
0 0 612 792 C
274.03 240.42 355.97 253.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 275.03 245.04 T
3 F
(0) 288.33 245.04 T
6 F
(\050) 283.82 245.04 T
(\051) 294.06 245.04 T
3 F
(1) 321.99 245.04 T
(0) 332.48 245.04 T
(0) 342.98 245.04 T
6 F
(,) 327.24 245.04 T
(,) 337.73 245.04 T
([) 317.48 245.04 T
(]) 348.72 245.04 T
3 F
(=) 304.56 245.04 T
0 0 612 792 C
242.02 152 387.97 203.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(A) 243.02 175.88 T
3 F
(3) 277.35 188.13 T
6 F
(l) 283.22 188.13 T
3 F
(\320) 271.7 188.13 T
(3) 318.42 188.13 T
6 F
(l) 324.29 188.13 T
3 F
(0) 369.56 188.13 T
6 F
(a) 279.96 173.43 T
3 F
(2) 315.42 173.43 T
6 F
(l) 321.29 173.43 T
3 F
(\320) 307.54 173.43 T
6 F
(a) 337.55 173.43 T
3 F
(\320) 329.68 173.43 T
(2) 370.61 173.43 T
6 F
(l) 376.48 173.43 T
3 F
(0) 280.65 158.73 T
(0) 320.61 158.73 T
(0) 369.56 158.73 T
(=) 255.85 175.88 T
272.27 156.1 269.13 156.1 269.13 200.2 3 L
0.47 H
2 Z
N
269.13 200.2 272.27 200.2 2 L
N
380.73 156.1 383.88 156.1 383.88 200.2 3 L
N
383.88 200.2 380.73 200.2 2 L
N
0 0 612 792 C
87 75 543 128 C
202.5 86 427.5 128 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 473 377 583 213 110 208.5 85.34 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig6.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig6.ps)
%%CreationDate: (4/21/95) (1:37 PM)
%%BoundingBox: 164 473 377 583
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
258 503 l
S
u
270.5 493.8076 m
275.5767 493.8076 279.6924 497.9233 279.6924 503 c
279.6924 508.0767 275.5767 512.1924 270.5 512.1924 c
265.4233 512.1924 261.3076 508.0767 261.3076 503 c
261.3076 497.9233 265.4233 493.8076 270.5 493.8076 c
s
270.5 503 m
S
U
0 To
1 0 0 1 270.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 222.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
261.2588 503 m
254.7075 501.4565 l
256.1138 503 L
254.7075 504.5435 l
261.2588 503 L
f
U
0 R
0 G
0.75 w
280 503 m
352.5 503 l
S
u
365 493.8076 m
370.0767 493.8076 374.1924 497.9233 374.1924 503 c
374.1924 508.0767 370.0767 512.1924 365 512.1924 c
359.9233 512.1924 355.8076 508.0767 355.8076 503 c
355.8076 497.9233 359.9233 493.8076 365 493.8076 c
s
365 503 m
S
U
0 To
1 0 0 1 365 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 317 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
355.7588 503 m
349.2075 501.4565 l
350.6138 503 L
349.2075 504.5435 l
355.7588 503 L
f
U
0 To
1 0 0 1 222.5 487 0 Tp
TP
-2.8389 0 Td
0 Tr
(a) Tx 
(\r) TX 
TO
u
178.6926 494.0423 m
184.8832 491.4007 l
182.8356 490.9916 L
183.0529 488.9149 l
178.6926 494.0423 L
f
U
0 R
0 G
0.5 w
180.2008 492.9443 m
192.0873 482.2987 207.7877 475.8249 225 475.8249 c
242.5938 475.8249 258.6081 482.5889 270.5841 493.6584 c
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 75 543 128 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 13
%%Page: "8" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(8) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(The three equations become) 87 718.67 T
1.91 (The flow-in and flow-out relationship is clearly seen in these equations. The total flow out of) 105 619.58 P
1.79 (state) 87 606.58 P
1.79 (\0501\051,) 109.91 606.58 P
1.79 (, is given by) 155.62 606.58 P
6 F
1.79 (-) 219.3 606.58 P
3 F
1.79 (3) 225.34 606.58 P
6 F
1.79 (l) 230.84 606.58 P
5 F
1.79 (P) 241.41 606.58 P
3 8.8 Q
1.43 (1) 248.14 603.83 P
3 11 Q
1.79 (\050) 252.54 606.58 P
5 F
1.79 (t) 256.2 606.58 P
3 F
1.79 (\051 +) 259.26 606.58 P
6 F
1.79 (a) 278.2 606.58 P
5 F
1.79 (P) 289.68 606.58 P
3 8.8 Q
1.43 (2) 296.4 603.83 P
3 11 Q
1.79 (\050) 300.8 606.58 P
5 F
1.79 (t) 304.46 606.58 P
3 F
1.79 (\051. There is 3) 307.52 606.58 P
6 F
1.79 (l) 366.04 606.58 P
5 F
1.79 (P) 372.08 606.58 P
3 8.8 Q
1.43 (1) 378.8 603.83 P
3 11 Q
1.79 (\050) 383.2 606.58 P
5 F
1.79 (t) 386.86 606.58 P
3 F
1.79 (\051 out of state \0501\051 and) 389.92 606.58 P
6 F
1.79 (a) 492.9 606.58 P
5 F
1.79 (P) 499.84 606.58 P
3 8.8 Q
1.43 (2) 506.56 603.83 P
3 11 Q
1.79 (\050) 510.96 606.58 P
5 F
1.79 (t) 514.62 606.58 P
3 F
1.79 (\051 into) 517.68 606.58 P
(state) 87 593.58 T
(\0501\051. Thus, the signs of the terms are) 109.91 593.58 T
6 F
(-) 268.77 593.58 T
3 F
( and +, respectively.) 274.81 593.58 T
(For more detailed information about the solution of Markov models, see reference 7.) 105 574.03 T
4 10.5 Q
(3.4. N-Modular) 105 548.81 T
(-Redundant System) 173.73 548.81 T
3 11 Q
-0.22 (The assumptions of an) 105 530.43 P
5 F
-0.22 (N) 206.18 530.43 P
3 F
-0.22 (-modular-redundant system are the same as  a TMR system. The voter used) 213.52 530.43 P
-0.24 (in such a system is usually a majority voter.  As long as a majority of processors have not failed, the sys-) 87 517.43 P
-0.07 (tem is still operational. The following model shown in figure 7 describes a seven-processor system with) 87 504.43 P
0.53 (seven-way voting. The probability of system failure as a function of mission time is given in figure 8.) 87 491.43 P
(Figure 9 shows the unreliability of an NMR system as a function of) 87 478.43 T
5 F
(N) 386.73 478.43 T
3 F
(.) 394.07 478.43 T
-0.15 (Theoretically, the probability of system failure approaches zero as) 105 179.77 P
5 F
-0.15 (N) 397.56 179.77 P
3 F
-0.15 ( approaches infinity. Of course,) 404.9 179.77 P
0.05 (this model ignores the practical problem of building an arbitrarily large) 87 166.77 P
5 F
0.05 (N) 403.78 166.77 P
3 F
0.05 (-way voter. If implemented in) 411.12 166.77 P
1.08 (hardware, the additional hardware would significantly increase the processor failure rate) 87 153.77 P
6 F
1.08 (l) 490.5 153.77 P
3 F
1.08 (. If imple-) 496.54 153.77 P
0.71 (mented in software, the CPU overhead could be enormous, which would seriously increase the likeli-) 87 140.77 P
(hood of a critical task missing a hard deadline \050ref. 8\051.) 87 127.77 T
4 12 Q
(4. Modeling Recon\336gurable Systems) 87 101.55 T
3 11 Q
1.1 (Fault-tolerant systems are often designed by using a strategy of reconfiguration. Reconfiguration) 105 82.67 P
1.1 (strategies come in many varieties, but always involve the logical or the physical removal of a faulty) 87 69.67 P
3 9 Q
(Figure 7.  Model of 7MR system.) 254.75 419.42 T
0.08 (Figure 8.  The 7MR system unreliability as function of mis-) 87 227.65 P
(sion time.) 96 216.65 T
(Figure 9.  The NMR system unreliability as function) 335.13 227.65 T
5 F
(N) 526.62 227.65 T
3 F
(.) 532.62 227.65 T
233 635.46 396.99 706.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 234.01 692.59 T
3 8.5 Q
(1) 240.82 688.41 T
6 F
(\242) 240.82 696.57 T
5 10.5 Q
(t) 251.95 692.59 T
6 F
(\050) 247.44 692.59 T
(\051) 255.35 692.59 T
3 F
(3) 282.67 692.59 T
6 F
(l) 288.54 692.59 T
5 F
(P) 294.92 692.59 T
3 8.5 Q
(1) 301.73 688.41 T
5 10.5 Q
(t) 312.86 692.59 T
6 F
(\050) 308.36 692.59 T
(\051) 316.26 692.59 T
(a) 332.68 692.59 T
5 F
(P) 339.93 692.59 T
3 8.5 Q
(2) 346.74 688.41 T
5 10.5 Q
(t) 357.87 692.59 T
6 F
(\050) 353.37 692.59 T
(\051) 361.27 692.59 T
3 F
(+) 324.14 692.59 T
(\320) 277.02 692.59 T
(=) 265.85 692.59 T
5 F
(P) 234.01 668.17 T
3 8.5 Q
(2) 240.82 664 T
6 F
(\242) 240.82 672.16 T
5 10.5 Q
(t) 251.95 668.17 T
6 F
(\050) 247.44 668.17 T
(\051) 255.35 668.17 T
3 F
(3) 277.02 668.17 T
6 F
(l) 282.89 668.17 T
5 F
(P) 289.27 668.17 T
3 8.5 Q
(1) 296.08 664 T
5 10.5 Q
(t) 307.21 668.17 T
6 F
(\050) 302.71 668.17 T
(\051) 310.61 668.17 T
3 F
(2) 332.62 668.17 T
6 F
(l) 338.49 668.17 T
(a) 355.42 668.17 T
3 F
(+) 346.88 668.17 T
6 F
(\050) 328.12 668.17 T
(\051) 362.53 668.17 T
5 F
(P) 368.4 668.17 T
3 8.5 Q
(2) 375.22 664 T
5 10.5 Q
(t) 386.34 668.17 T
6 F
(\050) 381.84 668.17 T
(\051) 389.75 668.17 T
3 F
(\320) 318.49 668.17 T
(=) 265.85 668.17 T
5 F
(P) 234.01 643.76 T
3 8.5 Q
(3) 240.82 639.59 T
6 F
(\242) 240.82 647.75 T
5 10.5 Q
(t) 251.95 643.76 T
6 F
(\050) 247.44 643.76 T
(\051) 255.35 643.76 T
3 F
(2) 277.02 643.76 T
6 F
(l) 282.89 643.76 T
5 F
(P) 289.27 643.76 T
3 8.5 Q
(2) 296.08 639.59 T
5 10.5 Q
(t) 307.21 643.76 T
6 F
(\050) 302.71 643.76 T
(\051) 310.61 643.76 T
3 F
(=) 265.85 643.76 T
0 0 612 792 C
130.03 598.28 155.62 620.44 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 131.03 606.58 T
3 8.5 Q
(1) 137.84 602.41 T
6 F
(\242) 137.84 610.57 T
5 10.5 Q
(t) 148.97 606.58 T
6 F
(\050) 144.46 606.58 T
(\051) 152.37 606.58 T
0 0 612 792 C
87 425.42 543 462.76 C
160 436.42 470 462.76 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 491 462 517 298 26 166 436.32 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig7.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig7.ps)
%%CreationDate: (4/14/95) (11:17 AM)
%%BoundingBox: 164 491 462 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
232 503 l
S
u
244.5 493.8076 m
249.5767 493.8076 253.6924 497.9233 253.6924 503 c
253.6924 508.0767 249.5767 512.1924 244.5 512.1924 c
239.4233 512.1924 235.3076 508.0767 235.3076 503 c
235.3076 497.9233 239.4233 493.8076 244.5 493.8076 c
s
244.5 503 m
S
U
0 To
1 0 0 1 244.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 212 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(7) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
235.2588 503 m
228.7075 501.4565 l
230.1138 503 L
228.7075 504.5435 l
235.2588 503 L
f
U
0 R
0 G
0.75 w
254 503 m
300.5 503 l
S
u
313 493.8076 m
318.0767 493.8076 322.1924 497.9233 322.1924 503 c
322.1924 508.0767 318.0767 512.1924 313 512.1924 c
307.9233 512.1924 303.8076 508.0767 303.8076 503 c
303.8076 497.9233 307.9233 493.8076 313 493.8076 c
s
313 503 m
S
U
0 To
1 0 0 1 313 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 275.25 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(6) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
303.7588 503 m
297.2075 501.4565 l
298.6138 503 L
297.2075 504.5435 l
303.7588 503 L
f
U
0 R
0 G
0.75 w
322.25 503 m
368.75 503 l
S
u
381.25 493.8076 m
386.3267 493.8076 390.4424 497.9233 390.4424 503 c
390.4424 508.0767 386.3267 512.1924 381.25 512.1924 c
376.1733 512.1924 372.0576 508.0767 372.0576 503 c
372.0576 497.9233 376.1733 493.8076 381.25 493.8076 c
s
381.25 503 m
S
U
0 To
1 0 0 1 381.25 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 344.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(5) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
372.0088 503 m
365.4575 501.4565 l
366.8638 503 L
365.4575 504.5435 l
372.0088 503 L
f
U
0 R
0 G
0.75 w
390.5 503 m
437 503 l
S
u
449.5 493.8076 m
454.5767 493.8076 458.6924 497.9233 458.6924 503 c
458.6924 508.0767 454.5767 512.1924 449.5 512.1924 c
444.4233 512.1924 440.3076 508.0767 440.3076 503 c
440.3076 497.9233 444.4233 493.8076 449.5 493.8076 c
s
449.5 503 m
S
U
0 To
1 0 0 1 449.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 412.75 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
440.2588 503 m
433.7075 501.4565 l
435.1138 503 L
433.7075 504.5435 l
440.2588 503 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 425.42 543 462.76 C
0 0 612 792 C
87 233.65 303 394.42 C
87 244.65 303 394.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 196 476 415 626 219 150 85.5 244.54 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig8.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig8.ps)
%%CreationDate: (4/17/95) (6:38 AM)
%%BoundingBox: 196 476 415 626
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 125.5 96 486.5 696
%AI3_TemplateFile: hammer510::1945:t-8,9
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
376.3016 500.188 m
376.3016 503.188 l
S
248.2003 616.0642 m
244.6003 616.0642 l
244.6003 500.188 l
398.6518 500.188 l
398.6518 503.188 l
S
353.9514 500.188 m
353.9514 503.188 l
S
332.3512 500.188 m
332.3512 503.188 l
S
310.6009 500.188 m
310.6009 503.188 l
S
288.7007 500.188 m
288.7007 503.188 l
S
266.3505 500.188 m
266.3505 503.188 l
S
248.2003 558.3886 m
244.6003 558.3886 l
S
0 To
0.6 0 0 0.6 242.2002 613.7391 0 Tp
TP
-22.4998 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 242.2002 556.1385 0 Tp
TP
-37.4996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 242.2002 498.238 0 Tp
TP
-37.4996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\62\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 244.3003 486.3879 0 Tp
TP
-11.2499 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
6.6666 Ts
(0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 266.0505 486.3879 0 Tp
TP
-11.2499 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(1) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 288.4007 486.3879 0 Tp
TP
-11.2499 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(2) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 310.6009 486.3879 0 Tp
TP
-11.2499 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(3) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 332.2012 486.3879 0 Tp
TP
-11.2499 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(4) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 353.9514 486.3879 0 Tp
TP
-11.2499 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(5) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 376.1516 486.3879 0 Tp
TP
-11.2499 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(6) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 398.5018 486.3879 0 Tp
TP
-11.2499 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(7) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 321.5511 477.9878 0 Tp
TP
-25.8231 0 Td
0 Tr
0 Ts
(Time, hr) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 209.8 557.9386 0 Tp
TP
-6.665 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
244.4992 532.3998 m
306.2998 596.0004 312.2999 602.0005 v
318.2999 608.0005 325.2 616.1006 343.5002 616.1006 c
361.8004 616.1006 399.3008 616.1006 y
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 233.65 303 394.42 C
0 0 612 792 C
327 233.65 543 394.42 C
327 245.31 543 394.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 188 162 392 300 204 138 333 245.31 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig9.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig9.ps)
%%CreationDate: (4/21/95) (1:37 PM)
%%BoundingBox: 188 162 392 300
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
357.7017 186.188 m
357.7017 189.188 l
S
244.9005 289.1641 m
241.3005 289.1641 l
241.3005 186.188 l
376.9019 186.188 l
376.9019 189.188 l
S
338.5015 186.188 m
338.5015 189.188 l
S
319.4513 186.188 m
319.4513 189.188 l
S
299.5011 186.188 m
299.5011 189.188 l
S
280.4509 186.188 m
280.4509 189.188 l
S
260.9507 186.188 m
260.9507 189.188 l
S
244.9005 254.5887 m
241.3005 254.5887 l
S
244.9005 220.8384 m
241.3005 220.8384 l
S
0 To
0.6 0 0 0.6 238.9004 287.739 0 Tp
TP
-22.4997 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 238.9004 252.0387 0 Tp
TP
-37.4995 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 238.9004 218.7383 0 Tp
TP
-37.4995 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\62\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 238.9004 184.238 0 Tp
TP
-37.4995 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\63\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 241.0005 175.3879 0 Tp
TP
-3.75 0 Td
0 Tr
0 Ts
1 Ta
(2) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 260.6507 175.3879 0 Tp
TP
-3.75 0 Td
0 Tr
(4) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 280.1509 175.3879 0 Tp
TP
-3.75 0 Td
0 Tr
(6) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 299.5011 175.3879 0 Tp
TP
-3.75 0 Td
0 Tr
(8) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 319.3013 175.3879 0 Tp
TP
-7.4999 0 Td
0 Tr
(10) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 338.5015 175.3879 0 Tp
TP
-7.4999 0 Td
0 Tr
(12) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 357.5517 175.3879 0 Tp
TP
-7.4999 0 Td
0 Tr
(14) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 377.5019 175.3879 0 Tp
TP
-7.4999 0 Td
0 Tr
(16) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 308.6012 164.4878 0 Tp
TP
-5.0024 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
14.9998 0 Tl
(N) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 201.3503 237.9885 0 Tp
TP
-6.6649 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
14.9998 0 Tl
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
251.9995 270.0003 m
368.4007 218.9998 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
327 233.65 543 394.42 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 14
%%Page: "9" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(9) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.08 (component. The techniques that are used to identify the faulty component and the methods that are used) 87 718.67 P
0.18 (to repair the system vary greatly and can lead to complex reliability models. Two basic reconfiguration) 87 705.67 P
0.63 (strategies occur\321degradation and replacement with spares. The degradation method involves the per-) 87 692.67 P
0.2 (manent removal of a faulty component without replacement. The reconfigured system continues with a) 87 679.67 P
0.95 (reduced set of components. The replacement with spares method involves both the removal of faulty) 87 666.67 P
-0.17 (components and their replacement with a spare. In this section, these concepts will be introduced briefly) 87 653.67 P
(and explored in greater detail in later sections.) 87 640.67 T
4 10.5 Q
(4.1. Degradable T) 105 615.48 T
(riad) 184.14 615.48 T
3 11 Q
0.58 (The simplest architecture based upon majority voting is the triplex system. To increase reliability,) 105 597.14 P
1.52 (triplex systems have been designed that reconfigure by degradation. The model shown in figure 10) 87 584.14 P
(describes the behavior of a simple degradable triplex system.) 87 571.14 T
0.58 (The degradable triplex system begins in state \0501\051 with all three processors operational. The transi-) 105 362.18 P
0.3 (tion from state \0501\051 to state \0502\051 represents the failure of any of the three processors. Because the proces-) 87 349.18 P
0.14 (sors are identical,  the failure of each processor is not represented with a separate state. At state \0502\051, the) 87 336.18 P
0.15 (system has one failed processor. The system analyzes the errors from the voter and diagnoses the prob-) 87 323.18 P
0.15 (lem. The transition from state \0502\051 to state \0504\051 represents the removal \050reconfiguration\051 of the faulty pro-) 87 310.18 P
0.19 (cessor. Reconfiguration transitions are labeled with a distribution function \050) 87 297.18 P
5 F
0.19 (F) 421.71 297.18 P
3 F
0.19 (\050) 428.44 297.18 P
5 F
0.19 (t) 432.1 297.18 P
3 F
0.19 (\051\051 rather than a rate. The) 435.16 297.18 P
0.93 (reason for this labeling is that experimental measurement of the reconfiguration process has revealed) 87 284.18 P
0.38 (that the distribution of recovery time is not exponential \050ref. 6\051. Consequently, the transition cannot be) 87 271.18 P
1.17 (described by a constant rate. This label is interpreted as the probability that the transition time from) 87 258.18 P
1 (state) 87 245.18 P
1 (\0502\051 to state \0504\051 is less than) 109.91 245.18 P
5 F
1 (t) 233.32 245.18 P
3 F
1 ( is) 236.37 245.18 P
5 F
1 (F\050t\051) 251.21 245.18 P
3 F
1 (. The presence of a nonexponential transition generalizes the) 268.32 245.18 P
0.83 (mathematical model to the class of semi-Markov models. Such models are far more difficult to solve) 87 232.18 P
0.06 (than pure Markov models. In sections 5 and 8, several computer programs will be discussed that can be) 87 219.18 P
(used to solve Markov and semi-Markov models.) 87 206.18 T
1.87 (At state \0504\051, the system is operational with two good processors. The recovery transition from) 105 186.67 P
0.15 (state) 87 173.67 P
0.15 (\0502\051 to state \0504\051 occurs as long as a second processor does not fail before the diagnosis is complete.) 109.91 173.67 P
-0.2 (Otherwise, the voter could not distinguish the good results from the bad. Thus, a second transition exists) 87 160.67 P
0.01 (from state \0502\051 to state \0503\051, which represents the coincident failure of a second processor. The rate of this) 87 147.67 P
0.35 (transition is 2) 87 134.67 P
6 F
0.35 (l) 147.6 134.67 P
3 F
0.35 (, because either of the remaining two processors could fail. State \0503\051 is a death state \050an) 153.64 134.67 P
0.4 (absorbing state\051 that represents failure of the system due to near-coincident failure. Of course, this is a) 87 121.67 P
1.17 (conservative assumption. Although two out of the three processors have failed, the failed processors) 87 108.67 P
-0.14 (may not produce errors at the same time nor in the same place in memory. In this case, the voting mech-) 87 95.67 P
0.1 (anism may effectively mask both faults and the reliability of the system would be better than the model) 87 82.67 P
(predicts.) 87 69.67 T
3 9 Q
(Figure 10.  Model of degradable triplex.) 242.76 395.03 T
87 401.03 543 547.47 C
170.5 412.03 459.5 547.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 378 441 517 277 139 176.5 410.25 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig10.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig10.ps)
%%CreationDate: (4/17/95) (6:46 AM)
%%BoundingBox: 164 378 441 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
270 503 m
332.5 503 l
S
u
345 493.8076 m
350.0767 493.8076 354.1924 497.9233 354.1924 503 c
354.1924 508.0767 350.0767 512.1924 345 512.1924 c
339.9233 512.1924 335.8076 508.0767 335.8076 503 c
335.8076 497.9233 339.9233 493.8076 345 493.8076 c
s
345 503 m
S
U
0 To
1 0 0 1 345 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.7588 503 m
329.2075 501.4565 l
330.6138 503 L
329.2075 504.5435 l
335.7588 503 L
f
U
0 R
0 G
0.75 w
260.25 493.75 m
260.25 459.875 l
S
u
0 O
0 g
1 w
260.25 456.6162 m
258.7065 463.1675 l
260.25 461.7612 L
261.7935 463.1675 l
260.25 456.6162 L
f
U
0 To
1 0 0 1 270.25 477.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
260.5 437.8076 m
265.5767 437.8076 269.6924 441.9233 269.6924 447 c
269.6924 452.0767 265.5767 456.1924 260.5 456.1924 c
255.4233 456.1924 251.3076 452.0767 251.3076 447 c
251.3076 441.9233 255.4233 437.8076 260.5 437.8076 c
s
260.5 447 m
S
U
269.5 447 m
332 447 l
S
u
344.5 437.8076 m
349.5767 437.8076 353.6924 441.9233 353.6924 447 c
353.6924 452.0767 349.5767 456.1924 344.5 456.1924 c
339.4233 456.1924 335.3076 452.0767 335.3076 447 c
335.3076 441.9233 339.4233 437.8076 344.5 437.8076 c
s
344.5 447 m
S
U
0 To
1 0 0 1 344.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.2588 447 m
328.7075 445.4565 l
330.1138 447 L
328.7075 448.5435 l
335.2588 447 L
f
U
0 R
0 G
0.75 w
354 447 m
416.5 447 l
S
u
429 437.8076 m
434.0767 437.8076 438.1924 441.9233 438.1924 447 c
438.1924 452.0767 434.0767 456.1924 429 456.1924 c
423.9233 456.1924 419.8076 452.0767 419.8076 447 c
419.8076 441.9233 423.9233 437.8076 429 437.8076 c
s
429 447 m
S
U
0 To
1 0 0 1 429 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386 451 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
419.7588 447 m
413.2075 445.4565 l
414.6138 447 L
413.2075 448.5435 l
419.7588 447 L
f
U
0 To
1 0 0 1 260.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 260.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
344.375 437.75 m
344.375 403.875 l
S
u
0 O
0 g
1 w
344.375 400.6162 m
342.8315 407.1675 l
344.375 405.7612 L
345.9185 407.1675 l
344.375 400.6162 L
f
U
0 To
1 0 0 1 354.375 421.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
344.5 381.3076 m
349.5767 381.3076 353.6924 385.4233 353.6924 390.5 c
353.6924 395.5767 349.5767 399.6924 344.5 399.6924 c
339.4233 399.6924 335.3076 395.5767 335.3076 390.5 c
335.3076 385.4233 339.4233 381.3076 344.5 381.3076 c
s
344.5 390.5 m
S
U
0 To
1 0 0 1 344.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
354 390.5 m
416.5 390.5 l
S
u
429 381.3076 m
434.0767 381.3076 438.1924 385.4233 438.1924 390.5 c
438.1924 395.5767 434.0767 399.6924 429 399.6924 c
423.9233 399.6924 419.8076 395.5767 419.8076 390.5 c
419.8076 385.4233 423.9233 381.3076 429 381.3076 c
s
429 390.5 m
S
U
0 To
1 0 0 1 429 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386 394.5 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
419.7588 390.5 m
413.2075 388.9565 l
414.6138 390.5 L
413.2075 392.0435 l
419.7588 390.5 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 401.03 543 547.47 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 15
%%Page: "10" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(10) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.21 ( Perhaps a less conservative model could be developed, but this development would require the esti-) 105 718.67 P
0.7 (mation of the probability that two faults would defeat the voter. This probability would likely depend) 87 705.67 P
0.84 (upon the particular software workload on the system and many other design factors. Consequently, it) 87 692.67 P
0.3 (would be difficult to obtain. Also, the reliability analysis would not be independent of the workload. If) 87 679.67 P
0.1 (this probability is underestimated, the model would no longer be conservative. The reliability analyst is) 87 666.67 P
0.45 (often faced with many trade-offs similar to these. For life-critical systems, the trade-off should always) 87 653.67 P
(be made in the conservative direction.) 87 640.67 T
1.31 (At state \0504\051, the system is operational with two good processors and no faulty processors in the) 105 620.08 P
2.23 (active configuration. Either one of these processors may fail and take the system to state \0505\051. At) 87 607.08 P
0.99 (state) 87 594.08 P
0.99 (\0505\051, once again, a race occurs between the reconfiguration process that ends in state \0507\051 and the) 109.91 594.08 P
-0.18 (failure of a second processor that ends  in state \0506\051.  The recovery distribution from state \0505\051 could easily) 87 581.08 P
1.73 (be different from the recovery distribution from state \0502\051 to state \0504\051. However, for simplicity it is) 87 568.08 P
0.23 (assumed to be the same. State \0506\051 is thus another death state and state \0507\051 is the operational state where) 87 555.08 P
0.3 (one  good processor) 87 542.08 P
0.3 (remains. The transition from state \0507\051 to state \0508\051 represents the failure of the last) 183.51 542.08 P
0.48 (processor. At state \0508\051  no good processors remains, and the probability of reaching this) 87 529.08 P
0.48 (death state is) 485.22 529.08 P
(often referred to as failure by exhaustion of parts.) 87 516.08 T
-0.05 (To solve the model shown in figure 10,) 105 495.49 P
5 F
-0.05 (F) 282.95 495.49 P
3 F
-0.05 (\050) 289.67 495.49 P
5 F
-0.05 (t) 293.33 495.49 P
3 F
-0.05 (\051) 296.39 495.49 P
-0.05 (must be known. Suppose) 302.75 495.49 P
5 F
-0.05 (F) 415.28 495.49 P
3 F
-0.05 (\050) 422.01 495.49 P
5 F
-0.05 (t) 425.67 495.49 P
3 F
-0.05 (\051 = 1) 428.73 495.49 P
6 F
-0.05 (-) 452.24 495.49 P
5 F
-0.05 (e) 460.97 495.49 P
6 8.8 Q
-0.04 (-d) 465.86 499.89 P
5 F
-0.04 (t) 475.03 499.89 P
3 11 Q
-0.05 (. Then, given a) 477.48 495.49 P
-0.13 (value for) 87 482.49 P
6 F
-0.13 (d) 128.89 482.49 P
3 F
-0.13 ( of 10) 134.32 482.49 P
3 8.8 Q
-0.11 (4) 159.72 486.89 P
3 11 Q
-0.13 (/hr and a mission time of 10 hr, the model can be solved as a function of) 164.12 482.49 P
6 F
-0.13 (l) 482.67 482.49 P
3 F
-0.13 ( as shown in) 488.7 482.49 P
0.62 (figure 11. Fixing) 87 469.49 P
6 F
0.62 (l) 165.86 469.49 P
3 F
0.62 ( at 10) 171.9 469.49 P
6 8.8 Q
0.5 (-) 197.59 473.89 P
3 F
0.5 (4) 202.42 473.89 P
3 11 Q
0.62 (/hr and) 206.82 469.49 P
5 F
0.62 (T) 241.66 469.49 P
3 F
0.62 ( at 10 hr,  the model can be solved as a function of) 247.78 469.49 P
6 F
0.62 (d) 481.01 469.49 P
3 F
0.62 ( as shown in) 486.45 469.49 P
(figure 12.) 87 456.49 T
0.46 (From these graphs it can be seen that the system unreliability) 105 219.35 P
5 F
0.46 (P) 381.7 219.35 P
5 8.8 Q
0.37 (f) 388.43 216.6 P
3 11 Q
0.46 (  is much more sensitive to) 390.87 219.35 P
6 F
0.46 (l) 514.81 219.35 P
3 F
0.46 ( than) 520.84 219.35 P
0.13 (to) 87 206.35 P
6 F
0.13 (d) 98.31 206.35 P
3 F
0.13 (. The) 103.74 206.35 P
5 F
0.13 (P) 129.35 206.35 P
5 8.8 Q
0.1 (f) 136.07 203.6 P
3 11 Q
0.13 (  over much of the graph is proportional to) 138.52 206.35 P
6 F
0.13 (l) 329.23 206.35 P
3 8.8 Q
0.1 (2) 335.26 210.75 P
3 11 Q
0.13 ( and inversely proportional to) 339.66 206.35 P
6 F
0.13 (d) 473.21 206.35 P
3 F
0.13 (. It can also be) 478.64 206.35 P
-0.04 (seen that  a point of diminishing return exists for) 87 193.35 P
6 F
-0.04 (d) 303.53 193.35 P
3 F
-0.04 (. However, typically this situation occurs at reconfig-) 308.96 193.35 P
(uration rates much higher than those which can be realized in a physical architecture.) 87 180.35 T
4 10.5 Q
(4.2. T) 105 154.09 T
(riad to Simplex) 129.6 154.09 T
3 11 Q
0.56 (The model presented in section 4.1 was unrealistic in one major respect\321the reconfiguration pro-) 105 134.67 P
-0.14 (cess from the dual to the simplex was assumed to be perfect. In other words, when either of the two pro-) 87 121.67 P
1.48 (cessors failed, the system diagnosed which of the two processors was the faulty one with complete) 87 108.67 P
0.05 (accuracy. When using a majority voter on three or more processors, such an assumption is not unrealis-) 87 95.67 P
-0.03 (tic. However, with only two good processors, this diagnosis cannot be perfect. In a later section, the use) 87 82.67 P
0.08 (of self-test programs to diagnose failure in a dual system) 87 69.67 P
0.08 (will be explored.  In this section, the option of) 339.12 69.67 P
3 9 Q
(Figure 11.  Degradable triplex as function of) 110.04 257.27 T
6 F
(l) 272.76 257.27 T
3 F
(.) 277.7 257.27 T
(Figure 12.  Degradable triplex as funtion of) 352.29 257.27 T
6 F
(d) 511.01 257.27 T
3 F
(.) 515.46 257.27 T
87 263.27 303 428.82 C
87 274.27 303 428.82 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 175 308 391 460 216 152 87 274.27 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig11.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig11.ps)
%%CreationDate: (7/28/95) (9:22 AM)
%%BoundingBox: 175 308 391 460
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
344.1558 334.8111 m
344.1558 337.2111 l
S
226.2743 449.9125 m
223.3943 449.9125 l
223.3943 334.8111 l
374.4361 334.8111 l
374.4361 337.2111 l
S
314.2755 334.8111 m
314.2755 337.2111 l
S
283.3952 334.8111 m
283.3952 337.2111 l
S
253.6747 334.8111 m
253.6747 337.2111 l
S
226.2743 392.3718 m
223.3943 392.3718 l
S
0 To
0.6 0 0 0.6 220.9678 447.315 0 Tp
TP
-22.4997 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 220.9678 389.9644 0 Tp
TP
-37.4995 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 220.9678 332.8139 0 Tp
TP
-37.4995 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\62\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 223.0679 320.9638 0 Tp
TP
-14.9998 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
6.6666 Ts
(\3209) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 253.4183 320.9638 0 Tp
TP
-14.9998 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\67) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 284.2188 320.9638 0 Tp
TP
-14.9998 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 314.969 320.9638 0 Tp
TP
-14.9998 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 345.6692 320.9638 0 Tp
TP
-14.9998 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\61) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 374.5194 320.9638 0 Tp
TP
-11.2498 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(1) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 297.3187 311.5637 0 Tp
TP
-4.1161 0 Td
0 Tr
/_Symbol 14.9998 Tf
0 Ts
(l) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 188.5676 391.7645 0 Tp
TP
-6.6649 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
237.1 344.8 m
258.1001 357.2001 279.9002 377.6002 v
301.7003 398.0002 320.7004 422.6003 328.9004 430.6004 c
337.1004 438.6004 339.7004 441.0004 y
346.1005 446.0004 l
358.7005 449.0004 l
375.5006 449.0004 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 263.27 303 428.82 C
0 0 612 792 C
327 263.27 543 428.82 C
327 274.27 543 428.82 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 175 311 394 463 219 152 325.5 274.27 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig12.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig12.ps)
%%CreationDate: (7/28/95) (9:23 AM)
%%BoundingBox: 175 311 394 463
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
226.2743 452.6125 m
223.3943 452.6125 l
223.3943 337.5111 l
374.4361 337.5111 l
374.4361 339.9111 l
S
298.5953 337.5111 m
298.5953 339.9111 l
S
226.2743 383.0718 m
223.3943 383.0718 l
S
0 To
0.6 0 0 0.6 220.9678 450.065 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 220.9678 380.2144 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\3208) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 220.9678 335.5639 0 Tp
TP
-37.4995 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 223.0679 323.7138 0 Tp
TP
-18.7497 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
6.6666 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 298.7188 323.7138 0 Tp
TP
-11.2498 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 375.5194 323.7138 0 Tp
TP
-14.9998 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(10) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 297.8187 314.3137 0 Tp
TP
-3.7042 0 Td
0 Tr
/_Symbol 14.9998 Tf
0 Ts
(d) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 188.5676 393.0145 0 Tp
TP
-6.6649 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
226.2743 428.6124 m
223.3943 428.6124 l
S
0 To
0.6 0 0 0.6 220.9678 426.065 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
2 Ta
(10) Tx 
6.6666 Ts
(\320\66) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
226.2743 406.2123 m
223.3943 406.2123 l
S
0 To
0.6 0 0 0.6 220.9678 403.065 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
6.6666 Ts
(\320\67) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
226.2743 360.0717 m
223.3943 360.0717 l
S
0 To
0.6 0 0 0.6 220.9678 357.4644 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
6.6666 Ts
(\3209) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
255.1001 439.3004 m
283.1002 439.3004 l
290.7003 436.7004 l
297.7003 424.7003 l
316.1003 374.3001 l
320.5004 365.7001 l
329.3004 359.9001 l
358.9005 359.9001 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
327 263.27 543 428.82 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 16
%%Page: "11" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 304.08 46 T
(1) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.39 (degrading directly from a triplex to a simplex \050i.e., avoiding the dual mode\051 will be examined. The) 87 718.67 P
(model shown in figure 13 describes this system.) 87 705.67 T
0.83 (The horizontal transitions represent fault arrivals. The vertical transition represents system recov-) 105 566.65 P
0.3 (ery. The recovery transition is labeled with a distribution function rather than a rate to indicate that the) 87 553.65 P
-0.24 (transition is not exponential. The transition rate from state \0501\051 to state \0502\051 is 3) 87 540.65 P
6 F
-0.24 (l) 423.03 540.65 P
3 F
-0.24 ( because  three active pro-) 429.07 540.65 P
0.72 (cessors can fail. When one of those processors fails, the system is in state \0502\051. Before reconfiguration) 87 527.65 P
0.35 (occurs,  two active processors can fail; thus, the transition from state \0502\051 to death state \0503\051 with rate 2) 87 514.65 P
6 F
0.35 (l) 536.96 514.65 P
3 F
0.29 (competes with the recovery transition. Reconfiguration consists of discarding both the faulty processor) 87 501.65 P
0.19 (and one of the working processors. Thus, the transition rate from state \0504\051 to state \0505\051 is) 87 488.65 P
6 F
0.19 (l) 476.71 488.65 P
3 F
0.19 ( because only) 482.74 488.65 P
(one processor remains in the active configuration.) 87 475.65 T
4 10.5 Q
(4.3. Degradable Quadraplex System) 105 449.08 T
3 11 Q
(The model in figure 14 describes a degradable quadraplex system.) 105 429.33 T
-0.11 (This system starts with four working processors. When one of those four processors fails \050state \0502\051\051,) 105 232.98 P
0.08 (the reconfiguration process consists of removing the faulty processor, thereby leaving a triad of proces-) 87 219.98 P
-0 (sors \050state \0504\051\051. When one of the three remaining processors fails \050state \0505\051\051, the reconfiguration process) 87 206.98 P
1.27 (removes the faulty processor plus one of the working processors, which results in a simplex system) 87 193.98 P
0.19 (\050state \0507\051\051. Note that  different functions are  used for the transition from state \0505\051 to state \0507\051  and from) 87 180.98 P
0.51 (state \0502\051 to state \0504\051.  These different functions are necessary if the reconfiguration process, and hence) 87 167.98 P
(rate, varies as a function of the state.) 87 154.98 T
4 10.5 Q
(4.4. T) 105 128.41 T
(riad W) 129.6 128.41 T
(ith One Spar) 161.21 128.41 T
(e) 218.78 128.41 T
3 11 Q
-0.03 (In the previous models, the reconfiguration process removed a faulty processor and the system con-) 105 108.67 P
0.5 (tinued to operate with degraded levels of redundancy. This section provides a brief introduction to the) 87 95.67 P
-0.08 (technique of sparing. That is, replacing a faulty processor with a spare processor. This technique will be) 87 82.67 P
(explored in detail in section 7.) 87 69.67 T
3 9 Q
(Figure 13.  Model of triplex to simplex system.) 230 592.89 T
(Figure 14.  Model of degradable quadraplex.) 234.52 259.23 T
87 598.89 543 690 C
212.5 609.89 417.5 690 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 435 357 517 193 82 218.5 609.22 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig13.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig13.ps)
%%CreationDate: (4/17/95) (7:34 AM)
%%BoundingBox: 164 435 357 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
270 503 m
332.5 503 l
S
u
345 493.8076 m
350.0767 493.8076 354.1924 497.9233 354.1924 503 c
354.1924 508.0767 350.0767 512.1924 345 512.1924 c
339.9233 512.1924 335.8076 508.0767 335.8076 503 c
335.8076 497.9233 339.9233 493.8076 345 493.8076 c
s
345 503 m
S
U
0 To
1 0 0 1 345 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.7588 503 m
329.2075 501.4565 l
330.6138 503 L
329.2075 504.5435 l
335.7588 503 L
f
U
0 R
0 G
0.75 w
260.25 493.75 m
260.25 459.875 l
S
u
0 O
0 g
1 w
260.25 456.6162 m
258.7065 463.1675 l
260.25 461.7612 L
261.7935 463.1675 l
260.25 456.6162 L
f
U
0 To
1 0 0 1 270.25 477.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
260.5 437.8076 m
265.5767 437.8076 269.6924 441.9233 269.6924 447 c
269.6924 452.0767 265.5767 456.1924 260.5 456.1924 c
255.4233 456.1924 251.3076 452.0767 251.3076 447 c
251.3076 441.9233 255.4233 437.8076 260.5 437.8076 c
s
260.5 447 m
S
U
269.5 447 m
332 447 l
S
u
344.5 437.8076 m
349.5767 437.8076 353.6924 441.9233 353.6924 447 c
353.6924 452.0767 349.5767 456.1924 344.5 456.1924 c
339.4233 456.1924 335.3076 452.0767 335.3076 447 c
335.3076 441.9233 339.4233 437.8076 344.5 437.8076 c
s
344.5 447 m
S
U
0 To
1 0 0 1 344.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.5 451 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.2588 447 m
328.7075 445.4565 l
330.1138 447 L
328.7075 448.5435 l
335.2588 447 L
f
U
0 To
1 0 0 1 260.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 260.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 598.89 543 690 C
0 0 612 792 C
87 265.23 543 411.67 C
170.5 276.23 459.5 411.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 378 441 517 277 139 176.5 274.45 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig14.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig14.ps)
%%CreationDate: (8/18/95) (10:53 AM)
%%BoundingBox: 164 378 441 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
270 503 m
332.5 503 l
S
u
345 493.8076 m
350.0767 493.8076 354.1924 497.9233 354.1924 503 c
354.1924 508.0767 350.0767 512.1924 345 512.1924 c
339.9233 512.1924 335.8076 508.0767 335.8076 503 c
335.8076 497.9233 339.9233 493.8076 345 493.8076 c
s
345 503 m
S
U
0 To
1 0 0 1 345 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.7588 503 m
329.2075 501.4565 l
330.6138 503 L
329.2075 504.5435 l
335.7588 503 L
f
U
0 R
0 G
0.75 w
260.25 493.75 m
260.25 459.875 l
S
u
0 O
0 g
1 w
260.25 456.6162 m
258.7065 463.1675 l
260.25 461.7612 L
261.7935 463.1675 l
260.25 456.6162 L
f
U
0 To
1 0 0 1 272.25 477.25 0 Tp
TP
-9.2439 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
0 Ts
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
260.5 437.8076 m
265.5767 437.8076 269.6924 441.9233 269.6924 447 c
269.6924 452.0767 265.5767 456.1924 260.5 456.1924 c
255.4233 456.1924 251.3076 452.0767 251.3076 447 c
251.3076 441.9233 255.4233 437.8076 260.5 437.8076 c
s
260.5 447 m
S
U
269.5 447 m
332 447 l
S
u
344.5 437.8076 m
349.5767 437.8076 353.6924 441.9233 353.6924 447 c
353.6924 452.0767 349.5767 456.1924 344.5 456.1924 c
339.4233 456.1924 335.3076 452.0767 335.3076 447 c
335.3076 441.9233 339.4233 437.8076 344.5 437.8076 c
s
344.5 447 m
S
U
0 To
1 0 0 1 344.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.2588 447 m
328.7075 445.4565 l
330.1138 447 L
328.7075 448.5435 l
335.2588 447 L
f
U
0 R
0 G
0.75 w
354 447 m
416.5 447 l
S
u
429 437.8076 m
434.0767 437.8076 438.1924 441.9233 438.1924 447 c
438.1924 452.0767 434.0767 456.1924 429 456.1924 c
423.9233 456.1924 419.8076 452.0767 419.8076 447 c
419.8076 441.9233 423.9233 437.8076 429 437.8076 c
s
429 447 m
S
U
0 To
1 0 0 1 429 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
419.7588 447 m
413.2075 445.4565 l
414.6138 447 L
413.2075 448.5435 l
419.7588 447 L
f
U
0 To
1 0 0 1 260.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 260.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
344.375 437.75 m
344.375 403.875 l
S
u
0 O
0 g
1 w
344.375 400.6162 m
342.8315 407.1675 l
344.375 405.7612 L
345.9185 407.1675 l
344.375 400.6162 L
f
U
0 To
1 0 0 1 356.375 421.25 0 Tp
TP
-9.2439 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
0 Ts
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
344.5 381.3076 m
349.5767 381.3076 353.6924 385.4233 353.6924 390.5 c
353.6924 395.5767 349.5767 399.6924 344.5 399.6924 c
339.4233 399.6924 335.3076 395.5767 335.3076 390.5 c
335.3076 385.4233 339.4233 381.3076 344.5 381.3076 c
s
344.5 390.5 m
S
U
0 To
1 0 0 1 344.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
354 390.5 m
416.5 390.5 l
S
u
429 381.3076 m
434.0767 381.3076 438.1924 385.4233 438.1924 390.5 c
438.1924 395.5767 434.0767 399.6924 429 399.6924 c
423.9233 399.6924 419.8076 395.5767 419.8076 390.5 c
419.8076 385.4233 423.9233 381.3076 429 381.3076 c
s
429 390.5 m
S
U
0 To
1 0 0 1 429 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386 394.5 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
419.7588 390.5 m
413.2075 388.9565 l
414.6138 390.5 L
413.2075 392.0435 l
419.7588 390.5 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 265.23 543 411.67 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 17
%%Page: "12" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(12) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.62 (Suppose a triplex system has one spare that does not fail when it is inactive. The model shown in) 105 718.67 P
(figure 15  shows this system.) 87 705.67 T
0.56 (State \0502\051 represents two good processors and one faulty processor. The transition from state \0502\051 to) 105 551.63 P
1.16 (state \0504\051 represents the detection and the isolation of the faulty processor and its replacement with a) 87 538.63 P
-0.18 (spare processor. While the system is in state \0502\051, two active working processors can fail; thus, the rate of) 87 525.63 P
0.73 (the transition to death state \0503\051 is 2) 87 512.63 P
6 F
0.73 (l) 244.59 512.63 P
3 F
0.73 (. After reconfiguration occurs, once again three active processors) 250.62 512.63 P
-0.2 (can fail; thus, the transition rate from state \0504\051 to state \0505\051 is 3) 87 499.63 P
6 F
-0.2 (l) 354.44 499.63 P
3 F
-0.2 (. This model assumes the system does not) 360.48 499.63 P
-0.2 (immediately degrade to simplex upon the next failure, but rather operates in duplex until the next failure) 87 486.63 P
(brings system failure.) 87 473.63 T
4 10.5 Q
(4.5. Reliability Analysis During Design and V) 105 448.6 T
(alidation) 307.06 448.6 T
3 11 Q
1.46 ( In this paper, two major categories of application of the reliability analysis techniques are dis-) 105 430.39 P
0.4 (cussed: design and validation. During the design phase of system development, it is often necessary to) 87 417.39 P
0.7 (perform trade-off analyses in order to make appropriate design decisions. Critical parameters, such as) 87 404.39 P
0.18 (system recovery times, must be estimated with little, if any, data. After the system has been developed,) 87 391.39 P
1.56 (these critical parameters must be measured to validate the reliability of the system implementation.) 87 378.39 P
-0.27 (Experiments are performed to measure the actual system recovery times. The reliability models can then) 87 365.39 P
0.35 (be solved by using these accurate values for the parameters of the model. During the design phase, the) 87 352.39 P
0.83 (recovery processes are often modeled with exponential distributions because the actual distribution is) 87 339.39 P
(unknown. During the validation phase, the observed distribution is used for the reliability analysis.) 87 326.39 T
4 12 Q
(5. Reliability Analysis Pr) 87 300.35 T
(ograms) 214.13 300.35 T
3 11 Q
0.65 ( Before the techniques of modeling fault-tolerant systems are explored further, the input language) 105 281.65 P
0.87 (for the SURE reliability analysis program will be presented. The same input language is used for the) 87 268.65 P
(STEM and the PAWS reliability analysis programs. These programs are described in section 5.4.) 87 255.65 T
1.3 ( In the remainder of this paper, the models will be presented in the SURE input language. This) 105 236.28 P
1.52 (approach is desirable for two reasons. First, as the models increase in complexity, it soon becomes) 87 223.28 P
1.29 (impractical to present them graphically. Second, these programs can be used to solve the models as) 87 210.28 P
-0.09 (functions of any model parameter. This presentation style will provide insight into the nature of the sys-) 87 197.28 P
(tems being modeled.) 87 184.28 T
4 10.5 Q
(5.1. Overview of SURE) 105 159.24 T
3 11 Q
1.72 (The SURE program is a reliability analysis tool for ultrareliable computer system architectures) 105 141.04 P
2.67 (\050refs.) 87 128.04 P
2.67 (1 and 9\051 and is based upon computational methods developed at Langley Research Center) 112.65 128.04 P
-0.05 (\050ref.) 87 115.04 P
-0.05 (10\051. These methods provide an efficient means for computing accurate upper and lower bounds for) 108.37 115.04 P
(the state probabilities of a large class of semi-Markov models.) 87 102.04 T
0.4 (Models are defined in SURE by enumerating all transitions of the model. The SURE program dis-) 105 82.67 P
0.64 (tinguishes between fast and slow transitions. If the mean transition time) 87 69.67 P
6 F
0.64 (m) 412.43 69.67 P
3 F
0.64 ( is small with respect to the) 418.76 69.67 P
3 9 Q
(Figure 15.  Model of triplex with one spare.) 236.26 584.34 T
87 590.34 543 682 C
170.5 601.34 459.5 682 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 435 441 517 277 82 176.5 600.67 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig15.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig15.ps)
%%CreationDate: (4/21/95) (1:38 PM)
%%BoundingBox: 164 435 441 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
270 503 m
332.5 503 l
S
u
345 493.8076 m
350.0767 493.8076 354.1924 497.9233 354.1924 503 c
354.1924 508.0767 350.0767 512.1924 345 512.1924 c
339.9233 512.1924 335.8076 508.0767 335.8076 503 c
335.8076 497.9233 339.9233 493.8076 345 493.8076 c
s
345 503 m
S
U
0 To
1 0 0 1 345 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.7588 503 m
329.2075 501.4565 l
330.6138 503 L
329.2075 504.5435 l
335.7588 503 L
f
U
0 R
0 G
0.75 w
260.25 493.75 m
260.25 459.875 l
S
u
0 O
0 g
1 w
260.25 456.6162 m
258.7065 463.1675 l
260.25 461.7612 L
261.7935 463.1675 l
260.25 456.6162 L
f
U
0 To
1 0 0 1 270.25 477.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
260.5 437.8076 m
265.5767 437.8076 269.6924 441.9233 269.6924 447 c
269.6924 452.0767 265.5767 456.1924 260.5 456.1924 c
255.4233 456.1924 251.3076 452.0767 251.3076 447 c
251.3076 441.9233 255.4233 437.8076 260.5 437.8076 c
s
260.5 447 m
S
U
269.5 447 m
332 447 l
S
u
344.5 437.8076 m
349.5767 437.8076 353.6924 441.9233 353.6924 447 c
353.6924 452.0767 349.5767 456.1924 344.5 456.1924 c
339.4233 456.1924 335.3076 452.0767 335.3076 447 c
335.3076 441.9233 339.4233 437.8076 344.5 437.8076 c
s
344.5 447 m
S
U
0 To
1 0 0 1 344.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.2588 447 m
328.7075 445.4565 l
330.1138 447 L
328.7075 448.5435 l
335.2588 447 L
f
U
0 R
0 G
0.75 w
354 447 m
416.5 447 l
S
u
429 437.8076 m
434.0767 437.8076 438.1924 441.9233 438.1924 447 c
438.1924 452.0767 434.0767 456.1924 429 456.1924 c
423.9233 456.1924 419.8076 452.0767 419.8076 447 c
419.8076 441.9233 423.9233 437.8076 429 437.8076 c
s
429 447 m
S
U
0 To
1 0 0 1 429 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
419.7588 447 m
413.2075 445.4565 l
414.6138 447 L
413.2075 448.5435 l
419.7588 447 L
f
U
0 To
1 0 0 1 260.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 260.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 590.34 543 682 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 18
%%Page: "13" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(13) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.96 (mission time, that is,) 87 718.67 P
6 F
1.96 (m) 188.96 718.67 P
3 F
1.96 ( <) 195.29 718.67 P
5 F
1.96 (T) 210.91 718.67 P
3 F
1.96 (, then the transition is fast. Otherwise, it is slow. Slow transitions are) 217.02 718.67 P
0.91 (assumed to be exponentially distributed by the SURE program. Fast transitions can have an arbitrary) 87 705.67 P
0.35 (distribution. The SURE user must supply the mean and the standard deviation of the transition time. If) 87 692.67 P
1.21 (multiple competing fast transitions from a state occur, the user must supply the respective transition) 87 679.67 P
1.52 (probabilities along with the conditional means and standard deviations. Probably the easiest way to) 87 666.67 P
(learn the SURE input language is by example.) 87 653.67 T
(The input to the SURE program for the triad plus one spare in figure 15 is) 105 634.01 T
7 F
(LAMBDA = 1E-6 TO* 1E-2 BY 10;) 105 614.35 T
(MU = 2.7E-3;) 105 600.7 T
(SIGMA = 1.3E-2;) 105 587.04 T
(1,2 = 3*LAMBDA;) 105 567.39 T
(2,3 = 2*LAMBDA;) 105 553.73 T
(2,4 = <MU,SIGMA>;) 105 540.07 T
(4,5 = 3*LAMBDA;) 105 526.42 T
(5,6 = 2*LAMBDA;) 105 512.76 T
(TIME = 10;) 105 499.1 T
3 F
1.04 (The first three statements equate values to identifiers. The first identifier) 105 479.45 P
7 F
2.49 (LAMBDA) 437.79 479.45 P
3 F
1.04 ( represents the) 477.39 479.45 P
0.28 (processor failure rate. The next two identifiers) 87 466.45 P
7 F
0.66 (MU) 295.44 466.45 P
3 F
0.28 ( and) 308.64 466.45 P
7 F
0.66 (SIGMA) 330.58 466.45 P
3 F
0.28 ( are the mean and the standard deviation) 363.58 466.45 P
0.62 (of the recovery time distribution from state \0502\051 to state \0504\051. The next five statements define the transi-) 87 453.45 P
-0.16 (tions of the model. If the transition is a slow fault-arrival process, then only the exponential rate must be) 87 440.45 P
0.37 (provided. For example, the last statement defines a transition from state \0505\051 to state \0506\051 with rate 2) 87 427.45 P
6 F
0.37 (l) 523.76 427.45 P
3 F
0.37 (. If) 529.8 427.45 P
0.44 (the transition is a fast recovery process, then the mean and the standard deviation of the recovery time) 87 414.45 P
-0.09 (must be given. For example, the statement) 87 401.45 P
7 F
-0.23 (2,4 = <MU,SIGMA>) 275.46 401.45 P
3 F
-0.09 (  defines a transition from state \0502\051 to) 380.61 401.45 P
-0.17 (state \0504\051 with mean recovery time) 87 388.45 P
7 F
-0.41 (MU1) 236.9 388.45 P
3 F
-0.17 ( and standard deviation) 256.7 388.45 P
7 F
-0.41 (SIGMA1) 361.11 388.45 P
3 F
-0.17 (. The last statement sets the mis-) 400.71 388.45 P
(sion time to 10 hr.) 87 375.45 T
-0.24 (The following illustrative interactive session uses SURE to process the preceding model. The model) 105 355.79 P
(description has been stored in a file named) 87 342.79 T
7 F
(TP1S) 277.63 342.79 T
3 F
(. The user input follows the) 304.03 342.79 T
7 F
(?) 427.77 342.79 T
3 F
( prompt.) 434.37 342.79 T
7 F
(air58% sure) 87 323.14 T
( SURE V7.9.8 NASA Langley Research Center) 105 304.48 T
( 1? read TP1S) 105 284.82 T
( 2:) 105 265.17 T
(LAMBDA = 1E-6 TO* 1E-2 BY 10;) 142 265.17 T
(3:) 111.6 251.51 T
(MU = 2.7E-3;) 142 251.51 T
(4:) 111.6 237.85 T
(SIGMA = 1.3E-2;) 142 237.85 T
(5:) 111.6 224.2 T
(6:) 111.6 210.54 T
(1,2 = 3*LAMBDA;) 142 210.54 T
(7:) 111.6 196.89 T
(2,3 = 2*LAMBDA;) 142 196.89 T
(8:) 111.6 183.23 T
(2,4 = <MU,SIGMA>;) 142 183.23 T
(9:) 111.6 169.57 T
(4,5 = 3*LAMBDA;) 142 169.57 T
(10:) 105 155.92 T
(5,6 = 2*LAMBDA;) 142 155.92 T
(11:) 105 142.26 T
(TIME = 10;) 142 142.26 T
(0.02 SECS. TO READ MODEL FILE) 142 122.6 T
(12? run) 105 108.95 T
(MODEL FILE = TP1S.mod          \050SURE V7.9.8 22 Jun 94 12:01:38) 105 95.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 19
%%Page: "14" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(14) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(  LAMBDA) 105 718.67 T
( LOWERBOUND) 188.88 718.67 T
(  UPPERBOUND) 268.88 718.67 T
( COMMENTS              RUN #1) 350.13 718.67 T
(-----------) 105 701.75 T
(-----------) 188.88 701.75 T
( -----------) 268.88 701.75 T
( ----------------------------) 350.13 701.75 T
(1.00000e-06) 105 684.84 T
(1.39719e-13) 188.88 684.84 T
( 1.65000e-13) 268.88 684.84 T
(1.00000e-05) 105 667.92 T
(1.65286e-11) 188.88 667.92 T
( 1.92000e-11) 268.88 667.92 T
(1.00000e-04) 105 651.01 T
(4.20456e-09) 188.88 651.01 T
( 4.62000e-09) 268.88 651.01 T
(1.00000e-03) 105 634.09 T
(2.92225e-06) 188.88 634.09 T
( 3.16200e-06) 268.88 634.09 T
(1.00000e-02) 105 617.18 T
(2.35025e-03) 188.88 617.18 T
( 2.47391e-03) 268.88 617.18 T
( <ExpMat>) 350.13 617.18 T
(2 PATH\050S\051 TO DEATH STATES) 105 594.27 T
(Q\050T\051 ACCURACY >= 14 DIGITS) 105 577.35 T
(0.000 SECS. CPU TIME UTILIZED) 105 560.44 T
(13? plot XYLOG) 105 543.52 T
(14? exit) 105 526.61 T
3 F
0.35 (The first statement uses the) 105 503.7 P
7 F
0.83 (READ) 229.86 503.7 P
3 F
0.35 ( command to input the model description file. It should be noted) 256.26 503.7 P
0.46 (that) 87 490.7 P
6 F
0.46 (l) 106.71 490.7 P
3 F
0.46 ( is defined as a variable over a range of values in this file. This definition directs the SURE pro-) 112.75 490.7 P
2.14 (gram to automatically perform a sensitivity analysis as a function of) 87 477.7 P
6 F
2.14 (l) 417.54 477.7 P
3 F
2.14 ( over the specified range.) 423.58 477.7 P
0.26 (Statement 11 defines the mission time to be 10 hr. The SURE program computes an upper and a lower) 87 464.7 P
-0.04 (bound on the probability of system failure. Usually these bounds are within 5 percent of each other, and) 87 451.7 P
0.91 (thus they usually provide an accurate estimate of system failure. Statement 13 directs the program to) 87 438.7 P
1.35 (plot the output on the graphics device. Figure 16 shows the graph generated by this command. The) 87 425.7 P
7 F
(XYLOG) 87 412.7 T
3 F
( argument causes SURE to plot the) 120 412.7 T
5 F
(X) 276.74 412.7 T
3 F
(- and the) 283.46 412.7 T
5 F
(Y) 324.7 412.7 T
3 F
(-axes with logarithmic scales.) 330.82 412.7 T
0.61 (Because the upper and the lower bounds are very close, the bounds appear as one line in the plot.) 105 95.67 P
2.26 (The) 87 82.67 P
7 F
5.41 (<ExpMat>) 109.11 82.67 P
3 F
2.26 ( statement in the) 161.91 82.67 P
7 F
5.41 (COMMENTS) 246.09 82.67 P
3 F
2.26 ( field indicates that a slower numerical method was) 298.89 82.67 P
(required for this particular parameter value.) 87 69.67 T
3 9 Q
(Figure 16.  Plot of SURE program output.) 239.37 133.91 T
87 139.91 543 385.03 C
135 150.91 495 385.03 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 129 285 477 521 348 236 141 149.7 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig16.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig16.ps)
%%CreationDate: (4/20/95) (1:28 PM)
%%BoundingBox: 129 285 477 521
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
181 471.625 m
175 471.625 l
S
401.5 315.25 m
401.5 320.25 l
S
181 510.375 m
175 510.375 l
175 315.25 l
458 315.25 l
458 320.25 l
S
345 315.25 m
345 320.25 l
S
288.75 315.25 m
288.75 320.25 l
S
231.25 315.25 m
231.25 320.25 l
S
181 432.75 m
175 432.75 l
S
181 393.5 m
175 393.5 l
S
181 354.75 m
175 354.75 l
S
0 To
1 0 0 1 171 508 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(10) Tx 
4 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
1 0 0 1 171 469.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
1 0 0 1 171 428.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\67) Tx 
(\r) TX 
TO
0 To
1 0 0 1 171 389.75 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\3209) Tx 
(\r) TX 
TO
0 To
1 0 0 1 171 351.25 0 Tp
TP
-22.5 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\61\61) Tx 
(\r) TX 
TO
0 To
1 0 0 1 171 312 0 Tp
TP
-22.5 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\61\63) Tx 
(\r) TX 
TO
0 To
1 0 0 1 174.5 302.25 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
4 Ts
(\320\67) Tx 
(\r) TX 
TO
0 To
1 0 0 1 230.75 302.25 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.5 302.25 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
1 0 0 1 345 302.25 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
1 0 0 1 401.25 302.25 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
1 0 0 1 459 302.25 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\62) Tx 
(\r) TX 
TO
0 To
1 0 0 1 318 288.25 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 143 413 0 Tp
TP
-3.999 0 Td
0 Tr
/_Times-Italic 9 Tf
(P) Tx 
-4 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
232.5 319 m
309.5 372.5 l
352.5 407.5 l
460 511 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 139.91 543 385.03 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 20
%%Page: "15" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(15) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2. Model De\336nition Syntax) 105 719 T
1 0 0 0 0 1 1 K
0 0 0 1 0 0 0 K
3 11 Q
0.91 (In these sections, more detail is presented. These sections can be omitted during the first reading) 105 699.59 P
-0.12 (and used as a reference when something is encountered that is not clear. The following conventions will) 87 686.59 P
(be used to facilitate the description of the SURE input language:) 87 673.59 T
(1.) 105 653.02 T
(All reserved words will be capitalized in typewriter-style print.) 117 653.02 T
(2.) 105 632.44 T
0.72 (Lowercase words that are in italics indicate items that are to be replaced by something defined) 117 632.44 P
(elsewhere.) 117 619.44 T
(3.) 105 598.87 T
(Items enclosed in double square brackets) 117 598.87 T
( can be omitted.) 318.28 598.87 T
(4.) 105 578.29 T
(Items enclosed in braces { } can be omitted or repeated as many times as desired.) 117 578.29 T
8 10.5 Q
(5.2.1. Lexical details.) 105 553.55 T
3 11 Q
-0.07 (The state numbers must be positive integers between zero and the) 199.21 553.55 P
7 F
-0.17 (MAXSTATE) 490.2 553.55 P
3 F
1.58 (implementation limit, usually 25) 87 540.55 P
1.58 (000 or larger. This limit can be increased simply by changing the) 239.03 540.55 P
7 F
2.47 (MAXSTATE) 87 527.55 P
3 F
1.03 ( constant in the program and recompiling. The transition rates and the conditional means) 139.8 527.55 P
-0.05 (and standard deviations are floating point numbers. The Pascal REAL syntax is used for these numbers.) 87 514.55 P
-0.13 (The semicolon is used for statement termination. Therefore, more than one statement may be entered on) 87 501.55 P
0.68 (a line. Comments may be included any place that blanks are allowed. The beginning of a comment is) 87 488.55 P
0.64 (indicated with \050* and the termination of a comment is indicated with *\051. The SURE program prompts) 87 475.55 P
(the user for input by a line number followed by a question mark.) 87 462.55 T
8 10.5 Q
(5.2.2. Constant de\336nitions.) 105 437.81 T
3 11 Q
1.09 (The user may equate numbers to identifiers. Thereafter, these constant) 223.74 437.81 P
(identifiers may be used instead of the numbers. For example,) 87 424.81 T
7 F
(LAMBDA = 0.001;) 105 404.23 T
(RECOVER = 1E-4;) 105 389.66 T
3 F
(Constants may also be defined in terms of previously defined constants) 87 369.08 T
7 F
(GAMMA = 10*LAMBDA;) 105 349.51 T
3 F
(In general, the syntax is) 105 328.93 T
5 F
(name = expression) 105 308.36 T
3 F
(;) 188.8 308.36 T
0.19 (where) 87 287.78 P
5 F
0.19 (name) 116.81 287.78 P
3 F
0.19 ( is a string of up to eight letters, digits, and underscores that begin with a letter and) 140.64 287.78 P
5 F
0.19 (expres-) 510.63 287.78 P
(sion) 87 274.78 T
3 F
( is an arbitrary mathematical expression as described in  section 5.2.4.) 105.34 274.78 T
8 10.5 Q
(5.2.3. V) 105 250.04 T
(ariable de\336nition.) 137.09 250.04 T
3 11 Q
2.14 (To facilitate parametric analyses, a single variable may be defined. A) 216.73 250.04 P
0.51 (range is given for this variable. The SURE system will compute the system reliability as a function of) 87 237.04 P
(this variable. The following statement defines) 87 224.04 T
7 F
(LAMBDA) 291.39 224.04 T
3 F
( as a variable with range 0.001 to 0.009:) 330.99 224.04 T
7 F
(LAMBDA = 0.001 TO 0.009;) 105 203.47 T
3 F
0.02 (Only one such variable may be defined. A special constant,) 105 182.89 P
7 F
0.05 (POINTS) 371.92 182.89 P
3 F
0.02 (, defines the number of points) 411.52 182.89 P
0.08 (to be computed over this range. The method used to vary the variable over this range can be either geo-) 87 169.89 P
-0.08 (metric or arithmetic and is best explained by example. Suppose) 87 156.89 P
7 F
-0.18 (POINTS) 370.29 156.89 P
-0.18 (=) 412.57 156.89 P
-0.18 (4) 421.84 156.89 P
3 F
-0.08 (; then the geometric range) 428.44 156.89 P
7 F
(XV = 1 TO* 1000;) 105 136.32 T
3 F
(would use) 87 115.74 T
7 F
(XV) 137.41 115.74 T
3 F
( values of 1, 10, 100, and 1000, while the arithmetic range) 150.61 115.74 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(XV = 1 TO+ 1000;) 105 96.17 T
300.29 596.87 307.79 608.36 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
302.04 606.86 302.04 598.36 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
302.04 606.86 306.29 606.86 2 L
N
302.04 598.36 306.29 598.36 2 L
N
303.54 606.86 303.54 598.61 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
310.54 597.12 318.28 608.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
316.54 607.11 316.54 598.61 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
316.54 607.11 312.29 607.11 2 L
N
316.54 598.61 312.29 598.61 2 L
N
315.04 607.11 315.04 598.86 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 21
%%Page: "16" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(16) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.09 (would use) 87 718.67 P
7 F
0.21 (XV) 134.84 718.67 P
3 F
0.09 ( values of 1, 333, 667, and 1000. An asterisk following the) 148.04 718.67 P
7 F
0.21 (TO) 410 718.67 P
3 F
0.09 ( implies a geometric range,) 423.2 718.67 P
0.25 (while) 87 705.67 P
7 F
0.59 (TO+) 114.44 705.67 P
3 F
0.25 ( or simply) 134.24 705.67 P
7 F
0.59 (TO) 182.34 705.67 P
3 F
0.25 ( implies an arithmetic range.  In addition, the) 195.54 705.67 P
7 F
0.59 (BY) 398.47 705.67 P
3 F
0.25 ( option is available.  With the) 411.67 705.67 P
0.05 (above syntax and) 87 692.67 P
7 F
0.11 (BY) 166.26 692.67 P
5 F
0.05 (increment) 182.26 692.67 P
3 F
0.05 (, the value of) 226.25 692.67 P
7 F
0.11 (POINTS) 286.62 692.67 P
3 F
0.05 ( is automatically set so that the value is varied by) 326.22 692.67 P
(adding or multiplying the specified  increment. For example,) 87 679.67 T
7 F
(LAMBDA = 1E-5 TO* 1E-2 BY 10;) 105 660.46 T
3 F
(sets) 87 640.25 T
7 F
(POINTS) 106.25 640.25 T
3 F
( equal to 4 and uses the values of 1E-5, 1E-4, 1E-3, and 1E-2 for) 145.85 640.25 T
7 F
(LAMBDA) 433.02 640.25 T
3 F
(. The statement) 472.62 640.25 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(CX = 3 TO+ 5 BY 1;) 105 621.04 T
3 F
(sets) 87 600.83 T
7 F
(POINTS) 106.25 600.83 T
3 F
( equal to 3 and uses the values of 3, 4, and 5 for) 145.85 600.83 T
7 F
(CX) 358.48 600.83 T
3 F
( . In general, the syntax is) 371.68 600.83 T
5 F
(var = expression) 105 581.62 T
7 F
(TO) 182.38 581.62 T
3 F
( s) 195.59 581.62 T
5 F
(c) 215.61 581.62 T
(expression) 233.74 581.62 T
7 F
(BY) 293.78 581.62 T
5 F
(increment) 309.73 581.62 T
3 F
(;) 364.21 581.62 T
0.56 (where) 87 561.42 P
5 F
0.56 (var) 117.18 561.42 P
3 F
0.56 ( is a string of up to eight letters and digits beginning with a letter,) 131.84 561.42 P
5 F
0.56 (expression) 430.44 561.42 P
3 F
0.56 ( is an arbitrary) 477.49 561.42 P
0.06 (mathematical expression, which is described in the  section 5.2.4, and the optional) 87 548.42 P
5 F
0.06 (c) 452.29 548.42 P
3 F
0.06 ( is a + or *. The) 457.17 548.42 P
7 F
0.15 (BY) 529.8 548.42 P
3 F
(clause is optional; if it is used, then) 87 535.42 T
5 F
(increment) 244.97 535.42 T
3 F
( is any arbitrary expression.) 288.96 535.42 T
8 10.5 Q
(5.2.4. Expressions.) 105 510.54 T
3 11 Q
0.6 (When specifying transition or holding time parameters in a statement, arbitrary) 189.01 510.54 P
0.9 (functions of the constants and the variable may be used. The following operators may be used: + for) 87 497.54 P
(addition,) 87 484.54 T
6 F
(-) 128.56 484.54 T
3 F
( for subtraction, * for multiplication, / for division, and ** for exponentiation.) 134.6 484.54 T
2.38 (The following standard Pascal functions may be used:) 105 464.33 P
7 F
5.72 (EXP\050X\051) 364.8 464.33 P
3 F
2.38 (,) 404.4 464.33 P
7 F
5.72 (LN\050X\051) 412.29 464.33 P
3 F
2.38 (,) 445.29 464.33 P
7 F
5.72 (SIN\050X\051) 453.17 464.33 P
3 F
2.38 (,) 492.77 464.33 P
7 F
5.72 (COS\050X\051) 500.65 464.33 P
3 F
2.38 (,) 540.25 464.33 P
7 F
-0.27 (ARCSIN\050X\051) 87 451.33 P
3 F
-0.11 (,) 146.4 451.33 P
7 F
-0.27 (ARCCOS\050X\051) 151.79 451.33 P
3 F
-0.11 (,) 211.19 451.33 P
7 F
-0.27 (ARCTAN\050X\051) 216.57 451.33 P
3 F
-0.11 (, and) 275.97 451.33 P
7 F
-0.27 (SQRT\050X\051) 299.88 451.33 P
3 F
-0.11 (. Both \050 \051 and [ ] may be used for grouping in) 346.08 451.33 P
(the expressions. The following are permissible expressions:) 87 438.33 T
7 F
(2E-4) 105 418.12 T
(1.2*EXP\050-3*ALPHA\051;) 105 403.92 T
(7*ALPHA + 12*L;) 105 389.71 T
(ALPHA*\0501+L\051 + ALPHA**2;) 105 375.5 T
(2*L + \0501/ALPHA\051*[L + \0501/ALPHA\051];) 105 361.29 T
8 10.5 Q
( 5.2.5. Slow transition description.) 105 336.42 T
3 11 Q
2.07 (A slow transition is completely specified by citing the source) 255.24 336.42 P
(state, the destination state, and the transition rate. The syntax is as follows:) 87 323.42 T
5 F
(source, dest = rate) 105 303.21 T
3 F
(;) 188.19 303.21 T
0.5 (where) 87 283 P
5 F
0.5 ( source) 113.87 283 P
3 F
0.5 ( is the source state,) 146.44 283 P
5 F
0.5 (dest) 235.07 283 P
3 F
0.5 ( is the destination state, and) 252.79 283 P
5 F
0.5 (rate) 380.12 283 P
3 F
0.5 ( is any valid expression defining) 397.84 283 P
(the exponential rate of the transition. The following are valid SURE statements:) 87 270 T
7 F
(PERM = 1E-4;) 105 250.79 T
(TRANSIENT = 10*PERM;) 105 236.58 T
(1,2 = 5*PERM;) 105 216.38 T
(1,9 = 5*\050TRANSIENT + PERM\051;) 105 202.17 T
(2,3 = 1E-6;) 105 187.96 T
8 10.5 Q
(5.2.6. Fast transition description.) 105 163.08 T
3 11 Q
(To enter a fast transition, the following syntax is used:) 250.87 163.08 T
5 F
(source, dest) 105 142.88 T
3 F
( = <) 157.55 142.88 T
5 F
(mu, sig) 178.21 142.88 T
3 F
(,) 220.23 142.88 T
5 F
( frac) 222.98 142.88 T
3 F
( >;) 253.95 142.88 T
-0.01 (where) 87 122.67 P
5 F
-0.01 (mu) 116.61 122.67 P
3 F
-0.01 ( defines the conditional mean transition time,) 130.05 122.67 P
5 F
-0.01 (sig) 331.64 122.67 P
3 F
-0.01 ( defines the conditional standard deviation of) 344.48 122.67 P
0.47 (transition time,) 87 109.67 P
5 F
0.47 (frac) 157.31 109.67 P
3 F
0.47 ( defines the transition probability,) 175.03 109.67 P
5 F
0.47 (source) 328.93 109.67 P
3 F
0.47 ( defines the source state, and) 358.25 109.67 P
5 F
0.47 (dest) 490.29 109.67 P
3 F
0.47 ( defines) 508.01 109.67 P
(the destination state.) 87 96.67 T
205.36 579.62 212.86 591.12 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
207.11 589.62 207.11 581.12 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
207.11 589.62 211.36 589.62 2 L
N
207.11 581.12 211.36 581.12 2 L
N
208.61 589.62 208.61 581.37 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
223.24 579.88 230.99 591.37 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
229.24 589.87 229.24 581.37 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
229.24 589.87 224.99 589.87 2 L
N
229.24 581.37 224.99 581.37 2 L
N
227.74 589.87 227.74 581.62 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
283.54 579.62 291.03 591.12 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
285.29 589.62 285.29 581.12 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
285.29 589.62 289.54 589.62 2 L
N
285.29 581.12 289.54 581.12 2 L
N
286.79 589.62 286.79 581.37 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
356.47 579.88 364.21 591.37 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
362.47 589.87 362.47 581.37 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
362.47 589.87 358.22 589.87 2 L
N
362.47 581.37 358.22 581.37 2 L
N
360.97 589.87 360.97 581.62 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
212.73 140.87 220.23 152.37 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
214.48 150.87 214.48 142.37 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
214.48 150.87 218.73 150.87 2 L
N
214.48 142.37 218.73 142.37 2 L
N
215.98 150.87 215.98 142.62 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
246.2 141.12 253.95 152.62 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
252.2 151.12 252.2 142.62 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
252.2 151.12 247.95 151.12 2 L
N
252.2 142.62 247.95 142.62 2 L
N
250.7 151.12 250.7 142.87 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 22
%%Page: "17" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(17) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.93 (The parameter) 105 718.67 P
5 F
0.93 (frac) 173.44 718.67 P
3 F
0.93 (is optional. If omitted, the transition probability is assumed to be 1.0, that is,) 194.84 718.67 P
(only one fast transition. All the following are valid:) 87 705.67 T
7 F
(2,5 = <1E-5, 1E-6, 0.9>;) 105 684.12 T
(THETA = 1E-4;) 105 662.58 T
(5,7 = <THETA, THETA*THETA, 0.5>;) 105 647.04 T
(7,9 = <0.0001,THETA/25>;) 105 631.5 T
8 10.5 Q
(5.2.7. F) 105 605.79 T
(AST exponential transition description.) 137.29 605.79 T
3 11 Q
0.23 (Often when performing design studies, experimental) 310.29 605.79 P
0.64 (data are unavailable for the fast processes of a system. In this case, some properties of the underlying) 87 592.79 P
0.27 (processes must be assumed. For simplicity, these fast transitions are often assumed to be exponentially) 87 579.79 P
0.56 (distributed. However, it is still necessary to supply the conditional mean and standard deviation to the) 87 566.79 P
0.89 (SURE program because these transitions are fast. If only one fast transition from a state occurs, then) 87 553.79 P
1.08 (these parameters are easy to determine. Suppose a fast exponential recovery occurs from state \0501\051 to) 87 540.79 P
(state \0502\051 with unconditional rate) 87 527.79 T
5 F
(a) 230.29 527.79 T
3 F
(The SURE input is simply) 105 442.47 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(1,2 = < 1/a, 1/a, 1 >;) 105 420.93 T
3 F
0.38 (In this case, the conditional mean and standard deviation are equivalent to the unconditional mean and) 87 399.38 P
(standard deviation. The above transition can be specified by using the following syntax:) 87 386.38 T
7 F
(1,2 = FAST a;) 105 365.84 T
3 F
0.77 (When multiple recoveries are present from a single state, then care must be exercised to properly) 105 344.3 P
1.28 (specify the conditional means and standard deviations required by the SURE program. Consider the) 87 331.3 P
(model in figure 17 where the unconditional distributions are) 87 318.3 T
3 9 Q
(Figure 17.  Model of three competing fast transitions.) 218.76 85 T
87 460.34 543 500.12 C
249.5 471.34 380.5 500.12 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 491 283 520 119 29 255.5 471.79 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/sketchA.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (sketchA.ps)
%%CreationDate: (4/17/95) (7:42 AM)
%%BoundingBox: 164 491 283 520
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
258 503 l
S
u
270.5 493.8076 m
275.5767 493.8076 279.6924 497.9233 279.6924 503 c
279.6924 508.0767 275.5767 512.1924 270.5 512.1924 c
265.4233 512.1924 261.3076 508.0767 261.3076 503 c
261.3076 497.9233 265.4233 493.8076 270.5 493.8076 c
s
270.5 503 m
S
U
0 To
1 0 0 1 270.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 222.5 507 0 Tp
TP
-26.2793 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\) = 1 \320 ) Tx 
/_Times-Italic 9 Tf
(e) Tx 
/_Times-Roman 9 Tf
4 Ts
(\320) Tx 
/_Times-Italic 9 Tf
(at) Tx 
(\r) TX 
TO
u
261.2588 503 m
254.7075 501.4565 l
256.1138 503 L
254.7075 504.5435 l
261.2588 503 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 460.34 543 500.12 C
0 0 612 792 C
275.67 233.11 354.33 304.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(F) 276.67 290.23 T
3 8.5 Q
(1) 283.48 286.05 T
5 10.5 Q
(t) 294.61 290.23 T
6 F
(\050) 290.11 290.23 T
(\051) 298.01 290.23 T
3 F
(1) 319.68 290.23 T
5 F
(e) 335.43 290.23 T
5 8.5 Q
(a) 345.06 296.72 T
(t) 349.97 296.72 T
3 F
(\320) 340.49 296.72 T
3 10.5 Q
(\320) 327.56 290.23 T
(=) 308.51 290.23 T
5 F
(F) 276.67 265.82 T
3 8.5 Q
(2) 283.48 261.64 T
5 10.5 Q
(t) 294.61 265.82 T
6 F
(\050) 290.11 265.82 T
(\051) 298.01 265.82 T
3 F
(1) 319.68 265.82 T
5 F
(e) 335.43 265.82 T
5 8.5 Q
(b) 345.06 272.31 T
(t) 349.97 272.31 T
3 F
(\320) 340.49 272.31 T
3 10.5 Q
(\320) 327.56 265.82 T
(=) 308.51 265.82 T
5 F
(F) 276.67 241.41 T
3 8.5 Q
(3) 283.48 237.23 T
5 10.5 Q
(t) 294.61 241.41 T
6 F
(\050) 290.11 241.41 T
(\051) 298.01 241.41 T
3 F
(1) 319.68 241.41 T
5 F
(e) 335.43 241.41 T
5 8.5 Q
(c) 345.06 247.9 T
(t) 349.49 247.9 T
3 F
(\320) 340.49 247.9 T
3 10.5 Q
(\320) 327.56 241.41 T
(=) 308.51 241.41 T
0 0 612 792 C
87 91 543 218.11 C
249.5 102 380.5 218.11 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 397 283 515 119 118 255.5 100.22 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig17.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig17.ps)
%%CreationDate: (4/21/95) (1:38 PM)
%%BoundingBox: 164 397 283 515
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
258 503 l
S
u
270.5 493.8076 m
275.5767 493.8076 279.6924 497.9233 279.6924 503 c
279.6924 508.0767 275.5767 512.1924 270.5 512.1924 c
265.4233 512.1924 261.3076 508.0767 261.3076 503 c
261.3076 497.9233 265.4233 493.8076 270.5 493.8076 c
s
270.5 503 m
S
U
0 To
1 0 0 1 270.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 222.5 507 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
261.2588 503 m
254.7075 501.4565 l
256.1138 503 L
254.7075 504.5435 l
261.2588 503 L
f
U
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
182.9372 496.4593 m
233.9525 445.444 l
S
u
236.2913 430.1051 m
239.8811 426.5153 245.7015 426.5153 249.2913 430.1051 c
252.8811 433.6949 252.8811 439.5154 249.2913 443.1051 c
245.7016 446.6949 239.8811 446.6949 236.2913 443.1051 c
232.7015 439.5154 232.7015 433.6949 236.2913 430.1051 c
s
242.7913 436.6051 m
S
U
u
0 O
0 g
1 w
236.2568 443.1396 m
230.5329 446.6807 l
232.6187 446.7777 L
232.7157 448.8635 l
236.2568 443.1396 L
f
U
0 To
1 0 0 1 242.75 434 0 Tp
TP
-2.25 0 Td
0 Tr
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.75 493.75 m
176.75 421.75 l
S
u
167.5576 409.25 m
167.5576 404.1733 171.6733 400.0576 176.75 400.0576 c
181.8267 400.0576 185.9424 404.1733 185.9424 409.25 c
185.9424 414.3267 181.8267 418.4424 176.75 418.4424 c
171.6733 418.4424 167.5576 414.3267 167.5576 409.25 c
s
176.75 409.25 m
S
U
u
0 O
0 g
1 w
176.75 418.4912 m
175.2065 425.0425 l
176.75 423.6362 L
178.2935 425.0425 l
176.75 418.4912 L
f
U
0 To
1 0 0 1 176.75 406.25 0 Tp
TP
-2.25 0 Td
0 Tr
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.25 470.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
0 To
1 0 0 1 182.25 452.75 0 Tp
TP
-1.9973 0 Td
0 Tr
(c) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 91 543 218.11 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 23
%%Page: "18" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(18) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(The SURE input describing the previous model is) 87 718.67 T
7 F
(0,1 = < 1/\050a+b+c\051, 1/\050a+b+c\051, a/\050a+b+c\051 >;) 105 700.47 T
(0,2 = < 1/\050a+b+c\051, 1/\050a+b+c\051, b/\050a+b+c\051 >;) 105 681.28 T
(0,3 = < 1/\050a+b+c\051, 1/\050a+b+c\051, c/\050a+b+c\051 >;) 105 662.09 T
3 F
0.73 (Note that the conditional means and standard deviations are not equal to the unconditional means) 105 642.9 P
-0.03 (and standard deviations \050e.g., the conditional mean transition time from state \0500\051 to state \0501\051 is not equal) 87 629.9 P
(to) 87 616.9 T
7 F
( 1/a) 95.56 616.9 T
3 F
(.\051 The following can be used to define the model in figure 17:) 121.96 616.9 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(0,1 = FAST a;) 105 597.7 T
(0,2 = FAST b;) 105 578.51 T
(0,3 = FAST c;) 105 559.32 T
3 F
1.82 (The SURE program automatically calculates the conditional parameters from the unconditional) 105 540.12 P
0.25 (rates) 87 527.12 P
7 F
0.61 (a) 110.77 527.12 P
3 F
0.25 (,) 117.37 527.12 P
7 F
0.61 (b) 123.13 527.12 P
3 F
0.25 (, and) 129.73 527.12 P
7 F
0.61 (c) 154.37 527.12 P
3 F
0.25 (. The user may mix) 160.97 527.12 P
7 F
0.61 (FAST) 250.23 527.12 P
3 F
0.25 ( exponential transitions with other general transitions. How-) 276.63 527.12 P
0.3 (ever, care must be exercised in specifying the conditional parameters of the nonexponential fast recov-) 87 514.12 P
(eries to avoid inconsistencies. For more details see reference 1.) 87 501.12 T
4 10.5 Q
(5.3. SURE Commands) 105 476.26 T
3 11 Q
(In this section a brief summary of some of the SURE commands is given.) 105 458.24 T
8 10.5 Q
(5.3.1. READ command.) 105 434.88 T
3 11 Q
0.4 (A sequence of SURE statements may be read from a disk file. The follow-) 210.3 434.88 P
(ing interactive command reads SURE statements from a disk file named sift.mod:) 87 421.88 T
7 F
(READ sift.mod;) 105 402.68 T
3 F
0.88 (If no file name extension is given, the default extension) 87 383.49 P
7 F
2.12 (.mod) 343.01 383.49 P
3 F
0.88 ( is assumed. A user can build a model) 369.41 383.49 P
1.75 (description file by using a text editor and then use the) 87 370.49 P
7 F
4.21 (READ) 344.9 370.49 P
3 F
1.75 ( command  to read it into the SURE) 371.3 370.49 P
(program.) 87 357.49 T
8 10.5 Q
(5.3.2. RUN command.) 105 334.13 T
3 11 Q
0.5 (After a semi-Markov model has been fully described to the SURE program,) 203.88 334.13 P
(the) 87 321.13 T
7 F
(RUN) 103.19 321.13 T
3 F
( command is used to initiate the computation) 122.99 321.13 T
7 F
(RUN) 105 301.94 T
5 F
(outname;) 127.55 301.94 T
3 F
(The output is written to file) 87 282.74 T
5 F
(outname) 210.44 282.74 T
3 F
(. If) 248.33 282.74 T
5 F
(outname) 263.9 282.74 T
3 F
( is omitted the output is written to the user terminal.) 301.79 282.74 T
8 10.5 Q
(5.3.3. LIST constant.) 105 259.39 T
3 11 Q
0.74 (The amount of information output by the program is controlled by this com-) 198.64 259.39 P
0.02 (mand. Four list modes are available.  For) 87 246.39 P
7 F
0.04 (LIST) 270.45 246.39 P
0.04 (=) 304.37 246.39 P
0.04 (0;) 317.57 246.39 P
3 F
0.02 (, no output is sent to the terminal, but the results) 330.77 246.39 P
1.06 (can still be displayed by using the) 87 233.39 P
7 F
2.55 (PLOT) 246.3 233.39 P
3 F
1.06 ( command. For) 272.7 233.39 P
7 F
2.55 (LIST) 345.55 233.39 P
2.55 (=) 378.55 233.39 P
2.55 (1;) 391.75 233.39 P
3 F
1.06 (, only the upper and the lower) 404.95 233.39 P
1.16 (bounds on the probability of total system failure are listed. This is the default. For) 87 220.39 P
7 F
2.78 (LIST) 467.04 220.39 P
2.78 (=) 500.04 220.39 P
2.78 (2) 513.24 220.39 P
3 F
1.16 (;, the) 519.84 220.39 P
3.92 (probability bounds for each death state in the model are reported along with the totals. For) 87 207.39 P
7 F
1.13 (LIST) 87 194.39 P
1.13 (=) 120 194.39 P
1.13 (3;) 133.2 194.39 P
3 F
0.47 (, every path in the model and its probability of traversal is listed. The probability bounds) 146.4 194.39 P
(for each death state in the model are reported along with the totals.) 87 181.39 T
8 10.5 Q
(5.3.4. ST) 105 158.03 T
(ART constant.) 142.93 158.03 T
3 11 Q
1.12 (The) 207.98 158.03 P
7 F
2.7 (START) 228.96 158.03 P
3 F
1.12 ( constant is used to specify the start state of the model. If the) 261.96 158.03 P
7 F
0.1 (START) 87 145.03 P
3 F
0.04 ( constant is not used, the program will use the source state \050i.e., the state with no transitions into) 120 145.03 P
(it\051 of the model, if one exists.) 87 132.03 T
8 10.5 Q
(5.3.5. TIME constant.) 105 108.67 T
3 11 Q
0.95 (The) 202.72 108.67 P
7 F
2.29 (TIME) 223.53 108.67 P
3 F
0.95 ( constant specifies the mission time. For example, when the user) 249.93 108.67 P
1.47 (sets) 87 95.67 P
7 F
3.54 (TIME) 107.72 95.67 P
3.54 (=) 140.72 95.67 P
3.54 (1.3) 153.92 95.67 P
3 F
1.47 (, the program computes the probability of entering the death states of the model) 173.72 95.67 P
-0.2 (within time 1.3. The default value of) 87 82.67 P
7 F
-0.47 (TIME) 252.23 82.67 P
3 F
-0.2 (is 10. All parameter values must be in the same units as the) 284.76 82.67 P
7 F
(TIME) 87 69.67 T
3 F
( constant.) 113.4 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 24
%%Page: "19" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(19) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(5.3.6. PRUNE and W) 105 716.93 T
(ARNDIG constants.) 196.98 716.93 T
3 11 Q
1.09 (The time required to analyze a large model can often be) 286.53 719 P
1.94 (greatly reduced by model pruning. The SURE program automatically selects a pruning level upon) 87 706 P
0.86 (detection of the first death state. This feature can be disabled by setting the) 87 693 P
7 F
2.07 (AUTOPRUNE) 431.15 693 P
3 F
0.86 ( constant to) 490.55 693 P
1.04 (zero,) 87 680 P
7 F
2.49 (AUTOPRUNE = 0) 112.47 680 P
3 F
1.04 (. The default value of) 203.24 680 P
7 F
2.49 (AUTOPRUNE) 305.56 680 P
3 F
1.04 ( is 1. Alternatively, the SURE user can) 364.96 680 P
0.84 (specify the level of pruning by using the) 87 667 P
7 F
2.01 (PRUNE) 273.95 667 P
3 F
0.84 ( constant. A path is traversed by the SURE program) 306.95 667 P
-0.19 (until the probability of reaching the current point on the path falls below the pruning level. For example,) 87 654 P
0.25 (if) 87 641 P
7 F
0.6 (PRUNE = 1E-14) 96.72 641 P
3 F
0.25 ( and the upper bound falls below) 183.71 641 P
7 F
0.6 (1E-14) 332.39 641 P
3 F
0.25 ( at any point on the path, the analysis of) 365.39 641 P
0.01 (the path is terminated and its probability is added to the upper bound. The sum of all  occupancy proba-) 87 628 P
(bilities of the pruned states is reported in the following format:) 87 615 T
7 F
(<prune x.xxx>) 105 593.93 T
3 F
1.02 (The SURE program will warn the user when the pruning process is too severe, that is, when the) 105 572.85 P
0.55 (pruning produces a result with less than) 87 559.85 P
7 F
1.31 (WARNDIG) 268.33 559.85 P
3 F
0.55 ( digits of accuracy. In this case, the upper bound is) 314.53 559.85 P
(still an upper bound, but it is not close to the lower bound. The default value of) 87 546.85 T
7 F
(WARNDIG) 438.05 546.85 T
3 F
( is 2.) 484.25 546.85 T
(These commands are explained in more detail in section 11.) 105 525.78 T
4 10.5 Q
( 5.4. Overview of  STEM and P) 105 499.04 T
(A) 243.35 499.04 T
(WS Pr) 249.76 499.04 T
(ograms) 279.61 499.04 T
3 11 Q
0.77 ( The STEM \050Scaled Taylor Exponential Matrix\051 and the PAWS \050Pad\216 Approximation With Scal-) 105 479.14 P
1.13 (ing\051 programs were developed at Langley Research Center for solving pure Markov models \050i.e., all) 87 466.14 P
0.26 (transitions are exponentially distributed\051. The input language for these two programs is the same as for) 87 453.14 P
1.29 (the SURE program. The only major difference is that the fast recovery) 87 440.14 P
1.29 (transition statement is inter-) 415.99 440.14 P
(preted differently. The following statement) 87 427.14 T
5 F
(source, dest) 105 406.06 T
3 F
( = <) 157.55 406.06 T
5 F
(mu, sig) 178.21 406.06 T
3 F
(,) 220.23 406.06 T
5 F
( frac) 222.98 406.06 T
3 F
( >;) 253.95 406.06 T
(is interpreted as) 87 384.99 T
5 F
(source, dest = frac/mu) 105 364.92 T
3 F
( ;) 204.69 364.92 T
0.01 (where) 87 343.85 P
5 F
0.01 (source) 116.63 343.85 P
3 F
0.01 ( is the source state,) 145.96 343.85 P
5 F
0.01 (dest) 232.16 343.85 P
3 F
0.01 ( is the destination state,) 249.88 343.85 P
5 F
0.01 (mu) 355.65 343.85 P
3 F
0.01 ( is an expression that defines the condi-) 369.1 343.85 P
-0.15 (tional mean transition time,) 87 330.85 P
5 F
-0.15 (sig) 210.14 330.85 P
3 F
-0.15 ( is an expression that defines the conditional standard deviation of transi-) 222.98 330.85 P
0.39 (tion time, and) 87 317.85 P
5 F
0.39 (frac) 151.72 317.85 P
3 F
0.39 ( is an expression that defines the transition probability. If the third parameter) 169.44 317.85 P
5 F
0.39 (frac) 514.8 317.85 P
3 F
0.39 ( is) 532.53 317.85 P
(omitted, a value of 1 is used.) 87 304.85 T
0.98 (For more information on the solution techniques used by these two reliability analysis programs,) 105 284.77 P
(see reference 11.) 87 271.77 T
4 10.5 Q
(5.5. Intr) 105 245.03 T
(oduction to SURE Mathematics) 141.27 245.03 T
3 11 Q
0.19 (In this section, the bounding theorem upon which SURE is based is presented. First, some notation) 105 225.13 P
0.23 (is developed; then the details of the theorem are presented. This section can be omitted on first reading) 87 212.13 P
(because later sections do not depend upon the content of this section.) 87 199.13 T
8 10.5 Q
(5.5.1. Path-step classi\336cation and notation.) 105 173.89 T
3 11 Q
0.07 (The presentation of the SURE bounding theorem is sim-) 294.33 173.89 P
0.21 (plified by first developing some notation. The theorem provides bounds on the death state probabilities) 87 160.89 P
0.05 (at a specified time. It is assumed that the system is initially in a single state. That is, the probability that) 87 147.89 P
0.22 (the system is in a single state at time 0 = 1.0.  The SURE program uses some additional techniques not) 87 134.89 P
-0.1 (presented here that enables assignment of initial probability to multiple states. These techniques are dis-) 87 121.89 P
-0.21 (cussed in section 16 and in the appendix.  This initial single state is called the start state. The SURE pro-) 87 108.89 P
1.45 (gram finds every path from the start state to a death state. The contribution of each path to system) 87 95.89 P
2.83 (failure is calculated separately by using the semi-Markov bounding theorem of White, which is) 87 82.89 P
(described in section 5.5.) 87 69.89 T
212.73 404.06 220.23 415.56 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
214.48 414.06 214.48 405.56 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
214.48 414.06 218.73 414.06 2 L
N
214.48 405.56 218.73 405.56 2 L
N
215.98 414.06 215.98 405.81 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
246.2 404.31 253.95 415.81 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
252.2 414.31 252.2 405.81 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
252.2 414.31 247.95 414.31 2 L
N
252.2 405.81 247.95 405.81 2 L
N
250.7 414.31 250.7 406.06 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 25
%%Page: "20" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(20) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.11 (Let each state along the path be classified into one of three classes that are distinguished by the type) 105 718.67 P
0.35 (of transitions leaving the state. A state and all transitions leaving it will be referred to as a \322path step.\323) 87 705.67 P
-0.06 (The transition on the path that is currently being analyzed will be referred to as the \322on-path transition.\323) 87 692.67 P
0.18 (The remaining transitions will be referred to as the \322off-path transitions.\323 The classification is made on) 87 679.67 P
-0.01 (the basis of whether on-path and off-path transitions are slow or fast. If no off-path transitions exist, the) 87 666.67 P
(path step is classified as if it contained a slow off-path transition.) 87 653.67 T
8 10.5 Q
(5.5.2. Class 1 path step; slow on path, slow of) 105 627.66 T
(f path.) 300.55 627.66 T
3 11 Q
0.47 (If all transitions leaving the state are slow, then) 331.18 627.66 P
0.47 (the path step is class 1. The rate of the on-path exponential transition is) 87 614.66 P
6 F
0.47 (l) 409.19 614.66 P
5 8.8 Q
0.38 (i) 415.23 611.91 P
3 11 Q
0.47 (. \050See fig. 18.\051  An arbitrary) 417.68 614.66 P
0.11 (number of slow off-path transitions can occur. The sum of their exponential transition rates is) 87 601.66 P
6 F
0.11 (g) 502.89 601.66 P
5 8.8 Q
0.09 (i) 508.88 598.91 P
3 11 Q
0.11 (. If any) 511.32 601.66 P
0.01 (off-path transitions are not slow, then the path step is in class 3. The path steps 1) 87 588.66 P
9 F
0.01 (\325) 444.36 588.66 P
3 F
0.01 ( 2, 4) 453.58 588.66 P
9 F
0.01 (\325) 475.62 588.66 P
3 F
0.01 ( 5, and 5) 484.84 588.66 P
9 F
0.01 (\325) 525.52 588.66 P
3 F
0.01 ( 6) 534.74 588.66 P
(in the model of the triad plus one spare shown in figure 15 are examples of this class.) 87 575.66 T
8 10.5 Q
(5.5.3. Class 2 path step; fast on path, arbitrary of) 105 391.59 T
(f path.) 316.29 391.59 T
3 11 Q
0.11 (If the on-path transition is fast, then the path) 346.92 391.59 P
1.12 (step is class 2. \050See fig. 19.\051  An arbitrary number of slow or fast off-path transitions may exist. As) 87 378.59 P
0.21 (before, the slow off-path, exponential transitions can be represented as a single transition with a rate) 87 365.59 P
6 F
0.21 (e) 533.9 365.59 P
5 8.8 Q
0.17 (i) 540.55 362.84 P
3 11 Q
0.46 (equal to the sum of all the slow off-path transition rates. The path step 2) 87 352.59 P
9 F
0.51 (\325) 413.52 352.59 P
3 F
0.46 ( 4 in the model of the triad) 422.74 352.59 P
0.72 (plus one spare shown in figure 15 are examples. The distribution of the fast on-path transition is) 87 339.59 P
5 F
0.72 (F) 524.48 339.59 P
5 8.8 Q
0.57 (i,) 531.2 336.84 P
3 F
0.57 (1) 535.85 336.84 P
3 11 Q
0.72 (.) 540.25 339.59 P
0.07 (The distribution of time for the) 87 326.59 P
5 F
0.07 (k) 226.77 326.59 P
3 F
0.07 (th fast transition from state \050) 231.65 326.59 P
5 F
0.07 (i\051) 356.98 326.59 P
3 F
0.07 ( is referred to as) 363.7 326.59 P
5 F
0.07 (F) 437.68 326.59 P
5 8.8 Q
0.06 (i,k) 444.4 323.84 P
3 11 Q
0.07 ( \050i.e., the probability) 452.95 326.59 P
-0.17 (that the next transition out of state \050) 87 313.59 P
5 F
-0.17 (i\051) 242.53 313.59 P
3 F
-0.17 (  goes into state \050) 249.25 313.59 P
5 F
-0.17 (k\051) 323.24 313.59 P
3 F
-0.17 ( and  occurs within time) 331.79 313.59 P
5 F
-0.17 (t) 439.52 313.59 P
3 F
-0.17 ( is) 442.58 313.59 P
5 F
-0.17 (F) 455.07 313.59 P
5 8.8 Q
-0.14 (i,k) 461.8 310.84 P
3 11 Q
-0.17 (\051. Three measur-) 470.35 313.59 P
0.62 (able parameters must be specified for each fast transition: the transition probability) 87 300.59 P
6 F
0.62 (r) 462.29 300.59 P
3 F
0.62 (\050) 468.33 300.59 P
5 F
0.62 (F) 471.99 300.59 P
5 8.8 Q
0.5 (*) 478.71 304.99 P
0.5 (i,k) 480.11 297.84 P
3 11 Q
0.62 (\051,) 488.67 300.59 P
0.62 (the condi-) 498.08 300.59 P
0.61 (tional mean) 87 287.59 P
6 F
0.61 (m) 142.6 287.59 P
3 F
0.61 (\050) 148.94 287.59 P
5 F
0.61 (F) 152.6 287.59 P
5 8.8 Q
0.49 (*) 159.32 291.99 P
0.49 (i,k) 159.72 284.84 P
3 11 Q
0.61 (\051) 168.28 287.59 P
5 F
0.61 (,) 171.94 287.59 P
3 F
0.61 (and the variance) 178.69 287.59 P
6 F
0.61 (s) 255.35 287.59 P
5 8.8 Q
0.49 (2) 261.99 291.99 P
3 11 Q
0.61 (\050) 266.39 287.59 P
5 F
0.61 (F) 270.05 287.59 P
5 8.8 Q
0.49 (*) 276.77 291.99 P
0.49 (i,k) 278.17 284.84 P
3 11 Q
0.61 (\051) 286.72 287.59 P
0.61 (,) 290.89 287.59 P
0.61 (given that this transition occurs. The asterisk is used to) 296.14 287.59 P
0.38 (note that the parameters are defined in terms of the conditional distributions combined with definition.) 87 274.59 P
(Mathematically, these parameters are defined as follows:) 87 261.59 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
0.85 ( Experimentally, these parameters correspond to the fraction of times that a fast transition is suc-) 105 103.17 P
0.76 (cessful and the mean and the variance of the conditional distribution, given that the transition occurs.) 87 90.17 P
3 9 Q
(Figure 18.  Class 1 path step.  Slow on path; slow off path.) 209.5 428.44 T
87 434.44 543 547.99 C
254 445.44 376 547.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 153 417 263 519 110 102 260 446.1 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig18.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig18.ps)
%%CreationDate: (7/27/95) (8:29 AM)
%%BoundingBox: 153 417 263 519
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
258 503 l
S
0 To
1 0 0 1 222.5 509 0 Tp
TP
-3.72 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(i) Tx 
(\r) TX 
TO
u
261.2588 503 m
254.7075 501.4565 l
256.1138 503 L
254.7075 504.5435 l
261.2588 503 L
f
U
0 To
1 0 0 1 176.5 500.25 0 Tp
TP
-1.2502 0 Td
0 Tr
0 Ts
(i) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.75 493.75 m
176.75 421.75 l
S
u
0 O
0 g
1 w
176.75 418.4912 m
175.2065 425.0425 l
176.75 423.6362 L
178.2935 425.0425 l
176.75 418.4912 L
f
U
0 To
1 0 0 1 166 456 0 Tp
TP
-3.0992 0 Td
0 Tr
/_Symbol 9 Tf
(g) Tx 
/_Times-Italic 9 Tf
-4 Ts
(i) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 434.44 543 547.99 C
0 0 612 792 C
173.14 129.34 456.86 239.09 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10.5 Q
0 X
0 0 0 1 0 0 0 K
(r) 179.86 218.62 T
5 F
(F) 192.5 218.62 T
5 8.5 Q
(i) 199.32 214.44 T
(k) 205.93 214.44 T
6 F
(,) 201.68 214.44 T
3 F
(*) 199.32 222.6 T
6 10.5 Q
(\050) 188 218.62 T
(\051) 210.18 218.62 T
3 F
(1) 266.65 218.62 T
5 F
(F) 282.4 218.62 T
5 8.5 Q
(i) 289.21 214.44 T
(j) 295.83 214.44 T
6 F
(,) 291.57 214.44 T
5 10.5 Q
(t) 305.07 218.62 T
6 F
(\050) 300.56 218.62 T
(\051) 308.47 218.62 T
3 F
(\320) 274.52 218.62 T
6 F
([) 262.14 218.62 T
(]) 314.2 218.62 T
5 8.5 Q
(j) 244.29 206.01 T
(k) 255.57 206.01 T
6 F
(\271) 248.77 206.01 T
6 17.5 Q
(\325) 244.61 215.2 T
5 10.5 Q
(F) 325.32 218.62 T
5 8.5 Q
(i) 332.13 214.44 T
(k) 338.75 214.44 T
6 F
(,) 334.5 214.44 T
5 10.5 Q
(t) 349.4 218.62 T
6 F
(\050) 344.89 218.62 T
(\051) 352.8 218.62 T
5 F
(d) 320.07 218.62 T
3 8.5 Q
(0) 236.65 209.81 T
6 F
(\245) 236.65 227.71 T
6 17.5 Q
(\362) 231.85 213.81 T
3 10.5 Q
(=) 220.68 218.62 T
6 F
(m) 179.58 184.21 T
5 F
(F) 192.5 184.21 T
5 8.5 Q
(i) 199.32 180.04 T
(k) 205.93 180.04 T
6 F
(,) 201.68 180.04 T
3 F
(*) 199.32 188.2 T
6 10.5 Q
(\050) 188 184.21 T
(\051) 210.18 184.21 T
3 F
(1) 247.23 190.28 T
6 F
(r) 232.06 176.44 T
5 F
(F) 244.71 176.44 T
5 8.5 Q
(i) 251.52 172.26 T
(k) 258.13 172.26 T
6 F
(,) 253.88 172.26 T
3 F
(*) 251.52 180.42 T
6 10.5 Q
(\050) 240.2 176.44 T
(\051) 262.39 176.44 T
3 F
(-) 232.06 184.46 T
(-) 233.81 184.46 T
(-) 235.56 184.46 T
(-) 237.31 184.46 T
(-) 239.06 184.46 T
(-) 240.81 184.46 T
(-) 242.55 184.46 T
(-) 244.3 184.46 T
(-) 246.05 184.46 T
(-) 247.8 184.46 T
(-) 249.55 184.46 T
(-) 251.29 184.46 T
(-) 253.04 184.46 T
(-) 254.79 184.46 T
(-) 256.54 184.46 T
(-) 258.29 184.46 T
(-) 260.04 184.46 T
(-) 261.79 184.46 T
(-) 263.53 184.46 T
(-) 264.14 184.46 T
5 F
(t) 280.9 184.21 T
3 F
(1) 306.8 184.21 T
5 F
(F) 322.55 184.21 T
5 8.5 Q
(i) 329.36 180.04 T
(j) 335.98 180.04 T
6 F
(,) 331.73 180.04 T
5 10.5 Q
(t) 345.22 184.21 T
6 F
(\050) 340.71 184.21 T
(\051) 348.62 184.21 T
3 F
(\320) 314.67 184.21 T
6 F
([) 302.3 184.21 T
(]) 354.35 184.21 T
5 8.5 Q
(j) 284.44 171.6 T
(k) 295.72 171.6 T
6 F
(\271) 288.93 171.6 T
6 17.5 Q
(\325) 284.76 180.79 T
5 10.5 Q
(F) 365.47 184.21 T
5 8.5 Q
(i) 372.29 180.04 T
(k) 378.9 180.04 T
6 F
(,) 374.65 180.04 T
5 10.5 Q
(t) 389.55 184.21 T
6 F
(\050) 385.05 184.21 T
(\051) 392.95 184.21 T
5 F
(d) 360.22 184.21 T
3 8.5 Q
(0) 273.26 175.4 T
6 F
(\245) 273.26 193.3 T
6 17.5 Q
(\362) 268.47 179.4 T
3 10.5 Q
(=) 220.68 184.21 T
6 F
(s) 174.64 149.42 T
3 8.5 Q
(2) 181.37 155.91 T
5 10.5 Q
(F) 192.5 149.42 T
5 8.5 Q
(i) 199.32 145.24 T
(k) 205.93 145.24 T
6 F
(,) 201.68 145.24 T
3 F
(*) 199.32 153.41 T
6 10.5 Q
(\050) 188 149.42 T
(\051) 210.18 149.42 T
3 F
(1) 247.23 155.49 T
6 F
(r) 232.06 141.64 T
5 F
(F) 244.71 141.64 T
5 8.5 Q
(i) 251.52 137.47 T
(k) 258.13 137.47 T
6 F
(,) 253.88 137.47 T
3 F
(*) 251.52 145.63 T
6 10.5 Q
(\050) 240.2 141.64 T
(\051) 262.39 141.64 T
3 F
(-) 232.06 149.66 T
(-) 233.81 149.66 T
(-) 235.56 149.66 T
(-) 237.31 149.66 T
(-) 239.06 149.66 T
(-) 240.81 149.66 T
(-) 242.55 149.66 T
(-) 244.3 149.66 T
(-) 246.05 149.66 T
(-) 247.8 149.66 T
(-) 249.55 149.66 T
(-) 251.29 149.66 T
(-) 253.04 149.66 T
(-) 254.79 149.66 T
(-) 256.54 149.66 T
(-) 258.29 149.66 T
(-) 260.04 149.66 T
(-) 261.79 149.66 T
(-) 263.53 149.66 T
(-) 264.14 149.66 T
5 F
(t) 280.9 149.42 T
3 8.5 Q
(2) 284.22 155.91 T
3 10.5 Q
(1) 311.45 149.42 T
5 F
(F) 327.2 149.42 T
5 8.5 Q
(i) 334.01 145.24 T
(j) 340.63 145.24 T
6 F
(,) 336.38 145.24 T
5 10.5 Q
(t) 349.87 149.42 T
6 F
(\050) 345.36 149.42 T
(\051) 353.27 149.42 T
3 F
(\320) 319.32 149.42 T
6 F
([) 306.94 149.42 T
(]) 359 149.42 T
5 8.5 Q
(j) 289.09 136.81 T
(k) 300.37 136.81 T
6 F
(\271) 293.58 136.81 T
6 17.5 Q
(\325) 289.41 146 T
5 10.5 Q
(F) 370.12 149.42 T
5 8.5 Q
(i) 376.93 145.24 T
(k) 383.55 145.24 T
6 F
(,) 379.3 145.24 T
5 10.5 Q
(t) 394.2 149.42 T
6 F
(\050) 389.69 149.42 T
(\051) 397.6 149.42 T
5 F
(d) 364.87 149.42 T
6 F
(m) 413.35 149.42 T
3 8.5 Q
(2) 419.8 155.91 T
5 10.5 Q
(F) 430.92 149.42 T
5 8.5 Q
(i) 437.74 145.24 T
(k) 444.35 145.24 T
6 F
(,) 440.1 145.24 T
6 10.5 Q
(\050) 426.42 149.42 T
(\051) 448.61 149.42 T
3 F
(\320) 405.48 149.42 T
3 8.5 Q
(0) 273.26 140.61 T
6 F
(\245) 273.26 158.51 T
6 17.5 Q
(\362) 268.47 144.61 T
3 10.5 Q
(=) 220.68 149.42 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 26
%%Page: "21" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(21) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.24 (Note, in any experiment where competing processes in a system are studied, the observed empirical) 87 574.54 P
0.7 (distributions will be conditional. The time it takes a system to transition to the next state will only be) 87 561.54 P
0.81 (observed when that transition occurs. These expressions are defined independently of the exponential) 87 548.54 P
-0.09 (transitions) 87 535.54 P
6 F
-0.09 (e) 135.5 535.54 P
5 8.8 Q
-0.07 (j) 142.16 532.79 P
3 11 Q
-0.09 (. Consequently, the sum of the fast transition probabilities) 146.06 535.54 P
6 F
-0.09 (r) 415.9 535.54 P
3 F
-0.09 (\050) 421.94 535.54 P
5 F
-0.09 (F) 425.6 535.54 P
3 8.8 Q
-0.07 (*) 432.32 539.94 P
5 F
-0.07 (i,k) 433.22 532.79 P
3 11 Q
-0.09 (\051) 441.78 535.54 P
-0.09 (must be 1. In particu-) 448.94 535.54 P
0.65 (lar, if only one fast transition occurs, its probability is 1 and the conditional mean is equivalent to the) 87 522.54 P
0.64 (unconditional mean. \050The SURE user does not have to deal explicitly with the unconditional distribu-) 87 509.54 P
(tions) 87 496.54 T
5 F
(F) 111.14 496.54 T
5 8.8 Q
(i,k) 117.87 493.79 T
3 11 Q
(.  However, to develop the mathematical theory, the distributions must be used.\051) 126.42 496.54 T
8 10.5 Q
(5.5.4. Class 3 path step; slow on path, fast of) 105 473.38 T
(f path.) 297.05 473.38 T
3 11 Q
1.48 (The on-path transition must be slow for a path) 327.67 473.38 P
-0.07 (step to be categorized as class 3.  Both slow and fast off-path transitions can exist; however, at least one) 87 460.38 P
0.88 (off-path transition must be fast. \050See fig. 20.\051 The path step 2) 87 447.38 P
9 F
0.98 (\325) 369.14 447.38 P
3 F
0.88 ( 3 in the model of the triad plus one) 378.36 447.38 P
0.67 (spare shown in figure 15 are in this class. The slow on-path transition rate is) 87 434.38 P
6 F
0.67 (a) 434.94 434.38 P
5 8.8 Q
0.54 (j) 441.88 431.63 P
3 11 Q
0.67 (. The sum of the slow) 444.33 434.38 P
1.4 (off-path transition rates is) 87 421.38 P
6 F
1.4 (b) 208.68 421.38 P
5 8.8 Q
1.12 (j) 214.72 418.63 P
3 11 Q
1.4 (. As in class 2, the transition probability) 217.17 421.38 P
6 F
1.4 (r) 407.89 421.38 P
3 F
1.4 (\050) 413.93 421.38 P
5 F
1.4 (G) 417.59 421.38 P
5 8.8 Q
1.12 (*) 425.54 425.78 P
1.12 (j,k) 425.49 418.63 P
3 11 Q
1.4 (\051,) 434.6 421.38 P
1.4 (the) 446.27 421.38 P
1.4 ( conditional) 460.83 421.38 P
1.4 (mean) 519.73 421.38 P
6 F
0.26 (m) 88.67 408.38 P
3 F
0.26 (\050) 95 408.38 P
5 F
0.26 (G) 98.67 408.38 P
5 8.8 Q
0.21 (*) 106.61 412.78 P
0.21 (j,k) 107.12 405.63 P
3 11 Q
0.26 (\051,) 115.67 408.38 P
0.26 (and) 126.21 408.38 P
0.26 (the) 146.22 408.38 P
0.26 (conditional) 163.79 408.38 P
0.26 (variance) 217.42 408.38 P
6 F
0.26 (s) 257.69 408.38 P
5 8.8 Q
0.21 (2) 264.32 412.78 P
3 11 Q
0.26 (\050) 268.72 408.38 P
5 F
0.26 (G) 272.38 408.38 P
5 8.8 Q
0.21 (*) 280.33 412.78 P
0.21 (j,k) 280.84 405.63 P
3 11 Q
0.26 (\051) 289.39 408.38 P
0.26 (must) 297.18 408.38 P
0.26 (be given) 322.7 408.38 P
0.26 (for each fast off-path transition with dis-) 363 408.38 P
0.12 (tribution) 87 395.38 P
5 F
0.12 ( G) 124.89 395.38 P
5 8.8 Q
0.09 (j,k) 135.7 392.63 P
3 11 Q
0.12 (. Two letters are used to help track whether the transition is a class 2 \050labeled) 144.26 395.38 P
5 F
0.12 (F) 487.97 395.38 P
3 F
0.12 (\051 or class 3) 494.69 395.38 P
(\050labeled) 87 382.38 T
5 F
( G) 122.43 382.38 T
3 F
(\051 in the current path.) 133.12 382.38 T
-0.12 (In either case, the SURE user supplies the conditional mean, the conditional standard deviation, and) 105 216.83 P
1.15 (the transition probability. Although, the parameters described above suffice to specify a class 3 path) 87 203.83 P
-0.23 (step to SURE, the mathematical theory is more easily expressed in terms of the holding time in the state.) 87 190.83 P
0.07 (The holding time in a state is the time the system remains in the state before it transitions to some other) 87 177.83 P
1.7 (state. The bounding theorem is expressed by using a slightly different holding time, which will be) 87 164.83 P
0.67 (referred to as \322recovery holding time\323 to prevent confusion. The recovery holding time is the holding) 87 151.83 P
0.29 (time in the state with the slow exponential distributions removed. Because the slow exponential transi-) 87 138.83 P
-0.11 (tions occur at a rate many orders of magnitude less than the fast transitions, the recovery holding time is) 87 125.83 P
3 9 Q
(Figure 19.  Class 2 path step.  Fast on path; arbitrary off path.) 204.26 606.88 T
(Figure 20.  Class 3 path step.  Slow on path; fast off path.) 211.51 245.16 T
87 612.88 543 726 C
253.5 623.88 376.5 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 152 417 263 518 111 101 259.5 625.67 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig19.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig19.ps)
%%CreationDate: (7/27/95) (8:30 AM)
%%BoundingBox: 152 417 263 518
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
258 503 l
S
0 To
1 0 0 1 225.5 509 0 Tp
TP
-7.374 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Italic 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(F) Tx 
-4 Ts
(i) Tx 
/_Times-Roman 9 Tf
(,1) Tx 
(\r) TX 
TO
u
261.2588 503 m
254.7075 501.4565 l
256.1138 503 L
254.7075 504.5435 l
261.2588 503 L
f
U
0 To
1 0 0 1 176.5 500.25 0 Tp
TP
-1.2502 0 Td
0 Tr
/_Times-Italic 9 Tf
0 Ts
(i) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.75 493.75 m
176.75 421.75 l
S
u
0 O
0 g
1 w
176.75 418.4912 m
175.2065 425.0425 l
176.75 423.6362 L
178.2935 425.0425 l
176.75 418.4912 L
f
U
0 To
1 0 0 1 166 456 0 Tp
TP
-3.2256 0 Td
0 Tr
/_Symbol 9 Tf
(e) Tx 
/_Times-Italic 9 Tf
-4 Ts
(i) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
185.1175 500.6056 m
255.1284 481.7715 l
S
u
0 O
0 g
1 w
258.2753 480.9249 m
251.5479 481.1363 l
253.3069 482.2615 L
252.3499 484.1173 l
258.2753 480.9249 L
f
U
0 R
0 G
0.75 w
181.3638 495.3701 m
221.7842 435.1831 l
S
u
0 O
0 g
1 w
223.6011 432.4778 m
218.6672 437.0559 l
220.7326 436.749 L
221.2299 438.777 l
223.6011 432.4778 L
f
U
u
224.25 482.3661 m
224.7381 482.3661 225.1339 482.7619 225.1339 483.25 c
225.1339 483.7381 224.7381 484.1339 224.25 484.1339 c
223.7619 484.1339 223.3661 483.7381 223.3661 483.25 c
223.3661 482.7619 223.7619 482.3661 224.25 482.3661 c
f
224.25 483.25 m
F
U
u
224.25 473.1161 m
224.7381 473.1161 225.1339 473.5119 225.1339 474 c
225.1339 474.4881 224.7381 474.8839 224.25 474.8839 c
223.7619 474.8839 223.3661 474.4881 223.3661 474 c
223.3661 473.5119 223.7619 473.1161 224.25 473.1161 c
f
224.25 474 m
F
U
u
224.25 463.8661 m
224.7381 463.8661 225.1339 464.2619 225.1339 464.75 c
225.1339 465.2381 224.7381 465.6339 224.25 465.6339 c
223.7619 465.6339 223.3661 465.2381 223.3661 464.75 c
223.3661 464.2619 223.7619 463.8661 224.25 463.8661 c
f
224.25 464.75 m
F
U
0 To
1 0 0 1 225.5 495.5 0 Tp
TP
-7.374 0 Td
0 Tr
0 Ts
(F) Tx 
-4 Ts
(i) Tx 
/_Times-Roman 9 Tf
(,2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 225.5 447.75 0 Tp
TP
-8.6243 0 Td
0 Tr
/_Times-Italic 9 Tf
0 Ts
(F) Tx 
-4 Ts
(i) Tx 
/_Times-Roman 9 Tf
(,) Tx 
/_Times-Italic 9 Tf
(n) Tx 
-6 Ts
(i) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 612.88 543 726 C
0 0 612 792 C
402.87 528.29 415.9 546.34 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 17.5 Q
0 X
0 0 0 1 0 0 0 K
(\345) 403.87 532.18 T
0 0 612 792 C
87 251.16 543 362.71 C
253.5 262.16 376.5 362.71 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 152 417 263 520 111 103 259.5 262.6 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig20.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig20.ps)
%%CreationDate: (7/27/95) (8:30 AM)
%%BoundingBox: 152 417 263 520
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
258 503 l
S
0 To
1 0 0 1 235.5 510.75 0 Tp
TP
-4.0891 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(a) Tx 
/_Times-Italic 9 Tf
-4 Ts
(j) Tx 
(\r) TX 
TO
u
261.2588 503 m
254.7075 501.4565 l
256.1138 503 L
254.7075 504.5435 l
261.2588 503 L
f
U
0 To
1 0 0 1 176.5 500.25 0 Tp
TP
-1.2502 0 Td
0 Tr
0 Ts
(j) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.75 493.75 m
176.75 421.75 l
S
u
0 O
0 g
1 w
176.75 418.4912 m
175.2065 425.0425 l
176.75 423.6362 L
178.2935 425.0425 l
176.75 418.4912 L
f
U
0 To
1 0 0 1 166 456 0 Tp
TP
-3.72 0 Td
0 Tr
/_Symbol 9 Tf
(b) Tx 
/_Times-Italic 9 Tf
-4 Ts
(j) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
185.1175 500.6056 m
255.1284 481.7715 l
S
u
0 O
0 g
1 w
258.2753 480.9249 m
251.5479 481.1363 l
253.3069 482.2615 L
252.3499 484.1173 l
258.2753 480.9249 L
f
U
0 R
0 G
0.75 w
181.3638 495.3701 m
221.7842 435.1831 l
S
u
0 O
0 g
1 w
223.6011 432.4778 m
218.6672 437.0559 l
220.7326 436.749 L
221.2299 438.777 l
223.6011 432.4778 L
f
U
u
234.25 462.6161 m
234.7381 462.6161 235.1339 463.0119 235.1339 463.5 c
235.1339 463.9881 234.7381 464.3839 234.25 464.3839 c
233.7619 464.3839 233.3661 463.9881 233.3661 463.5 c
233.3661 463.0119 233.7619 462.6161 234.25 462.6161 c
f
234.25 463.5 m
F
U
u
234.25 453.3661 m
234.7381 453.3661 235.1339 453.7619 235.1339 454.25 c
235.1339 454.7381 234.7381 455.1339 234.25 455.1339 c
233.7619 455.1339 233.3661 454.7381 233.3661 454.25 c
233.3661 453.7619 233.7619 453.3661 234.25 453.3661 c
f
234.25 454.25 m
F
U
u
234.25 444.1161 m
234.7381 444.1161 235.1339 444.5119 235.1339 445 c
235.1339 445.4881 234.7381 445.8839 234.25 445.8839 c
233.7619 445.8839 233.3661 445.4881 233.3661 445 c
233.3661 444.5119 233.7619 444.1161 234.25 444.1161 c
f
234.25 445 m
F
U
0 To
1 0 0 1 235.5 495.25 0 Tp
TP
-7.8739 0 Td
0 Tr
0 Ts
(G) Tx 
-4 Ts
(j) Tx 
/_Times-Roman 9 Tf
(,1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 235.5 431 0 Tp
TP
-9.1241 0 Td
0 Tr
/_Times-Italic 9 Tf
0 Ts
(G) Tx 
-4 Ts
(j) Tx 
/_Times-Roman 9 Tf
(,) Tx 
/_Times-Italic 9 Tf
(n) Tx 
-6 Ts
(j) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
184.3845 498.7777 m
248.5759 465.0779 l
S
u
0 O
0 g
1 w
251.4613 463.5631 m
244.9433 465.2417 l
246.9059 465.9546 L
246.3782 467.9749 l
251.4613 463.5631 L
f
U
0 To
1 0 0 1 235.5 480.25 0 Tp
TP
-7.8739 0 Td
0 Tr
0 Ts
(G) Tx 
-4 Ts
(j) Tx 
/_Times-Roman 9 Tf
(,2) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 251.16 543 362.71 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 27
%%Page: "22" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(22) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.23 (approximately equal to the traditional holding time. Let) 87 718.67 P
5 F
1.23 (H) 343.98 718.67 P
5 8.8 Q
0.98 (j) 351.92 715.92 P
3 11 Q
1.23 (represent the distribution of the recovery) 357.55 718.67 P
(holding time in state) 87 705.67 T
5 F
( \050j\051) 177.15 705.67 T
3 F
(Then the following parameters are used in the theorem:) 87 632.73 T
0.78 (These parameters are the mean and the variance of the holding time in state \050) 87 503.85 P
5 F
0.78 (j\051) 436.34 503.85 P
3 F
0.78 ( without consideration) 443.06 503.85 P
-0.15 (for the slow exponential transitions \050i.e., with the slow exponential transitions removed\051. These parame-) 87 490.85 P
1.18 (ters do not have to be supplied to the SURE program. The SURE program derives these parameters) 87 477.85 P
(from the other available inputs, such as) 87 464.85 T
6 F
(r\050) 262.36 464.85 T
5 F
(G) 272.06 464.85 T
5 8.8 Q
(*) 280.01 469.25 T
(j,k) 280.52 462.1 T
3 11 Q
(\051,) 290.18 464.85 T
6 F
(m) 299.34 464.85 T
3 F
(\050) 305.68 464.85 T
5 F
(G) 309.34 464.85 T
5 8.8 Q
(*) 317.29 469.25 T
(j,k) 317.8 462.1 T
3 11 Q
(\051, and) 326.35 464.85 T
6 F
(s) 354.15 464.85 T
5 8.8 Q
(2) 360.78 469.25 T
3 11 Q
(\050) 365.18 464.85 T
5 F
(G) 368.84 464.85 T
5 8.8 Q
(*) 376.79 469.25 T
(j,k) 376.74 462.1 T
3 11 Q
(\051, as follows:) 385.29 464.85 T
(The parameters) 87 335.7 T
6 F
(r) 157.86 335.7 T
3 F
(\050) 163.9 335.7 T
5 F
(G) 167.56 335.7 T
5 8.8 Q
(*) 175.51 340.1 T
(j,k) 176.02 332.95 T
3 11 Q
(\051,) 184.57 335.7 T
6 F
(m) 193.73 335.7 T
3 F
(\050) 200.07 335.7 T
5 F
(G) 203.73 335.7 T
5 8.8 Q
(*) 211.67 340.1 T
(j,k) 211.63 332.95 T
3 11 Q
(\051, and) 220.18 335.7 T
6 F
(s) 247.98 335.7 T
5 8.8 Q
(2) 254.61 340.1 T
3 11 Q
(\050) 259.01 335.7 T
5 F
(G) 262.68 335.7 T
5 8.8 Q
(*) 270.62 340.1 T
(j,k) 270.57 332.95 T
3 11 Q
(\051) 279.13 335.7 T
(are defined exactly  as the class 2 path step p) 285.54 335.7 T
(arameters.) 482.88 335.7 T
0.19 (Although the fast distributions are specified without consideration of the competing slow exponen-) 105 309.86 P
-0.17 (tial transitions, the theorem gives bounds that are correct in the presence of such exponential transitions.) 87 296.86 P
0.26 (The parameters were defined in this manner to simplify the process of specifying a model. Throughout) 87 283.86 P
-0.18 (the paper, the holding time in a state in which the slow transitions have been removed will be referred to) 87 270.86 P
0.3 (as \322recovery holding time.\323 For convenience, when referring to a specific path in the model, the distri-) 87 257.86 P
0.37 (bution of a fast on-path transition will be indicated by a single subscript that specifies the source state.) 87 244.86 P
0.14 (For example, if the transition with distribution) 87 231.86 P
5 F
0.14 (F) 294.56 231.86 P
5 8.8 Q
0.12 (j,k) 301.28 229.11 P
3 11 Q
0.14 ( is the on-path transition from state \050) 309.84 231.86 P
5 F
0.14 (j) 471.24 231.86 P
3 F
0.14 (\051, then it can be) 474.3 231.86 P
0.65 (referred to as) 87 218.86 P
5 F
0.65 (F) 149.73 218.86 P
5 8.8 Q
0.52 (j) 156.45 216.11 P
3 11 Q
0.65 (, where) 159.81 218.86 P
5 F
0.65 (F) 196.24 218.86 P
5 8.8 Q
0.52 (j,k) 202.96 216.11 P
3 11 Q
0.65 ( is the) 211.51 218.86 P
5 F
0.65 (k) 242.49 218.86 P
3 F
0.65 (th fast transition from state \050) 247.38 218.86 P
5 F
0.65 (j) 375.59 218.86 P
3 F
0.65 (\051 and) 378.65 218.86 P
5 F
0.65 (F) 405 218.86 P
5 8.8 Q
0.52 (j) 411.72 216.11 P
3 11 Q
0.65 ( is the on-path fast transition) 414.17 218.86 P
(from state \050) 87 205.86 T
5 F
(j) 137.71 205.86 T
3 F
(\051.) 140.77 205.86 T
8 10.5 Q
( 5.5.5. SURE bounding theorem.) 105 174.85 T
3 11 Q
-0.04 (With the classification and notation from the previous sections, the) 248.82 174.85 P
0.34 (bounding theorem can now be presented. The proof of this theorem has been published in references 1) 87 161.85 P
(and 12 and is not given in this paper.) 87 148.85 T
4 F
-0.24 (Theorem) 107.51 122.01 P
3 F
-0.24 (:  The theorem of White states that the probability) 150.28 122.01 P
5 F
-0.24 (D\050T\051) 370.31 122.01 P
3 F
-0.24 ( of entering a particular death state) 391.7 122.01 P
0.13 (within the mission time) 87 109.01 P
5 F
0.13 (T) 193.87 109.01 P
3 F
0.13 (, following a path with) 199.99 109.01 P
5 F
0.13 ( k) 300.42 109.01 P
3 F
0.13 (class 1 path steps,) 311.07 109.01 P
5 F
0.13 (m) 393.17 109.01 P
3 F
0.13 ( class 2 path steps, and) 401.11 109.01 P
5 F
0.13 (n) 504.85 109.01 P
3 F
0.13 ( class 3) 510.35 109.01 P
(path steps is bounded as follows \050refs. 1 and 12\051:) 87 96.01 T
5 10.5 Q
(LB) 280.5 69.5 T
3 F
( <) 292.75 69.5 T
5 F
(D\050T\051) 303.92 69.5 T
3 F
( <) 324.33 69.5 T
5 F
(UB) 335.51 69.5 T
238.65 649.9 391.35 692.16 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(H) 244.9 667.74 T
5 8.5 Q
(j) 252.88 663.56 T
5 10.5 Q
(t) 262.12 667.74 T
6 F
(\050) 257.61 667.74 T
(\051) 265.52 667.74 T
3 F
(1) 287.19 667.74 T
(1) 328.73 667.74 T
5 F
(G) 344.47 667.74 T
5 8.5 Q
(j) 352.46 663.56 T
(k) 359.07 663.56 T
6 F
(,) 354.82 663.56 T
5 10.5 Q
(t) 369.72 667.74 T
6 F
(\050) 365.21 667.74 T
(\051) 373.12 667.74 T
3 F
(\320) 336.6 667.74 T
6 F
([) 324.22 667.74 T
(]) 378.85 667.74 T
5 8.5 Q
(k) 302.94 653.03 T
3 F
(1) 317.17 653.03 T
(=) 309.54 653.03 T
5 F
(n) 308.99 684.78 T
5 6.5 Q
(j) 313.56 681.71 T
6 17.5 Q
(\325) 304.98 664.32 T
3 10.5 Q
(\320) 295.07 667.74 T
(=) 276.02 667.74 T
0 0 612 792 C
208.42 527.03 424.2 613.22 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10.5 Q
0 X
0 0 0 1 0 0 0 K
(m) 214.35 588.8 T
5 F
(H) 227.28 588.8 T
5 8.5 Q
(j) 235.26 584.62 T
6 10.5 Q
(\050) 222.77 588.8 T
(\051) 238.1 588.8 T
3 8.5 Q
(0) 264.57 579.99 T
6 F
(\245) 264.57 597.89 T
6 17.5 Q
(\362) 259.77 583.98 T
3 10.5 Q
(1) 303.86 588.8 T
5 F
(G) 319.61 588.8 T
5 8.5 Q
(j) 327.59 584.62 T
(k) 334.2 584.62 T
6 F
(,) 329.95 584.62 T
5 10.5 Q
(t) 344.86 588.8 T
6 F
(\050) 340.35 588.8 T
(\051) 348.26 588.8 T
3 F
(\320) 311.73 588.8 T
6 F
([) 299.36 588.8 T
(]) 353.99 588.8 T
5 F
(d) 359.86 588.8 T
(t) 365.73 588.8 T
5 8.5 Q
(k) 278.08 574.08 T
3 F
(1) 292.3 574.08 T
(=) 284.68 574.08 T
5 F
(n) 284.12 605.84 T
5 6.5 Q
(j) 288.7 602.77 T
6 17.5 Q
(\325) 280.11 585.38 T
3 10.5 Q
(=) 248.6 588.8 T
6 F
(s) 209.42 544.86 T
3 8.5 Q
(2) 216.15 551.35 T
5 10.5 Q
(H) 227.28 544.86 T
5 8.5 Q
(j) 235.26 540.69 T
6 10.5 Q
(\050) 222.77 544.86 T
(\051) 238.1 544.86 T
3 F
(2) 259.77 544.86 T
5 F
(t) 278.08 544.86 T
3 8.5 Q
(0) 270.44 536.05 T
6 F
(\245) 270.44 553.96 T
6 17.5 Q
(\362) 265.64 540.05 T
3 10.5 Q
(1) 307.4 544.86 T
5 F
(G) 323.15 544.86 T
5 8.5 Q
(j) 331.13 540.69 T
(k) 337.74 540.69 T
6 F
(,) 333.49 540.69 T
5 10.5 Q
(t) 348.39 544.86 T
6 F
(\050) 343.89 544.86 T
(\051) 351.8 544.86 T
3 F
(\320) 315.27 544.86 T
6 F
([) 302.89 544.86 T
(]) 357.53 544.86 T
5 F
(d) 363.4 544.86 T
(t) 369.27 544.86 T
6 F
(m) 384.55 544.86 T
3 8.5 Q
(2) 391 551.35 T
5 10.5 Q
(H) 402.13 544.86 T
5 8.5 Q
(j) 410.11 540.69 T
6 10.5 Q
(\050) 397.62 544.86 T
(\051) 412.95 544.86 T
3 F
(\320) 376.68 544.86 T
5 8.5 Q
(k) 281.61 530.15 T
3 F
(1) 295.84 530.15 T
(=) 288.22 530.15 T
5 F
(n) 287.66 561.91 T
5 6.5 Q
(j) 292.24 558.84 T
6 17.5 Q
(\325) 283.65 541.44 T
3 10.5 Q
(=) 248.6 544.86 T
0 0 612 792 C
170.74 358.87 459.26 445.34 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10.5 Q
0 X
0 0 0 1 0 0 0 K
(m) 185.19 420.85 T
5 F
(H) 196.12 420.85 T
5 8.5 Q
(j) 204.1 416.68 T
6 10.5 Q
(\050) 191.61 420.85 T
(\051) 206.95 420.85 T
(r) 250.14 420.85 T
5 F
(G) 259.78 420.85 T
5 8.5 Q
(j) 267.77 416.68 T
(k) 274.38 416.68 T
6 F
(,) 270.13 416.68 T
3 F
(*) 267.76 424.84 T
6 10.5 Q
(\050) 255.28 420.85 T
(\051) 278.64 420.85 T
(m) 287.5 420.85 T
5 F
(G) 298.43 420.85 T
5 8.5 Q
(j) 306.41 416.68 T
(k) 313.02 416.68 T
6 F
(,) 308.77 416.68 T
3 F
(*) 306.41 424.84 T
6 10.5 Q
(\050) 293.92 420.85 T
(\051) 317.28 420.85 T
5 8.5 Q
(k) 230.61 406.07 T
3 F
(1) 244.84 406.07 T
(=) 237.22 406.07 T
5 F
(n) 236.66 437.97 T
5 6.5 Q
(j) 241.24 434.89 T
6 17.5 Q
(\345) 233.62 417.48 T
3 10.5 Q
(=) 219.44 420.85 T
6 F
(s) 180.26 376.78 T
3 8.5 Q
(2) 186.99 383.27 T
5 10.5 Q
(H) 195.62 376.78 T
5 8.5 Q
(j) 203.6 372.61 T
6 10.5 Q
(\050) 191.11 376.78 T
(\051) 206.45 376.78 T
(r) 257.94 376.78 T
5 F
(G) 268.08 376.78 T
5 8.5 Q
(j) 276.07 372.61 T
(k) 282.68 372.61 T
6 F
(,) 278.43 372.61 T
3 F
(*) 276.07 380.77 T
6 10.5 Q
(\050) 263.58 376.78 T
(\051) 286.94 376.78 T
(s) 301.56 376.78 T
3 8.5 Q
(2) 308.29 383.27 T
5 10.5 Q
(G) 317.42 376.78 T
5 8.5 Q
(j) 325.4 372.61 T
(k) 332.01 372.61 T
6 F
(,) 327.77 372.61 T
3 F
(*) 325.4 380.77 T
6 10.5 Q
(\050) 312.92 376.78 T
(\051) 336.27 376.78 T
(m) 360.95 376.78 T
3 8.5 Q
(2) 367.4 383.27 T
5 10.5 Q
(G) 372.27 376.78 T
5 8.5 Q
(j) 380.25 372.61 T
(k) 386.86 372.61 T
6 F
(,) 382.61 372.61 T
3 F
(*) 380.25 380.77 T
6 10.5 Q
(\050) 356.45 376.78 T
(\051) 391.12 376.78 T
3 F
(+) 346.14 376.78 T
5 8.5 Q
(k) 238.41 362 T
3 F
(1) 252.64 362 T
(=) 245.02 362 T
5 F
(n) 244.46 393.9 T
5 6.5 Q
(j) 249.04 390.82 T
6 17.5 Q
(\345) 241.42 373.41 T
6 10.5 Q
(\356) 232.37 369.46 T
(\376) 402.73 369.46 T
(\355) 232.37 378.46 T
(\375) 402.73 378.46 T
(\354) 232.37 387.46 T
(\374) 402.73 387.46 T
(m) 419.87 376.78 T
3 8.5 Q
(2) 426.32 383.27 T
5 10.5 Q
(H) 437.45 376.78 T
5 8.5 Q
(j) 445.43 372.61 T
6 10.5 Q
(\050) 432.94 376.78 T
(\051) 448.28 376.78 T
3 F
(\320) 412 376.78 T
(=) 219.44 376.78 T
300.55 372.58 297.4 372.58 297.4 387.54 3 L
0.47 H
2 Z
N
297.4 387.54 300.55 387.54 2 L
N
396.85 372.58 400 372.58 400 387.54 3 L
N
400 387.54 396.85 387.54 2 L
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 28
%%Page: "23" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(23) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(where) 87 718.67 T
( for all) 87 560.81 T
5 F
( r) 116.33 560.81 T
5 8.8 Q
(i) 123.36 558.06 T
5 11 Q
(, s) 125.8 560.81 T
5 8.8 Q
(j) 135.58 558.06 T
3 11 Q
(> 0 and) 140.78 560.81 T
6 F
(D) 176.62 560.81 T
3 F
( =) 183.35 560.81 T
5 F
( r) 192.3 560.81 T
3 8.8 Q
(1) 199.33 558.06 T
3 11 Q
( +) 203.73 560.81 T
5 F
(r) 215.43 560.81 T
3 8.8 Q
(2) 219.71 558.06 T
3 11 Q
( +...+) 224.11 560.81 T
5 F
(r) 250.27 560.81 T
5 8.8 Q
(m) 254.55 558.06 T
3 11 Q
( +) 260.9 560.81 T
5 F
(s) 272.61 560.81 T
3 8.8 Q
(1) 276.89 558.06 T
3 11 Q
( +) 281.29 560.81 T
5 F
(s) 292.99 560.81 T
3 8.8 Q
(2) 297.27 558.06 T
3 11 Q
(...+) 303.87 560.81 T
5 F
(s) 321.07 560.81 T
5 8.8 Q
(n) 325.35 558.06 T
3 11 Q
( and) 329.75 560.81 T
-0.1 ( The theorem is true for any) 105 502.73 P
5 F
-0.1 (r) 229.86 502.73 P
5 8.8 Q
-0.08 (i) 234.14 499.98 P
3 11 Q
-0.1 ( > 0 and) 236.59 502.73 P
5 F
-0.1 (s) 274.78 502.73 P
5 8.8 Q
-0.08 (j) 279.05 499.98 P
3 11 Q
-0.1 (> 0 provided that) 283.62 502.73 P
6 F
-0.1 (D) 361.53 502.73 P
3 F
-0.1 ( <) 368.27 502.73 P
5 F
-0.1 (T) 379.77 502.73 P
3 F
-0.1 (. Different choices of these parame-) 385.89 502.73 P
(ters will lead to different bounds. The SURE program uses the following values of) 87 489.73 T
5 F
(r) 452.71 489.73 T
5 8.8 Q
(i) 456.98 486.98 T
3 11 Q
( and) 459.43 489.73 T
5 F
(s) 480.82 489.73 T
5 8.8 Q
(j) 485.09 486.98 T
3 11 Q
(:) 487.54 489.73 T
0.35 (These values have been found to give very close bounds in practice and are usually very near the opti-) 87 368.42 P
(mal choice \050ref.1\051.) 87 355.42 T
0.12 (Two simple algebraic approximations for) 105 336.51 P
5 F
0.12 (Q) 290.42 336.51 P
3 F
0.12 (\050) 298.37 336.51 P
5 F
0.12 (T) 302.03 336.51 P
3 F
0.12 (\051 were given by White in reference 13.  One approxi-) 308.14 336.51 P
(mation overestimates and one approximation underestimates, and are given respectively as) 87 323.51 T
0.21 (Both) 105 218.1 P
5 F
0.21 (Q) 129.35 218.1 P
5 8.8 Q
0.17 (u) 137.29 215.35 P
5 11 Q
0.21 (\050T) 141.69 218.1 P
3 F
0.21 (\051 and) 151.47 218.1 P
5 F
0.21 (Q) 176.93 218.1 P
5 8.8 Q
0.17 (l) 184.87 215.35 P
5 11 Q
0.21 (\050T\051) 187.32 218.1 P
3 F
0.21 ( are close to) 200.76 218.1 P
5 F
0.21 ( Q\050T\051) 254.23 218.1 P
3 F
0.21 ( as long as) 278.57 218.1 P
0.21 (\050) 355.7 218.1 P
6 F
0.21 (l) 359.36 218.1 P
5 8.8 Q
0.17 (i) 365.4 215.35 P
5 11 Q
0.21 ( +) 367.85 218.1 P
6 F
0.21 (g) 381.19 218.1 P
5 8.8 Q
0.17 (i) 385.71 215.35 P
3 11 Q
0.21 (\051) 388.16 218.1 P
5 F
0.21 ( T) 391.82 218.1 P
3 F
0.21 ( is small.  That is, as long as the) 400.89 218.1 P
0.46 (mission time is short compared with the average lifetime of the components. The SURE program uses) 87 205.1 P
(the following slightly improved upper bound on) 87 192.1 T
5 F
(Q) 301.19 192.1 T
3 F
(\050) 309.13 192.1 T
5 F
(T) 312.8 192.1 T
3 F
(\051:) 318.91 192.1 T
(where) 87 123.58 T
137.8 577.06 492.19 706.08 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(U) 141.05 684.24 T
(B) 149.25 684.24 T
(Q) 172.09 684.24 T
(T) 186.55 684.24 T
6 F
(\050) 182.04 684.24 T
(\051) 192.87 684.24 T
(r) 216.85 684.24 T
5 8.5 Q
(i) 198.74 669.53 T
3 F
(1) 211.55 669.53 T
(=) 203.93 669.53 T
5 F
(m) 204.2 698.71 T
6 17.5 Q
(\325) 200.07 680.82 T
5 10.5 Q
(F) 229.49 684.24 T
5 8.5 Q
(i) 236.31 680.06 T
3 F
(*) 236.31 688.22 T
6 10.5 Q
(\050) 224.99 684.24 T
(\051) 241.04 684.24 T
(a) 265.03 684.24 T
5 8.5 Q
(j) 272.06 680.06 T
6 10.5 Q
(m) 275.04 684.24 T
5 F
(H) 287.96 684.24 T
5 8.5 Q
(j) 295.95 680.06 T
6 10.5 Q
(\050) 283.46 684.24 T
(\051) 298.79 684.24 T
5 8.5 Q
(j) 246.91 669.53 T
3 F
(1) 259.73 669.53 T
(=) 252.11 669.53 T
5 F
(n) 253.32 698.71 T
6 17.5 Q
(\325) 248.24 680.82 T
3 10.5 Q
(=) 160.92 684.24 T
5 F
(L) 142.8 640.59 T
(B) 149.25 640.59 T
(Q) 172.09 640.59 T
(T) 186.55 640.59 T
6 F
(D) 202.88 640.59 T
3 F
(\320) 195.01 640.59 T
6 F
(\050) 182.04 640.59 T
(\051) 209.79 640.59 T
(r) 233.78 640.59 T
5 F
(F) 246.42 640.59 T
5 8.5 Q
(i) 253.24 636.41 T
3 F
(*) 253.24 644.58 T
6 10.5 Q
(\050) 241.92 640.59 T
(\051) 257.97 640.59 T
3 F
(1) 270.09 640.59 T
6 F
(e) 285.84 640.59 T
5 8.5 Q
(i) 290.85 636.41 T
6 10.5 Q
(m) 293.83 640.59 T
5 F
(F) 306.76 640.59 T
5 8.5 Q
(i) 313.57 636.41 T
3 F
(*) 313.57 644.58 T
6 10.5 Q
(\050) 302.26 640.59 T
(\051) 318.31 640.59 T
(-) 324.17 640.59 T
(m) 333.39 650.34 T
3 8.5 Q
(2) 339.84 656.83 T
5 10.5 Q
(F) 350.97 650.34 T
5 8.5 Q
(i) 357.78 646.16 T
3 F
(*) 357.78 654.33 T
6 10.5 Q
(\050) 346.46 650.34 T
(\051) 362.52 650.34 T
(s) 378.94 650.34 T
3 8.5 Q
(2) 385.67 656.83 T
5 10.5 Q
(F) 396.79 650.34 T
5 8.5 Q
(i) 403.61 646.16 T
3 F
(*) 403.61 654.33 T
6 10.5 Q
(\050) 392.29 650.34 T
(\051) 408.34 650.34 T
3 F
(+) 370.39 650.34 T
5 F
(r) 369.13 628.81 T
5 8.5 Q
(i) 373.61 624.64 T
3 F
(2) 373.61 635.3 T
3 10.5 Q
(-) 333.39 640.83 T
(-) 335.14 640.83 T
(-) 336.89 640.83 T
(-) 338.64 640.83 T
(-) 340.39 640.83 T
(-) 342.14 640.83 T
(-) 343.88 640.83 T
(-) 345.63 640.83 T
(-) 347.38 640.83 T
(-) 349.13 640.83 T
(-) 350.88 640.83 T
(-) 352.62 640.83 T
(-) 354.37 640.83 T
(-) 356.12 640.83 T
(-) 357.87 640.83 T
(-) 359.62 640.83 T
(-) 361.37 640.83 T
(-) 363.11 640.83 T
(-) 364.86 640.83 T
(-) 366.61 640.83 T
(-) 368.36 640.83 T
(-) 370.11 640.83 T
(-) 371.86 640.83 T
(-) 373.6 640.83 T
(-) 375.35 640.83 T
(-) 377.1 640.83 T
(-) 378.85 640.83 T
(-) 380.6 640.83 T
(-) 382.35 640.83 T
(-) 384.09 640.83 T
(-) 385.84 640.83 T
(-) 387.59 640.83 T
(-) 389.34 640.83 T
(-) 391.09 640.83 T
(-) 392.83 640.83 T
(-) 394.58 640.83 T
(-) 396.33 640.83 T
(-) 398.08 640.83 T
(-) 399.83 640.83 T
(-) 401.58 640.83 T
(-) 403.32 640.83 T
(-) 405.07 640.83 T
(-) 406.82 640.83 T
(-) 408.57 640.83 T
(-) 410.09 640.83 T
(\320) 277.97 640.59 T
5 8.5 Q
(i) 215.66 625.88 T
3 F
(1) 228.48 625.88 T
(=) 220.85 625.88 T
5 F
(m) 221.13 655.06 T
6 17.5 Q
(\325) 216.99 637.17 T
3 10.5 Q
(=) 160.92 640.59 T
6 F
(a) 200.42 594.9 T
5 8.5 Q
(j) 207.44 590.72 T
6 10.5 Q
(m) 222.24 594.9 T
5 F
(H) 235.16 594.9 T
5 8.5 Q
(j) 243.15 590.72 T
6 10.5 Q
(\050) 230.66 594.9 T
(\051) 245.99 594.9 T
(a) 268.21 604.4 T
5 8.5 Q
(j) 275.23 600.23 T
6 10.5 Q
(b) 288.77 604.4 T
5 8.5 Q
(j) 294.93 600.23 T
3 10.5 Q
(+) 280.22 604.4 T
6 F
(\050) 263.7 604.4 T
(\051) 297.78 604.4 T
(m) 309.91 604.4 T
3 8.5 Q
(2) 316.35 610.89 T
5 10.5 Q
(H) 327.48 604.4 T
5 8.5 Q
(j) 335.46 600.23 T
6 10.5 Q
(\050) 322.98 604.4 T
(\051) 338.31 604.4 T
(s) 354.73 604.4 T
3 8.5 Q
(2) 361.46 610.89 T
5 10.5 Q
(H) 372.59 604.4 T
5 8.5 Q
(j) 380.57 600.23 T
6 10.5 Q
(\050) 368.08 604.4 T
(\051) 383.41 604.4 T
3 F
(+) 346.18 604.4 T
(2) 325.55 587.86 T
(-) 261.95 594.9 T
(-) 263.7 594.9 T
(-) 265.45 594.9 T
(-) 267.2 594.9 T
(-) 268.94 594.9 T
(-) 270.69 594.9 T
(-) 272.44 594.9 T
(-) 274.19 594.9 T
(-) 275.94 594.9 T
(-) 277.69 594.9 T
(-) 279.43 594.9 T
(-) 281.18 594.9 T
(-) 282.93 594.9 T
(-) 284.68 594.9 T
(-) 286.43 594.9 T
(-) 288.17 594.9 T
(-) 289.92 594.9 T
(-) 291.67 594.9 T
(-) 293.42 594.9 T
(-) 295.17 594.9 T
(-) 296.92 594.9 T
(-) 298.67 594.9 T
(-) 300.41 594.9 T
(-) 302.16 594.9 T
(-) 303.91 594.9 T
(-) 305.66 594.9 T
(-) 307.41 594.9 T
(-) 309.15 594.9 T
(-) 310.9 594.9 T
(-) 312.65 594.9 T
(-) 314.4 594.9 T
(-) 316.15 594.9 T
(-) 317.89 594.9 T
(-) 319.64 594.9 T
(-) 321.39 594.9 T
(-) 323.14 594.9 T
(-) 324.89 594.9 T
(-) 326.64 594.9 T
(-) 328.39 594.9 T
(-) 330.13 594.9 T
(-) 331.88 594.9 T
(-) 333.63 594.9 T
(-) 335.38 594.9 T
(-) 337.13 594.9 T
(-) 338.87 594.9 T
(-) 340.62 594.9 T
(-) 342.37 594.9 T
(-) 344.12 594.9 T
(-) 345.87 594.9 T
(-) 347.61 594.9 T
(-) 349.36 594.9 T
(-) 351.11 594.9 T
(-) 352.86 594.9 T
(-) 354.61 594.9 T
(-) 356.36 594.9 T
(-) 358.11 594.9 T
(-) 359.85 594.9 T
(-) 361.6 594.9 T
(-) 363.35 594.9 T
(-) 365.1 594.9 T
(-) 366.85 594.9 T
(-) 368.59 594.9 T
(-) 370.34 594.9 T
(-) 372.09 594.9 T
(-) 373.84 594.9 T
(-) 375.59 594.9 T
(-) 377.34 594.9 T
(-) 379.08 594.9 T
(-) 380.83 594.9 T
(-) 382.58 594.9 T
(-) 384.33 594.9 T
(-) 386.08 594.9 T
(-) 387.83 594.9 T
(-) 389.57 594.9 T
(-) 390.9 594.9 T
6 F
(m) 405.32 604.4 T
3 8.5 Q
(2) 411.76 610.89 T
5 10.5 Q
(H) 422.89 604.4 T
5 8.5 Q
(j) 430.87 600.23 T
6 10.5 Q
(\050) 418.39 604.4 T
(\051) 433.72 604.4 T
(s) 450.14 604.4 T
3 8.5 Q
(2) 456.87 610.89 T
5 10.5 Q
(H) 467.99 604.4 T
5 8.5 Q
(j) 475.98 600.23 T
6 10.5 Q
(\050) 463.49 604.4 T
(\051) 478.82 604.4 T
3 F
(+) 441.59 604.4 T
5 F
(s) 441.27 587.86 T
5 8.5 Q
(j) 445.76 583.69 T
3 10.5 Q
(-) 405.32 594.9 T
(-) 407.06 594.9 T
(-) 408.81 594.9 T
(-) 410.56 594.9 T
(-) 412.31 594.9 T
(-) 414.06 594.9 T
(-) 415.8 594.9 T
(-) 417.55 594.9 T
(-) 419.3 594.9 T
(-) 421.05 594.9 T
(-) 422.8 594.9 T
(-) 424.55 594.9 T
(-) 426.29 594.9 T
(-) 428.04 594.9 T
(-) 429.79 594.9 T
(-) 431.54 594.9 T
(-) 433.29 594.9 T
(-) 435.04 594.9 T
(-) 436.78 594.9 T
(-) 438.53 594.9 T
(-) 440.28 594.9 T
(-) 442.03 594.9 T
(-) 443.78 594.9 T
(-) 445.52 594.9 T
(-) 447.27 594.9 T
(-) 449.02 594.9 T
(-) 450.77 594.9 T
(-) 452.52 594.9 T
(-) 454.27 594.9 T
(-) 456.01 594.9 T
(-) 457.76 594.9 T
(-) 459.51 594.9 T
(-) 461.26 594.9 T
(-) 463.01 594.9 T
(-) 464.76 594.9 T
(-) 466.5 594.9 T
(-) 468.25 594.9 T
(-) 470 594.9 T
(-) 471.75 594.9 T
(-) 473.5 594.9 T
(-) 475.24 594.9 T
(-) 476.99 594.9 T
(-) 478.74 594.9 T
(-) 480.49 594.9 T
(-) 480.58 594.9 T
(\320) 397.23 594.9 T
(\320) 253.87 594.9 T
6 F
(\356) 216.19 588.26 T
(\376) 484.91 588.26 T
(\355) 216.19 597.26 T
(\375) 484.91 597.26 T
(\354) 216.19 606.26 T
(\374) 484.91 606.26 T
5 8.5 Q
(j) 181.32 580.19 T
3 F
(1) 194.14 580.19 T
(=) 186.51 580.19 T
5 F
(n) 187.73 609.37 T
6 17.5 Q
(\325) 182.65 591.48 T
6 10.5 Q
(\264) 172.93 594.9 T
269.09 624.61 265.94 624.61 265.94 661.1 3 L
0.47 H
2 Z
N
265.94 661.1 269.09 661.1 2 L
N
414.28 624.61 417.43 624.61 417.43 661.1 3 L
N
417.43 661.1 414.28 661.1 2 L
N
308.9 600.2 305.75 600.2 305.75 615.16 3 L
N
305.75 615.16 308.9 615.16 2 L
N
389.15 600.2 392.3 600.2 392.3 615.16 3 L
N
392.3 615.16 389.15 615.16 2 L
N
0 0 612 792 C
174.16 518.98 458.46 548.23 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(Q) 175.16 539.35 T
(T) 189.62 539.35 T
6 F
(\050) 185.12 539.35 T
(\051) 195.94 539.35 T
3 F
(t) 217.61 539.35 T
(h) 220.53 539.35 T
(e) 225.78 539.35 T
(p) 233.07 539.35 T
(r) 238.32 539.35 T
(o) 241.81 539.35 T
(b) 247.06 539.35 T
(a) 252.31 539.35 T
(b) 256.97 539.35 T
(i) 262.22 539.35 T
(l) 265.14 539.35 T
(i) 268.06 539.35 T
(t) 270.98 539.35 T
(y) 273.9 539.35 T
(o) 281.77 539.35 T
(f) 287.02 539.35 T
(t) 293.15 539.35 T
(r) 296.07 539.35 T
(a) 299.56 539.35 T
(v) 304.22 539.35 T
(e) 309.47 539.35 T
(r) 314.14 539.35 T
(s) 317.63 539.35 T
(i) 321.72 539.35 T
(n) 324.64 539.35 T
(g) 329.89 539.35 T
(a) 337.76 539.35 T
(p) 345.05 539.35 T
(a) 350.3 539.35 T
(t) 354.96 539.35 T
(h) 357.88 539.35 T
(c) 365.75 539.35 T
(o) 370.42 539.35 T
(n) 375.67 539.35 T
(s) 380.92 539.35 T
(i) 385 539.35 T
(s) 387.92 539.35 T
(t) 392 539.35 T
(i) 394.92 539.35 T
(n) 397.84 539.35 T
(g) 403.09 539.35 T
(o) 410.97 539.35 T
(f) 416.22 539.35 T
(o) 422.34 539.35 T
(n) 427.59 539.35 T
(l) 432.84 539.35 T
(y) 435.76 539.35 T
(t) 443.63 539.35 T
(h) 446.55 539.35 T
(e) 451.8 539.35 T
(=) 206.44 539.35 T
(c) 217.61 523.6 T
(l) 222.27 523.6 T
(a) 225.19 523.6 T
(s) 229.85 523.6 T
(s) 233.94 523.6 T
(1) 240.65 523.6 T
(p) 248.52 523.6 T
(a) 253.77 523.6 T
(t) 258.43 523.6 T
(h) 261.35 523.6 T
(s) 269.23 523.6 T
(t) 273.31 523.6 T
(e) 276.23 523.6 T
(p) 280.89 523.6 T
(s) 286.14 523.6 T
(w) 292.85 523.6 T
(i) 300.43 523.6 T
(t) 303.35 523.6 T
(h) 306.27 523.6 T
(i) 311.52 523.6 T
(n) 314.44 523.6 T
(t) 322.32 523.6 T
(i) 325.23 523.6 T
(m) 328.15 523.6 T
(e) 336.32 523.6 T
5 F
(T) 344.23 523.6 T
0 0 612 792 C
236.68 384.67 395.95 477.15 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(r) 239.18 447.06 T
5 8.5 Q
(i) 243.66 442.89 T
3 10.5 Q
(2) 270.24 451.56 T
5 F
(T) 276.11 451.56 T
6 F
(m) 288.83 451.56 T
3 8.5 Q
(2) 295.27 458.05 T
5 10.5 Q
(F) 306.4 451.56 T
5 8.5 Q
(i) 313.22 447.39 T
3 F
(*) 313.22 455.55 T
6 10.5 Q
(\050) 301.9 451.56 T
(\051) 317.95 451.56 T
(s) 334.37 451.56 T
3 8.5 Q
(2) 341.1 458.05 T
5 10.5 Q
(F) 352.23 451.56 T
5 8.5 Q
(i) 359.04 447.39 T
3 F
(*) 359.04 455.55 T
6 10.5 Q
(\050) 347.72 451.56 T
(\051) 363.77 451.56 T
3 F
(+) 325.82 451.56 T
6 F
(\356) 264.2 444.28 T
(\376) 375.39 444.28 T
(\355) 264.2 453.28 T
(\375) 375.39 453.28 T
(\354) 264.2 462.28 T
(\374) 375.39 462.28 T
3 8.5 Q
(1) 382.43 466.27 T
(/) 387.34 466.27 T
(3) 389.7 466.27 T
3 10.5 Q
(=) 251.27 447.06 T
5 F
(s) 239.18 399.31 T
5 8.5 Q
(j) 243.66 395.14 T
5 10.5 Q
(T) 270.24 406.81 T
6 F
(m) 283.17 416.56 T
3 8.5 Q
(2) 289.62 423.05 T
5 10.5 Q
(H) 300.74 416.56 T
5 8.5 Q
(j) 308.73 412.39 T
6 10.5 Q
(\050) 296.24 416.56 T
(\051) 311.57 416.56 T
(s) 327.99 416.56 T
3 8.5 Q
(2) 334.72 423.05 T
5 10.5 Q
(H) 345.85 416.56 T
5 8.5 Q
(j) 353.83 412.39 T
6 10.5 Q
(\050) 341.34 416.56 T
(\051) 356.68 416.56 T
3 F
(+) 319.45 416.56 T
6 F
(m) 308.05 400.02 T
5 F
(H) 320.97 400.02 T
5 8.5 Q
(j) 328.95 395.85 T
6 10.5 Q
(\050) 316.47 400.02 T
(\051) 331.8 400.02 T
3 F
(-) 283.17 407.05 T
(-) 284.92 407.05 T
(-) 286.67 407.05 T
(-) 288.41 407.05 T
(-) 290.16 407.05 T
(-) 291.91 407.05 T
(-) 293.66 407.05 T
(-) 295.41 407.05 T
(-) 297.15 407.05 T
(-) 298.9 407.05 T
(-) 300.65 407.05 T
(-) 302.4 407.05 T
(-) 304.15 407.05 T
(-) 305.9 407.05 T
(-) 307.64 407.05 T
(-) 309.39 407.05 T
(-) 311.14 407.05 T
(-) 312.89 407.05 T
(-) 314.64 407.05 T
(-) 316.39 407.05 T
(-) 318.13 407.05 T
(-) 319.88 407.05 T
(-) 321.63 407.05 T
(-) 323.38 407.05 T
(-) 325.13 407.05 T
(-) 326.88 407.05 T
(-) 328.62 407.05 T
(-) 330.37 407.05 T
(-) 332.12 407.05 T
(-) 333.87 407.05 T
(-) 335.62 407.05 T
(-) 337.36 407.05 T
(-) 339.11 407.05 T
(-) 340.86 407.05 T
(-) 342.61 407.05 T
(-) 344.36 407.05 T
(-) 346.11 407.05 T
(-) 347.85 407.05 T
(-) 349.6 407.05 T
(-) 351.35 407.05 T
(-) 353.1 407.05 T
(-) 354.85 407.05 T
(-) 356.6 407.05 T
(-) 358.34 407.05 T
(-) 358.43 407.05 T
6 F
(\356) 264.2 388.92 T
(\376) 368.5 388.92 T
(\357) 264.2 397.92 T
(\357) 368.5 397.92 T
(\355) 264.2 406.92 T
(\375) 368.5 406.92 T
(\357) 264.2 415.92 T
(\357) 368.5 415.92 T
(\354) 264.2 424.92 T
(\374) 368.5 424.92 T
3 8.5 Q
(1) 375.54 426.05 T
(/) 380.45 426.05 T
(2) 382.81 426.05 T
3 10.5 Q
(=) 251.27 399.31 T
287.82 447.36 284.67 447.36 284.67 467.32 3 L
0.47 H
2 Z
N
284.67 467.32 287.82 467.32 2 L
N
369.51 447.36 372.66 447.36 372.66 467.32 3 L
N
372.66 467.32 369.51 467.32 2 L
N
281.95 394.77 278.8 394.77 278.8 427.32 3 L
N
278.8 427.32 281.95 427.32 2 L
N
362.62 394.77 365.77 394.77 365.77 427.32 3 L
N
365.77 427.32 362.62 427.32 2 L
N
0 0 612 792 C
204.67 234.35 427.96 310.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(Q) 241.14 287.55 T
(T) 255.6 287.55 T
6 F
(\050) 251.09 287.55 T
(\051) 261.92 287.55 T
5 F
(Q) 278.18 287.55 T
5 8.5 Q
(u) 286.16 283.38 T
5 10.5 Q
(T) 297.29 287.55 T
6 F
(\050) 292.79 287.55 T
(\051) 303.61 287.55 T
(<) 269.79 287.55 T
(l) 325.49 297.06 T
3 8.5 Q
(1) 331.65 292.89 T
6 10.5 Q
(l) 336.52 297.06 T
3 8.5 Q
(2) 342.69 292.89 T
6 10.5 Q
(l) 347.55 297.06 T
3 8.5 Q
(3) 353.72 292.89 T
6 10.5 Q
(\274) 358.59 297.06 T
(l) 369.71 297.06 T
5 8.5 Q
(k) 375.87 292.89 T
5 10.5 Q
(T) 380.26 297.06 T
5 8.5 Q
(k) 386.5 303.55 T
5 10.5 Q
(k) 353.8 280.52 T
3 F
(!) 358.46 280.52 T
(-) 325.49 287.55 T
(-) 327.24 287.55 T
(-) 328.99 287.55 T
(-) 330.73 287.55 T
(-) 332.48 287.55 T
(-) 334.23 287.55 T
(-) 335.98 287.55 T
(-) 337.73 287.55 T
(-) 339.48 287.55 T
(-) 341.22 287.55 T
(-) 342.97 287.55 T
(-) 344.72 287.55 T
(-) 346.47 287.55 T
(-) 348.22 287.55 T
(-) 349.96 287.55 T
(-) 351.71 287.55 T
(-) 353.46 287.55 T
(-) 355.21 287.55 T
(-) 356.96 287.55 T
(-) 358.71 287.55 T
(-) 360.45 287.55 T
(-) 362.2 287.55 T
(-) 363.95 287.55 T
(-) 365.7 287.55 T
(-) 367.45 287.55 T
(-) 369.2 287.55 T
(-) 370.94 287.55 T
(-) 372.69 287.55 T
(-) 374.44 287.55 T
(-) 376.19 287.55 T
(-) 377.94 287.55 T
(-) 379.68 287.55 T
(-) 381.43 287.55 T
(-) 383.18 287.55 T
(-) 384.93 287.55 T
(-) 386.68 287.55 T
(-) 386.78 287.55 T
(=) 314.11 287.55 T
5 F
(Q) 205.67 252.26 T
(T) 220.12 252.26 T
6 F
(\050) 215.62 252.26 T
(\051) 226.45 252.26 T
5 F
(Q) 242.71 252.26 T
5 8.5 Q
(l) 250.69 248.08 T
5 10.5 Q
(T) 259.93 252.26 T
6 F
(\050) 255.42 252.26 T
(\051) 266.25 252.26 T
(>) 234.32 252.26 T
5 F
(Q) 287.92 252.26 T
5 8.5 Q
(u) 295.9 248.08 T
5 10.5 Q
(T) 307.02 252.26 T
6 F
(\050) 302.52 252.26 T
(\051) 313.35 252.26 T
3 F
(1) 325.47 252.26 T
5 F
(T) 349.05 258.33 T
(k) 341.43 245.47 T
3 F
(1) 357.27 245.47 T
(+) 348.72 245.47 T
(-) 341.43 252.5 T
(-) 343.18 252.5 T
(-) 344.93 252.5 T
(-) 346.68 252.5 T
(-) 348.42 252.5 T
(-) 350.17 252.5 T
(-) 351.92 252.5 T
(-) 353.67 252.5 T
(-) 355.42 252.5 T
(-) 357.17 252.5 T
(-) 358.91 252.5 T
(-) 359.02 252.5 T
6 F
(l) 387.72 252.26 T
5 8.5 Q
(i) 393.88 248.08 T
6 10.5 Q
(g) 407.42 252.26 T
5 8.5 Q
(i) 412.13 248.08 T
3 10.5 Q
(+) 398.87 252.26 T
6 F
(\050) 383.21 252.26 T
(\051) 414.98 252.26 T
5 8.5 Q
(i) 363.34 237.47 T
3 F
(1) 376.16 237.47 T
(=) 368.54 237.47 T
5 F
(k) 369.99 266.8 T
6 17.5 Q
(\345) 365.64 248.89 T
3 10.5 Q
(\320) 333.35 252.26 T
(=) 276.75 252.26 T
324.46 238.5 321.32 238.5 321.32 270.55 3 L
0.47 H
2 Z
N
321.32 270.55 324.46 270.55 2 L
N
420.71 238.5 423.86 238.5 423.86 270.55 3 L
N
423.86 270.55 420.71 270.55 2 L
N
0 0 612 792 C
328.28 209.8 352.74 231.96 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10.5 Q
0 X
0 0 0 1 0 0 0 K
(S) 329.28 218.1 T
5 8.5 Q
(i) 335.89 213.92 T
3 F
(1) 348.71 213.92 T
(=) 341.08 213.92 T
5 F
(k) 335.89 224.59 T
0 0 612 792 C
181.28 139.83 451.35 179.52 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(Q) 240.72 157.67 T
(T) 255.18 157.67 T
6 F
(\050) 250.68 157.67 T
(\051) 261.5 157.67 T
5 F
(Q) 277.76 157.67 T
5 8.5 Q
(u) 285.74 153.49 T
3 F
(*) 285.74 161.93 T
5 10.5 Q
(T) 296.87 157.67 T
6 F
(\050) 292.37 157.67 T
(\051) 303.19 157.67 T
(<) 269.38 157.67 T
3 F
(1) 329.54 163.74 T
(|) 325.07 150.88 T
5 F
(S) 327.79 150.88 T
3 F
(|) 333.66 150.88 T
(!) 335.76 150.88 T
(-) 325.07 157.91 T
(-) 326.82 157.91 T
(-) 328.57 157.91 T
(-) 330.32 157.91 T
(-) 332.07 157.91 T
(-) 333.81 157.91 T
(-) 335.56 157.91 T
(-) 335.76 157.91 T
6 F
(l) 370.19 157.67 T
5 8.5 Q
(i) 376.35 153.49 T
5 10.5 Q
(T) 379.33 157.67 T
6 F
(\050) 365.68 157.67 T
(\051) 385.65 157.67 T
5 8.5 Q
(i) 345.96 142.96 T
(S) 358.63 142.96 T
6 F
(\316) 350.44 142.96 T
6 17.5 Q
(\325) 347.22 154.25 T
3 10.5 Q
(=) 313.69 157.67 T
0 0 612 792 C
278.38 81 351.62 111 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(S) 279.38 95.71 T
3 F
(=) 287.87 95.71 T
5 F
(i) 304.84 95.71 T
3 F
(|) 308.38 95.71 T
6 F
(l) 311.1 95.71 T
5 8.5 Q
(i) 317.26 91.54 T
5 10.5 Q
(T) 320.24 95.71 T
3 F
(1) 337.1 95.71 T
6 F
(<) 328.71 95.71 T
({) 298.79 95.71 T
(}) 342.83 95.71 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 29
%%Page: "24" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(24) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
2.15 (This bound is obtained by removing all the fast exponential transitions from the) 105 718.67 P
5 F
2.15 (Q) 486.46 718.67 P
3 F
2.15 (\050) 494.41 718.67 P
5 F
2.15 (T) 498.07 718.67 P
3 F
2.15 (\051 model.) 504.19 718.67 P
0.73 (Because the path is shorter, the probability of reaching the death state is larger than the original) 87 705.67 P
5 F
0.73 (Q) 521.62 705.67 P
3 F
0.73 (\050) 529.56 705.67 P
5 F
0.73 (T) 533.22 705.67 P
3 F
0.73 (\051) 539.34 705.67 P
0.58 (model. These algebraic bounds on) 87 692.67 P
5 F
0.58 ( Q) 239.91 692.67 P
3 F
0.58 (\050) 251.18 692.67 P
5 F
0.58 (T) 254.85 692.67 P
3 F
0.58 (\051 are used when the) 260.96 692.67 P
7 F
1.38 (QTCALC) 352.11 692.67 P
3 F
0.58 ( option is set equal to zero. When) 391.71 692.67 P
0.21 (the) 87 679.67 P
7 F
0.51 (QTCALC) 103.4 679.67 P
0.51 (=) 149.6 679.67 P
0.51 (1) 162.8 679.67 P
3 F
0.21 ( option is used, a differential equation solver is used to calculate) 169.4 679.67 P
5 F
0.21 (Q) 456.98 679.67 P
3 F
0.21 (\050) 464.92 679.67 P
5 F
0.21 (T) 468.59 679.67 P
3 F
0.21 (\051 and) 474.7 679.67 P
5 F
0.21 (Q) 500.17 679.67 P
3 F
0.21 (\050) 508.11 679.67 P
5 F
0.21 (T) 511.78 679.67 P
6 F
0.21 (-) 520.85 679.67 P
0.21 (D) 529.85 679.67 P
3 F
0.21 (\051.) 536.59 679.67 P
1.98 (If) 87 666.67 P
7 F
4.74 (QTCALC) 99.05 666.67 P
4.74 (=) 145.25 666.67 P
4.74 (2) 158.45 666.67 P
3 F
1.98 ( \050the default\051, then the SURE program automatically selects the most appropriate) 165.05 666.67 P
(method.) 87 653.67 T
8 10.5 Q
(5.5.6. Algebraic analysis with SURE upper bound.) 105 628.85 T
3 11 Q
2.26 (The SURE upper bound can be used symboli-) 325.25 628.85 P
-0.03 (cally, as well as numerically, to gain insight in the reliability properties of a system. This technique will) 87 615.85 P
(be illustrated by application to the model shown in figure 21.) 87 602.85 T
(In this model there are three death states \050\0503\051, \0506\051, \0508\051\051 and three paths to death states:) 105 384.54 T
(   1) 105 363.88 T
9 F
(\325) 121.5 363.88 T
3 F
( 2) 130.72 363.88 T
9 F
(\325) 141.72 363.88 T
3 F
( 3) 150.94 363.88 T
(   1) 105 343.23 T
9 F
(\325) 121.5 343.23 T
3 F
( 2) 130.72 343.23 T
9 F
(\325) 141.72 343.23 T
3 F
( 4) 150.94 343.23 T
9 F
(\325) 161.94 343.23 T
3 F
( 5) 171.15 343.23 T
9 F
(\325) 182.15 343.23 T
3 F
( 6) 191.37 343.23 T
(   1) 105 322.58 T
9 F
(\325) 121.5 322.58 T
3 F
( 2) 130.72 322.58 T
9 F
(\325) 141.72 322.58 T
3 F
( 4) 150.94 322.58 T
9 F
(\325) 161.94 322.58 T
3 F
( 5) 171.15 322.58 T
9 F
(\325) 182.15 322.58 T
3 F
( 7) 191.37 322.58 T
9 F
(\325) 202.37 322.58 T
3 F
( 8) 211.59 322.58 T
-0.02 (The SURE upper bound can be applied to each path to obtain an algebraic formula for the probabil-) 105 301.93 P
(ity of entering the death states within the mission time. The SURE algebraic upper bound is) 87 288.93 T
0.73 (The first path, 1) 105 218.95 P
9 F
0.81 (\325) 180.92 218.95 P
3 F
0.73 ( 2) 190.14 218.95 P
9 F
0.81 (\325) 202.59 218.95 P
3 F
0.73 ( 3 has two steps. The first step is a class 1 path step, and thus contributes) 211.81 218.95 P
6 F
(l) 87 205.95 T
5 8.8 Q
(i) 93.04 203.2 T
5 11 Q
(T) 98.24 205.95 T
3 F
(/) 104.35 205.95 T
5 F
(i =) 107.41 205.95 T
3 F
(3) 123.39 205.95 T
6 F
(l) 128.89 205.95 T
5 F
(T) 134.93 205.95 T
3 F
(.  The second path step is a class 3, and thus, contributes) 141.05 205.95 T
6 F
(a) 391.57 205.95 T
5 8.8 Q
(j) 398.51 203.2 T
6 11 Q
(m) 403.71 205.95 T
3 F
(\050) 410.05 205.95 T
5 F
(H) 413.71 205.95 T
5 8.8 Q
(j) 421.65 203.2 T
3 11 Q
(\051) 425.92 205.95 T
5 F
( =) 429.59 205.95 T
3 F
(2) 442.51 205.95 T
6 F
(lm) 448.01 205.95 T
3 F
(. Hence,) 460.39 205.95 T
0.09 (The second path, 1) 105 153.48 P
9 F
0.1 (\325) 191.21 153.48 P
3 F
0.09 ( 2) 200.43 153.48 P
9 F
0.1 (\325) 211.61 153.48 P
3 F
0.09 ( 4) 220.83 153.48 P
9 F
0.1 (\325) 232.01 153.48 P
3 F
0.09 ( 5) 241.23 153.48 P
9 F
0.1 (\325) 252.41 153.48 P
3 F
0.09 ( 6 has four steps. The first step, 1) 261.63 153.48 P
9 F
0.1 (\325) 408.4 153.48 P
3 F
0.09 ( 2, is a class 1 path step, and) 417.61 153.48 P
0.1 (thus contributes) 87 140.48 P
6 F
0.1 (l) 159.92 140.48 P
5 8.8 Q
0.08 (i) 165.96 137.73 P
5 11 Q
0.1 ( T/i =) 168.4 140.48 P
3 F
0.1 (3) 196.61 140.48 P
6 F
0.1 (l) 202.11 140.48 P
5 F
0.1 (T) 208.15 140.48 P
3 F
0.1 ( \050cf.) 214.27 140.48 P
5 F
0.1 (i) 234.93 140.48 P
3 F
0.1 (=) 240.73 140.48 P
0.1 (1\051. The second step, 2) 249.69 140.48 P
9 F
0.11 (\325) 349.47 140.48 P
3 F
0.1 ( 4, is a class 2 path step, and thus contrib-) 358.69 140.48 P
0.54 (utes) 87 127.48 P
6 F
0.54 (r) 108.01 127.48 P
3 F
0.54 (\050) 114.04 127.48 P
5 F
0.54 (F) 117.71 127.48 P
5 8.8 Q
0.43 (*) 124.43 131.88 P
0.43 (i) 125.5 124.73 P
3 11 Q
0.54 (\051.) 129.44 127.48 P
0.54 (Because only one recovery exists,) 139.31 127.48 P
6 F
0.54 (r) 294.11 127.48 P
3 F
0.54 (\050) 300.15 127.48 P
5 F
0.54 (F) 303.82 127.48 P
5 8.8 Q
0.43 (*) 310.54 131.88 P
0.43 (i) 311.6 124.73 P
3 11 Q
0.54 (\051 = 1.) 315.55 127.48 P
0.54 (The third step, 4) 345.36 127.48 P
9 F
0.6 (\325) 422.35 127.48 P
3 F
0.54 ( 5, is a class 1 path step,) 431.57 127.48 P
0.34 (and thus contributes) 87 114.48 P
6 F
0.34 (l) 179.38 114.48 P
5 8.8 Q
0.27 (i) 185.42 111.73 P
5 11 Q
0.34 ( T/i) 187.87 114.48 P
3 F
0.34 ( = 2) 203.19 114.48 P
6 F
0.34 (l) 221.08 114.48 P
5 F
0.34 (T) 227.12 114.48 P
3 F
0.34 (/2 \050cf.) 233.24 114.48 P
5 F
0.34 (i) 262.94 114.48 P
3 F
0.34 (=) 268.75 114.48 P
0.34 (2\051. The fourth path step is) 277.7 114.48 P
0.34 (a) 398.91 114.48 P
0.34 (class 3,) 409.64 114.48 P
0.34 (and) 448.21 114.48 P
0.34 (thus) 469.94 114.48 P
0.34 ( contributes) 491.02 114.48 P
6 F
(a) 87 101.48 T
5 8.8 Q
(j) 93.94 98.73 T
6 11 Q
(m) 98.59 101.48 T
3 F
(\050) 104.92 101.48 T
5 F
(H) 108.59 101.48 T
5 8.8 Q
(j) 116.53 98.73 T
3 11 Q
(\051 =) 118.97 101.48 T
6 F
(lm) 134.34 101.48 T
3 F
(. Hence,) 146.72 101.48 T
3 9 Q
(Figure 21.  Model of degradable triplex.) 242.76 420.52 T
87 426.52 543 575.18 C
170.5 437.52 459.5 575.18 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 378 441 517 277 139 176.5 436.29 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig21.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig21.ps)
%%CreationDate: (4/17/95) (7:51 AM)
%%BoundingBox: 164 378 441 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
270 503 m
332.5 503 l
S
u
345 493.8076 m
350.0767 493.8076 354.1924 497.9233 354.1924 503 c
354.1924 508.0767 350.0767 512.1924 345 512.1924 c
339.9233 512.1924 335.8076 508.0767 335.8076 503 c
335.8076 497.9233 339.9233 493.8076 345 493.8076 c
s
345 503 m
S
U
0 To
1 0 0 1 345 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.7588 503 m
329.2075 501.4565 l
330.6138 503 L
329.2075 504.5435 l
335.7588 503 L
f
U
0 R
0 G
0.75 w
260.25 493.75 m
260.25 459.875 l
S
u
0 O
0 g
1 w
260.25 456.6162 m
258.7065 463.1675 l
260.25 461.7612 L
261.7935 463.1675 l
260.25 456.6162 L
f
U
0 To
1 0 0 1 270.25 477.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
260.5 437.8076 m
265.5767 437.8076 269.6924 441.9233 269.6924 447 c
269.6924 452.0767 265.5767 456.1924 260.5 456.1924 c
255.4233 456.1924 251.3076 452.0767 251.3076 447 c
251.3076 441.9233 255.4233 437.8076 260.5 437.8076 c
s
260.5 447 m
S
U
269.5 447 m
332 447 l
S
u
344.5 437.8076 m
349.5767 437.8076 353.6924 441.9233 353.6924 447 c
353.6924 452.0767 349.5767 456.1924 344.5 456.1924 c
339.4233 456.1924 335.3076 452.0767 335.3076 447 c
335.3076 441.9233 339.4233 437.8076 344.5 437.8076 c
s
344.5 447 m
S
U
0 To
1 0 0 1 344.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.2588 447 m
328.7075 445.4565 l
330.1138 447 L
328.7075 448.5435 l
335.2588 447 L
f
U
0 R
0 G
0.75 w
354 447 m
416.5 447 l
S
u
429 437.8076 m
434.0767 437.8076 438.1924 441.9233 438.1924 447 c
438.1924 452.0767 434.0767 456.1924 429 456.1924 c
423.9233 456.1924 419.8076 452.0767 419.8076 447 c
419.8076 441.9233 423.9233 437.8076 429 437.8076 c
s
429 447 m
S
U
0 To
1 0 0 1 429 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386 451 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
419.7588 447 m
413.2075 445.4565 l
414.6138 447 L
413.2075 448.5435 l
419.7588 447 L
f
U
0 To
1 0 0 1 260.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 260.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
344.375 437.75 m
344.375 403.875 l
S
u
0 O
0 g
1 w
344.375 400.6162 m
342.8315 407.1675 l
344.375 405.7612 L
345.9185 407.1675 l
344.375 400.6162 L
f
U
0 To
1 0 0 1 354.375 421.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
344.5 381.3076 m
349.5767 381.3076 353.6924 385.4233 353.6924 390.5 c
353.6924 395.5767 349.5767 399.6924 344.5 399.6924 c
339.4233 399.6924 335.3076 395.5767 335.3076 390.5 c
335.3076 385.4233 339.4233 381.3076 344.5 381.3076 c
s
344.5 390.5 m
S
U
0 To
1 0 0 1 344.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
354 390.5 m
416.5 390.5 l
S
u
429 381.3076 m
434.0767 381.3076 438.1924 385.4233 438.1924 390.5 c
438.1924 395.5767 434.0767 399.6924 429 399.6924 c
423.9233 399.6924 419.8076 395.5767 419.8076 390.5 c
419.8076 385.4233 423.9233 381.3076 429 381.3076 c
s
429 390.5 m
S
U
0 To
1 0 0 1 429 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386 394.5 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
419.7588 390.5 m
413.2075 388.9565 l
414.6138 390.5 L
413.2075 392.0435 l
419.7588 390.5 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 426.52 543 575.18 C
0 0 612 792 C
222 235.93 408 275.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(U) 223 253.77 T
(B) 231.2 253.77 T
5 8.5 Q
(i) 254.03 239.05 T
3 F
(1) 266.85 239.05 T
(=) 259.23 239.05 T
5 F
(k) 260.68 268.24 T
6 17.5 Q
(\325) 255.37 250.35 T
6 10.5 Q
(l) 278.02 253.77 T
5 8.5 Q
(i) 284.18 249.59 T
5 10.5 Q
(T) 287.17 253.77 T
3 F
(/) 293.62 253.77 T
5 F
(i) 297.16 253.77 T
6 F
(r) 318.82 253.77 T
5 F
(F) 331.46 253.77 T
5 8.5 Q
(i) 338.27 249.59 T
3 F
(*) 338.27 258.03 T
6 10.5 Q
(\050) 326.95 253.77 T
(\051) 343.01 253.77 T
(a) 366.99 253.77 T
5 8.5 Q
(j) 374.02 249.59 T
6 10.5 Q
(m) 377 253.77 T
5 F
(H) 389.93 253.77 T
5 8.5 Q
(j) 397.91 249.59 T
6 10.5 Q
(\050) 385.42 253.77 T
(\051) 400.75 253.77 T
5 8.5 Q
(j) 348.88 239.05 T
3 F
(1) 361.69 239.05 T
(=) 354.07 239.05 T
5 F
(n) 355.28 268.24 T
6 17.5 Q
(\325) 350.21 250.35 T
5 8.5 Q
(i) 300.7 239.05 T
3 F
(1) 313.52 239.05 T
(=) 305.89 239.05 T
5 F
(m) 306.16 268.24 T
6 17.5 Q
(\325) 302.03 250.35 T
3 10.5 Q
(=) 242.86 253.77 T
0 0 612 792 C
241.29 170.47 388.71 192.63 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 242.29 178.77 T
3 8.5 Q
(3) 249.1 174.59 T
5 10.5 Q
(t) 260.23 178.77 T
6 F
(\050) 255.72 178.77 T
(\051) 263.63 178.77 T
3 F
(3) 286.15 178.77 T
6 F
(l) 292.02 178.77 T
5 F
(T) 298.4 178.77 T
6 F
(\050) 281.65 178.77 T
(\051) 304.73 178.77 T
3 F
(2) 316.85 178.77 T
6 F
(l) 322.72 178.77 T
(m) 329.11 178.77 T
(\050) 312.35 178.77 T
(\051) 335.64 178.77 T
(\273) 271.51 178.77 T
3 F
(6) 357.31 178.77 T
6 F
(l) 363.17 178.77 T
3 8.5 Q
(2) 369.34 185.25 T
5 10.5 Q
(T) 374.21 178.77 T
6 F
(m) 380.67 178.77 T
3 F
(=) 346.14 178.77 T
0 0 612 792 C
213.22 66 416.78 88.16 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 214.22 74.3 T
3 8.5 Q
(6) 221.04 70.12 T
5 10.5 Q
(t) 232.16 74.3 T
6 F
(\050) 227.66 74.3 T
(\051) 235.57 74.3 T
3 F
(3) 258.09 74.3 T
6 F
(l) 263.96 74.3 T
5 F
(T) 270.34 74.3 T
6 F
(\050) 253.58 74.3 T
(\051) 276.66 74.3 T
3 F
(1) 288.79 74.3 T
6 F
(\050) 284.28 74.3 T
(\051) 294.52 74.3 T
3 F
(2) 306.65 74.3 T
6 F
(l) 312.52 74.3 T
5 F
(T) 318.9 74.3 T
3 F
(/) 325.36 74.3 T
(2) 328.28 74.3 T
6 F
(\050) 302.14 74.3 T
(\051) 334.01 74.3 T
(l) 346.14 74.3 T
(m) 352.52 74.3 T
(\050) 341.63 74.3 T
(\051) 359.05 74.3 T
(\273) 243.44 74.3 T
3 F
(3) 380.72 74.3 T
6 F
(l) 386.59 74.3 T
3 8.5 Q
(3) 392.75 80.79 T
5 10.5 Q
(T) 397.62 74.3 T
3 8.5 Q
(2) 403.86 80.79 T
6 10.5 Q
(m) 408.73 74.3 T
3 F
(=) 369.55 74.3 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 30
%%Page: "25" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(25) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.56 (In the third path, 1) 105 718.67 P
9 F
0.62 (\325) 192.13 718.67 P
3 F
0.56 ( 2) 201.35 718.67 P
9 F
0.62 (\325) 213.48 718.67 P
3 F
0.56 ( 4) 222.7 718.67 P
9 F
0.62 (\325) 234.82 718.67 P
3 F
0.56 ( 5) 244.04 718.67 P
9 F
0.62 (\325) 256.16 718.67 P
3 F
0.56 ( 7) 265.38 718.67 P
9 F
0.62 (\325) 277.5 718.67 P
3 F
0.56 ( 8, the first three steps are the same as path 2. The fourth) 286.72 718.67 P
1.09 (step, 5) 87 705.67 P
9 F
1.21 (\325) 120.65 705.67 P
3 F
1.09 ( 7, is a class 2 path step, and thus contributes) 129.87 705.67 P
6 F
1.09 (r) 341.99 705.67 P
3 F
1.09 (\050) 348.02 705.67 P
5 F
1.09 (F) 351.69 705.67 P
5 8.8 Q
0.87 (*) 358.41 710.07 P
0.87 (i) 359.48 702.92 P
3 11 Q
1.09 (\051.) 363.42 705.67 P
1.09 (Because only one recovery transition) 374.95 705.67 P
-0.1 (occurs from state \0505\051,) 87 692.67 P
6 F
-0.1 (r) 183.42 692.67 P
3 F
-0.1 (\050) 189.46 692.67 P
5 F
-0.1 (F) 193.12 692.67 P
5 8.8 Q
-0.08 (*) 200.76 697.07 P
-0.08 (i) 202.38 689.92 P
3 11 Q
-0.1 (\051) 205.32 692.67 P
-0.1 (= 1. The fifth step is a class 1 path step, and thus contributes) 211.13 692.67 P
6 F
-0.1 ( l) 475.38 692.67 P
5 8.8 Q
-0.08 (i) 484.07 689.92 P
5 11 Q
-0.1 ( T) 486.52 692.67 P
3 F
-0.1 (/) 495.28 692.67 P
5 F
-0.1 (i =) 498.34 692.67 P
6 F
-0.1 (l) 514.11 692.67 P
5 F
-0.1 ( T/) 520.15 692.67 P
3 F
-0.1 (3.) 534.75 692.67 P
(Hence,) 87 679.67 T
0.23 (From these formulas, the sensitivity of the system unreliability to the model parameters is immedi-) 105 626.24 P
1.04 (ately seen.  For example, partial derivatives, if desired, can easily be taken because the formulas are) 87 613.24 P
(algebraic.) 87 600.24 T
4 12 Q
(6. Recon\336guration by Degradation) 87 572.44 T
3 11 Q
0.25 (In this section, the technique of reconfiguration by degradation will be explored. The first example) 105 551.97 P
0.06 (is a simple degradable) 87 538.97 P
5 F
0.06 (n) 188.05 538.97 P
3 F
0.06 (-plex. Later sections introduce more complicated aspects, such as fail-stop dual) 193.55 538.97 P
(processors and self-test processors.) 87 525.97 T
4 10.5 Q
(6.1. Degradable 6-Plex) 105 499.17 T
3 11 Q
0.47 (Reconfiguration can be utilized with levels of redundancy greater than three. The Software Imple-) 105 479.2 P
0.93 (mented Fault Tolerance \050SIFT\051 computer system is an example of such an architecture \050ref. 14\051. The) 87 466.2 P
0.22 (SIFT computer initially contains six processors. At this level of redundancy, two simultaneously faulty) 87 453.2 P
1.04 (computers can be tolerated. As processors fail, the system degrades into lower levels of redundancy.) 87 440.2 P
-0.17 (Thus, SIFT is a degradable 6-plex. It is convenient to identify the states of the system by an ordered pair) 87 427.2 P
7 F
1.28 (\050NC,NF\051) 87 414.2 P
3 F
0.54 (, where) 133.2 414.2 P
7 F
1.28 (NC) 169.39 414.2 P
3 F
0.54 ( is the number of processors currently in the configuration and) 182.59 414.2 P
7 F
1.28 (NF) 465.56 414.2 P
3 F
0.54 ( is the number) 478.76 414.2 P
1.34 (of) 87 401.2 P
1.34 (faulty processors in the configuration. The semi-Markov model for the SIFT system is shown in) 101.66 401.2 P
(figure) 87 388.2 T
(22.  Three main concepts dictate the structure of this model) 116.02 388.2 T
(1.) 105 367.07 T
( Every processor in the current configuration fails at rate) 117 367.07 T
6 F
(l) 368.71 367.07 T
3 F
(.) 374.75 367.07 T
(2.) 105 345.93 T
(The system removes faulty processors with mean recovery time) 117 345.93 T
5 F
(m) 400.2 345.93 T
3 F
(.) 408.14 345.93 T
(3.) 105 324.8 T
(A majority of processors in the configuration must not have failed  for the system to be safe.) 117 324.8 T
-0.15 (A few subtle points must also be considered. First, this model implicitly assumes that the reconfigu-) 105 303.67 P
0.44 (ration process is independent of the configuration of the system. For example, the mean recovery time) 87 290.67 P
0.2 (from state \0506,1\051 is the same as from states \0505,1\051, \0504,1\051, and \0503,1\051.  A system in a degraded configuration) 87 277.67 P
1.17 (may recover slower \050because less processing power is available\051 or faster \050because fewer processors) 87 264.67 P
-0.07 (remain to be examined to find the faulty one\051. To determine the speed of recovery in a degraded config-) 87 251.67 P
0.28 (uration would require extensive fault injection in numerous configurations and would be a very expen-) 87 238.67 P
0.26 (sive process. If these experiments were done, however, one could easily modify the model in figure 22) 87 225.67 P
1.42 (to contain this information. Second, the mean and the standard deviation of the recovery time from) 87 212.67 P
0.03 (states with two active faults is probably different from that of the states with only one active fault. Note) 87 199.67 P
0.19 (that in the model in figure 22, these transitions are labeled with) 87 186.67 P
7 F
0.45 (<m_2,s_2>) 370.02 186.67 P
3 F
0.19 (. These parameters would) 429.42 186.67 P
-0.19 (have to be measured with double fault injections. In the absence of experimental data, it is convenient to) 87 173.67 P
0.37 (let) 87 160.67 P
7 F
0.89 (m_2) 101.12 160.67 P
0.89 (=) 127.52 160.67 P
0.89 (m/2) 140.72 160.67 P
3 F
0.37 ( and) 160.52 160.67 P
7 F
0.89 (s_2 = s/2) 182.64 160.67 P
3 F
0.37 (. If the detection and isolation and reconfiguration of the two faults) 243.82 160.67 P
0.83 (behave like two independent exponential processes, this assumption is reasonable. Actually the situa-) 87 147.67 P
0.38 (tion is quite complicated from a strict theoretical viewpoint. A semi-Markov model has  a memoryless) 87 134.67 P
2.46 (property, and thus, cannot capture the concept that the first reconfiguration process is already in) 87 121.67 P
0.55 (progress when the second fault arrives. The second fault carries the system into a new state where the) 87 108.67 P
2.74 (progress in reconfiguring the first fault is forgotten. The semi-Markov model thus overestimates) 87 95.67 P
0.39 (the) 87 82.67 P
0.39 (time to reconfigure the first fault in the presence of a second fault. This assumption is usually con-) 103.19 82.67 P
2.65 (servative. The following SURE run reveals the sensitivity of the failure probability to the mean) 87 69.67 P
206.27 643.7 423.73 665.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 207.27 652 T
3 8.5 Q
(8) 214.09 647.83 T
5 10.5 Q
(t) 225.21 652 T
6 F
(\050) 220.71 652 T
(\051) 228.62 652 T
3 F
(3) 251.14 652 T
6 F
(l) 257.01 652 T
5 F
(T) 263.39 652 T
6 F
(\050) 246.63 652 T
(\051) 269.71 652 T
3 F
(1) 281.84 652 T
6 F
(\050) 277.33 652 T
(\051) 287.57 652 T
3 F
(2) 299.7 652 T
6 F
(l) 305.57 652 T
5 F
(T) 311.95 652 T
3 F
(/) 318.41 652 T
(2) 321.33 652 T
6 F
(\050) 295.19 652 T
(\051) 327.06 652 T
3 F
(1) 339.19 652 T
6 F
(\050) 334.68 652 T
(\051) 344.92 652 T
(l) 357.05 652 T
5 F
(T) 363.43 652 T
3 F
(/) 369.89 652 T
(3) 372.8 652 T
6 F
(\050) 352.54 652 T
(\051) 378.54 652 T
(\273) 236.49 652 T
(l) 400.21 652 T
3 8.5 Q
(3) 406.37 658.49 T
5 10.5 Q
(T) 411.24 652 T
3 8.5 Q
(3) 417.48 658.49 T
3 10.5 Q
(=) 389.04 652 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 31
%%Page: "26" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(26) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.07 (reconfiguration time. The SURE program requires that the states be defined by a single number. There-) 87 430.89 P
(fore, the state vectors must be mapped onto a set of integers.) 87 417.89 T
7 F
(% sure) 98 398.88 T
( SURE V7.5   NASA Langley Research Center) 105 380.87 T
( 1? read sift) 105 361.86 T
( 2: LAMBDA = 5.0E-4;) 105 342.85 T
( 3: m = 1E-4 TO* 1E-1 BY 10;) 105 329.84 T
( 4: s = 6E-4;) 105 316.83 T
( 5: m_2 = m/2;) 105 303.82 T
( 6: s_2 = s/2;) 105 290.82 T
( 7: 1,2 = 6*LAMBDA;) 105 277.81 T
( 8: 2,3 = 5*LAMBDA;) 105 264.8 T
( 9: 3,4 = 4*LAMBDA;) 105 251.79 T
(10: 2,5 = <m,s>;) 105 238.78 T
(11: 5,6 = 5*LAMBDA;) 105 225.77 T
(12: 3,6 = <m_2,s_2>;) 105 212.76 T
(13: 6,7 = 4*LAMBDA;) 105 199.75 T
(14: 7,8 = 3*LAMBDA;) 105 186.74 T
(15: 6,9 = <m,s>;) 105 173.74 T
(16: 9,10 = 4*LAMBDA;) 105 160.73 T
(17: 7,10 =<m_2,s_2>;) 105 147.72 T
(18: 10,11 = 3*LAMBDA;) 105 134.71 T
(19: 10,12 = <m,s>;) 105 121.7 T
(20: 12,13 = 3*LAMBDA;) 105 108.69 T
(21: 13,14 = 2*LAMBDA;) 105 95.68 T
(22: 13,15 = <m,s>;) 105 82.68 T
(23: 15,16 = 1*LAMBDA;) 105 69.67 T
3 9 Q
(Figure 22.  Semi-Markov model of SIFT computer system.) 208.76 458.22 T
87 464.22 543 726 C
107 475.22 523 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 95 266 499 517 404 251 113 475.11 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig22.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig22.ps)
%%CreationDate: (4/17/95) (8:19 AM)
%%BoundingBox: 95 266 499 517
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
110.5 493.8076 m
115.5767 493.8076 119.6924 497.9233 119.6924 503 c
119.6924 508.0767 115.5767 512.1924 110.5 512.1924 c
105.4233 512.1924 101.3076 508.0767 101.3076 503 c
101.3076 497.9233 105.4233 493.8076 110.5 493.8076 c
s
110.5 503 m
S
U
119.5 503 m
172 503 l
S
u
184.5 493.8076 m
189.5767 493.8076 193.6924 497.9233 193.6924 503 c
193.6924 508.0767 189.5767 512.1924 184.5 512.1924 c
179.4233 512.1924 175.3076 508.0767 175.3076 503 c
175.3076 497.9233 179.4233 493.8076 184.5 493.8076 c
s
184.5 503 m
S
U
0 To
1 0 0 1 184.5 499.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(6,1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 144.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(6) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
175.2588 503 m
168.7075 501.4565 l
170.1138 503 L
168.7075 504.5435 l
175.2588 503 L
f
U
0 R
0 G
0.75 w
194 503 m
246.5 503 l
S
u
259 493.8076 m
264.0767 493.8076 268.1924 497.9233 268.1924 503 c
268.1924 508.0767 264.0767 512.1924 259 512.1924 c
253.9233 512.1924 249.8076 508.0767 249.8076 503 c
249.8076 497.9233 253.9233 493.8076 259 493.8076 c
s
259 503 m
S
U
0 To
1 0 0 1 259 499.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6,2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 219 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(5) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
249.7588 503 m
243.2075 501.4565 l
244.6138 503 L
243.2075 504.5435 l
249.7588 503 L
f
U
0 R
0 G
0.75 w
184.25 493.75 m
184.25 459.875 l
S
u
0 O
0 g
1 w
184.25 456.6162 m
182.7065 463.1675 l
184.25 461.7612 L
185.7935 463.1675 l
184.25 456.6162 L
f
U
0 To
1 0 0 1 189.25 477.25 0 Tp
TP
0 Tr
/_Courier 9 Tf
0 Ta
(<m,s>) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
184.5 437.8076 m
189.5767 437.8076 193.6924 441.9233 193.6924 447 c
193.6924 452.0767 189.5767 456.1924 184.5 456.1924 c
179.4233 456.1924 175.3076 452.0767 175.3076 447 c
175.3076 441.9233 179.4233 437.8076 184.5 437.8076 c
s
184.5 447 m
S
U
193.5 447 m
246 447 l
S
u
258.5 437.8076 m
263.5767 437.8076 267.6924 441.9233 267.6924 447 c
267.6924 452.0767 263.5767 456.1924 258.5 456.1924 c
253.4233 456.1924 249.3076 452.0767 249.3076 447 c
249.3076 441.9233 253.4233 437.8076 258.5 437.8076 c
s
258.5 447 m
S
U
0 To
1 0 0 1 258.5 443.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(5,1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 218.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(5) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
249.2588 447 m
242.7075 445.4565 l
244.1138 447 L
242.7075 448.5435 l
249.2588 447 L
f
U
0 R
0 G
0.75 w
268 447 m
320.5 447 l
S
u
333 437.8076 m
338.0767 437.8076 342.1924 441.9233 342.1924 447 c
342.1924 452.0767 338.0767 456.1924 333 456.1924 c
327.9233 456.1924 323.8076 452.0767 323.8076 447 c
323.8076 441.9233 327.9233 437.8076 333 437.8076 c
s
333 447 m
S
U
0 To
1 0 0 1 333 443.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(5,2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 293 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
323.7588 447 m
317.2075 445.4565 l
318.6138 447 L
317.2075 448.5435 l
323.7588 447 L
f
U
0 To
1 0 0 1 184.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 184.5 443.5 0 Tp
TP
-5.625 0 Td
0 Tr
/_Times-Roman 9 Tf
(5,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
258.375 437.75 m
258.375 403.875 l
S
u
0 O
0 g
1 w
258.375 400.6162 m
256.8315 407.1675 l
258.375 405.7612 L
259.9185 407.1675 l
258.375 400.6162 L
f
U
0 To
1 0 0 1 263.375 421.25 0 Tp
TP
0 Tr
/_Courier 9 Tf
0 Ta
(<m,s>) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
258.5 381.3076 m
263.5767 381.3076 267.6924 385.4233 267.6924 390.5 c
267.6924 395.5767 263.5767 399.6924 258.5 399.6924 c
253.4233 399.6924 249.3076 395.5767 249.3076 390.5 c
249.3076 385.4233 253.4233 381.3076 258.5 381.3076 c
s
258.5 390.5 m
S
U
0 To
1 0 0 1 258.5 387 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(4,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
268 390.5 m
320.5 390.5 l
S
u
333 381.3076 m
338.0767 381.3076 342.1924 385.4233 342.1924 390.5 c
342.1924 395.5767 338.0767 399.6924 333 399.6924 c
327.9233 399.6924 323.8076 395.5767 323.8076 390.5 c
323.8076 385.4233 327.9233 381.3076 333 381.3076 c
s
333 390.5 m
S
U
0 To
1 0 0 1 333 387 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
(4,1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 293 394.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
323.7588 390.5 m
317.2075 388.9565 l
318.6138 390.5 L
317.2075 392.0435 l
323.7588 390.5 L
f
U
0 R
0 G
0.75 w
268 503 m
320.5 503 l
S
u
333 493.8076 m
338.0767 493.8076 342.1924 497.9233 342.1924 503 c
342.1924 508.0767 338.0767 512.1924 333 512.1924 c
327.9233 512.1924 323.8076 508.0767 323.8076 503 c
323.8076 497.9233 327.9233 493.8076 333 493.8076 c
s
333 503 m
S
U
0 To
1 0 0 1 333 499.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6,3) Tx 
(\r) TX 
TO
u
323.7588 503 m
317.2075 501.4565 l
318.6138 503 L
317.2075 504.5435 l
323.7588 503 L
f
U
0 To
1 0 0 1 295.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 447 m
395 447 l
S
u
407.5 437.8076 m
412.5767 437.8076 416.6924 441.9233 416.6924 447 c
416.6924 452.0767 412.5767 456.1924 407.5 456.1924 c
402.4233 456.1924 398.3076 452.0767 398.3076 447 c
398.3076 441.9233 402.4233 437.8076 407.5 437.8076 c
s
407.5 447 m
S
U
0 To
1 0 0 1 407.5 443.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(5,3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 367.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
398.2588 447 m
391.7075 445.4565 l
393.1138 447 L
391.7075 448.5435 l
398.2588 447 L
f
U
0 R
0 G
0.75 w
342.5 390.5 m
395 390.5 l
S
u
407.5 381.3076 m
412.5767 381.3076 416.6924 385.4233 416.6924 390.5 c
416.6924 395.5767 412.5767 399.6924 407.5 399.6924 c
402.4233 399.6924 398.3076 395.5767 398.3076 390.5 c
398.3076 385.4233 402.4233 381.3076 407.5 381.3076 c
s
407.5 390.5 m
S
U
0 To
1 0 0 1 407.5 387 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4,2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 367.5 394.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
398.2588 390.5 m
391.7075 388.9565 l
393.1138 390.5 L
391.7075 392.0435 l
398.2588 390.5 L
f
U
0 R
0 G
0.75 w
333.875 381.25 m
333.875 347.375 l
S
u
0 O
0 g
1 w
333.875 344.1162 m
332.3315 350.6675 l
333.875 349.2612 L
335.4185 350.6675 l
333.875 344.1162 L
f
U
0 To
1 0 0 1 338.875 364.75 0 Tp
TP
0 Tr
/_Courier 9 Tf
0 Ta
(<m,s>) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
334 324.8076 m
339.0767 324.8076 343.1924 328.9233 343.1924 334 c
343.1924 339.0767 339.0767 343.1924 334 343.1924 c
328.9233 343.1924 324.8076 339.0767 324.8076 334 c
324.8076 328.9233 328.9233 324.8076 334 324.8076 c
s
334 334 m
S
U
0 To
1 0 0 1 334 330.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(3,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
343.5 334 m
396 334 l
S
u
408.5 324.8076 m
413.5767 324.8076 417.6924 328.9233 417.6924 334 c
417.6924 339.0767 413.5767 343.1924 408.5 343.1924 c
403.4233 343.1924 399.3076 339.0767 399.3076 334 c
399.3076 328.9233 403.4233 324.8076 408.5 324.8076 c
s
408.5 334 m
S
U
0 To
1 0 0 1 408.5 330.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
(3,1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 368.5 338 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
399.2588 334 m
392.7075 332.4565 l
394.1138 334 L
392.7075 335.5435 l
399.2588 334 L
f
U
0 R
0 G
0.75 w
418 334 m
470.5 334 l
S
u
483 324.8076 m
488.0767 324.8076 492.1924 328.9233 492.1924 334 c
492.1924 339.0767 488.0767 343.1924 483 343.1924 c
477.9233 343.1924 473.8076 339.0767 473.8076 334 c
473.8076 328.9233 477.9233 324.8076 483 324.8076 c
s
483 334 m
S
U
0 To
1 0 0 1 483 330.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3,2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 443 338 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
473.7588 334 m
467.2075 332.4565 l
468.6138 334 L
467.2075 335.5435 l
473.7588 334 L
f
U
0 R
0 G
0.75 w
408.875 325.25 m
408.875 291.375 l
S
u
0 O
0 g
1 w
408.875 288.1162 m
407.3315 294.6675 l
408.875 293.2612 L
410.4185 294.6675 l
408.875 288.1162 L
f
U
0 To
1 0 0 1 413.375 312.75 0 Tp
TP
0 Tr
/_Courier 9 Tf
0 Ta
(<m,s>) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
409 268.8076 m
414.0767 268.8076 418.1924 272.9233 418.1924 278 c
418.1924 283.0767 414.0767 287.1924 409 287.1924 c
403.9233 287.1924 399.8076 283.0767 399.8076 278 c
399.8076 272.9233 403.9233 268.8076 409 268.8076 c
s
409 278 m
S
U
0 To
1 0 0 1 409 274.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(1,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
418.5 278 m
471 278 l
S
u
483.5 268.8076 m
488.5767 268.8076 492.6924 272.9233 492.6924 278 c
492.6924 283.0767 488.5767 287.1924 483.5 287.1924 c
478.4233 287.1924 474.3076 283.0767 474.3076 278 c
474.3076 272.9233 478.4233 268.8076 483.5 268.8076 c
s
483.5 278 m
S
U
0 To
1 0 0 1 483.5 274.5 0 Tp
TP
-5.625 0 Td
0 Tr
0 O
0 g
1 w
(1,1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 443.5 282 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
474.2588 278 m
467.7075 276.4565 l
469.1138 278 L
467.7075 279.5435 l
474.2588 278 L
f
U
0 To
1 0 0 1 110.5 499.5 0 Tp
TP
-5.625 0 Td
0 Tr
/_Times-Roman 9 Tf
(6,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
332.875 437.75 m
332.875 403.875 l
S
u
0 O
0 g
1 w
332.875 400.6162 m
331.3315 407.1675 l
332.875 405.7612 L
334.4185 407.1675 l
332.875 400.6162 L
f
U
0 To
1 0 0 1 337.875 421.25 0 Tp
TP
0 Tr
/_Courier 9 Tf
0 Ta
(<m_2,s_2>) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
258.75 493.75 m
258.75 459.875 l
S
u
0 O
0 g
1 w
258.75 456.6162 m
257.2065 463.1675 l
258.75 461.7612 L
260.2935 463.1675 l
258.75 456.6162 L
f
U
0 To
1 0 0 1 263.75 477.25 0 Tp
TP
0 Tr
(<m_2,s_2>) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 464.22 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 32
%%Page: "27" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(27) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(      0.15 SECS. TO READ MODEL FILE) 105 718.67 T
(24? run) 105 705.65 T
-0.4 (MODEL FILE = sift.mod                   SURE V7.5 26 Feb 90 14:23:14) 105 686.62 P
-0.13 (   M          LOWERBOUND   UPPERBOUND   COMMENTS             RUN #1) 105 667.6 P
(-----------  -----------  -----------  ---------------------------) 105 654.58 T
(1.00000e-04  9.17736e-12  9.75265e-12) 105 641.56 T
(1.00000e-03  1.21626e-11  1.32216e-11) 105 628.54 T
(1.00000e-02  4.34597e-11  5.48450e-11) 105 615.52 T
(1.00000e-01  6.77898e-10  1.16481e-09) 105 602.5 T
(15 PATH\050S\051 TO DEATH STATES) 105 583.48 T
(1.233 SECS. CPU TIME UTILIZED) 105 570.46 T
(26? exit) 105 557.44 T
3 F
-0.18 (Finally, it should be noted that the SIFT computer degrades from a triplex to a simplex. Thus, the recon-) 87 538.41 P
(figuration transition out of state \0503,1\051 carries the system into state \0501,0\051.) 87 525.42 T
4 10.5 Q
(6.2. Single-Point Failur) 105 500.73 T
(es) 208.66 500.73 T
3 11 Q
0.85 (All previous models assumed that no single-point failures existed in the system; that is, one fault) 105 482.87 P
0.14 (arrival causes system failure.  When a system is not designed properly and is vulnerable to single-point) 87 469.87 P
1.13 (failures, the reliability can be seriously degraded. To understand the effects of a single-point failure,) 87 456.87 P
0.8 (consider the model in figure 23 of a TMR system with a single-point failure. The parameter) 87 443.87 P
5 F
0.8 (C) 505.85 443.87 P
3 F
0.8 ( repre-) 513.19 443.87 P
-0.24 (sents the fraction of faults that do not cause system failure alone. The sensitivity of the system reliability) 87 430.87 P
(to) 87 417.87 T
5 F
(C) 98.31 417.87 T
3 F
( can be seen in the following SURE run.) 105.64 417.87 T
7 F
( $ sure) 92.5 272.19 T
( SURE V7.4 NASA Langley Research Center) 105 254.17 T
( 1? read spf) 105 235.15 T
( 2: LAMBDA = 1E-4;) 105 222.13 T
( 3: C = .9 TO 1 BY 0.01;) 105 209.11 T
( 4: 1,2 = 3*LAMBDA*C;) 105 196.09 T
( 5: 2,3 = 2*LAMBDA;) 105 183.06 T
( 6: 1,4 = 3*\0501-C\051*LAMBDA;) 105 170.04 T
(      0.05 SECS. TO READ MODEL FILE) 105 151.02 T
( 7? run) 105 138 T
3 9 Q
(Figure 23.  Model of TMR system with single-point failure.) 207.38 300.54 T
87 306.54 543 398.21 C
212.5 317.54 417.5 398.21 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 435 357 517 193 82 218.5 316.87 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig23.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig23.ps)
%%CreationDate: (4/17/95) (8:00 AM)
%%BoundingBox: 164 435 357 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.5 507 0 Tp
TP
-7.7212 0 Td
0 Tr
(3) Tx 
/_Times-Italic 9 Tf
(C) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
270 503 m
332.5 503 l
S
u
345 493.8076 m
350.0767 493.8076 354.1924 497.9233 354.1924 503 c
354.1924 508.0767 350.0767 512.1924 345 512.1924 c
339.9233 512.1924 335.8076 508.0767 335.8076 503 c
335.8076 497.9233 339.9233 493.8076 345 493.8076 c
s
345 503 m
S
U
0 To
1 0 0 1 345 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.7588 503 m
329.2075 501.4565 l
330.6138 503 L
329.2075 504.5435 l
335.7588 503 L
f
U
0 R
0 G
0.75 w
176.25 493.75 m
176.25 459.875 l
S
u
0 O
0 g
1 w
176.25 456.6162 m
174.7065 463.1675 l
176.25 461.7612 L
177.7935 463.1675 l
176.25 456.6162 L
f
U
0 To
1 0 0 1 182.25 477.25 0 Tp
TP
0 Tr
/_Times-Roman 9 Tf
0 Ta
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
(\(1 \320 ) Tx 
/_Times-Italic 9 Tf
(C) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 437.8076 m
181.5767 437.8076 185.6924 441.9233 185.6924 447 c
185.6924 452.0767 181.5767 456.1924 176.5 456.1924 c
171.4233 456.1924 167.3076 452.0767 167.3076 447 c
167.3076 441.9233 171.4233 437.8076 176.5 437.8076 c
s
176.5 447 m
S
U
0 To
1 0 0 1 176.5 445 0 Tp
TP
0 Tr
0 O
0 g
1 w
/_Times-Italic 9 Tf
1 Ta
(\r) Tx 
TO
0 To
1 0 0 1 176.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 306.54 543 398.21 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 33
%%Page: "28" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(28) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
-0.39 ( MODEL FILE = spf.mod                  SURE V7.4 24 Jan 90 10:20:43) 105 718.67 P
-0.5 (      C        LOWERBOUND   UPPERBOUND   COMMENTS              RUN #1) 105 699.66 P
-0.6 ( -----------  -----------  -----------  ---------------------------) 105 686.65 P
( 9.00000e-01  3.02245e-04  3.02700e-04) 105 673.64 T
( 9.10000e-01  2.72320e-04  2.72730e-04) 105 660.62 T
( 9.20000e-01  2.42395e-04  2.42760e-04) 105 647.61 T
( 9.30000e-01  2.12470e-04  2.12790e-04) 105 634.6 T
( 9.40000e-01  1.82545e-04  1.82820e-04) 105 621.59 T
( 9.50000e-01  1.52620e-04  1.52850e-04) 105 608.58 T
( 9.60000e-01  1.22695e-04  1.22880e-04) 105 595.57 T
( 9.70000e-01  9.27702e-05  9.29100e-05) 105 582.56 T
( 9.80000e-01  6.28451e-05  6.29400e-05) 105 569.55 T
( 9.90000e-01  3.29200e-05  3.29700e-05) 105 556.54 T
( 1.00000e+00  2.99500e-06  3.00000e-06) 105 543.53 T
(2 PATH\050S\051 TO DEATH STATES) 105 524.52 T
(0.667 SECS. CPU TIME UTILIZED) 105 511.51 T
( 8? exit) 105 498.5 T
3 F
0.09 ( The results of this run are plotted in figure 24. The plot reveals that probability of system failure is) 105 479.49 P
0.06 (very sensitive to) 87 466.49 P
5 F
0.06 (C) 162.04 466.49 P
3 F
0.06 (. The sensitivity is even greater as the number of processors is increased in the NMR) 169.37 466.49 P
-0.08 (system.  To have a probability of failure less than 10) 87 453.49 P
6 8.8 Q
-0.06 (-) 317.48 457.89 P
3 F
-0.06 (9) 322.31 457.89 P
3 11 Q
-0.08 ( in a 5MR system composed of processors whose) 326.71 453.49 P
0.07 (failure rate is very low \05010) 87 440.49 P
6 8.8 Q
0.05 (-) 204.34 444.89 P
3 F
0.05 (5) 209.17 444.89 P
3 11 Q
0.07 (/hr\051,) 213.57 440.49 P
5 F
0.07 (C) 235.03 440.49 P
3 F
0.07 ( must be greater than 0.999998. A 5MR system that is not subject to) 242.36 440.49 P
-0.27 (single-point failure has a probability of failure of 1) 87 427.49 P
6 F
-0.27 (\264) 310.95 427.49 P
3 F
-0.27 ( 10) 316.99 427.49 P
6 8.8 Q
-0.22 (-) 330.47 431.89 P
3 F
-0.22 (11) 335.3 431.89 P
3 11 Q
-0.27 (.  See figure 25, which was produced by solv-) 344.1 427.49 P
(ing the following model:) 87 414.49 T
7 F
(LAMBDA = 1E-5;) 105 395.48 T
(N = 5;) 105 382.47 T
(X = 1E-10 TO* 1 BY 2;) 105 369.46 T
(C = 1-X;) 105 356.45 T
(1,2 = 5*C*LAMBDA;) 105 343.43 T
(1,7 = 5*\0501-C\051*LAMBDA;) 105 330.42 T
(2,3 = 4*C*LAMBDA;) 105 317.41 T
(2,8 = 4*\0501-C\051*LAMBDA;) 105 304.4 T
(3,4 = 3*LAMBDA;) 105 291.39 T
3 9 Q
(Figure 24.  Failure probability as function of) 109.5 80 T
5 F
(C) 272.24 80 T
3 F
(.) 278.24 80 T
1.4 (Figure 25.  Failure probability of 5MR with) 327 80 P
6 F
1.4 (l) 497.97 80 P
3 F
1.4 ( = 10) 502.92 80 P
6 7.2 Q
1.12 (-) 524.3 83.6 P
3 F
1.12 (5) 528.25 83.6 P
3 9 Q
1.4 ( as) 531.85 80 P
(function of) 336 69 T
5 F
(C) 377.99 69 T
3 F
(.) 384 69 T
87 86 303 269.73 C
87 97.4 303 269.73 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 179 434 414 599 235 165 77.5 97.4 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig24.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig24.ps)
%%CreationDate: (7/28/95) (9:24 AM)
%%BoundingBox: 179 434 414 599
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
367.4869 458.8929 m
367.4869 461.7729 l
S
229.1486 588.375 m
225.6926 588.375 l
225.6926 458.8929 l
396.3832 458.8929 l
396.3832 461.7729 l
S
338.5904 458.8929 m
338.5904 461.7729 l
S
311.1341 458.8929 m
311.1341 461.7729 l
S
254.1092 458.8929 m
254.1092 461.7729 l
S
229.1486 545.7261 m
225.6926 545.7261 l
S
0 To
0.576 0 0 0.576 223.3885 586.8228 0 Tp
TP
-31.2506 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 15.6253 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
15.6253 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 223.3885 542.566 0 Tp
TP
-31.2506 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 223.3885 457.0209 0 Tp
TP
-31.2506 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 225.4046 447.5647 0 Tp
TP
-13.6721 0 Td
0 Tr
0 Ts
1 Ta
(0.88) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 253.8212 447.5647 0 Tp
TP
-13.6721 0 Td
0 Tr
(0.90) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 310.9901 447.5647 0 Tp
TP
-13.6721 0 Td
0 Tr
(0.94) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 338.5904 447.5647 0 Tp
TP
-13.6721 0 Td
0 Tr
(0.96) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 367.3428 447.5647 0 Tp
TP
-13.6721 0 Td
0 Tr
(0.98) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 396.2392 447.5647 0 Tp
TP
-13.6721 0 Td
0 Tr
(1.00) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 311.086 436.6205 0 Tp
TP
-5.211 0 Td
0 Tr
/_Times-Italic 15.6253 Tf
(C) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 192.2841 523.6939 0 Tp
TP
-6.9429 0 Td
0 Tr
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
254.1396 566.1603 m
316.3001 558.9602 357.5803 542.1601 v
370.3004 534.7201 l
382.5405 524.16 l
395.9806 479.2797 l
S
282.3339 458.8929 m
282.3339 461.7729 l
S
0 To
0.576 0 0 0.576 282.1899 447.5647 0 Tp
TP
-13.6721 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 15.6253 Tf
0 Ts
(0.92) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
229.1486 502.2858 m
225.6926 502.2858 l
S
0 To
0.576 0 0 0.576 223.3885 499.1257 0 Tp
TP
-31.2506 0 Td
0 Tr
0 O
0 g
1 w
2 Ta
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 86 303 269.73 C
0 0 612 792 C
327 86 543 269.73 C
327 97 543 269.73 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 180 210 414 374 234 164 318 97 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig25.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig25.ps)
%%CreationDate: (7/28/95) (9:25 AM)
%%BoundingBox: 180 210 414 374
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
362.9068 235.2529 m
362.9068 238.1329 l
S
230.0886 364.7349 m
226.6326 364.7349 l
226.6326 235.2529 l
397.3232 235.2529 l
397.3232 238.1329 l
S
328.4904 235.2529 m
328.4904 238.1329 l
S
294.7939 235.2529 m
294.7939 238.1329 l
S
260.0892 235.2529 m
260.0892 238.1329 l
S
230.0886 332.4061 m
226.6326 332.4061 l
S
0 To
0.576 0 0 0.576 224.3285 361.2628 0 Tp
TP
-31.2506 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 15.6253 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
15.6253 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 224.3285 329.246 0 Tp
TP
-31.2506 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 224.3285 233.3809 0 Tp
TP
-39.0633 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\61\61) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 226.3446 222.0047 0 Tp
TP
-19.5316 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
6.6666 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 259.8012 222.0047 0 Tp
TP
-15.6253 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\3208) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 294.6499 222.0047 0 Tp
TP
-15.6253 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 328.4904 222.0047 0 Tp
TP
-15.6253 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 362.7628 222.0047 0 Tp
TP
-15.6253 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\62) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 397.1792 222.0047 0 Tp
TP
-11.719 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(0) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 312.026 212.9805 0 Tp
TP
-16.93 0 Td
0 Tr
0 Ts
(1 \320 ) Tx 
/_Times-Italic 15.6253 Tf
(C) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 193.2241 299.0939 0 Tp
TP
-6.9429 0 Td
0 Tr
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
230.0886 299.5259 m
226.6326 299.5259 l
S
0 To
0.576 0 0 0.576 224.3285 296.3658 0 Tp
TP
-31.2506 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 15.6253 Tf
0 Ts
2 Ta
(10) Tx 
6.6666 Ts
(\320\67) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
230.0886 268.0857 m
226.6326 268.0857 l
S
0 To
0.576 0 0 0.576 224.3285 264.9256 0 Tp
TP
-31.2506 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
6.6666 Ts
(\3209) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
230.0886 332.1661 m
226.6326 332.1661 l
S
244.9995 235.4795 m
256.2796 236.6795 l
266.8397 240.5196 l
271.8797 242.9196 l
308.36 274.8398 l
398.1206 358.8404 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
327 86 543 269.73 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 34
%%Page: "29" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(29) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.24 (Experimental measurement of a parameter to such accuracy is easily shown to be impractical. Alter-) 105 718.67 P
0.58 (natively, a system with no single-point failures can be designed, and thus, remove this transition from) 87 705.67 P
(the model.) 87 692.67 T
4 10.5 Q
(6.3. Fail-Stop Dual System) 105 665.51 T
3 11 Q
-0.24 ( When processors fail, they often either fail to produce an output \050i.e., apparently halt\051 or produce an) 105 645.19 P
0.19 (incorrect answer that is so far from the correct answer that it would fail a simple reasonableness check.) 87 632.19 P
0.6 (In both cases, it is simple for a processor to detect its own failure with special circuitry and to halt its) 87 619.19 P
0.24 (processing. A processor with this capability is often referred to as a fail-stop processor.  Electronic cir-) 87 606.19 P
-0.12 (cuitry that can recognize that one fail-stop processor has halted \050e.g.,  no data arrives\051 and automatically) 87 593.19 P
-0.05 (switch to an alternate fail-stop processor is simple to build. A system consisting of two fail-stop proces-) 87 580.19 P
(sors and this selection circuitry is called a dual system. This system is illustrated in figure 26.) 87 567.19 T
0.79 (The switch determines which output will be used. Reliability engineers sometimes make the mis-) 105 421.93 P
0.06 (take of assuming that this process will work correctly 100 percent of the time. However, most  fail-stop) 87 408.93 P
-0.02 (processors cannot be guaranteed to always halt upon failure. For example, the failure can cause an erro-) 87 395.93 P
0.03 (neous answer that passes the reasonableness checks, or the failure can affect the ability of the processor) 87 382.93 P
0.02 (to detect the failure or to halt its processing or its output. In this  section,  the impact on system reliabil-) 87 369.93 P
0.81 (ity when a processor is not 100-percent fail stop will be investigated. Suppose) 87 356.93 P
7 F
1.96 (PFS) 443.45 356.93 P
3 F
0.81 ( is the probability) 463.25 356.93 P
(that a processor stops when it fails. The model in figure 27 describes such a system.) 87 343.93 T
-0.14 (The system begins in state \0501\051 where all components are operational. Either of two processors or the) 105 108.67 P
-0.11 (switch itself could fail.  Use) 87 95.67 P
6 F
-0.11 (l) 212.55 95.67 P
5 8.8 Q
-0.09 (p) 218.59 92.92 P
3 11 Q
-0.11 ( for the failure rate of the currently selected processor,) 222.99 95.67 P
6 F
-0.11 (l) 463.54 95.67 P
5 8.8 Q
-0.09 (ig) 469.58 92.92 P
3 11 Q
-0.11 (for the proces-) 479.07 95.67 P
-0.16 (sor that is currently being ignored, and) 87 82.67 P
6 F
-0.16 (l) 258.83 82.67 P
5 8.8 Q
-0.12 (sw) 264.86 79.92 P
3 11 Q
-0.16 ( for the failure rate of the switch.  Usually) 274.16 82.67 P
6 F
-0.16 (l) 459.86 82.67 P
5 8.8 Q
-0.12 (ig) 465.89 79.92 P
3 11 Q
-0.16 ( will be equal to) 472.74 82.67 P
6 F
1.8 (l) 87 69.67 P
5 8.8 Q
1.44 (p) 93.04 66.92 P
3 11 Q
1.8 (; however,) 97.44 69.67 P
6 F
1.8 (l) 150.23 69.67 P
5 8.8 Q
1.44 (ig) 156.27 66.92 P
3 11 Q
1.8 (is used here to make the model clearer. The transition from state \0501\051 to state \0502\051) 167.67 69.67 P
3 9 Q
(Figure 26.  Fail-stop dual system.) 254.62 458.75 T
(Figure 27.  Model of fail-stop dual system.) 237.88 145.49 T
87 464.75 543 539.52 C
213.5 475.75 416.5 539.52 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 74 471 265 535 191 64 219.5 475.64 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig26.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig26.ps)
%%CreationDate: (4/17/95) (8:16 AM)
%%BoundingBox: 74 471 265 535
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 181.25 499.5 0 Tp
TP
-12.498 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(Switch) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
181.2133 489.0457 m
188.8919 489.0457 195.1169 495.2708 195.1169 502.9494 c
195.1169 510.6279 188.8919 516.853 181.2133 516.853 c
173.5346 516.853 167.3096 510.6279 167.3096 502.9494 c
167.3096 495.2708 173.5346 489.0457 181.2133 489.0457 c
s
181.2133 502.9494 m
S
U
195.25 503 m
225 503 l
S
u
0 O
0 g
1 w
228.2588 503 m
221.7075 501.4565 l
223.1138 503 L
221.7075 504.5435 l
228.2588 503 L
f
U
0 R
0 G
0.75 w
129.9174 526.126 m
165.2285 508.4234 l
S
u
0 O
0 g
1 w
168.1417 506.963 m
161.5934 508.5192 l
163.5423 509.2688 L
162.9769 511.2788 l
168.1417 506.963 L
f
U
0 R
0 G
0.75 w
129.9174 479.499 m
165.2285 497.2015 l
S
u
0 O
0 g
1 w
168.1417 498.662 m
161.5934 497.1058 l
163.5423 496.3562 L
162.9769 494.3462 l
168.1417 498.662 L
f
U
0 To
1 0 0 1 104.375 524.125 0 Tp
TP
-20.8663 0 Td
0 Tr
(Processor 1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
77.5 521.25 m
77.5 532.5 L
129.75 532.5 L
129.75 521.25 L
77.5 521.25 L
s
103.625 526.875 m
S
U
0 To
1 0 0 1 104.375 476.375 0 Tp
TP
-20.8663 0 Td
0 Tr
0 O
0 g
1 w
(Processor 2) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
77.5 473.5 m
77.5 484.75 L
129.75 484.75 L
129.75 473.5 L
77.5 473.5 L
s
103.625 479.125 m
S
U
0 To
1 0 0 1 243.5 499.5 0 Tp
TP
-12.4991 0 Td
0 Tr
0 O
0 g
1 w
(Output) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 464.75 543 539.52 C
0 0 612 792 C
87 151.49 543 316.26 C
212.5 162.49 417.5 316.26 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 366 357 520 193 154 218.5 161.82 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig27.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig27.ps)
%%CreationDate: (4/17/95) (8:53 AM)
%%BoundingBox: 164 366 357 520
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.75 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 216.5 510.75 0 Tp
TP
-17.3177 0 Td
0 Tr
/_Courier 9 Tf
(PFS) Tx 
/_Symbol 9 Tf
( * l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
269.75 503 m
332.25 503 l
S
u
344.75 493.8076 m
349.8267 493.8076 353.9424 497.9233 353.9424 503 c
353.9424 508.0767 349.8267 512.1924 344.75 512.1924 c
339.6733 512.1924 335.5576 508.0767 335.5576 503 c
335.5576 497.9233 339.6733 493.8076 344.75 493.8076 c
s
344.75 503 m
S
U
0 To
1 0 0 1 344.75 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
(3) Tx 
(\r) TX 
TO
u
335.5088 503 m
328.9575 501.4565 l
330.3638 503 L
328.9575 504.5435 l
335.5088 503 L
f
U
0 R
0 G
0.75 w
183.0407 496.4593 m
251.1832 428.3168 l
S
u
253.522 412.9779 m
257.1118 409.3882 262.9322 409.3882 266.522 412.978 c
270.1118 416.5677 270.1118 422.3882 266.522 425.978 c
262.9323 429.5678 257.1118 429.5678 253.522 425.978 c
249.9322 422.3882 249.9322 416.5677 253.522 412.9779 c
s
260.022 419.478 m
S
U
u
0 O
0 g
1 w
253.4875 426.0125 m
247.7636 429.5536 l
249.8494 429.6506 L
249.9464 431.7364 l
253.4875 426.0125 L
f
U
0 R
0 G
0.75 w
176.5 493.75 m
176.5 390.4999 l
S
u
167.3076 377.9998 m
167.3075 372.9231 171.4233 368.8074 176.5 368.8074 c
181.5767 368.8074 185.6924 372.9232 185.6924 377.9998 c
185.6924 383.0765 181.5767 387.1923 176.5 387.1923 c
171.4233 387.1923 167.3075 383.0765 167.3076 377.9998 c
s
176.5 377.9998 m
S
U
u
0 O
0 g
1 w
176.5 387.2411 m
174.9565 393.7924 l
176.5 392.3861 L
178.0435 393.7924 l
176.5 387.2411 L
f
U
0 To
1 0 0 1 260.125 415.875 0 Tp
TP
-2.25 0 Td
0 Tr
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 176.5 374.75 0 Tp
TP
-2.25 0 Td
0 Tr
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 297.5 510.75 0 Tp
TP
-16.7289 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
/_Times-Roman 9 Tf
0 Ts
( + ) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(sw) Tx 
(\r) TX 
TO
0 To
1 0 0 1 240 479.75 0 Tp
TP
-39.7485 0 Td
0 Tr
/_Courier 9 Tf
0 Ts
(\(1) Tx 
/_Courier 5 Tf
( ) Tx 
/_Courier 9 Tf
(\320) Tx 
/_Courier 5 Tf
( ) Tx 
/_Courier 9 Tf
(PFS\)) Tx 
/_Symbol 9 Tf
( l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p ) Tx 
/_Times-Roman 9 Tf
0 Ts
(+ ) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(sw) Tx 
(\r) TX 
TO
0 To
1 0 0 1 185.75 443.5 0 Tp
TP
-5.97 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(ig) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
185.75 377.75 m
248 377.75 l
S
u
260.5 368.5576 m
265.5767 368.5576 269.6924 372.6733 269.6924 377.75 c
269.6924 382.8267 265.5767 386.9424 260.5 386.9424 c
255.4233 386.9424 251.3076 382.8267 251.3076 377.75 c
251.3076 372.6733 255.4233 368.5576 260.5 368.5576 c
s
260.5 377.75 m
S
U
0 To
1 0 0 1 260.5 374.25 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
(6) Tx 
(\r) TX 
TO
u
251.2588 377.75 m
244.7075 376.2065 l
246.1138 377.75 L
244.7075 379.2935 l
251.2588 377.75 L
f
U
0 To
1 0 0 1 213.5 384.75 0 Tp
TP
-16.7289 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
/_Times-Roman 9 Tf
0 Ts
( + ) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(sw) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 151.49 543 316.26 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 35
%%Page: "30" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(30) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.76 (represents the failure of the processor that causes it to stop. Because) 87 718.67 P
7 F
1.83 (PFS) 398.25 718.67 P
3 F
0.76 ( is the fraction of times this) 418.05 718.67 P
0.43 (occurs, the rate of this transition is) 87 705.67 P
7 F
1.04 ( \050PFS\051) 241.43 705.67 P
6 F
0.43 (l) 282.07 705.67 P
5 8.8 Q
0.34 (p) 288.11 702.92 P
3 11 Q
0.43 (. The cases where it does not fail stop lead to the failure) 292.51 705.67 P
0 (state \0504\051. The rate of such failures is) 87 692.67 P
7 F
0 (\0501) 248 692.67 P
0 (-) 267.8 692.67 P
0 (PFS\051) 281 692.67 P
6 F
0 (l) 307.4 692.67 P
5 8.8 Q
0 (p) 313.44 689.92 P
3 11 Q
0 (. The failure of the switch could also cause the sys-) 317.84 692.67 P
0.65 (tem to fail, so the total rate from state \0501\051 to state \0504\051 is) 87 679.67 P
7 F
1.56 (\0501) 339.62 679.67 P
1.56 (-) 359.42 679.67 P
1.56 (PFS\051) 372.62 679.67 P
6 F
0.65 (l) 399.02 679.67 P
5 8.8 Q
0.52 (p) 405.05 676.92 P
3 11 Q
0.65 (+) 412.17 679.67 P
6 F
0.65 (l) 421.78 679.67 P
5 8.8 Q
0.52 (sw) 427.82 676.92 P
3 11 Q
0.65 (. The failure of the cur-) 437.11 679.67 P
(rently unselected processor carries the system to state \0505\051 with a rate of) 87 666.67 T
6 F
(l) 401.95 666.67 T
5 8.8 Q
(ig) 407.99 663.92 T
3 11 Q
(.) 414.84 666.67 T
-0.14 (Note that the sum of the rates of all  failure transitions from state \0501\051 add up to the sum of the failure) 105 646.6 P
0.57 (rates of all nonfailed components \050) 87 633.6 P
6 F
0.57 (l) 242.91 633.6 P
5 8.8 Q
0.46 (p) 248.95 630.85 P
3 11 Q
0.57 ( +) 253.35 633.6 P
6 F
0.57 (l) 266.19 633.6 P
5 8.8 Q
0.46 (ig) 272.23 630.85 P
3 11 Q
0.57 ( +) 279.08 633.6 P
6 F
0.57 (l) 291.92 633.6 P
5 8.8 Q
0.46 (sw) 297.96 630.85 P
3 11 Q
0.57 (\051.  This property should always be true for all opera-) 307.26 633.6 P
0.99 (tional states of a reliability model. State \0502\051 represents the situation where the selected processor has) 87 620.6 P
0.1 (halted. Because the switch has not failed in this state, the system is able to make the switch to the alter-) 87 607.6 P
0.56 (nate. The transition from state \0502\051 to state \0503\051 represents the failure of the switch or the last processor.) 87 594.6 P
-0.11 (State \0503\051 is thus a death state. State \0505\051 represents the state where the selected processor is still operating) 87 581.6 P
1.32 (correctly, but the unselected processor has failed. Thus, when the active processor fails \050state \0505\051 to) 87 568.6 P
0.91 (state) 87 555.6 P
0.91 (\0506\051\051, the system has no working spare. Note also that the failure of the switch always leads to a) 109.91 555.6 P
0.41 (death state. Furthermore, every operational state is subject to this failure. Thus, every operational state) 87 542.6 P
(should be inspected to verify that a transition representing the failure of the switch leaving it occurs.) 87 529.6 T
-0.13 (The plot of the SURE solution of this model is shown in figure 28. The statement) 105 509.53 P
7 F
-0.31 (PFS) 463.8 509.53 P
-0.31 (=) 490.2 509.53 P
-0.31 (0) 503.4 509.53 P
-0.31 (TO) 516.6 509.53 P
-0.31 (1) 536.4 509.53 P
-0.2 (BY) 87 496.53 P
-0.2 (0.01) 106.8 496.53 P
3 F
-0.09 ( directs the SURE program to compute the probability of system failure as a function of) 133.2 496.53 P
7 F
-0.2 (PFS) 520.45 496.53 P
3 F
-0.09 (.) 540.25 496.53 P
0.1 (The program solves the model for values of) 87 483.53 P
7 F
0.24 (PFS) 282.7 483.53 P
3 F
0.1 ( over the range from 0 to 1 in increments of 0.01.  The) 302.5 483.53 P
-0.14 (reliability of the system is very sensitive to the probability of the fail-stop processor halting upon failure) 87 470.53 P
0.25 (and) 87 457.53 P
7 F
0.59 (PFS) 105.88 457.53 P
3 F
0.25 ( must be much greater than 0.9 to have a significant improvement in reliability over a simplex) 125.68 457.53 P
(computer.) 87 444.53 T
4 10.5 Q
(6.4. Self-Checking Pair Ar) 105 114.57 T
(chitectur) 222.93 114.57 T
(e) 262.97 114.57 T
3 11 Q
0.75 (The previous section illustrated the sensitivity of reliability to the assumption of fail stop. Conse-) 105 95.67 P
0.25 (quently, approaches have been sought to achieve the fail-stop assumption with almost 100-percent cer-) 87 82.67 P
2.26 (tainty. One such approach is a self-checking pair architecture. In this system, four computers are) 87 69.67 P
3 9 Q
(Figure 28.  Plot of fail-stop dual system unreliability and PFS.) 202.99 149.64 T
87 155.64 543 416.86 C
135.5 166.64 494.5 416.86 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 137 272 484 524 347 252 141.5 164.97 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig28.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig28.ps)
%%CreationDate: (7/27/95) (8:31 AM)
%%BoundingBox: 137 272 484 524
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
188.9679 513.7285 m
185.3679 513.7285 l
185.3679 298.3523 l
468.6694 298.3523 l
468.6694 301.3523 l
S
241.8688 298.3523 m
241.8688 301.3523 l
S
188.9679 353.0529 m
185.3679 353.0529 l
S
0 To
0.6 0 0 0.6 182.9678 511.9034 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\62) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 182.9678 350.8028 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 182.9678 296.4023 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 185.0679 287.5522 0 Tp
TP
-3.75 0 Td
0 Tr
0 Ts
1 Ta
(0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 241.7188 287.5522 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.2) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 468.5194 287.5522 0 Tp
TP
-9.3749 0 Td
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 325.8187 275.1521 0 Tp
TP
-5.0024 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
14.9998 0 Tl
(C) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 150.5676 404.8529 0 Tp
TP
-6.6649 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
14.9998 0 Tl
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
188.9679 459.9785 m
185.3679 459.9785 l
S
0 To
0.6 0 0 0.6 182.9678 457.6534 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
2 Ta
(10) Tx 
6.6666 Ts
(\320\63) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
188.9679 405.9785 m
185.3679 405.9785 l
S
0 To
0.6 0 0 0.6 182.9678 403.6534 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
6.6666 Ts
(\320\64) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
298.3688 298.3523 m
298.3688 301.3523 l
S
0 To
0.6 0 0 0.6 298.2188 287.5522 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
1 Ta
(0.4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
355.6188 298.3523 m
355.6188 301.3523 l
S
0 To
0.6 0 0 0.6 355.4688 287.5522 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
(0.6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
412.6188 298.3523 m
412.6188 301.3523 l
S
0 To
0.6 0 0 0.6 412.4688 287.5522 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
(0.8) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
185.625 458.75 m
213.5 459 290 448.5 v
366.5 438 423.5 423.5 445.5 401.5 c
467.5 379.5 466.5 354.5 467 345.5 c
467.5 336.5 468.75 299.25 y
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 155.64 543 416.86 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 36
%%Page: "31" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(31) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.56 (configured into two self-checking pairs. The self-checking pairs run in lock step mode. Upon any dis-) 87 718.67 P
0.46 (agreement of the outputs, the self-checking pair shuts itself down. Of course, special circuitry must be) 87 705.67 P
0.54 (used to perform the self-checking function, but techniques exist that can make such circuitry fail-safe.) 87 692.67 P
0.52 (That is, if the self checker fails, then the pair is shut down. The outputs of the two self-checking pairs) 87 679.67 P
0.77 (are sent to a selection switch. The self-checking pair serves as the fail-stop processor of the model in) 87 666.67 P
0.66 (figure 27. In such a system, it is not unreasonable to assume that the probability) 87 653.67 P
7 F
1.58 (PFS) 450.36 653.67 P
3 F
0.66 (, which the self-) 470.15 653.67 P
0.81 (checking pair does not stop, although it has failed, is the probability that both processors fail concur-) 87 640.67 P
0.18 (rently before the selection switch disconnects the pair. Clearly, such a probability is small but not zero.) 87 627.67 P
0.17 (This probability is intimately connected with fault latency and failure correlation, which will be further) 87 614.67 P
3.41 (investigated in later models. The model of section 6.3 applies to the system with two simple) 87 601.67 P
(modifications) 87 588.67 T
(1.) 105 565.29 T
(The) 117 565.29 T
7 F
(PFS) 136.85 565.29 T
3 F
( probability is very small.) 156.65 565.29 T
(2.) 105 541.92 T
(The failure rate of the self-checking pair would likely be 2) 117 541.92 T
6 F
(l) 374.21 541.92 T
5 8.8 Q
(p) 380.25 539.17 T
3 11 Q
(.) 384.65 541.92 T
4 10.5 Q
(6.5. Degradable Quadraplex W) 105 512.88 T
(ith Partial Fail Stop or Self T) 244.52 512.88 T
(est) 374.23 512.88 T
3 11 Q
0.25 (The question is often asked whether it is preferable to degrade a triad into a simplex or into a dual.) 105 490.67 P
2.63 (If a system degrades to a dual, the problem of determining which processor has failed must be) 87 477.67 P
0.11 (addressed.  If the best that can be done is guess with probability of 0.5 percent of success, the probabil-) 87 464.67 P
0.7 (ity of system failure is exactly the same as degrading to a simplex at the first failure. However, if the) 87 451.67 P
-0.2 (probability of success in detecting the failed processor in the dual can be improved, then the system reli-) 87 438.67 P
-0.03 (ability can be improved. One method of improvement is to take advantage of the fact that many f) 87 425.67 P
-0.03 (ailures) 513.67 425.67 P
0.65 (cause a processor to halt, which was done in the model in figure 27. Studies by McGough and Swern) 87 412.67 P
0.14 (have shown that typically 90 percent of CPU faults result in a processor halting \050ref.) 87 399.67 P
0.14 (15\051. Although this) 462.35 399.67 P
-0.12 (method is far from fail stop, this aspect of system failure can be utilized in the system design to increase) 87 386.67 P
0.66 (the reliability of a quadraplex system. The majority-voting system must be designed  to recognize the) 87 373.67 P
-0.26 (absence of data. The details of such a voter will not be discussed here, but such a design is easily accom-) 87 360.67 P
-0.04 (plished. In the model shown in figure 29,) 87 347.67 P
7 F
-0.09 (PFS) 270.64 347.67 P
3 F
-0.04 ( is the probability that a fault causes the processor to halt.) 290.44 347.67 P
(The SURE input file is) 87 334.67 T
3 9 Q
(Figure 29.  Degradable quadraplex with partial fail-stop.) 213.4 69 T
87 75 543 307 C
128 86 502 307 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 293 526 517 362 224 134 84.23 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig29.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig29.ps)
%%CreationDate: (4/19/95) (6:49 AM)
%%BoundingBox: 164 293 526 517
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
270 503 m
332.5 503 l
S
u
345 493.8076 m
350.0767 493.8076 354.1924 497.9233 354.1924 503 c
354.1924 508.0767 350.0767 512.1924 345 512.1924 c
339.9233 512.1924 335.8076 508.0767 335.8076 503 c
335.8076 497.9233 339.9233 493.8076 345 493.8076 c
s
345 503 m
S
U
0 To
1 0 0 1 345 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.7588 503 m
329.2075 501.4565 l
330.6138 503 L
329.2075 504.5435 l
335.7588 503 L
f
U
0 R
0 G
0.75 w
260.25 493.75 m
260.25 459.875 l
S
u
0 O
0 g
1 w
260.25 456.6162 m
258.7065 463.1675 l
260.25 461.7612 L
261.7935 463.1675 l
260.25 456.6162 L
f
U
0 To
1 0 0 1 272.25 477.25 0 Tp
TP
-9.2439 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
0 Ts
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
260.5 437.8076 m
265.5767 437.8076 269.6924 441.9233 269.6924 447 c
269.6924 452.0767 265.5767 456.1924 260.5 456.1924 c
255.4233 456.1924 251.3076 452.0767 251.3076 447 c
251.3076 441.9233 255.4233 437.8076 260.5 437.8076 c
s
260.5 447 m
S
U
269.5 447 m
332 447 l
S
u
344.5 437.8076 m
349.5767 437.8076 353.6924 441.9233 353.6924 447 c
353.6924 452.0767 349.5767 456.1924 344.5 456.1924 c
339.4233 456.1924 335.3076 452.0767 335.3076 447 c
335.3076 441.9233 339.4233 437.8076 344.5 437.8076 c
s
344.5 447 m
S
U
0 To
1 0 0 1 344.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.2588 447 m
328.7075 445.4565 l
330.1138 447 L
328.7075 448.5435 l
335.2588 447 L
f
U
0 R
0 G
0.75 w
354 447 m
416.5 447 l
S
u
429 437.8076 m
434.0767 437.8076 438.1924 441.9233 438.1924 447 c
438.1924 452.0767 434.0767 456.1924 429 456.1924 c
423.9233 456.1924 419.8076 452.0767 419.8076 447 c
419.8076 441.9233 423.9233 437.8076 429 437.8076 c
s
429 447 m
S
U
0 To
1 0 0 1 429 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
419.7588 447 m
413.2075 445.4565 l
414.6138 447 L
413.2075 448.5435 l
419.7588 447 L
f
U
0 To
1 0 0 1 260.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 260.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
344.375 437.75 m
344.375 403.875 l
S
u
0 O
0 g
1 w
344.375 400.6162 m
342.8315 407.1675 l
344.375 405.7612 L
345.9185 407.1675 l
344.375 400.6162 L
f
U
0 To
1 0 0 1 356.375 421.25 0 Tp
TP
-9.2439 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
0 Ts
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
344.5 381.3076 m
349.5767 381.3076 353.6924 385.4233 353.6924 390.5 c
353.6924 395.5767 349.5767 399.6924 344.5 399.6924 c
339.4233 399.6924 335.3076 395.5767 335.3076 390.5 c
335.3076 385.4233 339.4233 381.3076 344.5 381.3076 c
s
344.5 390.5 m
S
U
0 To
1 0 0 1 344.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
354 390.5 m
416.5 390.5 l
S
u
429 381.3076 m
434.0767 381.3076 438.1924 385.4233 438.1924 390.5 c
438.1924 395.5767 434.0767 399.6924 429 399.6924 c
423.9233 399.6924 419.8076 395.5767 419.8076 390.5 c
419.8076 385.4233 423.9233 381.3076 429 381.3076 c
s
429 390.5 m
S
U
0 To
1 0 0 1 429 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 382.25 394.5 0 Tp
TP
-21.8177 0 Td
0 Tr
(2 ) Tx 
-2 Ts
(*) Tx 
0 Ts
( ) Tx 
/_Courier 9 Tf
(PFS) Tx 
/_Times-Roman 9 Tf
( ) Tx 
-2 Ts
(* ) Tx 
/_Symbol 9 Tf
0 Ts
(l) Tx 
(\r) TX 
TO
u
419.7588 390.5 m
413.2075 388.9565 l
414.6138 390.5 L
413.2075 392.0435 l
419.7588 390.5 L
f
U
0 R
0 G
0.75 w
438.5 390.5 m
501 390.5 l
S
u
513.5 381.3076 m
518.5767 381.3076 522.6924 385.4233 522.6924 390.5 c
522.6924 395.5767 518.5767 399.6924 513.5 399.6924 c
508.4233 399.6924 504.3076 395.5767 504.3076 390.5 c
504.3076 385.4233 508.4233 381.3076 513.5 381.3076 c
s
513.5 390.5 m
S
U
0 To
1 0 0 1 513.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(9) Tx 
(\r) TX 
TO
u
504.2588 390.5 m
497.7075 388.9565 l
499.1138 390.5 L
497.7075 392.0435 l
504.2588 390.5 L
f
U
0 To
1 0 0 1 468 394.5 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
351.2175 383.7825 m
420.4117 314.5883 l
S
u
422.7506 299.2494 m
426.3403 295.6596 432.1608 295.6596 435.7506 299.2494 c
439.3404 302.8392 439.3404 308.6597 435.7506 312.2494 c
432.1608 315.8392 426.3403 315.8392 422.7505 312.2494 c
419.1608 308.6597 419.1608 302.8392 422.7506 299.2494 c
s
429.2506 305.7494 m
S
U
u
0 O
0 g
1 w
422.716 312.2839 m
416.9922 315.825 l
419.078 315.922 L
419.175 318.0078 l
422.716 312.2839 L
f
U
0 To
1 0 0 1 429 302.75 0 Tp
TP
-4.5 0 Td
0 Tr
/_Times-Roman 9 Tf
(10) Tx 
(\r) TX 
TO
0 To
1 0 0 1 423.25 354.5 0 Tp
TP
-35.6144 0 Td
0 Tr
(2 ) Tx 
-2 Ts
(*) Tx 
0 Ts
( ) Tx 
/_Courier 9 Tf
(\(1) Tx 
/_Courier 5 Tf
( ) Tx 
/_Courier 9 Tf
(\320) Tx 
/_Courier 5 Tf
( ) Tx 
/_Courier 9 Tf
(PFS\)) Tx 
/_Times-Roman 9 Tf
( ) Tx 
-2 Ts
(* ) Tx 
/_Symbol 9 Tf
0 Ts
(l) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 75 543 307 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 37
%%Page: "32" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(32) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(LAMBDA = 1e-4;           \050* Failure rate of processor *\051) 105 718.67 T
(MEANREC = 1e-2;          \050* Mean reconfiguration time *\051) 105 704.68 T
(STDREC = 1e-3;           \050* Standard deviation of \322 \322 *\051) 105 690.69 T
(MEANREC2 = 1.2e-2;       \050* Mean reconfiguration time *\051) 105 676.7 T
(STDREC2 = 1.4e-3;        \050* Standard deviation of \322 \322 *\051) 105 662.72 T
(PFS = 0 to 1 by .1;      \050* Prob. fault halts processor *\051) 105 648.73 T
(1,2 = 4*LAMBDA;) 105 628.74 T
(2,3 = 3*LAMBDA;) 105 614.75 T
(2,4 = <MEANREC,STDREC>;) 105 600.77 T
(4,5 = 3*LAMBDA;) 105 586.78 T
(5,6 = 2*LAMBDA;) 105 572.79 T
(5,7 = <MEANREC2,STDREC2>;) 105 558.8 T
(7,8 = 2*PFS*LAMBDA;) 105 544.82 T
(8,9 = LAMBDA;) 105 530.83 T
(7,10 = 2*\0501-PFS\051*LAMBDA;) 105 516.84 T
3 F
0.11 ( Because the fail-stop capability is not used until the configuration has been reduced to two proces-) 105 496.85 P
0.1 (sors, it is most effective for long mission times. The result of a SURE run with mission time of 1000 hr) 87 483.85 P
(is shown in figure 30.) 87 470.85 T
-0.15 (Another approach is to use a self-test program to diagnose the faulty processor in the dual. This sys-) 105 220.64 P
0.5 (tem is modeled in the same manner. In this case,) 87 207.64 P
7 F
1.21 (PFS) 308.36 207.64 P
3 F
0.5 ( is the probability that the self-test program cor-) 328.15 207.64 P
(rectly diagnoses the faulty processor and the system successfully reconfigures.) 87 194.64 T
4 10.5 Q
(6.6. Incomplete Recon\336guration) 105 168.99 T
3 11 Q
0.3 (Suppose a system is designed with incomplete detection of faults. In other words, some faults can-) 105 150.17 P
0.09 (not be detected by the system. Of course, this does not lead to immediate system failure. The good pro-) 87 137.17 P
1.42 (cessors will still out vote the bad processor. However, the reconfigurable system will behave like a) 87 124.17 P
1.14 (nonreconfigurable system in the presence of these faults.  Assume that the fraction of faults that are) 87 111.17 P
-0.03 (detectable) 87 98.17 P
5 F
-0.03 (D) 134.32 98.17 P
3 F
-0.03 ( is known.  This situation is sometimes referred to as coverage. Because many other defini-) 142.26 98.17 P
(tions of this term exist,  it will not be used in this paper. The SURE model is) 87 85.17 T
3 9 Q
(Figure 30.  Failure probability of degradable quadraplex with partial fail stop.) 175.15 255.96 T
87 261.96 543 443.18 C
188.5 272.96 441.5 443.18 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 175 317 416 489 241 172 194.5 271.85 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig30.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig30.ps)
%%CreationDate: (7/27/95) (8:31 AM)
%%BoundingBox: 175 317 416 489
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
226.9679 478.2285 m
223.3679 478.2285 l
223.3679 343.6023 l
401.1694 343.6023 l
401.1694 346.6023 l
S
259.3688 343.6023 m
259.3688 346.6023 l
S
0 To
0.6 0 0 0.6 220.9678 476.4034 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\67) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 220.9678 341.6523 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\3208) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 223.0679 332.8022 0 Tp
TP
-3.75 0 Td
0 Tr
0 Ts
1 Ta
(0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 259.2188 332.8022 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.2) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 401.0194 332.8022 0 Tp
TP
-9.3749 0 Td
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 311.8187 320.4021 0 Tp
TP
-13.4965 0 Td
0 Tr
/_Courier 14.9998 Tf
14.9998 0 Tl
(PFS) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 188.5676 413.1029 0 Tp
TP
-6.6649 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
14.9998 0 Tl
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
295.3688 343.6023 m
295.3688 346.6023 l
S
0 To
0.6 0 0 0.6 295.2188 332.8022 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
(0.4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
330.3688 343.6023 m
330.3688 346.6023 l
S
0 To
0.6 0 0 0.6 330.2188 332.8022 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
(0.6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
365.6188 343.6023 m
365.6188 346.6023 l
S
0 To
0.6 0 0 0.6 365.4688 332.8022 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
(0.8) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
225.25 366.75 m
401 350 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 261.96 543 443.18 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 38
%%Page: "33" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(33) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(LAMBDA = 1e-4;              \050* Failure rate of processor *\051) 105 718.67 T
(MEAN = 1e-2;                \050* Mean reconfiguration time *\051) 105 705.53 T
(STD = 1e-3;                 \050* Standard deviation of \322 \322 *\051) 105 692.39 T
(D = 0 TO+ 1 by 0.05;) 105 679.26 T
(1,2 = 4*LAMBDA*D;) 105 660.12 T
(1,12 = 4*LAMBDA*\0501-D\051;) 105 646.98 T
(2,3 = 3*LAMBDA;) 105 633.84 T
(2,4 = <MEAN,STD>;) 105 620.71 T
(4,5 = 3*LAMBDA*D;) 105 607.57 T
(4,15 = 3*LAMBDA*\0501-D\051;) 105 594.43 T
(5,6 = 2*LAMBDA;) 105 581.29 T
(5,7 = <MEAN,STD>;) 105 568.16 T
(7,8 = LAMBDA;) 105 555.02 T
(12,13 = 3*LAMBDA;) 105 535.88 T
(15,16 = 2*LAMBDA;) 105 522.74 T
3 F
-0.07 (The technique decomposes the fault-arrival process into two transitions. For example, if the total failure) 87 503.61 P
0.23 (rate out of state is 4) 87 490.61 P
6 F
0.23 (l) 174.61 490.61 P
3 F
0.23 (, then two transitions are produced. One transition has a rate of 4) 180.65 490.61 P
5 F
0.23 (D) 468.14 490.61 P
6 F
0.23 (l) 476.09 490.61 P
3 F
0.23 ( and the other) 482.13 490.61 P
0.05 (has 4 \0501) 87 477.61 P
6 F
0.05 (-) 124.67 477.61 P
5 F
0.05 (D) 133.46 477.61 P
3 F
0.05 (\051) 141.4 477.61 P
6 F
0.05 (l) 145.06 477.61 P
3 F
0.05 (. This model is shown in figure 31. The probability of failure as a function of) 151.1 477.61 P
5 F
0.05 (D) 493.41 477.61 P
3 F
0.05 ( is shown) 501.35 477.61 P
(in figure 32.) 87 464.61 T
4 12 Q
(7. Recon\336guration By Sparing) 87 153.14 T
3 11 Q
0.12 (Three categories of spares will be defined: cold spares, warm spares, and hot spares. Some systems) 105 134.67 P
-0.27 (are designed with spares that are unpowered until brought into the active configuration. This approach is) 87 121.67 P
-0.16 (used because unpowered \050cold\051 spares usually have a lower failure rate than powered \050hot\051 spares. If the) 87 108.67 P
0.09 (failure rate of the inactive spare is the same as an active processor, it is a hot spare. If the failure rate of) 87 95.67 P
-0.05 (an inactive spare is zero, then it is  a cold spare. If the failure rate is somewhere in between zero and the) 87 82.67 P
0.11 (active processor rate, it is a warm spare. If) 87 69.67 P
6 F
0.11 (l) 277.03 69.67 P
5 8.8 Q
0.09 (s) 283.07 66.92 P
3 11 Q
0.11 ( is the failure rate of an inactive spare and) 286.5 69.67 P
6 F
0.11 (l) 474.5 69.67 P
5 8.8 Q
0.09 (p) 480.54 66.92 P
3 11 Q
0.11 ( is the failure) 484.94 69.67 P
3 9 Q
3.05 (Figure 31.  Degradable quadraplex with incomplete) 93 199.28 P
(reconfiguration.) 102 188.28 T
0.72 (Figure 32.  Plot of degradable quadraplex with incomplete) 327 199.28 P
(reconfiguration.) 336 188.28 T
87 205.27 303 436.94 C
87 216.27 303 436.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 162 295 378 517 216 222 87 216.28 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig31.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig31.ps)
%%CreationDate: (7/28/95) (9:27 AM)
%%BoundingBox: 162 295 378 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
224.5 503 l
S
u
237 493.8076 m
242.0767 493.8076 246.1924 497.9233 246.1924 503 c
246.1924 508.0767 242.0767 512.1924 237 512.1924 c
231.9233 512.1924 227.8076 508.0767 227.8076 503 c
227.8076 497.9233 231.9233 493.8076 237 493.8076 c
s
237 503 m
S
U
0 To
1 0 0 1 237 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 205 507 0 Tp
TP
-12.4684 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
( ) Tx 
-2 Ts
(*) Tx 
0 Ts
( ) Tx 
/_Times-Italic 9 Tf
(D) Tx 
(\r) TX 
TO
u
227.7588 503 m
221.2075 501.4565 l
222.6138 503 L
221.2075 504.5435 l
227.7588 503 L
f
U
0 R
0 G
0.75 w
246.5 503 m
288 503 l
S
u
300.5 493.8076 m
305.5767 493.8076 309.6924 497.9233 309.6924 503 c
309.6924 508.0767 305.5767 512.1924 300.5 512.1924 c
295.4233 512.1924 291.3076 508.0767 291.3076 503 c
291.3076 497.9233 295.4233 493.8076 300.5 493.8076 c
s
300.5 503 m
S
U
0 To
1 0 0 1 300.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 267.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
291.2588 503 m
284.7075 501.4565 l
286.1138 503 L
284.7075 504.5435 l
291.2588 503 L
f
U
0 R
0 G
0.75 w
236.75 493.75 m
236.75 459.875 l
S
u
0 O
0 g
1 w
236.75 456.6162 m
235.2065 463.1675 l
236.75 461.7612 L
238.2935 463.1675 l
236.75 456.6162 L
f
U
0 To
1 0 0 1 249.75 477.25 0 Tp
TP
-9.2439 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
0 Ts
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
237 437.8076 m
242.0767 437.8076 246.1924 441.9233 246.1924 447 c
246.1924 452.0767 242.0767 456.1924 237 456.1924 c
231.9233 456.1924 227.8076 452.0767 227.8076 447 c
227.8076 441.9233 231.9233 437.8076 237 437.8076 c
s
237 447 m
S
U
246 447 m
287.5 447 l
S
u
300 437.8076 m
305.0767 437.8076 309.1924 441.9233 309.1924 447 c
309.1924 452.0767 305.0767 456.1924 300 456.1924 c
294.9233 456.1924 290.8076 452.0767 290.8076 447 c
290.8076 441.9233 294.9233 437.8076 300 437.8076 c
s
300 447 m
S
U
0 To
1 0 0 1 300 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 267 451 0 Tp
TP
-12.4684 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
( ) Tx 
-2 Ts
(*) Tx 
0 Ts
( ) Tx 
/_Times-Italic 9 Tf
(D) Tx 
(\r) TX 
TO
u
290.7588 447 m
284.2075 445.4565 l
285.6138 447 L
284.2075 448.5435 l
290.7588 447 L
f
U
0 R
0 G
0.75 w
309.5 447 m
353 447 l
S
u
365.5 437.8076 m
370.5767 437.8076 374.6924 441.9233 374.6924 447 c
374.6924 452.0767 370.5767 456.1924 365.5 456.1924 c
360.4233 456.1924 356.3076 452.0767 356.3076 447 c
356.3076 441.9233 360.4233 437.8076 365.5 437.8076 c
s
365.5 447 m
S
U
0 To
1 0 0 1 365.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 332.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
356.2588 447 m
349.7075 445.4565 l
351.1138 447 L
349.7075 448.5435 l
356.2588 447 L
f
U
0 To
1 0 0 1 237 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 237 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
299.875 437.75 m
299.875 403.875 l
S
u
0 O
0 g
1 w
299.875 400.6162 m
298.3315 407.1675 l
299.875 405.7612 L
301.4185 407.1675 l
299.875 400.6162 L
f
U
0 To
1 0 0 1 312.875 421.25 0 Tp
TP
-9.2439 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
0 Ts
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
300 381.3076 m
305.0767 381.3076 309.1924 385.4233 309.1924 390.5 c
309.1924 395.5767 305.0767 399.6924 300 399.6924 c
294.9233 399.6924 290.8076 395.5767 290.8076 390.5 c
290.8076 385.4233 294.9233 381.3076 300 381.3076 c
s
300 390.5 m
S
U
0 To
1 0 0 1 300 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
309.5 390.5 m
353 390.5 l
S
u
365.5 381.3076 m
370.5767 381.3076 374.6924 385.4233 374.6924 390.5 c
374.6924 395.5767 370.5767 399.6924 365.5 399.6924 c
360.4233 399.6924 356.3076 395.5767 356.3076 390.5 c
356.3076 385.4233 360.4233 381.3076 365.5 381.3076 c
s
365.5 390.5 m
S
U
0 To
1 0 0 1 365.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 332.5 394.5 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
356.2588 390.5 m
349.7075 388.9565 l
351.1138 390.5 L
349.7075 392.0435 l
356.2588 390.5 L
f
U
0 R
0 G
0.75 w
236.75 437.75 m
236.75 361.875 l
S
u
0 O
0 g
1 w
236.75 358.6162 m
235.2065 365.1675 l
236.75 363.7612 L
238.2935 365.1675 l
236.75 358.6162 L
f
U
u
0 R
0 G
0.75 w
237 339.8076 m
242.0767 339.8076 246.1924 343.9233 246.1924 349 c
246.1924 354.0767 242.0767 358.1924 237 358.1924 c
231.9233 358.1924 227.8076 354.0767 227.8076 349 c
227.8076 343.9233 231.9233 339.8076 237 339.8076 c
s
237 349 m
S
U
246 349 m
287.5 349 l
S
u
300 339.8076 m
305.0767 339.8076 309.1924 343.9233 309.1924 349 c
309.1924 354.0767 305.0767 358.1924 300 358.1924 c
294.9233 358.1924 290.8076 354.0767 290.8076 349 c
290.8076 343.9233 294.9233 339.8076 300 339.8076 c
s
300 349 m
S
U
0 To
1 0 0 1 300 345.5 0 Tp
TP
-4.5 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(16) Tx 
(\r) TX 
TO
u
290.7588 349 m
284.2075 347.4565 l
285.6138 349 L
284.2075 350.5435 l
290.7588 349 L
f
U
0 To
1 0 0 1 237 347 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 237 345.5 0 Tp
TP
-4.5 0 Td
0 Tr
/_Times-Roman 9 Tf
(15) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.75 493.75 m
176.75 320.875 l
S
u
0 O
0 g
1 w
176.75 317.6162 m
175.2065 324.1675 l
176.75 322.7612 L
178.2935 324.1675 l
176.75 317.6162 L
f
U
u
0 R
0 G
0.75 w
176.5 298.3076 m
181.5767 298.3076 185.6924 302.4233 185.6924 307.5 c
185.6924 312.5767 181.5767 316.6924 176.5 316.6924 c
171.4233 316.6924 167.3076 312.5767 167.3076 307.5 c
167.3076 302.4233 171.4233 298.3076 176.5 298.3076 c
s
176.5 307.5 m
S
U
185.5 307.5 m
224.5 307.5 l
S
u
237 298.3076 m
242.0767 298.3076 246.1924 302.4233 246.1924 307.5 c
246.1924 312.5767 242.0767 316.6924 237 316.6924 c
231.9233 316.6924 227.8076 312.5767 227.8076 307.5 c
227.8076 302.4233 231.9233 298.3076 237 298.3076 c
s
237 307.5 m
S
U
0 To
1 0 0 1 237 304 0 Tp
TP
-4.5 0 Td
0 Tr
0 O
0 g
1 w
(13) Tx 
(\r) TX 
TO
0 To
1 0 0 1 205 311.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
227.7588 307.5 m
221.2075 305.9565 l
222.6138 307.5 L
221.2075 309.0435 l
227.7588 307.5 L
f
U
0 To
1 0 0 1 267 352.5 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Times-Roman 9 Tf
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 176.5 304 0 Tp
TP
-4.5 0 Td
0 Tr
/_Times-Roman 9 Tf
(12) Tx 
(\r) TX 
TO
0 To
1 0 0 1 262.5 391 0 Tp
TP
-22.2133 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
( ) Tx 
-2 Ts
(*) Tx 
0 Ts
( \(1 \320 ) Tx 
/_Times-Italic 9 Tf
(D) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
0 To
1 0 0 1 203 402.5 0 Tp
TP
-22.2133 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
( ) Tx 
-2 Ts
(*) Tx 
0 Ts
( \(1 \320 ) Tx 
/_Times-Italic 9 Tf
(D) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 205.27 303 436.94 C
0 0 612 792 C
327 205.27 543 436.94 C
327 216.72 543 436.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 180 322 413 487 233 165 318.5 216.72 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig32.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig32.ps)
%%CreationDate: (7/28/95) (9:27 AM)
%%BoundingBox: 180 322 413 487
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
230.7687 476.9997 m
227.3126 476.9997 l
227.3126 346.7976 l
398.0033 346.7976 l
398.0033 349.6777 l
S
261.8737 346.7976 m
261.8737 349.6777 l
S
0 To
0.576 0 0 0.576 225.0085 474.2476 0 Tp
TP
-31.2506 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 15.6253 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
15.6253 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 225.0085 344.9256 0 Tp
TP
-31.2506 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\3208) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 227.0246 336.4295 0 Tp
TP
-3.9063 0 Td
0 Tr
0 Ts
1 Ta
(0) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 261.7297 336.4295 0 Tp
TP
-9.7658 0 Td
0 Tr
(0.2) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 397.8593 336.4295 0 Tp
TP
-9.7658 0 Td
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 312.226 324.5253 0 Tp
TP
-5.6401 0 Td
0 Tr
/_Times-Italic 15.6253 Tf
(D) Tx 
(\r) TX 
TO
0 To
0.576 0 0 0.576 193.9041 413.5187 0 Tp
TP
-6.9429 0 Td
0 Tr
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
296.434 346.7976 m
296.434 349.6777 l
S
0 To
0.576 0 0 0.576 296.29 336.4295 0 Tp
TP
-9.7658 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 15.6253 Tf
0 Ts
(0.4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
330.0342 346.7976 m
330.0342 349.6777 l
S
0 To
0.576 0 0 0.576 329.8902 336.4295 0 Tp
TP
-9.7658 0 Td
0 Tr
0 O
0 g
1 w
(0.6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
363.8744 346.7976 m
363.8744 349.6777 l
S
0 To
0.576 0 0 0.576 363.7305 336.4295 0 Tp
TP
-9.7658 0 Td
0 Tr
0 O
0 g
1 w
(0.8) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
375.2805 428.06 m
S
229.3595 466.2203 m
284.3199 459.0202 310.24 453.7402 v
336.1602 448.4601 364.1204 438.9801 381.7605 422.4199 c
389.6806 410.4199 l
398.0807 346.6994 l
S
230.7687 432.8394 m
227.3126 432.8394 l
S
0 To
0.576 0 0 0.576 225.0085 430.0873 0 Tp
TP
-31.2506 0 Td
0 Tr
0 O
0 g
1 w
2 Ta
(10) Tx 
6.6666 Ts
(\320\66) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
230.7687 390.1191 m
227.3126 390.1191 l
S
0 To
0.576 0 0 0.576 225.0085 387.367 0 Tp
TP
-31.2506 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
6.6666 Ts
(\320\67) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
327 205.27 543 436.94 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 39
%%Page: "34" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(34) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.08 (rate of an active processor, then the cold spare is) 87 718.67 P
6 F
-0.08 (l) 302.8 718.67 P
5 8.8 Q
-0.06 (s) 308.84 715.92 P
3 11 Q
-0.08 ( = 0, the warm spare is 0 <) 312.27 718.67 P
6 F
-0.08 (l) 431.52 718.67 P
5 8.8 Q
-0.06 (s) 437.55 715.92 P
3 11 Q
-0.08 ( <) 440.98 718.67 P
6 F
-0.08 (l) 452.53 718.67 P
5 8.8 Q
-0.06 (p) 458.57 715.92 P
3 11 Q
-0.08 (, and the hot spare) 462.96 718.67 P
(is) 87 705.67 T
6 F
(l) 97.09 705.67 T
5 8.8 Q
(s) 103.13 702.92 T
3 11 Q
(=) 109.3 705.67 T
6 F
(l) 118.25 705.67 T
5 8.8 Q
(p) 124.29 702.92 T
3 11 Q
(.) 128.69 705.67 T
-0.16 (The disadvantage of an unpowered spare \050whether cold or warm\051 is that it must be initialized during) 105 685.67 P
0.06 (reconfiguration, whereas a hot spare can be maintained with memory already loaded. This situation can) 87 672.67 P
1.17 (lead to a longer reconfiguration time. Thus, the model parameter values will differ with the strategy) 87 659.67 P
(used. Some reliability programs, such as CARE III, explicitly assume that the spares are hot \050ref. 16\051.) 87 646.67 T
4 10.5 Q
(7.1. T) 105 621.01 T
(riad W) 129.6 621.01 T
(ith T) 161.21 621.01 T
(wo Cold Spar) 182.31 621.01 T
(es) 243.38 621.01 T
3 11 Q
0.12 (In this model, a new form of reconfiguration is investigated. Instead of degrading the configuration) 105 602.18 P
0.61 (upon detection of a faulty processor, a spare processor is brought into the configuration to replace the) 87 589.18 P
0.37 (faulty one. For simplicity, in this model it is assumed that the spares do not fail while not in the active) 87 576.18 P
1.61 (configuration. The issues associated with failing spares will be considered in sections 7.2, 9.2, 9.3,) 87 563.18 P
(and) 87 550.18 T
(9.4.) 105.63 550.18 T
-0.14 (In the model shown in figure 33, the reconfiguration process is assumed to be described by distribu-) 105 530.18 P
(tion) 87 517.18 T
5 F
(F) 106.87 517.18 T
3 F
(\050) 113.59 517.18 T
5 F
(t) 117.25 517.18 T
3 F
(\051, which is assumed to be independent of the system state. The SURE input is) 120.31 517.18 T
7 F
(LAMBDA = 1e-4;          \050* Failure rate of processor *\051) 105 497.18 T
(MEANREC = 1e-2;         \050* Mean reconfiguration time *\051) 105 483.19 T
(STDREC = 1e-3;          \050* Standard deviation of reconfig. time *\051) 105 469.19 T
(1,2 = 3*LAMBDA;) 105 449.19 T
(2,3 = 2*LAMBDA;) 105 435.2 T
(2,4 = <MEANREC,STDREC>;) 105 421.2 T
(4,5 = 3*LAMBDA;) 105 407.2 T
(5,6 = 2*LAMBDA;) 105 393.2 T
(5,7 = <MEANREC,STDREC>;) 105 379.21 T
(7,8 = 3*LAMBDA;) 105 365.21 T
(8,9 = 2*LAMBDA;) 105 351.21 T
3 F
0.26 (State \0501\051 of this model represents the initial system with three active processors and two spare pro-) 105 134.67 P
0.55 (cessors. The system is in state \0502\051 when one of the three active processors has failed.  Two transitions) 87 121.67 P
0.48 (leave state \0502\051. One transition is near-coincident failure of one of the two remaining active processors.) 87 108.67 P
0.01 (The second transition is the replacement of the failed active processor with a spare. In state \0504\051, the sys-) 87 95.67 P
0.83 (tem consists of three active processors plus one remaining cold spare. Once a cold spare processor is) 87 82.67 P
0.72 (brought into the active configuration, it has the same failure rate as the other active processors. Thus,) 87 69.67 P
3 9 Q
(Figure 33.  Model of triplex with two cold spares.) 225.38 170 T
87 176 543 323.55 C
140 187 490 323.55 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 378 502 517 338 139 146 185.21 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig33.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig33.ps)
%%CreationDate: (4/21/95) (1:39 PM)
%%BoundingBox: 164 378 502 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
242 503 l
S
u
254.5 493.8076 m
259.5767 493.8076 263.6924 497.9233 263.6924 503 c
263.6924 508.0767 259.5767 512.1924 254.5 512.1924 c
249.4233 512.1924 245.3076 508.0767 245.3076 503 c
245.3076 497.9233 249.4233 493.8076 254.5 493.8076 c
s
254.5 503 m
S
U
0 To
1 0 0 1 254.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 214.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
245.2588 503 m
238.7075 501.4565 l
240.1138 503 L
238.7075 504.5435 l
245.2588 503 L
f
U
0 R
0 G
0.75 w
264 503 m
320.5 503 l
S
u
333 493.8076 m
338.0767 493.8076 342.1924 497.9233 342.1924 503 c
342.1924 508.0767 338.0767 512.1924 333 512.1924 c
327.9233 512.1924 323.8076 508.0767 323.8076 503 c
323.8076 497.9233 327.9233 493.8076 333 493.8076 c
s
333 503 m
S
U
0 To
1 0 0 1 333 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 293 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
323.7588 503 m
317.2075 501.4565 l
318.6138 503 L
317.2075 504.5435 l
323.7588 503 L
f
U
0 R
0 G
0.75 w
254.25 493.75 m
254.25 459.875 l
S
u
0 O
0 g
1 w
254.25 456.6162 m
252.7065 463.1675 l
254.25 461.7612 L
255.7935 463.1675 l
254.25 456.6162 L
f
U
0 To
1 0 0 1 264.25 477.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
254.5 437.8076 m
259.5767 437.8076 263.6924 441.9233 263.6924 447 c
263.6924 452.0767 259.5767 456.1924 254.5 456.1924 c
249.4233 456.1924 245.3076 452.0767 245.3076 447 c
245.3076 441.9233 249.4233 437.8076 254.5 437.8076 c
s
254.5 447 m
S
U
263.5 447 m
320 447 l
S
u
332.5 437.8076 m
337.5767 437.8076 341.6924 441.9233 341.6924 447 c
341.6924 452.0767 337.5767 456.1924 332.5 456.1924 c
327.4233 456.1924 323.3076 452.0767 323.3076 447 c
323.3076 441.9233 327.4233 437.8076 332.5 437.8076 c
s
332.5 447 m
S
U
0 To
1 0 0 1 332.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
323.2588 447 m
316.7075 445.4565 l
318.1138 447 L
316.7075 448.5435 l
323.2588 447 L
f
U
0 R
0 G
0.75 w
342 447 m
398.5 447 l
S
u
411 437.8076 m
416.0767 437.8076 420.1924 441.9233 420.1924 447 c
420.1924 452.0767 416.0767 456.1924 411 456.1924 c
405.9233 456.1924 401.8076 452.0767 401.8076 447 c
401.8076 441.9233 405.9233 437.8076 411 437.8076 c
s
411 447 m
S
U
0 To
1 0 0 1 411 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 371 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
401.7588 447 m
395.2075 445.4565 l
396.6138 447 L
395.2075 448.5435 l
401.7588 447 L
f
U
0 To
1 0 0 1 254.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 254.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
332.375 437.75 m
332.375 403.875 l
S
u
0 O
0 g
1 w
332.375 400.6162 m
330.8315 407.1675 l
332.375 405.7612 L
333.9185 407.1675 l
332.375 400.6162 L
f
U
0 To
1 0 0 1 342.375 421.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
332.5 381.3076 m
337.5767 381.3076 341.6924 385.4233 341.6924 390.5 c
341.6924 395.5767 337.5767 399.6924 332.5 399.6924 c
327.4233 399.6924 323.3076 395.5767 323.3076 390.5 c
323.3076 385.4233 327.4233 381.3076 332.5 381.3076 c
s
332.5 390.5 m
S
U
0 To
1 0 0 1 332.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342 390.5 m
398.5 390.5 l
S
u
411 381.3076 m
416.0767 381.3076 420.1924 385.4233 420.1924 390.5 c
420.1924 395.5767 416.0767 399.6924 411 399.6924 c
405.9233 399.6924 401.8076 395.5767 401.8076 390.5 c
401.8076 385.4233 405.9233 381.3076 411 381.3076 c
s
411 390.5 m
S
U
0 To
1 0 0 1 411 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 371 394.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
401.7588 390.5 m
395.2075 388.9565 l
396.6138 390.5 L
395.2075 392.0435 l
401.7588 390.5 L
f
U
0 R
0 G
0.75 w
420.5 390.5 m
477 390.5 l
S
u
489.5 381.3076 m
494.5767 381.3076 498.6924 385.4233 498.6924 390.5 c
498.6924 395.5767 494.5767 399.6924 489.5 399.6924 c
484.4233 399.6924 480.3076 395.5767 480.3076 390.5 c
480.3076 385.4233 484.4233 381.3076 489.5 381.3076 c
s
489.5 390.5 m
S
U
0 To
1 0 0 1 489.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(9) Tx 
(\r) TX 
TO
0 To
1 0 0 1 449.5 394.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
480.2588 390.5 m
473.7075 388.9565 l
475.1138 390.5 L
473.7075 392.0435 l
480.2588 390.5 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 176 543 323.55 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 40
%%Page: "35" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(35) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.2 (the transition from state \0504\051 to state \0505\051 has rate 3*) 87 718.67 P
6 F
1.2 (l) 319.6 718.67 P
3 F
1.2 (. State \0505\051 has the same transitions leaving it as) 325.64 718.67 P
(state) 87 705.67 T
(\0502\051. Once the system reaches state \0507\051,  no cold spare processors remain.) 109.91 705.67 T
4 10.5 Q
(7.2. T) 105 680.38 T
(riad W) 129.6 680.38 T
(ith T) 161.21 680.38 T
(wo W) 182.31 680.38 T
(arm Spar) 207.69 680.38 T
(es) 250.37 680.38 T
3 11 Q
0.28 (If  the system is assumed to have perfect detection of failed spare processors, the model developed) 105 661.93 P
0.19 (in section 7.1 can be easily modified to include spare failures. As shown in figure 34, this modification) 87 648.93 P
0.01 (consists of the addition of two transitions. The transition from state \0501\051 to state \0504\051 represents the failure) 87 635.93 P
0.8 (of one of the two spare processors before either of them is brought into the active configuration. The) 87 622.93 P
-0.09 (rate for this transition is 2*) 87 609.93 P
6 F
-0.09 (g) 205.42 609.93 P
3 F
-0.09 (, where) 209.95 609.93 P
6 F
-0.09 (g) 244.9 609.93 P
3 F
-0.09 ( is the failure rate for a warm spare. The transition from state \0504\051 to) 249.42 609.93 P
0.21 (state \0507\051 represents the failure of the remaining spare processor after the first spare processor has either) 87 596.93 P
-0.16 (failed or been brought into the active configuration to replace a failed active processor. The SURE input) 87 583.93 P
(is) 87 570.93 T
7 F
(LAMBDA = 1e-4;          \050* Failure rate of active processor *\051) 105 551.31 T
-0.2 (GAMMA = 1e-5;           \050* Failure rate of warm spare processor *\051) 105 537.69 P
(MEANREC = 1e-2;         \050* Mean reconfiguration time *\051) 105 524.07 T
(STDREC = 1e-3;          \050* Standard deviation of reconfig. time *\051) 105 510.45 T
(1,2 = 3*LAMBDA;) 105 490.83 T
(1,4 = 2*GAMMA;) 105 477.21 T
(2,3 = 2*LAMBDA;) 105 463.59 T
(2,4 = <MEANREC,STDREC>;) 105 449.97 T
(2,5 = 2*GAMMA;) 105 436.35 T
(4,5 = 3*LAMBDA;) 105 422.73 T
(4,7 = GAMMA;) 105 409.11 T
(5,6 = 2*LAMBDA;) 105 395.49 T
(5,7 = <MEANREC,STDREC>;) 105 381.88 T
(5,8 = GAMMA;) 105 368.26 T
(7,8 = 3*LAMBDA;) 105 354.64 T
(8,9 = 2*LAMBDA;) 105 341.02 T
3 F
0.14 (The probability of failure as a function of the spare failure rate is plotted in figure 35 for three mis-) 105 128.29 P
0.51 (sion times: 10, 100, and 1000 hr. The same model can be used to analyze a system with hot spares by) 87 115.29 P
(changing the spare failure rate to equal the active processor failure rate.) 87 102.29 T
1 (In this section, it was assumed that all failed spare processors are detected by the system and no) 105 82.67 P
2.79 (state-dependent recovery rates exist in the model. These assumptions significantly simplified the) 87 69.67 P
3 9 Q
(Figure 34.  Model of triplex with two warm spares.) 222.88 163.24 T
87 169.24 543 313.35 C
191.5 180.24 438.5 313.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 169 382 404 517 235 135 197.5 178.46 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig34.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig34.ps)
%%CreationDate: (4/21/95) (1:39 PM)
%%BoundingBox: 169 382 404 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 181.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
181.5 493.8076 m
186.5767 493.8076 190.6924 497.9233 190.6924 503 c
190.6924 508.0767 186.5767 512.1924 181.5 512.1924 c
176.4233 512.1924 172.3076 508.0767 172.3076 503 c
172.3076 497.9233 176.4233 493.8076 181.5 493.8076 c
s
181.5 503 m
S
U
190.5 503 m
222 503 l
S
u
234.5 493.8076 m
239.5767 493.8076 243.6924 497.9233 243.6924 503 c
243.6924 508.0767 239.5767 512.1924 234.5 512.1924 c
229.4233 512.1924 225.3076 508.0767 225.3076 503 c
225.3076 497.9233 229.4233 493.8076 234.5 493.8076 c
s
234.5 503 m
S
U
0 To
1 0 0 1 234.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 205.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
225.2588 503 m
218.7075 501.4565 l
220.1138 503 L
218.7075 504.5435 l
225.2588 503 L
f
U
0 R
0 G
0.75 w
244 503 m
273.5 503 l
S
u
286 493.8076 m
291.0767 493.8076 295.1924 497.9233 295.1924 503 c
295.1924 508.0767 291.0767 512.1924 286 512.1924 c
280.9233 512.1924 276.8076 508.0767 276.8076 503 c
276.8076 497.9233 280.9233 493.8076 286 493.8076 c
s
286 503 m
S
U
0 To
1 0 0 1 286 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 255 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
276.7588 503 m
270.2075 501.4565 l
271.6138 503 L
270.2075 504.5435 l
276.7588 503 L
f
U
0 R
0 G
0.75 w
234.25 493.75 m
234.25 463.875 l
S
u
0 O
0 g
1 w
234.25 460.6162 m
232.7065 467.1675 l
234.25 465.7612 L
235.7935 467.1675 l
234.25 460.6162 L
f
U
0 To
1 0 0 1 244.25 477.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
234.5 441.8076 m
239.5767 441.8076 243.6924 445.9233 243.6924 451 c
243.6924 456.0767 239.5767 460.1924 234.5 460.1924 c
229.4233 460.1924 225.3076 456.0767 225.3076 451 c
225.3076 445.9233 229.4233 441.8076 234.5 441.8076 c
s
234.5 451 m
S
U
243.5 451 m
276 451 l
S
u
288.5 441.8076 m
293.5767 441.8076 297.6924 445.9233 297.6924 451 c
297.6924 456.0767 293.5767 460.1924 288.5 460.1924 c
283.4233 460.1924 279.3076 456.0767 279.3076 451 c
279.3076 445.9233 283.4233 441.8076 288.5 441.8076 c
s
288.5 451 m
S
U
0 To
1 0 0 1 288.5 447.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 257.5 455 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
279.2588 451 m
272.7075 449.4565 l
274.1138 451 L
272.7075 452.5435 l
279.2588 451 L
f
U
0 R
0 G
0.75 w
298 451 m
327.5 451 l
S
u
340 441.8076 m
345.0767 441.8076 349.1924 445.9233 349.1924 451 c
349.1924 456.0767 345.0767 460.1924 340 460.1924 c
334.9233 460.1924 330.8076 456.0767 330.8076 451 c
330.8076 445.9233 334.9233 441.8076 340 441.8076 c
s
340 451 m
S
U
0 To
1 0 0 1 340 447.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 312 455 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
330.7588 451 m
324.2075 449.4565 l
325.6138 451 L
324.2075 452.5435 l
330.7588 451 L
f
U
0 To
1 0 0 1 234.5 449 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 234.5 447.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
288.375 441.75 m
288.375 407.875 l
S
u
0 O
0 g
1 w
288.375 404.6162 m
286.8315 411.1675 l
288.375 409.7612 L
289.9185 411.1675 l
288.375 404.6162 L
f
U
0 To
1 0 0 1 298.375 425.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
288.5 385.3076 m
293.5767 385.3076 297.6924 389.4233 297.6924 394.5 c
297.6924 399.5767 293.5767 403.6924 288.5 403.6924 c
283.4233 403.6924 279.3076 399.5767 279.3076 394.5 c
279.3076 389.4233 283.4233 385.3076 288.5 385.3076 c
s
288.5 394.5 m
S
U
0 To
1 0 0 1 288.5 391 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
298 394.5 m
327.5 394.5 l
S
u
340 385.3076 m
345.0767 385.3076 349.1924 389.4233 349.1924 394.5 c
349.1924 399.5767 345.0767 403.6924 340 403.6924 c
334.9233 403.6924 330.8076 399.5767 330.8076 394.5 c
330.8076 389.4233 334.9233 385.3076 340 385.3076 c
s
340 394.5 m
S
U
0 To
1 0 0 1 340 391 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 312 398.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
330.7588 394.5 m
324.2075 392.9565 l
325.6138 394.5 L
324.2075 396.0435 l
330.7588 394.5 L
f
U
0 R
0 G
0.75 w
349.5 394.5 m
379 394.5 l
S
u
391.5 385.3076 m
396.5767 385.3076 400.6924 389.4233 400.6924 394.5 c
400.6924 399.5767 396.5767 403.6924 391.5 403.6924 c
386.4233 403.6924 382.3076 399.5767 382.3076 394.5 c
382.3076 389.4233 386.4233 385.3076 391.5 385.3076 c
s
391.5 394.5 m
S
U
0 To
1 0 0 1 391.5 391 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(9) Tx 
(\r) TX 
TO
0 To
1 0 0 1 361.5 398.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
382.2588 394.5 m
375.7075 392.9565 l
377.1138 394.5 L
375.7075 396.0435 l
382.2588 394.5 L
f
U
0 R
0 G
0.75 w
240.6746 444.4896 m
280.9264 404.2378 l
S
u
0 O
0 g
1 w
282.9183 402.2459 m
277.1944 405.787 l
279.2802 405.884 L
279.3772 407.9698 l
282.9183 402.2459 L
f
U
0 R
0 G
0.75 w
241.1746 495.9896 m
278.9889 458.1753 l
S
u
0 O
0 g
1 w
280.9808 456.1834 m
275.2569 459.7245 l
277.3427 459.8215 L
277.4397 461.9073 l
280.9808 456.1834 L
f
U
0 R
0 G
0.75 w
294.6746 444.4896 m
334.9264 404.2378 l
S
u
0 O
0 g
1 w
336.2308 402.9334 m
330.5069 406.4745 l
332.5927 406.5715 L
332.6897 408.6573 l
336.2308 402.9334 L
f
U
0 R
0 G
0.75 w
187.1746 495.9896 m
224.9889 458.1753 l
S
u
0 O
0 g
1 w
226.9808 456.1834 m
221.2569 459.7245 l
223.3427 459.8215 L
223.4397 461.9073 l
226.9808 456.1834 L
f
U
0 To
1 0 0 1 209.75 482.5 0 Tp
TP
-4.099 0 Td
0 Tr
/_Times-Roman 9 Tf
(2) Tx 
/_Symbol 9 Tf
(g) Tx 
(\r) TX 
TO
0 To
1 0 0 1 263 482.5 0 Tp
TP
-4.099 0 Td
0 Tr
/_Times-Roman 9 Tf
(2) Tx 
/_Symbol 9 Tf
(g) Tx 
(\r) TX 
TO
0 To
1 0 0 1 261.5 431.25 0 Tp
TP
-1.849 0 Td
0 Tr
(g) Tx 
(\r) TX 
TO
0 To
1 0 0 1 314.75 431.25 0 Tp
TP
-1.849 0 Td
0 Tr
(g) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 169.24 543 313.35 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 41
%%Page: "36" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(36) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.02 (reliability models. In section 9, systems will be modeled without making these simplifying assumptions) 87 420.89 P
0.65 (and more complex systems will be investigated. These systems will use different reconfiguration, and) 87 407.89 P
0.89 (consist of several subsystems. As complexity is added to a system, it quickly becomes impractical to) 87 394.89 P
-0.19 (enumerate all states and transitions of a model by hand. In section 8, a simple but expressive language is) 87 381.89 P
0.39 (introduced for specifying Markov or semi-Markov models. This language serves as the input language) 87 368.89 P
1.58 (for the ASSIST computer program that automatically generates the states and the transitions of the) 87 355.89 P
(model. The output of the ASSIST program can be directly processed by the SURE program.) 87 342.89 T
4 12 Q
(8. The ASSIST Model Speci\336cation Language) 87 314.92 T
3 11 Q
1.01 (A computer program was developed at Langley Research Center to automatically generate semi-) 105 294.28 P
-0.01 (Markov models from an abstract, high-level language. This program, named the Abstract Semi-Markov) 87 281.28 P
-0.15 (Specification Interface to the SURE Tool \050ASSIST\051, is written in the C programming language and runs) 87 268.28 P
0.82 (on the VMS and the Unix operating systems \050refs. 17 and 18\051. The ASSIST program generates a file) 87 255.28 P
0.28 (containing the generated semi-Markov model in the format needed for input to a number of Markov or) 87 242.28 P
(semi-Markov reliability analysis programs developed at Langley, such as SURE or PAWS.) 87 229.28 T
-0.08 (The abstract language used for input to ASSIST is described in this section. Only the features of the) 105 207.97 P
0.87 (language necessary for understanding the models in this paper are presented. For a description of the) 87 194.97 P
1.4 (complete input language or for more detailed information about ASSIST, see reference 17. Readers) 87 181.97 P
(already familiar with the ASSIST language can  proceed to section 9.) 87 168.97 T
-0.08 ( The ASSIST program is based on concepts used in the design of compilers. The ASSIST input lan-) 105 147.67 P
0.77 (guage is used to define rules for generating a model. These rules are first applied to a start state. The) 87 134.67 P
-0.18 (rules create transitions from the start state to new states. The program then applies the rules to the newly) 87 121.67 P
0.19 (created states. This process is continued until all states are either death states or have already been pro-) 87 108.67 P
-0.06 (cessed. The rules in the ASSIST language describe the failure and the recovery processes of the system.) 87 95.67 P
0.99 (Often even the most complex characteristics of a system can be described by relatively simple rules.) 87 82.67 P
-0.14 (The models only become complex when these few rules combine many times to form models with large) 87 69.67 P
3 9 Q
(Figure 35.  Failure probability of triplex with two warm spares.) 201.01 453.23 T
87 459.23 543 726 C
110 470.23 520 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 127 272 525 528 398 256 116 471.22 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig35.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig35.ps)
%%CreationDate: (4/19/95) (8:01 AM)
%%BoundingBox: 127 272 525 528
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 119 255.5 493 536.5
%AI3_TemplateFile: hammer510::1945:t-35
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
179 491.125 m
173 491.125 l
S
401 301.75 m
401 306.75 l
S
179 517.375 m
173 517.375 l
173 301.75 l
457.5 301.75 l
457.5 306.75 l
S
344 301.75 m
344 306.75 l
S
287 301.75 m
287 306.75 l
S
229.75 301.75 m
229.75 306.75 l
S
179 437.75 m
173 437.75 l
S
179 383.75 m
173 383.75 l
S
179 356 m
173 356 l
S
0 To
1 0 0 1 169 515 0 Tp
TP
-13.5 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(10) Tx 
4 Ts
(0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 169 489 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\61) Tx 
(\r) TX 
TO
0 To
1 0 0 1 169 433.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
1 0 0 1 169 380 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
1 0 0 1 169 352.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
1 0 0 1 169 298.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\3208) Tx 
(\r) TX 
TO
0 To
1 0 0 1 172.5 288.75 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
4 Ts
(\3209) Tx 
(\r) TX 
TO
0 To
1 0 0 1 229.25 288.75 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\3208) Tx 
(\r) TX 
TO
0 To
1 0 0 1 287 288.75 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\67) Tx 
(\r) TX 
TO
0 To
1 0 0 1 344 288.75 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
1 0 0 1 400.75 288.75 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
1 0 0 1 458.5 288.75 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
1 0 0 1 313.5 274.75 0 Tp
TP
-1.849 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(g) Tx 
(\r) TX 
TO
0 To
1 0 0 1 141 408 0 Tp
TP
-3.999 0 Td
0 Tr
/_Times-Italic 9 Tf
(P) Tx 
-4 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
179 464.625 m
173 464.625 l
S
0 To
1 0 0 1 169 462.5 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
2 Ta
(10) Tx 
4 Ts
(\320\62) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
179 410.75 m
173 410.75 l
S
0 To
1 0 0 1 169 407 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(\320\64) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
179 328.5 m
173 328.5 l
S
0 To
1 0 0 1 169 325 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(\320\67) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w [5 4 ]0 d
229 503.5 m
356 503 371 503 v
386 503 459.5 506.5 y
S
[10 3 3 3 ]0 d
230 417 m
344 417 353.5 417 v
363 417 440 417.5 458 425 c
S
[1 5 ]0 d
231 326.5 m
326.5 326.5 348.5 326.5 v
370.5 326.5 439.5 325.5 459.5 330 c
S
[5 4 ]0 d
459.5 478 m
490.5 478 l
S
[10 3 3 3 ]0 d
460.5 468 m
490.5 468 l
S
[1 5 ]0 d
459.5 458 m
490.5 458 l
S
0 To
1 0 0 1 513.5 474.5 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w []0 d
0 Ts
10 0 Tl
(1000\r) Tx 
4.5 -10 Td
(100\r) Tx 
4.5 -10 Td
(10) Tx 
(\r) TX 
TO
0 To
1 0 0 1 506 488 0 Tp
TP
-2.7488 0 Td
0 Tr
1 Ta
(T) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 459.23 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 42
%%Page: "37" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(37) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.76 (numbers of states and transitions between them. The abstract description is useful for communicating) 87 718.67 P
0.05 (and validating the system model, as well as for model generation. Also, the process of describing a sys-) 87 705.67 P
1.5 (tem in this abstract language forces the reliability engineer to clearly understand the fault tolerance) 87 692.67 P
(strategies of the system.) 87 679.67 T
-0.21 (The ASSIST input language can be used to describe any state-space model. Its full generality makes) 105 660.42 P
0.11 (it useful for specifying Markov and semi-Markov models, even when it is not necessary to generate the) 87 647.42 P
0.43 (model. The ASSIST language can serve as a convenient vehicle for discussing and analyzing complex) 87 634.42 P
(state-space models without having to specify all  states and transitions of the model by enumeration.) 87 621.42 T
4 10.5 Q
(8.1. Abstract Language Syntax) 105 596.51 T
3 11 Q
1.17 (A formal description of this language is not presented. Nevertheless, a few conventions must be) 105 578.44 P
(defined to facilitate description of the language:) 87 565.44 T
(1.) 105 546.19 T
(All reserved words will be capitalized in typewriter print.) 117 546.19 T
(2.) 105 526.95 T
0.72 (Lowercase words that are in italics indicate items that are to be replaced by something defined) 117 526.95 P
(elsewhere.) 117 513.95 T
(3.) 105 494.7 T
(Items enclosed in double square brackets) 117 494.7 T
( can be omitted.) 318.28 494.7 T
(4.) 105 475.46 T
(Items enclosed in braces { } can be omitted or repeated as many times as desired.) 117 475.46 T
(The basic language consists of seven statements:) 87 456.22 T
(1.) 105 437.98 T
( The constant-definition statement) 117 437.98 T
(2.) 105 418.73 T
(The) 117 418.73 T
7 F
(SPACE) 136.85 418.73 T
3 F
( statement) 169.85 418.73 T
(3.) 105 399.49 T
(The) 117 399.49 T
7 F
(IMPLICIT) 136.85 399.49 T
3 F
( statement) 189.65 399.49 T
(4.) 105 380.24 T
(The) 117 380.24 T
7 F
(START) 136.85 380.24 T
3 F
( statement) 169.85 380.24 T
(5.) 105 361 T
( The) 117 361 T
7 F
(DEATHIF) 139.6 361 T
3 F
( statement) 185.8 361 T
(6.) 105 341.76 T
(The) 117 341.76 T
7 F
(PRUNEIF) 136.85 341.76 T
3 F
( statement) 183.05 341.76 T
(7.) 105 322.51 T
(The) 117 322.51 T
7 F
(TRANTO) 136.85 322.51 T
3 F
( statement) 176.46 322.51 T
(Each statement is discussed in the following sections.) 87 303.27 T
8 10.5 Q
(8.1.1. Constant-de\336nition statement.) 105 279.86 T
3 11 Q
0.07 (A constant-definition statement equates an identifier consisting) 264.58 279.86 P
(of letters and digits to a number. For example) 87 266.86 T
7 F
(LAMBDA = 0.0052;) 105 247.62 T
(RECOVER = 0.005;) 105 234.37 T
3 F
-0.24 (Once defined, an identifier can be used instead of the number it represents. In the following sections, the) 87 215.13 P
1 (phrase \322) 87 202.13 P
5 F
1 (const) 124.35 202.13 P
3 F
1 (\323 is used to represent a constant, which can be either a number or a constant identifier.) 147.57 202.13 P
(Constants can also be defined in terms of previously defined constants) 87 189.13 T
7 F
(LAMBDA = 1E-4;) 105 170.89 T
(GAMMA = 10*LAMBDA;) 105 157.64 T
3 F
( In general the syntax is) 87 138.4 T
5 F
(ident) 105 120.15 T
3 F
( =) 127 120.15 T
5 F
(expression) 138.7 120.15 T
3 F
(;) 185.75 120.15 T
0.44 (where) 87 100.91 P
5 F
0.44 (expression) 117.06 100.91 P
3 F
0.44 ( is a legal FORTRAN/Pascal expression. Both \050 \051 and [ ] can be used for grouping in) 164.1 100.91 P
(the expressions. The following statements contain legal expressions) 87 87.91 T
7 F
(ALPHA = 1E-4;) 105 69.67 T
300.29 492.71 307.79 504.2 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
302.04 502.7 302.04 494.2 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
302.04 502.7 306.29 502.7 2 L
N
302.04 494.2 306.29 494.2 2 L
N
303.54 502.7 303.54 494.45 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
310.54 492.95 318.28 504.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
316.54 502.95 316.54 494.45 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
316.54 502.95 312.29 502.95 2 L
N
316.54 494.45 312.29 494.45 2 L
N
315.04 502.95 315.04 494.7 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 43
%%Page: "38" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(38) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(RECV = 1.2*EXP\050-3*ALPHA\051;) 105 718.67 T
(DELTA = 1.2*[\050ALPHA + 2.3E-5\051*RECV + 1/ALPHA];) 105 705.36 T
3 F
(All constant definitions are printed in the SURE model file so that the definitions may be used by the) 87 686.05 T
(SURE program. In addition, any statements in the ASSIST input file that are enclosed within double) 87 673.05 T
(quotes are copied directly into the SURE model file and are not otherwise processed by the ASSIST) 87 660.05 T
-0.06 (program. For example, if a user wished to be prompted for the value of) 87 647.05 P
6 F
-0.06 (g) 401.37 647.05 P
3 F
-0.06 ( by the SURE program instead) 405.89 647.05 P
(of by the ASSIST program and to see the effects of varying the value of) 87 634.05 T
6 F
(l) 406.24 634.05 T
3 F
( exponentially, the following) 412.28 634.05 T
(statements could be included in the ASSIST input file:) 87 621.05 T
7 F
("INPUT GAMMA;") 105 601.73 T
("LAMBDA = 1E-4 TO* 1E-9;") 105 588.42 T
3 F
0.53 ( State-space variables may not be used in constant-definition expressions because the variables do) 105 569.11 P
0.55 (not remain constant throughout model generation.  An expression containing state-space variables can) 87 556.11 P
(be equated to an identifier by using the) 87 543.11 T
7 F
(IMPLICIT) 261.14 543.11 T
3 F
( statement, which are described in section 8.1.3.) 313.94 543.11 T
8 10.5 Q
(8.1.2. SP) 105 519.64 T
(ACE statement.) 142.73 519.64 T
3 11 Q
1.94 (This statement is used to specify the state space on which the Markov) 213.03 519.64 P
0.64 (model is defined. Essentially, the state space is defined by an) 87 506.64 P
5 F
0.64 (n) 365.68 506.64 P
3 F
0.64 (-dimensional vector with each compo-) 371.18 506.64 P
1.14 (nent of the vector defined as an attribute of the system being modeled. In the SIFT-like architecture) 87 493.64 P
-0.2 (example shown in figure 22, the state space is) 87 480.64 P
7 F
-0.49 (\050NC,NF\051) 287.32 480.64 P
3 F
-0.2 (. This would be defined in the abstract language) 333.52 480.64 P
(as) 87 467.64 T
7 F
(SPACE = \050NC: 0..6, NF: 0..6\051;) 105 448.33 T
3 F
0.16 (The 0 . . 6 represents the range of values over which the components can vary. The lower bound of) 105 429.02 P
0.24 (the range must be greater than or equal to zero. The upper bound must be greater than the lower bound) 87 416.02 P
0.23 (and less than or equal to 255. This maximum upper bound value can be easily changed by modifying a) 87 403.02 P
0.49 (constant and recompiling the ASSIST program. The number of components \050i.e., the dimension of the) 87 390.02 P
(vector space\051 can be as large as desired.  In general the syntax is) 87 377.02 T
7 F
(SPACE = \050) 105 357.71 T
5 F
(ident) 167.15 357.71 T
3 F
(:) 196.65 357.71 T
5 F
( const) 199.7 357.71 T
3 F
(. .) 228.43 357.71 T
5 F
(const) 239.43 357.71 T
3 F
( ,) 270.39 357.71 T
5 F
(ident) 278.64 357.71 T
3 F
(:) 308.14 357.71 T
5 F
(const) 313.94 357.71 T
3 F
( . .) 337.17 357.71 T
5 F
(const) 350.92 357.71 T
7 F
(\051;) 384.63 357.71 T
3 F
0.47 (The range specification is optional and defaults to a range from 0 to 255. The identifiers) 87 338.4 P
5 F
0.47 (ident) 484.63 338.4 P
3 F
0.47 ( that are) 506.63 338.4 P
(used in the) 87 325.4 T
7 F
(SPACE) 137.41 325.4 T
3 F
( statement are referred to as the state-space variables.) 170.41 325.4 T
8 10.5 Q
(8.1.3. IMPLICIT statement.) 105 301.92 T
3 11 Q
0.19 (The) 228.38 301.92 P
7 F
0.44 (IMPLICIT) 248.43 301.92 P
3 F
0.19 ( statement is used to define a quantity that is not in the) 301.23 301.92 P
1.41 (state space itself, but is a function of the state space.  Earlier versions of ASSIST did not have the) 87 288.92 P
7 F
2.71 (IMPLICIT) 87 275.92 P
3 F
1.13 ( statement and allowed the user to equate an identifier to an expression containing state-) 139.8 275.92 P
0.17 (space variables by using the same syntax as the constant-definition statement. The value of the implicit) 87 262.92 P
(function is based upon constants and state-space variables.) 87 249.92 T
0.87 (For example, if) 105 230.61 P
7 F
2.09 (NWP) 177.88 230.61 P
3 F
0.87 ( is a state-space variable representing the number of working processors and) 197.68 230.61 P
7 F
(NI) 87 217.61 T
3 F
( is a constant denoting the number of processors initially, then the declaration) 100.2 217.61 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(IMPLICIT NFP[NWP] = NI - NWP;) 105 198.3 T
3 F
-0.14 (defines) 87 178.99 P
7 F
-0.35 (NFP) 121.37 178.99 P
3 F
-0.14 (, which denotes the number of failed processors. The number of failed processors is defined) 141.17 178.99 P
1.48 (to be the difference between the initial number and the current number of working processors. The) 87 165.99 P
(implicit function can be referenced as illustrated in the following) 87 152.99 T
7 F
(DEATHIF) 375.4 152.99 T
3 F
( statement:) 421.6 152.99 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(DEATHIF NWP <= NFP;) 105 134.68 T
3 F
0.35 (The) 105 115.37 P
7 F
0.84 (IMPLICIT) 125.21 115.37 P
3 F
0.35 ( statement equates an identifier to an expression containing variables.  Every vari-) 178.01 115.37 P
1.29 (able used in the expression must be spelled out in either the state-space variable list or the optional) 87 102.37 P
(parameter list. In general the syntax is) 87 89.37 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(IMPLICIT) 105 70.06 T
5 F
(ident) 160.55 70.06 T
3 F
([) 182.55 70.06 T
5 F
(state-space-variable-list) 188.96 70.06 T
3 F
( ]) 295.89 70.06 T
(\050) 312.55 70.06 T
5 F
(parameter-list) 316.22 70.06 T
3 F
( \051) 379.16 70.06 T
7 F
( =) 396.07 70.06 T
5 F
(expression) 415.86 70.06 T
7 F
(;) 465.66 70.06 T
189.15 355.71 196.65 367.2 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
190.9 365.7 190.9 357.2 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
190.9 365.7 195.15 365.7 2 L
N
190.9 357.2 195.15 357.2 2 L
N
192.4 365.7 192.4 357.45 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
262.65 355.96 270.39 367.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
268.65 365.95 268.65 357.45 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
268.65 365.95 264.4 365.95 2 L
N
268.65 357.45 264.4 357.45 2 L
N
267.15 365.95 267.15 357.7 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
300.64 355.71 308.14 367.2 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
302.39 365.7 302.39 357.2 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
302.39 365.7 306.64 365.7 2 L
N
302.39 357.2 306.64 357.2 2 L
N
303.89 365.7 303.89 357.45 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
374.14 355.96 381.88 367.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
380.14 365.95 380.14 357.45 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
380.14 365.95 375.89 365.95 2 L
N
380.14 357.45 375.89 357.45 2 L
N
378.64 365.95 378.64 357.7 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
305.06 68.06 312.55 79.55 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306.81 78.05 306.81 69.55 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
306.81 78.05 311.06 78.05 2 L
N
306.81 69.55 311.06 69.55 2 L
N
308.31 78.05 308.31 69.8 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
388.32 68.31 396.07 79.8 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
394.32 78.3 394.32 69.8 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
394.32 78.3 390.07 78.3 2 L
N
394.32 69.8 390.07 69.8 2 L
N
392.82 78.3 392.82 70.05 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 44
%%Page: "39" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(39) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.96 (The statement) 105 718.67 P
5 F
0.96 ( state-space-variable-list) 167.98 718.67 P
3 F
0.96 ( is made up of one or more state-space-variable identifiers) 278.63 718.67 P
0.24 (separated by commas. The identifiers must already have been defined in a) 87 705.67 P
7 F
0.57 (SPACE) 418.24 705.67 P
3 F
0.24 ( statement. All state-) 451.24 705.67 P
0.65 (space variables that are referenced in the expression of an) 87 692.67 P
7 F
1.55 (IMPLICIT) 350.04 692.67 P
3 F
0.65 ( statement must be listed in the) 402.84 692.67 P
(state-space-variable list.) 87 679.67 T
-0.2 (The optional) 105 659.31 P
5 F
-0.2 ( parameter-list) 160.71 659.31 P
3 F
-0.2 ( is used to declare an implicit function that is also a function of specified) 226.21 659.31 P
1.42 (parameters. Any variables, such as) 87 646.31 P
7 F
3.42 (FOR) 249.61 646.31 P
3 F
1.42 ( index variables, that are referenced in the expression of an) 269.41 646.31 P
7 F
(IMPLICIT) 87 633.31 T
3 F
( and are not state-space variables must be listed in the optional parameter list.) 139.8 633.31 T
-0.21 (The) 105 612.96 P
5 F
-0.21 (expression) 124.64 612.96 P
3 F
-0.21 ( of the) 171.69 612.96 P
7 F
-0.51 (IMPLICIT) 201.9 612.96 P
3 F
-0.21 ( definition is the expression defining the value as a function of the) 254.71 612.96 P
(specified parameters and the state-space variables.) 87 599.96 T
0.34 (The implicit function may be invoked in) 105 579.6 P
7 F
0.82 (TRANTO) 287.98 579.6 P
3 F
0.34 (,) 327.58 579.6 P
7 F
0.82 (DEATHIF) 333.42 579.6 P
3 F
0.34 (,) 379.62 579.6 P
7 F
0.82 (PRUNEIF) 385.46 579.6 P
3 F
0.34 (, or) 431.66 579.6 P
7 F
0.82 (FOR) 449.76 579.6 P
3 F
0.34 ( statements or in) 469.56 579.6 P
0.22 (later) 87 566.6 P
7 F
0.53 (IMPLICIT) 109.52 566.6 P
3 F
0.22 ( definitions by giving its name followed by the values for each parameter in parenthe-) 162.32 566.6 P
0.15 (ses. A passed value can be a number, a named constant, a variable, or an expression. If the) 87 553.6 P
7 F
0.36 (IMPLICIT) 490.2 553.6 P
3 F
(definition does not include a parameter list, the) 87 540.6 T
7 F
(IMPLICIT) 296.89 540.6 T
3 F
( is invoked by its name alone.) 349.69 540.6 T
8 10.5 Q
(8.1.4. ST) 105 516.08 T
(ART statement.) 142.93 516.08 T
3 11 Q
-0.22 (This statement indicates the state from which the ASSIST program will ini-) 212.65 516.08 P
0.03 (tiate the recursive model generation. This state usually corresponds to the initial state of the system that) 87 503.08 P
-0.03 (is being modeled. That is, the probability the system is in this state at time 0 = 1. In the SIFT-like archi-) 87 490.08 P
0.16 (tecture example shown in figure 22, the initial state is \0506,0\051. This initial state is specified in the abstract) 87 477.08 P
(language by) 87 464.08 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(START = \0506,0\051;) 105 443.73 T
3 F
(In general the syntax is) 87 423.37 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(START =) 105 404.02 T
(\050) 153.95 404.02 T
5 F
(const) 160.55 404.02 T
7 F
({) 186.52 404.02 T
3 F
(,) 193.12 404.02 T
5 F
( const) 195.87 404.02 T
7 F
(}) 224.59 404.02 T
(\051;) 233.94 404.02 T
3 F
(The dimension of the vector must be the same as in the) 87 383.66 T
7 F
(SPACE) 332.02 383.66 T
3 F
( statement.) 365.02 383.66 T
8 10.5 Q
(8.1.5. DEA) 105 359.14 T
(THIF statement.) 152.26 359.14 T
3 11 Q
0.19 (The) 227.23 359.14 P
7 F
0.47 (DEATHIF) 247.28 359.14 P
3 F
0.19 ( statement specifies which states are death states, that is,) 293.48 359.14 P
1.54 (absorbing states in the model. The following is an example in the space) 87 346.14 P
7 F
3.7 (\050DIM1:) 424.2 346.14 P
3.7 (2..4,) 470.4 346.14 P
3.7 (DIM2:) 510 346.14 P
(3..5\051) 87 333.14 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
(DEATHIF \050DIM1 = 4\051 OR \050DIM2 = 3\051;) 105 312.78 T
3 F
(This statement defines states \0504,3\051, \0504,4\051, \0504,5\051, \0502,3\051, and \0503,3\051 as death states. In general, the syntax is) 87 292.43 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(DEATHIF) 105 273.07 T
5 F
(expression) 153.95 273.07 T
3 F
(;) 201 273.07 T
-0.09 (The expression in this statement must be a Boolean expression. A Boolean expression may use the logi-) 87 252.72 P
(cal operators) 87 239.72 T
7 F
(AND) 146.26 239.72 T
3 F
(,) 166.06 239.72 T
7 F
(OR) 171.56 239.72 T
3 F
(, and) 184.76 239.72 T
7 F
(NOT) 208.89 239.72 T
3 F
(.) 228.69 239.72 T
8 10.5 Q
(8.1.6. TRANT) 105 215.2 T
(O statement.) 165.48 215.2 T
3 11 Q
0.01 (This statement is the most important statement in the language. It is used) 222.36 215.2 P
0.25 (to describe, and consequently, generate the model in a recursive manner. The following statement gen-) 87 202.2 P
(erates all fault-arrival transitions in the model shown in figure 22:) 87 189.2 T
7 F
(IF NC > NF TRANTO \050NC, NF+1\051 BY \050NC-NF\051*LAMBDA;) 105 168.84 T
3 F
(The simplest syntax for a) 87 148.49 T
7 F
(TRANTO) 200.96 148.49 T
3 F
( statement is) 240.56 148.49 T
7 F
(IF) 105 129.13 T
5 F
(expression) 120.95 129.13 T
7 F
(TRANTO) 170.75 129.13 T
5 F
(destination) 213.1 129.13 T
7 F
(BY) 264.74 129.13 T
5 F
(expression) 280.69 129.13 T
3 F
(;) 327.74 129.13 T
0.82 (The first expression following the) 105 108.78 P
7 F
1.98 (IF) 260.96 108.78 P
3 F
0.82 ( must be Boolean. Conceptually, this expression determines) 274.17 108.78 P
5.35 (whether this rule applies to a particular state. For example, in the state-space expression) 87 95.78 P
7 F
6.24 (SPACE) 87 82.78 P
6.24 (=) 126.6 82.78 P
6.24 (\050A1:) 139.8 82.78 P
6.24 (1..5,) 172.8 82.78 P
6.24 (A2:) 212.4 82.78 P
6.24 (0..1\051) 238.8 82.78 P
3 F
2.6 (, the expression) 271.8 82.78 P
7 F
6.24 (\050A1) 351.08 82.78 P
6.24 (>) 377.48 82.78 P
6.24 (3\051) 390.68 82.78 P
6.24 (AND) 410.48 82.78 P
6.24 (\050A2) 436.89 82.78 P
6.24 (=) 463.29 82.78 P
6.24 (0\051) 476.48 82.78 P
3 F
2.6 ( is true for) 489.68 82.78 P
(states \0504,0\051 and \0505,0\051 only.) 87 69.78 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 45
%%Page: "40" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(40) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.29 (The) 105 718.67 P
5 F
1.29 (destination) 126.15 718.67 P
3 F
1.29 ( vector following the) 175.04 718.67 P
7 F
3.11 (TRANTO) 274.93 718.67 P
3 F
1.29 ( reserved word defines the destination state of the) 314.53 718.67 P
2.17 (transition to be added to the model. The destination state can be specified by using positional or) 87 705.67 P
(assigned values.) 87 692.67 T
(The syntax for specification of the destination by positional values is as follows:) 105 673.02 T
(\050) 105 653.36 T
5 F
(expression) 108.66 653.36 T
3 F
(, {,) 155.71 653.36 T
5 F
(expression) 171.99 653.36 T
3 F
(}\051) 219.04 653.36 T
0.26 (where the listed expressions define each state-space variable value for the destination state. An expres-) 87 633.71 P
0.87 (sion must be included for every state-space variable defined in the) 87 620.71 P
7 F
2.08 (SPACE) 390.7 620.71 P
3 F
0.87 ( statement, which includes) 423.7 620.71 P
-0.27 (every array element. Each expression within the parentheses must evaluate to an integer. For example, if) 87 607.71 P
-0.01 (the state space is) 87 594.71 P
7 F
-0.02 (\050X1,) 163.34 594.71 P
-0.02 (X2\051) 196.34 594.71 P
3 F
-0.01 ( and the source state is) 216.14 594.71 P
7 F
-0.02 (\0505,3\051) 318.13 594.71 P
3 F
-0.01 (, then the vector) 351.13 594.71 P
7 F
-0.02 (\050X1+1,) 424.72 594.71 P
-0.02 (X2-1\051) 470.92 594.71 P
3 F
-0.01 ( refers to) 503.92 594.71 P
7 F
(\0506,2\051) 84 581.71 T
3 F
(.) 117 581.71 T
(The syntax for specification of the destination by assigned values is) 105 563.06 T
5 F
(ident) 105 543.41 T
3 F
( =) 127 543.41 T
5 F
(expression) 138.7 543.41 T
3 F
( {,) 185.75 543.41 T
5 F
(ident) 199.28 543.41 T
3 F
( =) 221.28 543.41 T
5 F
(expression) 232.99 543.41 T
3 F
( }) 280.03 543.41 T
-0.19 (where) 87 523.76 P
5 F
-0.19 (ident) 116.43 523.76 P
3 F
-0.19 ( is a state-space variable and) 138.43 523.76 P
5 F
-0.19 (expression) 265.59 523.76 P
3 F
-0.19 ( is an integer expression. The assignments define the) 312.64 523.76 P
-0.18 (destination state of a transition by specifying the change in one or more state-space variable values from) 87 510.76 P
1.38 (the source state to the destination state. There can be as many assignments as state-space variables.) 87 497.76 P
-0.1 (State-space variables that do not change need not be specified. The two syntaxes cannot be mixed in the) 87 484.76 P
(same statement and the) 87 471.76 T
5 F
(destination) 192.09 471.76 T
3 F
( cannot be within parentheses when assigned values are to be used.) 240.99 471.76 T
1.23 ( The expression following) 105 453.11 P
7 F
2.95 (BY) 227.85 453.11 P
3 F
1.23 ( indicates the rate of the transition to be added to the model. This) 241.05 453.11 P
0.6 (expression must define a real number. The user may include constant names in the rate statement that) 87 440.11 P
1.48 (are not defined in the ASSIST file. These names are simply copied into the rate expressions in the) 87 427.11 P
0.3 (model file to be defined during execution of the SURE program. The ASSIST program also allows the) 87 414.11 P
0.39 (user to concatenate identifiers or values in the rate expression by using the ^ character. The use of this) 87 401.11 P
(feature is demonstrated in section 13.5.) 87 388.11 T
(The condition expression of the) 105 368.46 T
7 F
(TRANTO) 247.07 368.46 T
3 F
( statement can be nested as follows:) 286.67 368.46 T
7 F
(IF) 105 348.81 T
5 F
(expression) 120.95 348.81 T
7 F
(THEN) 170.75 348.81 T
5 F
(trantos) 117 329.15 T
7 F
(ELSE) 115.25 309.5 T
5 F
(trantos) 117 289.85 T
7 F
(ENDIF;) 105 270.2 T
3 F
-0.27 (where) 87 250.55 P
5 F
-0.27 (trantos) 116.35 250.55 P
3 F
-0.27 ( is one or more) 147.52 250.55 P
7 F
-0.65 (TRANTO) 214.9 250.55 P
3 F
-0.27 ( statements or) 254.51 250.55 P
7 F
-0.65 (TRANTO) 317.54 250.55 P
3 F
-0.27 ( clauses and where a) 357.14 250.55 P
7 F
-0.65 (TRANTO) 448.94 250.55 P
3 F
-0.27 ( statement is) 488.54 250.55 P
(IF) 105 231.9 T
5 F
(expression) 117.53 231.9 T
7 F
(TRANTO) 167.33 231.9 T
5 F
(destination) 209.68 231.9 T
7 F
(BY) 261.32 231.9 T
5 F
(expression) 277.27 231.9 T
3 F
(;) 324.32 231.9 T
(and a) 87 212.25 T
7 F
(TRANTO) 113.27 212.25 T
3 F
( clause is) 152.87 212.25 T
7 F
(TRANTO) 195.94 212.25 T
5 F
( destination) 235.54 212.25 T
7 F
(BY) 289.94 212.25 T
5 F
(expression) 305.89 212.25 T
3 F
(;) 352.94 212.25 T
0.95 ( A) 105 193.6 P
7 F
2.27 (TRANTO) 120.34 193.6 P
3 F
0.95 ( clause may not appear by itself without a condition expression. If the) 159.94 193.6 P
7 F
2.27 (IF) 481.43 193.6 P
3 F
0.95 ( is not fol-) 494.63 193.6 P
0.22 (lowed by a) 87 180.6 P
7 F
0.54 (THEN) 138.69 180.6 P
3 F
0.22 (, then only one) 165.09 180.6 P
7 F
0.54 (TRANTO) 234.12 180.6 P
3 F
0.22 ( clause may be included and no) 273.72 180.6 P
7 F
0.54 (ELSE) 416.11 180.6 P
3 F
0.22 ( clause or) 442.51 180.6 P
7 F
0.54 (ENDIF) 488.08 180.6 P
3 F
0.22 ( may) 521.08 180.6 P
0.66 (be used. If the) 87 167.6 P
7 F
1.59 (IF) 154.71 167.6 P
3 F
0.66 ( is followed by a) 167.91 167.6 P
7 F
1.59 (THEN) 247.3 167.6 P
3 F
0.66 (, then an optional) 273.7 167.6 P
7 F
1.59 (ELSE) 355.49 167.6 P
3 F
0.66 ( clause may be included and the) 381.89 167.6 P
7 F
1.59 (IF) 529.8 167.6 P
3 F
-0.22 (statement must be terminated with an) 87 154.6 P
7 F
-0.52 (ENDIF) 253.14 154.6 P
3 F
-0.22 (. The) 286.14 154.6 P
7 F
-0.52 (THEN) 311.07 154.6 P
3 F
-0.22 ( clause and the optional) 337.47 154.6 P
7 F
-0.52 (ELSE) 443.02 154.6 P
3 F
-0.22 ( clause may con-) 469.42 154.6 P
0.38 (tain multiple) 87 141.6 P
7 F
0.93 (TRANTO) 146.45 141.6 P
3 F
0.38 ( statements. Every rate expression must be followed by a semicolon and the end) 186.04 141.6 P
(of the entire nested statement must be followed with a semicolon.) 87 128.6 T
-0.21 ( State-space variables may be used in any of the expressions of the) 105 108.95 P
7 F
-0.51 (TRANTO) 398.25 108.95 P
3 F
-0.21 ( statement. The value of) 437.85 108.95 P
0.44 (a state-space variable is the corresponding value in the source state to which the) 87 95.95 P
7 F
1.05 (TRANTO) 447.52 95.95 P
3 F
0.44 ( statement is) 487.12 95.95 P
1.07 (being applied. For example, if the) 87 82.95 P
7 F
2.56 (TRANTO) 244.93 82.95 P
3 F
1.07 ( statement is being applied to state) 284.53 82.95 P
7 F
2.56 (\0504,5\051) 449.07 82.95 P
3 F
1.07 ( and the state) 482.07 82.95 P
(space was defined by) 87 69.95 T
7 F
(SPACE = \050A: 0..10, Z: 2..15\051) 183.52 69.95 T
3 F
(, then) 368.33 69.95 T
7 F
(A = 4) 395.52 69.95 T
3 F
( and) 428.52 69.95 T
7 F
(Z = 5) 449.9 69.95 T
3 F
(.) 482.9 69.95 T
105 307.5 112.5 319 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.75 317.5 106.75 309 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
106.75 317.5 111 317.5 2 L
N
106.75 309 111 309 2 L
N
108.25 317.5 108.25 309.25 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
150.92 288.1 158.67 299.59 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
156.92 298.09 156.92 289.59 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
156.92 298.09 152.67 298.09 2 L
N
156.92 289.59 152.67 289.59 2 L
N
155.42 298.09 155.42 289.84 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 46
%%Page: "41" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(41) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(8.1.7. Model generation algorithm.) 105 718.73 T
3 11 Q
1.43 (The ASSIST program generates the model in accordance with) 258.44 719 P
(the following algorithm:) 87 706 T
(Initialize) 105 686.73 T
7 F
(READY-SET) 146.85 686.73 T
3 F
( to contain the start state only.) 206.26 686.73 T
7 F
(WHILE READY-SET) 105 667.46 T
3 F
( is not empty) 204 667.46 T
7 F
(DO) 263.89 667.46 T
3 F
(Select and remove a state from) 123 648.19 T
7 F
(READY-SET) 261.69 648.19 T
(IF) 123 628.92 T
3 F
( the selected state does not satisfy a) 136.2 628.92 T
7 F
(DEATHIF) 295.06 628.92 T
3 F
( or) 341.26 628.92 T
7 F
(PRUNEIF) 355.92 628.92 T
3 F
( statement) 402.12 628.92 T
7 F
(THEN) 449.79 628.92 T
3 F
(Apply each) 141 610.64 T
7 F
(TRANTO) 194.15 610.64 T
3 F
( rule to the selected state as follows:) 233.75 610.64 T
7 F
(IF) 141 592.37 T
3 F
( the) 154.2 592.37 T
7 F
(TRANTO) 173.14 592.37 T
3 F
( if expression evaluates to) 212.74 592.37 T
7 F
(TRUE THEN) 329.75 592.37 T
3 F
(Add the transition to the model.) 159 574.1 T
7 F
(IF) 159 555.83 T
3 F
( the destination state is new, add it to the) 172.2 555.83 T
7 F
(READY-SET) 354 555.83 T
(ENDIF) 141 537.56 T
(ENDIF) 123 519.29 T
(ENDWHILE) 105 501.02 T
3 F
0.95 (The ASSIST program builds the model from the start state by recursively applying the transition) 105 482.75 P
0.06 (rules. A list of states to be processed, the) 87 469.75 P
7 F
0.14 (READY-SET) 269.9 469.75 P
3 F
0.06 (, begins with only the start state. Before applica-) 329.3 469.75 P
-0.19 (tion of a rule, ASSIST checks all death conditions to determine whether the current state is a death state.) 87 456.75 P
0.33 (Because a death state denotes system failure, no transitions can leave a death state. Each) 87 443.75 P
7 F
0.78 (TRANTO) 483.22 443.75 P
3 F
0.33 ( rule) 522.82 443.75 P
-0.23 (is then evaluated for the nondeath state. If the condition expression of the) 87 430.75 P
7 F
-0.56 (TRANTO) 409.63 430.75 P
3 F
-0.23 ( rule evaluates to true) 449.23 430.75 P
0.09 (for the current state, then the destination expression is used to determine the state-space variable values) 87 417.75 P
0.32 (of the destination state. If the destination state has not already been defined in the model, then the new) 87 404.75 P
-0.18 (state is added to the) 87 391.75 P
7 F
-0.44 (READY-SET) 175.6 391.75 P
3 F
-0.18 ( of states to be processed. The rate of the transition is determined from) 235 391.75 P
0.72 (the rate expression and the transition description is printed to the model file. When all) 87 378.75 P
7 F
1.74 (TRANTO) 478.54 378.75 P
3 F
0.72 ( rules) 518.14 378.75 P
0.47 (have been applied to it, the state is removed from the) 87 365.75 P
7 F
1.13 (READY-SET) 328.04 365.75 P
3 F
0.47 (. When the) 387.44 365.75 P
7 F
1.13 (READY-SET) 439.57 365.75 P
3 F
0.47 ( is empty,) 498.97 365.75 P
(then all possible paths terminate in death states and model building is complete.) 87 352.75 T
4 10.5 Q
(8.2. Illustrative Example of SIFT) 105 327.81 T
(-Like Ar) 251.62 327.81 T
(chitectur) 290.22 327.81 T
(e) 330.27 327.81 T
3 11 Q
(Now the model shown in figure 22 can be specified in the ASSIST language) 105 309.7 T
7 F
(NP = 6;               \050* Number of processors initially *\051) 105 290.43 T
(LAMBDA = 1E-4;        \050* Fault arrival rate *\051) 105 277.16 T
(DELTA = 3.6E3;        \050* Recovery rate *\051) 105 263.89 T
(SPACE = \050NC: 0..NP,   \050* Number processors in configuration *\051) 105 244.62 T
(         NF: 0..NP\051;  \050* Number faulty processors *\051) 105 231.35 T
(START = \050NP,0\051;) 105 212.08 T
-0.9 (IF NC > NF TRANTO \050NC,NF+1\051 BY \050NC-NF\051*LAMBDA; \050* Fault arrivals *\051) 105 192.81 P
-0.63 (IF NF > 0 TRANTO \050NC-1,NF-1\051 BY FAST NF*DELTA; \050* System recovery) 105 179.54 P
-0.63 (*\051) 529.8 179.54 P
-0.3 (DEATHIF 2*NF >= NC;    \050* System failure if majority not working *\051) 105 160.27 P
3 F
-0.23 (The first three lines equate the identifiers) 105 140.99 P
7 F
-0.56 (NP) 286.98 140.99 P
3 F
-0.23 (,) 300.18 140.99 P
7 F
-0.56 (LAMBDA) 305.45 140.99 P
3 F
-0.23 (, and) 345.05 140.99 P
7 F
-0.56 (DELTA) 368.72 140.99 P
3 F
-0.23 ( to specific values. The next two) 401.72 140.99 P
0.43 (lines define the state space with the) 87 127.99 P
7 F
1.03 (SPACE) 248.56 127.99 P
3 F
0.43 ( statement. For this system, two attributes suffice to define) 281.56 127.99 P
0.08 (the state of the system. The first attribute) 87 114.99 P
7 F
0.19 (NC) 270.64 114.99 P
3 F
0.08 ( is the number of processors currently in the configuration.) 283.84 114.99 P
(The second attribute) 87 101.99 T
7 F
(NF) 179.57 101.99 T
3 F
( is the number of faulty processors in the configuration.) 192.76 101.99 T
2.11 (The) 105 82.72 P
7 F
5.05 (SPACE) 126.96 82.72 P
3 F
2.11 ( statement declares that the state space is two-dimensional. The first dimension is) 159.96 82.72 P
0.21 (named) 87 69.72 P
7 F
0.51 (NC) 119.29 69.72 P
3 F
0.21 ( and has domain 0 to) 132.49 69.72 P
7 F
0.51 (NP) 227.88 69.72 P
3 F
0.21 (.  The second dimension is) 241.07 69.72 P
7 F
0.51 (NF) 362.43 69.72 P
3 F
0.21 ( and has domain 0 to) 375.63 69.72 P
7 F
0.51 (NP) 471.02 69.72 P
3 F
0.21 (. The) 484.22 69.72 P
7 F
0.51 (START) 510 69.72 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 47
%%Page: "42" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(42) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.61 (statement declares that the construction of the model will begin with the state) 87 718.67 P
7 F
1.46 (\050NP,0\051) 438.02 718.67 P
3 F
0.61 (. The next two) 477.62 718.67 P
7 F
(TRANTO) 87 705.67 T
3 F
( statements define the rules for building the model. Informally these rules are) 126.6 705.67 T
(1.) 105 684.1 T
(Every working processor in the current configuration fails at rate) 117 684.1 T
7 F
(LAMBDA) 405.38 684.1 T
3 F
(.) 444.98 684.1 T
(2.) 105 662.54 T
(The system removes faulty processors at rate) 117 662.54 T
7 F
(DELTA) 317.71 662.54 T
3 F
(.) 350.71 662.54 T
-0.05 (These informal rules are easily converted into ASSIST statements. The phrase \322Every working pro-) 105 640.98 P
(cessor in the current configuration\323 becomes) 87 627.98 T
7 F
(IF NC > NF) 105 606.42 T
3 F
-0.15 (Note that if) 87 584.85 P
7 F
-0.36 (NC) 139.41 584.85 P
3 F
-0.15 ( is greater than) 152.61 584.85 P
7 F
-0.36 (NF) 219.82 584.85 P
3 F
-0.15 (,  at least one working processor remains, so a transition should be cre-) 233.02 584.85 P
(ated. The word \322fails\323 is captured by) 87 571.85 T
7 F
(TRANTO NF = NF + 1) 105 551.29 T
3 F
0.26 (This statement says that the destination state is obtained from the current state by incrementing the) 105 529.73 P
7 F
(NF) 87 516.73 T
3 F
( component by one. The phrase \322at rate) 100.2 516.73 T
7 F
(LAMBDA) 275.85 516.73 T
3 F
(\323 is captured by) 315.45 516.73 T
7 F
(BY) 387.54 516.73 T
(\050NC-NF\051*LAMBDA) 407.34 516.73 T
3 F
(.) 499.74 516.73 T
0.22 (This statement declares that the rate of the generated transition is) 105 495.17 P
7 F
0.52 (\050NC-NF\051*LAMBDA) 396.09 495.17 P
3 F
0.22 (. The identi-) 488.49 495.17 P
0.3 (fier) 87 482.17 P
7 F
0.72 (LAMBDA) 105.32 482.17 P
3 F
0.3 (, which represents the failure rate, is multiplied by) 144.92 482.17 P
7 F
0.72 (\050NC-NF\051) 371.57 482.17 P
3 F
0.3 ( because any of the working) 417.77 482.17 P
(processors can fail. Each processor fails at rate) 87 469.17 T
7 F
(LAMBDA) 295.63 469.17 T
3 F
(. Therefore, the rate that any processor fails is) 335.23 469.17 T
7 F
(\050NC-NF\051*LAMBDA) 105 447.6 T
3 F
-0.06 ( The second rule is translated into ASSIST syntax in a similar manner. A faulty processor) 105 426.04 P
7 F
-0.13 (NF > 0) 503.67 426.04 P
3 F
-0.25 (is removed \050i.e.,) 87 413.04 P
7 F
-0.59 (NC) 160.2 413.04 P
-0.59 (=) 180 413.04 P
-0.59 (NC) 193.2 413.04 P
-0.59 (-) 213 413.04 P
-0.59 (1) 226.2 413.04 P
3 F
-0.25 ( and) 232.8 413.04 P
7 F
-0.59 (NF) 253.69 413.04 P
-0.59 (=) 273.49 413.04 P
-0.59 (NF) 286.69 413.04 P
-0.59 (-) 306.49 413.04 P
-0.59 (1) 319.69 413.04 P
3 F
-0.25 (\051 at rate) 326.29 413.04 P
7 F
-0.59 (DELTA) 361.9 413.04 P
3 F
-0.25 ( \050total rate is) 394.9 413.04 P
7 F
-0.59 (NF*DELTA) 451.97 413.04 P
3 F
-0.25 (\051. There-) 504.77 413.04 P
(fore, the recovery rule is) 87 400.04 T
7 F
(IF) 105 378.48 T
(NF) 120.94 378.48 T
(>) 136.88 378.48 T
(0 TRANTO \050NC-1,NF-1\051 BY FAST NF*DELTA; \050* system recovery *\051) 146.22 378.48 T
3 F
-0.01 (The keyword) 105 356.92 P
7 F
-0.03 (FAST) 166.07 356.92 P
3 F
-0.01 ( alerts the SURE program that this transition is a fast recovery and not a failure.) 192.47 356.92 P
0.81 (The SURE program assumes that the transition is exponentially distributed with rate) 87 343.92 P
7 F
1.96 (NF*DELTA) 470.75 343.92 P
3 F
0.81 ( and) 523.55 343.92 P
-0.19 (automatically calculates the mean and the standard deviation. When experimental data are not available,) 87 330.92 P
0.05 (it is usually convenient to assume that the recoveries are exponential. Later, after the recovery time dis-) 87 317.92 P
1.28 (tribution has been measured, the actual means and standard deviations may be used. When multiple) 87 304.92 P
0.46 (simultaneous recoveries occur, that is) 87 291.92 P
7 F
1.11 (NF > 1) 257.34 291.92 P
3 F
0.46 (, it is also convenient to assume that the recoveries are) 299.16 291.92 P
0.49 (independent. The rate of recovery of the first of two or more competing exponential recoveries can be) 87 278.92 P
-0.23 (obtained by adding their rates. A brief derivation of this result is given in section 3.1 For a more detailed) 87 265.92 P
0.36 (treatment of competing recoveries, consult a standard text that includes a discussion of order statistics,) 87 252.92 P
(such as reference 19. In this case, because all recoveries have the same rate, the rate is) 87 239.92 T
7 F
(NF*DELTA) 468.81 239.92 T
3 F
(.) 521.61 239.92 T
0.44 ( The) 105 218.35 P
7 F
1.05 (DEATHIF) 128.48 218.35 P
3 F
0.44 ( statement defines the system failure states. Informally, if two times the number of) 174.68 218.35 P
0.68 (faulty processors is greater than or equal to the number of processors in the configuration, the system) 87 205.35 P
(fails. This is translated into) 87 192.35 T
7 F
(DEATHIF 2*NF >= NC;) 105 170.79 T
4 12 Q
(9. Recon\336gurable T) 87 142.56 T
(riad Systems) 187.12 142.56 T
3 11 Q
-0.13 ( In this section, systems that use both sparing and degradation to accomplish reconfiguration will be) 105 121.67 P
0.61 (explored.  In the first example, a triad with cold spares, the reconfiguration process changes when the) 87 108.67 P
0.64 (supply of spares is exhausted. The later examples add detail and more closely capture the behavior of) 87 95.67 P
2.93 (the spares. The models in this section demonstrate the flexibility of the semi-Markov modeling) 87 82.67 P
(approach.) 87 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 48
%%Page: "43" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(43) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.1. T) 105 719 T
(riad W) 129.6 719 T
(ith Cold Spar) 161.21 719 T
(es) 221.7 719 T
3 11 Q
-0.22 (A system consisting of a triad with a set of cold spares \050spares that do not fail while inactive\051 will be) 105 700.86 P
0.7 (explored. The number of initial spares is defined by using a constant,) 87 687.86 P
7 F
1.68 (NSI) 402.15 687.86 P
3 F
0.7 (. This definition allows the) 421.95 687.86 P
0.69 (initial number of spares to be changed by altering only one line of the ASSIST input. \050Although only) 87 674.86 P
0.67 (one line changes in the input file, the size of the model generated varies significantly as a function of) 87 661.86 P
1 (this parameter.\051 For simplicity, it is assumed in this section that spares do not fail until they become) 87 648.86 P
0.32 (active. The system replaces failed processors with spares until all spares are depleted. Then the system) 87 635.86 P
(degrades to a simplex.) 87 622.86 T
7 F
(NSI = 3;) 105 603.55 T
(\050* Number of spares initially *\051) 245.43 603.55 T
(LAMBDA = 1E-4;       \050* Failure rate of active processors *\051) 105 590.24 T
(MU = 7.9E-5;) 105 576.93 T
(  \050* Mean time to replace with spare *\051) 231.31 576.93 T
-0.63 (SIGMA = 2.56E-5;     \050* Stan. dev. of time to replace with spare *\051) 105 563.62 P
(MU_DEG = 6.3E-5;     \050* Mean time to degrade to simplex *\051) 105 544.31 T
-0.83 (SIGMA_DEG = 1.74E-5; \050* Stan. dev. of time to degrade to simplex *\051) 105 531 P
(SPACE = \050NW: 0..3,   \050* Number of working processors *\051) 105 511.69 T
(NF: 0..3,) 105 498.38 T
( \050* Number of failed active processors *\051) 238.83 498.38 T
(NS: 0..NSI\051;) 105 485.07 T
(\050* Number of spares *\051) 244.51 485.07 T
(START = \0503,0,NSI\051;) 105 465.76 T
(IF NW > 0                  \050* Processor failure *\051) 105 446.45 T
(   TRANTO \050NW-1,NF+1,NS\051 BY NW*LAMBDA;) 105 433.14 T
(IF \050NF > 0\051 AND \050NS > 0\051   \050* Non-failed spare becomes active *\051) 105 413.83 T
(   TRANTO \050NW+1,NF-1,NS-1\051 BY <MU,SIGMA>;) 105 400.52 T
-0.25 (IF \050NF > 0\051 AND \050NS = 0\051   \050* No more spares, degrade to simplex *\051) 105 381.21 P
(TRANTO \0501,0,0\051 BY) 105 367.9 T
( <MU_DEG,SIGMA_DEG>;) 223.8 367.9 T
(DEATHIF NF >= NW;) 105 348.6 T
3 F
-0.04 (The first statement defines a constant) 105 329.29 P
7 F
-0.1 (NSI) 271.55 329.29 P
3 F
-0.04 (, which represents the number of initial spares. The value) 291.35 329.29 P
(of this constant can be changed to generate models for systems with various numbers of initial spares.) 87 316.29 T
-0.22 (The next five statements define constants that are not used directly by ASSIST, but are passed along) 105 296.98 P
1.34 (verbatim to SURE for computation purposes. The) 87 283.98 P
7 F
3.22 (SPACE) 318.21 283.98 P
3 F
1.34 ( statement defines the domain of the state) 351.21 283.98 P
0.16 (space. For this model, a three-dimensional space is needed. The components of the space are) 87 270.98 P
7 F
0.39 (NW) 500 270.98 P
3 F
0.16 ( \050num-) 513.2 270.98 P
1.01 (ber of working processors in the active configuration\051,) 87 257.98 P
7 F
2.42 (NF) 337.32 257.98 P
3 F
1.01 ( \050number of failed processors in the active) 350.52 257.98 P
2.31 (configuration\051, and) 87 244.98 P
7 F
5.55 (NS) 178.69 244.98 P
3 F
2.31 ( \050number of spares available\051. The initial configuration is defined with the) 191.89 244.98 P
7 F
0.63 (START) 87 231.98 P
3 F
0.26 ( statement) 120 231.98 P
7 F
0.63 (\0503,0,NSI\051) 168.19 231.98 P
3 F
0.26 (, which indicates that) 227.59 231.98 P
7 F
0.63 (NW = 3, NF = 0,) 324.88 231.98 P
3 F
0.26 ( and) 427.03 231.98 P
7 F
0.63 (NS = NSI) 448.94 231.98 P
3 F
0.26 ( initially.) 503 231.98 P
0.09 (The next three statements define the rules that are used to build the model. The first of these statements) 87 218.98 P
(defines processor failure.) 87 205.98 T
-0.01 (As long as working processors remain \050) 105 186.67 P
7 F
-0.04 (NW > 0) 279.66 186.67 P
3 F
-0.01 (\051, the rule adds a transition. The destination state is) 319.18 186.67 P
0.07 (derived from the source state according to the formula  \050) 87 173.67 P
7 F
0.16 (NW-1) 335.73 173.67 P
3 F
0.07 (,) 362.13 173.67 P
7 F
0.16 (NF+1) 367.7 173.67 P
3 F
0.07 (,) 394.1 173.67 P
7 F
0.16 (NS) 399.67 173.67 P
3 F
0.07 (\051. This statement is shorthand) 412.87 173.67 P
1.58 (notation for) 87 160.67 P
7 F
3.8 (NW = NW-1, NF = NF+1, NS = NS) 144.55 160.67 P
3 F
1.58 (. The rate of the resulting transition is) 366.33 160.67 P
7 F
2.41 (NW*LAMBDA) 87 147.67 P
3 F
1 (. For example, if the current state were) 146.4 147.67 P
7 F
2.41 (\0502,1,3\051) 327.33 147.67 P
3 F
1 (, this rule would generate a transition) 373.53 147.67 P
2.17 (to) 87 134.67 P
7 F
5.21 (\0501,2,3\051) 98.31 134.67 P
3 F
2.17 ( with rate) 144.51 134.67 P
7 F
5.21 (2*LAMBDA) 195.31 134.67 P
3 F
2.17 (.  The next rule only applies to states where) 248.11 134.67 P
7 F
5.21 (\050NF) 463.8 134.67 P
5.21 (>) 490.2 134.67 P
5.21 (0\051) 503.4 134.67 P
5.21 (AND) 523.2 134.67 P
2.34 (\050NS) 84 121.67 P
2.34 (>) 110.4 121.67 P
2.34 (0\051) 123.6 121.67 P
3 F
0.97 (.) 136.8 121.67 P
0.97 ( That is, states with a failed processor and with available spares. The destination state is) 142.55 121.67 P
0.26 (derived from the current state by the formula) 87 108.67 P
7 F
0.62 (\050NW+1, NF-1, NS-1\051) 289.45 108.67 P
3 F
0.26 (. That is, the number of work-) 409.48 108.67 P
-0.03 (ing processors) 87 95.67 P
7 F
-0.08 (NW) 152.93 95.67 P
3 F
-0.03 ( is increased by one, the number of faulty processors) 166.13 95.67 P
7 F
-0.08 (NF) 400.12 95.67 P
3 F
-0.03 ( is decremented and the num-) 413.32 95.67 P
0.42 (ber of spares) 87 82.67 P
7 F
1.01 (NS) 147.22 82.67 P
3 F
0.42 ( is decremented. This rule corresponds to the replacement of a faulty processor with a) 160.42 82.67 P
(spare.) 87 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 49
%%Page: "44" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(44) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.16 (The last) 105 718.67 P
7 F
2.78 (TRANTO) 145.2 718.67 P
3 F
1.16 ( rule describes how the system degrades to a simplex. This degradation occurs) 184.8 718.67 P
0.41 (when no spares are available and a processor has failed,  that is,) 87 705.67 P
7 F
0.98 (\050NF > 0\051 AND \050NS = 0\051) 375.49 705.67 P
3 F
0.41 (. The) 519.98 705.67 P
-0.21 (transition is to the state) 87 692.67 P
7 F
-0.51 (\0501,0,0\051) 190.75 692.67 P
3 F
-0.21 (. The transition occurs according to a distribution with mean) 236.95 692.67 P
7 F
-0.51 (MU_DEG) 503.4 692.67 P
3 F
(and standard deviation) 87 679.67 T
7 F
(SIGMA_DEG) 189.34 679.67 T
3 F
(.  This term is given in SURE notation) 248.74 679.67 T
7 F
(<MU_DEG, SIGMA_DEG>) 105 660.55 T
3 F
1.55 (Finally, the conditions defining the death states are given. The formula) 105 641.43 P
7 F
3.71 (NF) 436.4 641.43 P
3.71 (>=) 456.2 641.43 P
3.71 (NW) 476 641.43 P
3 F
1.55 ( defines the) 489.2 641.43 P
-0.05 (states that are death states, that is, whenever the number of faulty processors are greater than or equal to) 87 628.43 P
(the number of  working processors.) 87 615.43 T
0.68 (Note that in this model, the method of counting is different from the model in section 8.2. Rather) 105 596.31 P
0.82 (than counting the number of processors in the configuration and the number of faulty processors \050) 87 583.31 P
7 F
1.98 (NC) 529.8 583.31 P
3 F
1.87 (and) 87 570.31 P
7 F
4.49 (NF) 107.51 570.31 P
3 F
1.87 (\051, the number of working processors and the number of faulty processors \050) 120.71 570.31 P
7 F
4.49 (NW) 469.75 570.31 P
3 F
1.87 ( and) 482.95 570.31 P
7 F
4.49 (NF) 508.08 570.31 P
3 F
1.87 (\051 are) 521.28 570.31 P
0.03 (counted. The number of active processors can be obtained by adding the number of faulty processors to) 87 557.31 P
0.75 (the number of working ones \050NC = NF + NW\051. Thus, these methods are essentially the same and the) 87 544.31 P
-0.12 (choice between the two is merely a matter of preference. In this paper, both methods of counting will be) 87 531.31 P
(used.) 87 518.31 T
( The following session was performed on this model and stored in file) 105 499.2 T
7 F
(tpnfs.ast) 415.72 499.2 T
3 F
(:) 475.12 499.2 T
7 F
($ assist tpnfs) 105 480.08 T
-0.62 (ASSIST VERSION 7.1                      NASA Langley Research Center) 105 466.96 P
(PARSING TIME = 0.17 sec.) 105 453.84 T
(generating SURE model file...) 105 440.73 T
(RULE GENERATION TIME = 0.01 sec.) 105 427.61 T
(NUMBER OF STATES IN MODEL = 10) 105 414.49 T
(NUMBER OF TRANSITIONS IN MODEL = 13) 105 401.37 T
(5 DEATH STATES AGGREGATED INTO STATE 1) 105 388.26 T
($ sure) 105 369.14 T
( SURE V7.9.8 NASA Langley Research Center) 105 350.02 T
( 1? read tpnfs) 105 330.9 T
( 2: NSI = 3;) 105 311.79 T
( 3: LAMBDA = 1E-4;) 105 298.67 T
( 4: MU = 7.9E-5;) 105 285.55 T
( 5: SIGMA = 2.56E-5;) 105 272.43 T
( 6: MU_DEG = 6.3E-5;) 105 259.31 T
( 7: SIGMA_DEG = 1.74E-5;) 105 246.2 T
( 8:) 105 227.08 T
( 9:) 105 213.96 T
(10:     2\050* 3,0,3 *\051,     3\050* 2,1,3 *\051       = 3*LAMBDA;) 105 200.84 T
(11:     3\050* 2,1,3 *\051,     4\050* 3,0,2 *\051       = <MU,SIGMA>;) 105 187.73 T
(12:     3\050* 2,1,3 *\051,     1\050* 1,2,3 DEATH *\051 = 2*LAMBDA;) 105 174.61 T
(13:     4\050* 3,0,2 *\051,     5\050* 2,1,2 *\051       = 3*LAMBDA;) 105 161.49 T
(14:     5\050* 2,1,2 *\051,     6\050* 3,0,1 *\051       = <MU,SIGMA>;) 105 148.37 T
(15:     5\050* 2,1,2 *\051,     1\050* 1,2,2 DEATH *\051 = 2*LAMBDA;) 105 135.26 T
(16:     6\050* 3,0,1 *\051,     7\050* 2,1,1 *\051       = 3*LAMBDA;) 105 122.14 T
(17:     7\050* 2,1,1 *\051,     8\050* 3,0,0 *\051       = <MU,SIGMA>;) 105 109.02 T
(18:     7\050* 2,1,1 *\051,     1\050* 1,2,1 DEATH *\051 = 2*LAMBDA;) 105 95.9 T
(19:     8\050* 3,0,0 *\051,     9\050* 2,1,0 *\051       = 3*LAMBDA;) 105 82.78 T
-0.27 (20:     9\050* 2,1,0 *\051,) 105 69.67 P
-0.27 (10\050* 1,0,0 *\051       = <MU_DEG,SIGMA_DEG>;) 268.81 69.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 50
%%Page: "45" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(45) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(21:     9\050* 2,1,0 *\051,     1\050* 1,2,0 DEATH *\051 = 2*LAMBDA;) 105 718.67 T
(22:    10\050* 1,0,0 *\051,     1\050* 0,1,0 DEATH *\051 = 1*LAMBDA;) 105 705.04 T
(23:) 105 691.42 T
(24: \050* NUMBER OF STATES IN MODEL = 10 *\051) 105 677.79 T
(25: \050* NUMBER OF TRANSITIONS IN MODEL = 13 *\051) 105 664.17 T
(26: \050* 5 DEATH STATES AGGREGATED INTO STATE 1 *\051) 105 650.54 T
(      0.02 SECS. TO READ MODEL FILE) 105 630.92 T
(27? run) 105 611.29 T
(MODEL FILE = tpnfs.mod              SURE V7.9.8 11 Apr 94 10:26:41) 105 591.67 T
(             LOWERBOUND  UPPERBOUND  COMMENTS               RUN #1) 105 552.42 T
(----------- ----------- ----------- ------------------------------) 105 538.79 T
(            4.71208e-11 4.74718e-11) 105 525.17 T
(5 PATH\050S\051 TO DEATH STATES) 105 505.54 T
(0.000 SECS. CPU TIME UTILIZED) 105 491.92 T
(28? exit) 105 478.29 T
3 F
-0.07 ( The value of) 105 458.67 P
7 F
-0.17 (NSI) 165.8 458.67 P
3 F
-0.07 ( can be changed to model systems with different numbers of spare processors ini-) 185.6 458.67 P
0.86 (tially. As shown in table 1, changing this single value can have a significant effect on the size of the) 87 445.67 P
(model generated.) 87 432.67 T
4 10.5 Q
(9.2. T) 105 268.38 T
(riad W) 129.6 268.38 T
(ith Instantaneous Detection of W) 161.21 268.38 T
(arm Spar) 308.21 268.38 T
(e Failur) 350.89 268.38 T
(e) 385.99 268.38 T
3 11 Q
-0.04 ( This section builds on the model in section 9.1 by allowing the spare to fail. However, the model is) 105 249.92 P
0.93 (still simplistic in that it assumes that the system always detects a failed spare. Thus, a failed spare is) 87 236.92 P
(never brought into the active configuration:) 87 223.92 T
7 F
(NSI = 3;) 105 204.29 T
(\050* number of spares initially *\051) 243 204.29 T
(LAMBDA = 1E-4;) 105 184.67 T
(\050* failure rate of active processors *\051) 243 184.67 T
(GAMMA = 1E-6;) 105 171.04 T
(\050* failure rate of spares *\051) 243 171.04 T
(MU = 7.9E-5;) 105 157.42 T
(\050* mean time to replace with spare *\051) 243 157.42 T
(SIGMA = 2.56E-5;) 105 143.79 T
-0.4 (\050* stan. dev. of time to replace with spare *\051) 243 143.79 P
(MU_DEG = 6.3E-5;) 105 130.17 T
(\050* mean time to degrade to simplex *\051) 243 130.17 T
(SIGMA_DEG = 1.74E-5;) 105 116.54 T
-0.4 (\050* stan. dev. of time to degrade to simplex *\051) 243 116.54 P
(SPACE = \050NW: 0..3,) 105 96.92 T
(\050* number of working processors *\051) 243 96.92 T
(         NF: 0..3,) 105 83.29 T
(\050* number of failed active processors *\051) 243 83.29 T
(         NS: 0..NSI\051;) 105 69.67 T
(\050* number of spares *\051) 243.6 69.67 T
3 9 Q
(Table 1.  Model Sizes for Triad of Processors With Spares) 209.89 399 T
(Number of spares) 158.84 376 T
(Number of states) 281.48 376 T
(Number of transitions) 396.89 376 T
(0) 192.72 364 T
(6) 314.95 364 T
(4) 435.5 364 T
(1) 192.72 352 T
(9) 314.95 352 T
(7) 435.5 352 T
(2) 192.72 340 T
(12) 310.14 340 T
(10) 430.7 340 T
(3) 192.72 328 T
(15) 310.14 328 T
(13) 430.7 328 T
(10) 187.92 316 T
(36) 310.14 316 T
(34) 430.7 316 T
(100) 183.72 304 T
(306) 305.95 304 T
(304) 426.5 304 T
129.72 383.75 129.72 300.25 2 L
V
0.5 H
0 Z
N
251.95 384.25 251.95 299.75 2 L
V
N
372.5 384.25 372.5 299.75 2 L
V
N
500.28 383.75 500.28 300.25 2 L
V
N
129.47 384 500.53 384 2 L
V
N
129.47 372 500.53 372 2 L
V
N
129.47 300 500.53 300 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 51
%%Page: "46" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(46) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(START = \0503,0,NSI\051;) 105 718.67 T
(IF NW > 0                \050* a processor can fail *\051) 105 699.34 T
(   TRANTO \050NW-1,NF+1,NS\051 BY NW*LAMBDA;) 105 686.01 T
(IF \050NF > 0\051 AND \050NS > 0\051 \050* a spare becomes active *\051) 105 666.68 T
(   TRANTO \050NW+1,NF-1,NS-1\051 BY <MU,SIGMA>;) 105 653.35 T
(IF \050NF > 0\051 AND \050NS = 0\051 \050* no more spares, degrade to simplex *\051) 105 634.02 T
(   TRANTO \0501,0,0\051 BY <MU_DEG,SIGMA_DEG>;) 105 620.7 T
(IF NS > 0                \050* a spare fails and is detected *\051) 105 601.37 T
(TRANTO \050NW,NF,NS-1\051 BY NS*GAMMA;) 124.8 588.04 T
(DEATHIF NF >= NW;) 105 568.71 T
3 F
0.85 (Because failed spares can never be brought into the active configuration, tracking of these spares) 105 549.38 P
0.78 (once they fail is unnecessary. Thus, no state-space variable was defined to track the number of failed) 87 536.38 P
0.12 (spares and the transition depicting a spare failing simply decrements the number of spare processors by) 87 523.38 P
(one.) 87 510.38 T
4 10.5 Q
(9.3. Degradable T) 105 485.39 T
(riad W) 184.14 485.39 T
(ith Nondetectable Spar) 215.74 485.39 T
(e Failur) 318.8 485.39 T
(e) 353.9 485.39 T
3 11 Q
-0.12 (In the previous models, it was assumed that spares do not fail while inactive or the spare failure was) 105 467.22 P
0.65 (assumed to be immediately detected. These assumptions are clearly nonconservative. In this example,) 87 454.22 P
0.73 (the other extreme will be investigated) 87 441.22 P
7 10.5 Q
1.68 (\321) 256.56 441.22 P
3 11 Q
0.73 (not only can the spares fail, but the fault remains undetectable) 262.86 441.22 P
1.52 (until brought into the active configuration. The model in this example utilizes a failure rate for the) 87 428.22 P
(spares  that is different from the rate for  active  processors.) 87 415.22 T
7 F
(NSI = 3;) 87 395.89 T
(\050* number of spares initially *\051) 231 395.89 T
(LAMBDA = 1E-4;) 87 382.57 T
(\050* failure rate of active processors *\051) 231 382.57 T
(GAMMA = 1E-6;) 87 369.24 T
(\050* failure rate of spares *\051) 231 369.24 T
(MU = 7.9E-5;) 87 355.91 T
(\050* mean time to replace with spare *\051) 231 355.91 T
(SIGMA = 2.56E-5;) 87 342.58 T
(\050* stan. dev. of time to replace with spare *\051) 231 342.58 T
(MU_DEG = 6.3E-5;) 87 323.25 T
(\050* mean time to degrade to simplex *\051) 231 323.25 T
(SIGMA_DEG = 1.74E-5;) 87 309.92 T
(\050* stan. dev. of time to degrade to simplex *\051) 231 309.92 T
(SPACE = \050NW: 0..3,) 87 296.6 T
(\050* number of working processors *\051) 231 296.6 T
(         NF: 0..3,) 87 283.27 T
(\050* number of failed active processors *\051) 231 283.27 T
(        NWS: 0..NSI,) 87 269.94 T
(\050* number of working spares *\051) 231 269.94 T
(        NFS: 0..NSI\051;) 87 256.61 T
(\050* number of failed spares *\051) 231 256.61 T
(START = \0503,0,NSI,0\051;) 87 238.28 T
(IMPLICIT) 87 224.95 T
(PRG[NWS,NFS]=) 142.54 224.95 T
(NWS/\050NWS+NFS\051;\050*) 230.16 224.95 T
(prob.) 337.59 224.95 T
(of) 372.42 224.95 T
(switching) 387.44 224.95 T
(in) 447.76 224.95 T
(good) 462.78 224.95 T
(spare) 491.92 224.95 T
(*\051) 529.48 224.95 T
(   \050* processor failure *\051) 87 211.62 T
(IF NW > 0 TRANTO \050NW-1,NF+1,NWS,NFS\051 BY NW*LAMBDA;) 87 198.3 T
(IF \050NF > 0\051 AND \050NWS+NFS > 0\051 THEN \050* reconfigure using a spare *\051) 87 179.97 T
(      \050* a good spare becomes active *\051) 87 166.64 T
(   IF NWS > 0 TRANTO \050NW+1,NF-1,NWS-1,NFS\051 BY <MU,SIGMA,PRG>;) 87 148.31 T
(      \050* a failed spare becomes active *\051) 87 134.98 T
(   IF NFS > 0 TRANTO \050NW,NF,NWS,NFS-1\051 BY <MU,SIGMA,1-PRG>;) 87 121.65 T
(ENDIF;) 87 108.32 T
-0.4 (IF \050NF > 0\051 AND \050NWS+NFS = 0\051 \050* no more spares, degrade to simplex *\051) 87 90 P
(   TRANTO \0501,0,0,0\051 BY <MU_DEG,SIGMA_DEG>;) 87 76.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 52
%%Page: "47" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(47) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.5 Q
(IF NWS > 0                       \050* a spare fails *\051) 87 719.67 T
(   TRANTO \050NW,NF,NWS-1,NFS+1\051 BY NWS*GAMMA;) 87 707.6 T
(DEATHIF NF >= NW;) 87 691.54 T
3 11 Q
0.17 ( When reconfiguration occurs, the probability of switching in a good spare instead of a failed spare) 105 674.47 P
0.98 (is equal to the current proportion of good spares to failed spares in the system. The implicit variable) 87 661.47 P
7 F
2.45 (PRG) 87 648.47 P
3 F
1.02 ( is used to calculate this probability. When all spares are good, the probability of switching in a) 106.8 648.47 P
0.64 (good spare is 1 and the probability of switching in a bad spare is 0. Conversely, when all spares have) 87 635.47 P
0.46 (failed, the probability of switching in a good spare is 0 and the probability of switching in a bad spare) 87 622.47 P
0.09 (is) 87 609.47 P
0.09 (1. The tests) 97.09 609.47 P
7 F
0.23 (NWS) 150.53 609.47 P
0.23 (>) 176.93 609.47 P
0.23 (0) 190.13 609.47 P
3 F
0.09 ( and) 196.73 609.47 P
7 F
0.23 (NFS) 218.31 609.47 P
0.23 (>) 244.71 609.47 P
0.23 (0) 257.91 609.47 P
3 F
0.09 ( check for these two cases and prevent the generation of a tran-) 264.51 609.47 P
(sition when it is inappropriate.) 87 596.47 T
4 10.5 Q
(9.4. Degradable T) 105 571.24 T
(riad W) 184.14 571.24 T
(ith Partial Detection of Spar) 215.74 571.24 T
(e Failur) 342.12 571.24 T
(e) 377.22 571.24 T
3 11 Q
-0.17 (If the system is designed with off-line diagnostics for the spares, this must be included in the model.) 105 552.84 P
0.76 (Two aspects of an off-line diagnostic must be considered. First, a diagnostic usually cannot detect all) 87 539.84 P
0.05 (possible faults and  second, a diagnostic requires time to execute. The first aspect is sometimes referred) 87 526.84 P
0.62 (to as the coverage of the diagnostic. The term \322coverage\323 will be avoided because it is used in  many) 87 513.84 P
1.13 (different ways, and thus, is confusing. Instead, the first aspect will be termed \322fraction of detectable) 87 500.84 P
0.19 (faults\323 and will be assigned an identifier) 87 487.84 P
7 F
0.44 (K) 268.85 487.84 P
3 F
0.19 (.  The state space must be expanded to  track whether a fault) 275.45 487.84 P
(in a spare is detectable:) 87 474.84 T
7 9.5 Q
(SPACE = \050NW: 0..3,         \050* number of working processors *\051) 87 456.28 T
(         NF: 0..3,         \050* number of failed active processors *\051) 87 444.21 T
(         NWS: 0..NSI,      \050* number of working spares *\051) 87 432.15 T
(         NDFS: 0..NSI,     \050* number of detectable failed spares *\051) 87 420.08 T
(         NUFS: 0..NSI\051;    \050* number of undetectable failed spares *\051) 87 408.02 T
3 11 Q
1.15 (The second aspect requires that a rule be added to generate transitions that decrement the) 105 390.95 P
7 F
2.76 (NDFS) 516.6 390.95 P
3 F
(state-space variable with a fast general recovery distribution:) 87 377.95 T
7 9.5 Q
(IF NDFS > 0 \050* \322detectable\323 spare-failure is detected *\051) 87 359.39 T
(   TRANTO \050NW,NF,NWS,NDFS-1,NUFS\051 BY <MU_SPD,SIGMA_SPD>;) 87 347.32 T
3 11 Q
(No  transition is generated for) 87 330.26 T
7 F
(NUFS) 221.42 330.26 T
3 F
( faults.) 247.82 330.26 T
0.42 (The active processor failure) 105 311.7 P
7 F
1 (TRANTO) 231.9 311.7 P
3 F
0.42 ( rule is the same as in the example in section 9.3, except that) 271.5 311.7 P
-0.03 (the state space is larger. The spare failure) 87 298.7 P
7 F
-0.08 (TRANTO) 271.54 298.7 P
3 F
-0.03 ( rule must be altered to include whether the failure is) 311.14 298.7 P
(detectable:) 87 285.7 T
7 9.5 Q
(IF NWS > 0 THEN                \050* a spare fails *\051) 87 267.13 T
(   TRANTO \050NW,NF,NWS-1,NDFS+1,NUFS\051) 87 255.07 T
(BY) 292.02 255.07 T
(K*NS*GAMMA;) 308.94 255.07 T
(\050*) 375.58 255.07 T
(detectable) 389.35 255.07 T
(fault) 450.29 255.07 T
(*\051) 481.15 255.07 T
(   TRANTO \050NW,NF,NWS-1,NDFS,NUFS+1\051 BY \0501-K\051*NS*GAMMA; \050* undetectable fault *\051) 87 243 T
(ENDIF;) 87 230.93 T
3 11 Q
(Note that the rates are multiplied by) 87 212.87 T
7 F
(K) 248.01 212.87 T
3 F
( and) 254.61 212.87 T
7 F
(\0501-K\051) 275.99 212.87 T
3 F
(.) 308.99 212.87 T
0.38 (The reconfiguration rule is now more complicated than in the example in section 9.3. Three possi-) 105 194.31 P
(bilities exist:) 87 181.31 T
(1.) 105 161.74 T
(The faulty active processor is replaced with a working spare.) 117 161.74 T
(2.) 105 142.18 T
(The faulty processor is replaced with a spare containing a detectable fault.) 117 142.18 T
(3.) 105 122.61 T
(The faulty processor is replaced with a spare containing an undetectable fault.) 117 122.61 T
(The probability of each case is) 105 103.05 T
7 F
(PRW) 242.47 103.05 T
3 F
(,) 262.27 103.05 T
7 F
(PRD) 267.77 103.05 T
3 F
(, and) 287.57 103.05 T
7 F
(PRU) 311.7 103.05 T
3 F
(, respectively, and  is defined as follows:) 331.5 103.05 T
7 9.5 Q
(IMPLICIT) 87 84.48 T
(PRW[NWS,NDFS,NUFS]) 138.3 84.48 T
(=) 246.6 84.48 T
(NWS/\050NWS+NDFS+NUFS\051;) 258 84.48 T
(\050*) 377.7 84.48 T
(working) 394.8 84.48 T
(spare used) 440.4 84.48 T
(*\051) 503.1 84.48 T
-5.7 (IMPLICIT) 87 72.42 P
-5.7 (PRD[NWS,NDFS,NUFS]) 138.3 72.42 P
-5.7 (=) 246.6 72.42 P
-5.7 (NDFS/\050NWS+NDFS+NUFS\051;\050*) 258 72.42 P
-5.7 (spare) 394.8 72.42 P
-5.7 (w/det.) 429 72.42 P
-5.7 (fault) 468.9 72.42 P
-5.7 (used) 503.1 72.42 P
-5.7 (*\051) 531.6 72.42 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 53
%%Page: "48" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(48) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.5 Q
(IMPLICIT) 87 719.67 T
(PRU[NWS,NDFS,NUFS]) 138.3 719.67 T
(=) 246.6 719.67 T
(NUFS/\050NWS+NDFS+NUFS\051;) 258 719.67 T
(\050*) 105 708.17 T
(spare) 122.1 708.17 T
(w/ undet.) 156.3 708.17 T
(fault) 213.3 708.17 T
(used) 247.5 708.17 T
(*\051) 276 708.17 T
3 11 Q
(The reconfiguration rule is) 105 689.58 T
7 9.5 Q
(IF \050NF > 0\051 AND \050NWS+NDFS+NUFS > 0\051 THEN \050* a spare becomes active *\051) 87 671.49 T
(   IF NWS > 0 TRANTO \050NW+1,NF-1,NWS-1,NDFS,NUFS\051 BY <MU,SIGMA,PRW>;) 87 659.9 T
(   IF NDFS > 0 TRANTO \050NW,NF,NWS,NDFS-1,NUFS\051 BY <MU,SIGMA,PRD>;) 87 648.31 T
(   IF NUFS > 0 TRANTO \050NW,NF,NWS,NDFS,NUFS-1\051 BY <MU,SIGMA,PRU>;) 87 636.72 T
(ENDIF;) 87 625.13 T
3 11 Q
(The complete model is) 105 608.54 T
7 9.5 Q
(NSI = 3;                \050* number of spares initially *\051) 87 590.46 T
(LAMBDA = 1E-4;          \050* failure rate of active processors *\051) 87 578.87 T
(GAMMA = 1E-6;           \050* failure rate of spares *\051) 87 567.28 T
(MU = 7.9E-5;            \050* mean time to replace with spare *\051) 87 555.69 T
(SIGMA = 2.56E-5;        \050* stan. dev. of time to replace with spare *\051) 87 544.1 T
(MU_DEG = 6.3E-5;        \050* mean time to degrade to simplex *\051) 87 527.51 T
(SIGMA_DEG = 1.74E-5;    \050* stan. dev. of time to degrade to simplex *\051) 87 515.92 T
(K = 0.9;                \050* fraction of faults that the) 87 499.33 T
(                           spare off-line diagnostic can detect *\051) 87 487.74 T
(MU_SPD = 2.6E-3;        \050* mean time to diagnose a failed spare *\051) 87 471.16 T
(SIGMA_SPD = 1.2E-3;     \050* standard deviation of time to diagnose *\051) 87 459.57 T
(SPACE = \050NW: 0..3,      \050* number of working processors *\051) 87 442.98 T
(   NF: 0..3,            \050* number of failed active processors *\051) 87 431.39 T
(   NWS: 0..NSI,         \050* number of working spares *\051) 87 419.8 T
(   NDFS: 0..NSI,        \050* number of detectable failed spares *\051) 87 408.21 T
(   NUFS: 0..NSI\051;       \050* number of undetectable failed spares *\051) 87 396.62 T
(IMPLICIT PRW[NWS,NDFS,NUFS] = NWS/\050NWS+NDFS+NUFS\051; \050* working spare is used *\051) 87 380.03 T
(IMPLICIT PRD[NWS,NDFS,NUFS] = NDFS/\050NWS+NDFS+NUFS\051; \050* spare w/ det. f. used *\051) 87 368.45 T
(IMPLICIT PRU[NWS,NDFS,NUFS] = NUFS/\050NWS+NDFS+NUFS\051; \050* spare w/ undet f. used *\051) 87 356.86 T
(START = \0503,0,NSI,0,0\051;) 87 340.27 T
(IF NW > 0               \050* a processor can fail *\051) 87 323.68 T
(   TRANTO \050NW-1,NF+1,NWS,NDFS,NUFS\051 BY NW*LAMBDA;) 87 312.09 T
(IF NWS > 0 THEN           \050* a spare fails *\051) 87 295.5 T
(   TRANTO \050NW,NF,NWS-1,NDFS+1,NUFS\051 BY K*NWS*GAMMA;     \050* detectable fault *\051) 87 283.91 T
-0.52 (   TRANTO \050NW,NF,NWS-1,NDFS,NUFS+1\051 BY \0501-K\051*NWS*GAMMA; \050* undetectable fault *\051) 87 272.32 P
(ENDIF;) 87 260.73 T
(IF \050NF > 0\051 AND \050NWS+NDFS+NUFS > 0\051 THEN \050* a spare becomes active *\051) 87 244.15 T
(   IF NWS > 0 TRANTO \050NW+1,NF-1,NWS-1,NDFS,NUFS\051 BY <MU,SIGMA,PRW>;) 87 232.56 T
(   IF NDFS > 0 TRANTO \050NW,NF,NWS,NDFS-1,NUFS\051 BY <MU,SIGMA,PRD>;) 87 220.97 T
(   IF NUFS > 0 TRANTO \050NW,NF,NWS,NDFS,NUFS-1\051 BY <MU,SIGMA,PRU>;) 87 209.38 T
(ENDIF;) 87 197.79 T
(IF \050NF > 0\051 AND \050NWS+NDFS+NUFS = 0\051 \050* no more spares, degrade to simplex *\051) 87 181.2 T
(   TRANTO \0501,0,0,0,0\051 BY <MU_DEG,SIGMA_DEG>;) 87 169.61 T
(IF NDFS > 0 \050* \322detectable\323 spare-failure is detected *\051) 87 153.02 T
(   TRANTO \050NW,NF,NWS,NDFS-1,NUFS\051 BY <MU_SPD,SIGMA_SPD>;) 87 141.43 T
(DEATHIF NF >= NW;) 87 124.84 T
4 10.5 Q
(9.5. Byzantine Faults) 105 100.59 T
3 11 Q
1.45 (In this section, the concept of Byzantine faults and Byzantine-resilient algorithms will be intro-) 105 82.67 P
0.87 (duced \050refs. 20 and 21\051. Byzantine faults arise from the need to distribute single-source data, such as) 87 69.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 54
%%Page: "49" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(49) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.23 (sensor data, to the replicated computational sites. Data values from sensors are unreplicated. Although,) 87 718.67 P
0.22 (redundant sensors may exist, they do not produce exactly the same result. Thus, if each processor were) 87 705.67 P
0.16 (connected to one of the redundant sensors, the processors would get different results. This difference is) 87 692.67 P
-0.17 (unacceptable in a system that uses exact-match voting algorithms for fault detection. For example, if the) 87 679.67 P
-0.03 (system uses voting for fault detection as well as fault masking, Byzantine faults can cause the system to) 87 666.67 P
(reconfigure  a working processor.) 87 653.67 T
2.46 (Furthermore, the problem is not solved by having each processor read all redundant sensors.) 105 632.7 P
-0.2 (Because the redundant processors run off of different clocks,  the processors would access the sensors at) 87 619.7 P
0.12 (slightly different times and receive different results. Consequently, a signal-processing algorithm is run) 87 606.7 P
-0.16 (on each processor to derive a trustworthy value from the set of redundant sensors. This algorithm neces-) 87 593.7 P
0.3 (sitates that each sensor be distributed to all redundant processing sites in a consistent manner. Suppose) 87 580.7 P
0.5 (the sensor value is read and stored. If a failure in the transmission medium between this value and the) 87 567.7 P
(redundant sites occurs, different values may be received by the good processors.) 87 554.7 T
-0.02 (  For each processing site to be guaranteed to receive the same set of raw values, special Byzantine-) 105 533.73 P
0.95 (resilient algorithms must be used to distribute the single-source value. The algorithm depends funda-) 87 520.73 P
1.43 (mentally upon the availability of four separate fault-isolation regions. If processors are used for the) 87 507.73 P
-0.14 (rebroadcasting, then a minimum of four processors must be used. Consequently, a triplex system cannot) 87 494.73 P
0.25 (be Byzantine resilient without the addition of special additional hardware. The model illustrated in fig-) 87 481.73 P
-0.14 (ure 36  represents the effect of a Byzantine fault on a triplex system with one spare that does not contain) 87 468.73 P
(extra hardware.) 87 455.73 T
-0.24 (This model is the same as the traditional triplex model except that it contains two extra transitions\321) 105 219.54 P
0.06 (from state \0502\051 to state \0505\051 and from state \0505\051 to state \0508\051. These transitions represent the situations where) 87 206.54 P
0.09 (a Byzantine fault has confused the operating system into reconfiguring the wrong processor. In the first) 87 193.54 P
0.33 (case, a good processor, not the faulty one, has been replaced by the spare.  In the second case, the sys-) 87 180.54 P
0.38 (tem incorrectly diagnoses the faulty processor and degrades to a faulty simplex. The competing transi-) 87 167.54 P
(tions at state \0502\051 would be) 87 154.54 T
7 F
(2,3 = 2*LAMBDA;) 105 133.57 T
(2,4 = <MU_F,STD_F,1-P_W>;) 105 118.6 T
(2,5 = <MU_W,STD_W,P_W>;) 105 103.64 T
3 F
-0.17 (where) 87 82.67 P
7 F
-0.4 (P_W) 116.46 82.67 P
3 F
-0.17 ( is the probability that the system incorrectly removes a good processor. The competing tran-) 136.26 82.67 P
(sitions at state \0505\051) 87 69.67 T
3 9 Q
(Figure 36.  Simple triplex system with one spare subject to Byzantine faults.) 177.51 255.84 T
87 261.84 543 432.06 C
194 272.84 436 432.06 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 180 357 410 517 230 160 200 273.29 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig36.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig36.ps)
%%CreationDate: (4/21/95) (1:39 PM)
%%BoundingBox: 180 357 410 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 192 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
192 493.8076 m
197.0767 493.8076 201.1924 497.9233 201.1924 503 c
201.1924 508.0767 197.0767 512.1924 192 512.1924 c
186.9233 512.1924 182.8076 508.0767 182.8076 503 c
182.8076 497.9233 186.9233 493.8076 192 493.8076 c
s
192 503 m
S
U
201 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 223.75 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
260.25 493.75 m
260.25 448.875 l
S
u
0 O
0 g
1 w
260.25 445.6162 m
258.7065 452.1675 l
260.25 450.7612 L
261.7935 452.1675 l
260.25 445.6162 L
f
U
0 To
1 0 0 1 270.25 467.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
267.5407 496.4593 m
319.3998 444.6002 l
S
u
0 O
0 g
1 w
321.7041 442.2959 m
315.9802 445.8369 l
318.066 445.934 L
318.1631 448.0198 l
321.7041 442.2959 L
f
U
0 R
0 G
0.75 w
269.75 503 m
316.75 503 l
S
u
329.25 493.8076 m
334.3267 493.8076 338.4424 497.9233 338.4424 503 c
338.4424 508.0767 334.3267 512.1924 329.25 512.1924 c
324.1733 512.1924 320.0576 508.0767 320.0576 503 c
320.0576 497.9233 324.1733 493.8076 329.25 493.8076 c
s
329.25 503 m
S
U
0 To
1 0 0 1 329.25 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(3) Tx 
(\r) TX 
TO
u
320.0088 503 m
313.4575 501.4565 l
314.8638 503 L
313.4575 504.5435 l
320.0088 503 L
f
U
0 To
1 0 0 1 293 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
260.25 426.8076 m
265.3267 426.8076 269.4424 430.9233 269.4424 436 c
269.4424 441.0767 265.3267 445.1924 260.25 445.1924 c
255.1733 445.1924 251.0576 441.0767 251.0576 436 c
251.0576 430.9233 255.1733 426.8076 260.25 426.8076 c
s
260.25 436 m
S
U
269.25 436 m
316.25 436 l
S
u
328.75 426.8076 m
333.8267 426.8076 337.9424 430.9233 337.9424 436 c
337.9424 441.0767 333.8267 445.1924 328.75 445.1924 c
323.6733 445.1924 319.5576 441.0767 319.5576 436 c
319.5576 430.9233 323.6733 426.8076 328.75 426.8076 c
s
328.75 436 m
S
U
0 To
1 0 0 1 328.75 432.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 292 440 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
319.5088 436 m
312.9575 434.4565 l
314.3638 436 L
312.9575 437.5435 l
319.5088 436 L
f
U
0 R
0 G
0.75 w
328.5 426.75 m
328.5 381.875 l
S
u
0 O
0 g
1 w
328.5 378.6162 m
326.9565 385.1675 l
328.5 383.7612 L
330.0435 385.1675 l
328.5 378.6162 L
f
U
0 To
1 0 0 1 338.5 400.25 0 Tp
TP
-6.9939 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
335.7907 429.4593 m
387.6498 377.6002 l
S
u
0 O
0 g
1 w
390.6416 374.6084 m
384.9177 378.1494 l
387.0035 378.2465 L
387.1006 380.3323 l
390.6416 374.6084 L
f
U
0 R
0 G
0.75 w
338 436 m
385 436 l
S
u
397.5 426.8076 m
402.5767 426.8076 406.6924 430.9233 406.6924 436 c
406.6924 441.0767 402.5767 445.1924 397.5 445.1924 c
392.4233 445.1924 388.3076 441.0767 388.3076 436 c
388.3076 430.9233 392.4233 426.8076 397.5 426.8076 c
s
397.5 436 m
S
U
0 To
1 0 0 1 397.5 432.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(6) Tx 
(\r) TX 
TO
u
388.2588 436 m
381.7075 434.4565 l
383.1138 436 L
381.7075 437.5435 l
388.2588 436 L
f
U
0 To
1 0 0 1 361.25 440 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
328.75 359.8076 m
333.8267 359.8076 337.9424 363.9233 337.9424 369 c
337.9424 374.0767 333.8267 378.1924 328.75 378.1924 c
323.6733 378.1924 319.5576 374.0767 319.5576 369 c
319.5576 363.9233 323.6733 359.8076 328.75 359.8076 c
s
328.75 369 m
S
U
0 To
1 0 0 1 328.75 365.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
338 369 m
385 369 l
S
u
397.5 359.8076 m
402.5767 359.8076 406.6924 363.9233 406.6924 369 c
406.6924 374.0767 402.5767 378.1924 397.5 378.1924 c
392.4233 378.1924 388.3076 374.0767 388.3076 369 c
388.3076 363.9233 392.4233 359.8076 397.5 359.8076 c
s
397.5 369 m
S
U
0 To
1 0 0 1 397.5 365.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(8) Tx 
(\r) TX 
TO
u
388.2588 369 m
381.7075 367.4565 l
383.1138 369 L
381.7075 370.5435 l
388.2588 369 L
f
U
0 To
1 0 0 1 361.25 373 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 260.25 432.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 294.75 480 0 Tp
TP
-7.9925 0 Td
0 Tr
/_Times-Italic 9 Tf
(W) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
0 To
1 0 0 1 363 413 0 Tp
TP
-7.9925 0 Td
0 Tr
/_Times-Italic 9 Tf
(W) Tx 
/_Times-Roman 9 Tf
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 261.84 543 432.06 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 55
%%Page: "50" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(50) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(5,6 = 2*LAMBDA;) 105 718.67 T
(5,7 = <MU_F,STD_F,1-P_W>;) 105 704.7 T
(5,8 = <MU_W,STD_W,P_W>;) 105 690.74 T
3 F
0.78 (The parameter) 87 355.11 P
7 F
1.87 (P_W) 155.14 355.11 P
3 F
0.78 ( is the most critical parameter in this model. This can be seen in figure 37, which) 174.94 355.11 P
(shows a plot of the results of executing SURE on the full model:) 87 342.11 T
7 F
(LAMBDA = 1E-4;) 105 323.14 T
(MU_F = 1E-4; STD_F = 1E-4;) 105 309.18 T
(MU_W = 1E-4; STD_W = 1E-4;) 105 295.22 T
(P_W = 0 TO 1 BY 0.1;) 105 281.26 T
(1,2 = 3*LAMBDA;) 105 267.29 T
(2,3 = 2*LAMBDA;) 105 253.33 T
(2,4 = <MU_F,STD_F,1-P_W>;) 105 239.37 T
(2,5 = <MU_W,STD_W,P_W>;) 105 225.41 T
(4,5 = 3*LAMBDA;) 105 211.44 T
(5,6 = 2*LAMBDA;) 105 197.48 T
(5,7 = <MU_F,STD_F,1-P_W>;) 105 183.52 T
(5,8 = <MU_W,STD_W,P_W>;) 105 169.55 T
(7,8 = LAMBDA;) 105 155.59 T
(TIME = 10;) 105 141.63 T
3 F
0.73 (Unfortunately, very little experimental data are available to aid in the estimation of) 105 121.67 P
7 F
1.75 (P_W) 482.32 121.67 P
3 F
0.73 (. For this) 502.12 121.67 P
-0.22 (reason, many conservative system designers have elected to add the additional hardware and software to) 87 108.67 P
2.55 (make the architecture Byzantine resilient, and thus, eliminate this failure mode from the system.) 87 95.67 P
1.39 (However, the failure of any additional hardware must be modeled. Alternatively, the system can be) 87 82.67 P
(designed in a manner that enables the calculation of the fraction) 87 69.67 T
7 F
(P_W) 370.8 69.67 T
3 F
( \050ref. 22\051.) 390.6 69.67 T
3 9 Q
(Figure 37.  Failure probability as function of) 224.41 390.4 T
7 F
(P_W) 387.14 390.4 T
3 F
(.) 403.34 390.4 T
87 396.4 543 663.08 C
123 407.4 507 663.08 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 125 281 474 538 349 257 130 406.74 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig37.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig37.ps)
%%CreationDate: (7/27/95) (8:32 AM)
%%BoundingBox: 125 281 474 538
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
176.4679 527.7285 m
172.8679 527.7285 l
172.8679 310.8523 l
459.1694 310.8523 l
459.1694 313.8523 l
S
230.3688 310.8523 m
230.3688 313.8523 l
S
176.4679 435.5529 m
172.8679 435.5529 l
S
0 To
0.6 0 0 0.6 170.4678 525.9034 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\62) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 170.4678 433.3028 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 170.4678 308.9023 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\3209) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 172.5679 300.0522 0 Tp
TP
-3.75 0 Td
0 Tr
0 Ts
1 Ta
(0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 230.2188 300.0522 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.2) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 459.0194 300.0522 0 Tp
TP
-9.3749 0 Td
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 315.3187 287.6521 0 Tp
TP
-10.8269 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
(P) Tx 
-6.6668 Ts
(W) Tx 
(\r) TX 
TO
0 To
0.6 0 0 0.6 138.0676 417.3529 0 Tp
TP
-6.6649 0 Td
0 Tr
0 Ts
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.4679 496.4785 m
172.8679 496.4785 l
S
0 To
0.6 0 0 0.6 170.4678 494.1534 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 14.9998 Tf
0 Ts
2 Ta
(10) Tx 
6.6666 Ts
(\320\63) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.4679 465.4785 m
172.8679 465.4785 l
S
0 To
0.6 0 0 0.6 170.4678 463.1534 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
6.6666 Ts
(\320\64) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
287.8688 310.8523 m
287.8688 313.8523 l
S
0 To
0.6 0 0 0.6 287.7188 300.0522 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
1 Ta
(0.4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
345.1188 310.8523 m
345.1188 313.8523 l
S
0 To
0.6 0 0 0.6 344.9688 300.0522 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
(0.6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
402.1188 310.8523 m
402.1188 313.8523 l
S
0 To
0.6 0 0 0.6 401.9688 300.0522 0 Tp
TP
-9.3749 0 Td
0 Tr
0 O
0 g
1 w
(0.8) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.4679 404.0529 m
172.8679 404.0529 l
S
0 To
0.6 0 0 0.6 170.4678 401.8028 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
2 Ta
(10) Tx 
6.6666 Ts
(\320\66) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.4679 373.5529 m
172.8679 373.5529 l
S
0 To
0.6 0 0 0.6 170.4678 371.3028 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
6.6666 Ts
(\320\67) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.4679 342.0529 m
172.8679 342.0529 l
S
0 To
0.6 0 0 0.6 170.4678 339.8028 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
6.6666 Ts
(\3208) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
173 311.5 m
176.25 392.75 l
179 407.25 l
181.75 419.5 l
189.75 439.25 201 449.25 v
233.5 469 l
258 478.25 l
292.25 487.25 l
353.5 500.25 459.5 510.5 v
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 396.4 543 663.08 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 56
%%Page: "51" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(51) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
(10. Systems W) 87 718 T
(ith Multiple Independent Subsystems) 161.11 718 T
3 11 Q
0.57 (In this section, techniques for modeling systems that contain multiple independent subsystems are) 105 697.05 P
0.48 (discussed.  For the subsystems to be independent, it is necessary that no failure dependencies between) 87 684.05 P
(the subsystems exist. Mathematically, two events) 87 671.05 T
5 F
(A) 306.99 671.05 T
3 F
( and) 313.71 671.05 T
5 F
(B) 335.09 671.05 T
3 F
( are independent if) 341.82 671.05 T
(This definition leads to the following:) 87 625.31 T
4 F
(Property:) 105 604.69 T
3 F
( if) 150.82 604.69 T
5 F
(A) 163.04 604.69 T
3 F
( and) 169.76 604.69 T
5 F
(B) 191.14 604.69 T
3 F
( are independent, then) 197.86 604.69 T
0.35 (If two subsystems are located in separate chassis, powered by separate power supplies, electrically) 105 546.09 P
1.89 (isolated from each other, and sufficiently shielded from the environment, it is not unreasonable to) 87 533.09 P
(assume failure independence.) 87 520.09 T
4 10.5 Q
(10.1. System W) 105 492.81 T
(ith T) 173.64 492.81 T
(wo Independent T) 194.74 492.81 T
(riad-to-Simplex Subsystems) 275.65 492.81 T
3 11 Q
1.03 (Consider a system with two triplexes, each of which degrades to a simplex. The system requires) 105 472.36 P
0.07 (both subsystems to be operating for the system to work. Although each processor within a subsystem is) 87 459.36 P
-0.17 (identical, the processors in one subsystem can be given a different failure rate from the processors in the) 87 446.36 P
-0.27 (other subsystem. Let) 87 433.36 P
6 F
-0.27 (l) 180.29 433.36 P
3 8.8 Q
-0.22 (1) 186.33 430.61 P
3 11 Q
-0.27 ( represent the failure rate of the processors in subsystem 1, and) 190.73 433.36 P
6 F
-0.27 (l) 466.98 433.36 P
3 8.8 Q
-0.22 (2) 473.02 430.61 P
3 11 Q
-0.27 (the failure rate) 479.4 433.36 P
0.68 (of the processors in subsystem 2. This system is illustrated in figure 38. In this figure, each  state has) 87 420.36 P
(been labeled with four numbers representing four attributes of the system \050) 87 407.36 T
7 F
(NW1) 416.02 407.36 T
3 F
(,) 435.82 407.36 T
7 F
(NF1) 441.32 407.36 T
3 F
(,) 461.12 407.36 T
7 F
(NW2) 466.62 407.36 T
3 F
(, and) 486.42 407.36 T
7 F
(NF2) 510.55 407.36 T
3 F
(\051:) 530.35 407.36 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
(1.) 105 385.74 T
7 F
(NW1) 117 385.74 T
3 F
( is the number of working processors in subsystem 1.) 136.8 385.74 T
(2.) 105 364.12 T
7 F
(NF1) 117 364.12 T
3 F
( is the number of faulty processors in subsystem 1.) 136.8 364.12 T
(3.) 105 342.5 T
7 F
(NW2) 117 342.5 T
3 F
( is the number of working processors in subsystem 2.) 136.8 342.5 T
(4.) 105 320.88 T
7 F
(NF2) 117 320.88 T
3 F
( is the number of faulty processors in subsystem 2.) 136.8 320.88 T
2.02 (The system starts in state \0503030\051. This notation means that each subsystem has three working) 105 299.27 P
2.15 (processors and no faulty processors. If a processor in subsystem 1 fails, the system transitions to) 87 286.27 P
2.52 (state) 87 273.27 P
2.52 (\0502130\051. If a processor in subsystem 2 fails, the system transitions to state \0503021\051. While in) 109.91 273.27 P
1.24 (state) 87 260.27 P
1.24 (\0502130\051, the system is trying to reconfigure. If it reconfigures before a second processor in sub-) 109.91 260.27 P
0.81 (system 1 fails, the system transitions to state \0501030\051. That is, the first subsystem is a simplex and the) 87 247.27 P
-0.12 (second subsystem is still a triplex. If a second processor in subsystem 1 fails before it reconfigures, then) 87 234.27 P
0.05 (the system fails in death state \0501230\051. Note that two simultaneous faults have occured in subsystem 1 in) 87 221.27 P
1.06 (this situation. If a second processor in the other subsystem fails before reconfiguration is completed,) 87 208.27 P
0.22 (then the system goes to state) 87 195.27 P
0.22 (\0502121\051. In state \0502121\051 both triads have a single faulty processor. Because) 216.43 195.27 P
1.15 (the triads are independent, this state does not represent system failure. From this state, four possible) 87 182.27 P
(events can happen next) 87 169.27 T
(1.) 105 147.65 T
(A second processor in subsystem 1 fails, which causes system failure.) 117 147.65 T
(2.) 105 126.03 T
(A second processor in subsystem 2 fails, which causes system failure.) 117 126.03 T
(3.) 105 104.41 T
(Subsystem 1 reconfigures by degrading to a simplex.) 117 104.41 T
(4.) 105 82.79 T
(Subsystem 2 reconfigures by degrading to a simplex.) 117 82.79 T
233.97 643.26 398.65 656.76 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 234.97 647.89 T
(r) 240.81 647.89 T
(o) 244.3 647.89 T
(b) 249.55 647.89 T
5 F
(A) 261.68 647.89 T
3 F
(a) 271.34 647.89 T
(n) 276 647.89 T
(d) 281.25 647.89 T
5 F
(B) 289.75 647.89 T
6 F
([) 257.18 647.89 T
(]) 296.65 647.89 T
3 F
(P) 318.32 647.89 T
(r) 324.15 647.89 T
(o) 327.65 647.89 T
(b) 332.9 647.89 T
5 F
(A) 345.03 647.89 T
6 F
([) 340.52 647.89 T
(]) 351.93 647.89 T
3 F
(P) 357.8 647.89 T
(r) 363.63 647.89 T
(o) 367.13 647.89 T
(b) 372.38 647.89 T
5 F
(B) 384.51 647.89 T
6 F
([) 380 647.89 T
(]) 391.41 647.89 T
3 F
(=) 307.14 647.89 T
0 0 612 792 C
219.22 564.05 410.78 590.41 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 220.22 575.7 T
(r) 226.06 575.7 T
(o) 229.55 575.7 T
(b) 234.8 575.7 T
5 F
(A) 246.93 575.7 T
(B) 257.59 575.7 T
6 F
([) 242.43 575.7 T
(]) 264.49 575.7 T
3 F
(P) 286.36 581.53 T
(r) 292.2 581.53 T
(o) 295.7 581.53 T
(b) 300.95 581.53 T
5 F
(A) 313.08 581.53 T
3 F
(a) 322.74 581.53 T
(n) 327.4 581.53 T
(d) 332.65 581.53 T
5 F
(B) 341.14 581.53 T
6 F
([) 308.57 581.53 T
(]) 348.04 581.53 T
3 F
(P) 300.4 568.67 T
(r) 306.24 568.67 T
(o) 309.73 568.67 T
(b) 314.98 568.67 T
5 F
(B) 327.11 568.67 T
6 F
([) 322.61 568.67 T
(]) 334.01 568.67 T
3 F
(-) 286.36 575.7 T
(-) 288.11 575.7 T
(-) 289.86 575.7 T
(-) 291.61 575.7 T
(-) 293.36 575.7 T
(-) 295.11 575.7 T
(-) 296.86 575.7 T
(-) 298.6 575.7 T
(-) 300.35 575.7 T
(-) 302.1 575.7 T
(-) 303.85 575.7 T
(-) 305.6 575.7 T
(-) 307.34 575.7 T
(-) 309.09 575.7 T
(-) 310.84 575.7 T
(-) 312.59 575.7 T
(-) 314.34 575.7 T
(-) 316.08 575.7 T
(-) 317.83 575.7 T
(-) 319.58 575.7 T
(-) 321.33 575.7 T
(-) 323.08 575.7 T
(-) 324.83 575.7 T
(-) 326.58 575.7 T
(-) 328.32 575.7 T
(-) 330.07 575.7 T
(-) 331.82 575.7 T
(-) 333.57 575.7 T
(-) 335.32 575.7 T
(-) 337.06 575.7 T
(-) 338.81 575.7 T
(-) 340.56 575.7 T
(-) 342.31 575.7 T
(-) 344.06 575.7 T
(-) 345.81 575.7 T
(-) 347.55 575.7 T
(-) 349.3 575.7 T
(-) 349.8 575.7 T
(P) 369.92 575.7 T
(r) 375.76 575.7 T
(o) 379.26 575.7 T
(b) 384.51 575.7 T
5 F
(A) 396.63 575.7 T
6 F
([) 392.13 575.7 T
(]) 403.53 575.7 T
3 F
(=) 274.98 575.7 T
(=) 358.75 575.7 T
255.45 573.08 255.45 582.53 2 L
0.47 H
2 Z
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 57
%%Page: "52" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(52) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
2.41 (The two reconfiguration transitions go to states \0501021\051 and \0502110\051, respectively. Note that in) 105 270.67 P
0.35 (state) 87 257.67 P
0.35 (\0502121\051 two competing recoveries occur. Because the subsystems are independent, this situation is) 109.91 257.67 P
(modeled  with two competing transitions.) 87 244.67 T
4 10.5 Q
(10.2. ASSIST Model for N Independent T) 105 219.13 T
(riads) 290.33 219.13 T
3 11 Q
1.7 (As the number of subsystems is increased, the size of the model can increase rapidly.  It very) 105 200.42 P
2.16 (quickly becomes impractical to produce graphical pictures. Fortunately, the ASSIST language can) 87 187.42 P
-0.25 (define these models economically.  Array state-space variables will be used to model the multiple triads.) 87 174.42 P
(The syntax for specifying an array state-space variable is) 87 161.42 T
5 F
(ident:) 105 141.54 T
7 F
(ARRAY) 133.41 141.54 T
3 F
([) 166.41 141.54 T
5 F
( const .. const) 170.08 141.54 T
3 F
(]) 230.27 141.54 T
7 F
(OF) 246.93 141.54 T
5 F
(const .. const) 262.88 141.54 T
3 F
0.57 (The range specified within the single square brackets denotes the array range, that is, the range of) 105 121.67 P
0.24 (values over which an array index can vary. The optional range specified after the) 87 108.67 P
7 F
0.59 (OF) 449.34 108.67 P
3 F
0.24 ( denotes the range) 462.54 108.67 P
0.17 (of values that the array state-space variable can hold. Individual array state-space variable elements are) 87 95.67 P
0.17 (referenced in other ASSIST statements by specifying the index in square brackets, for example) 87 82.67 P
7 F
0.4 (NP[3]) 510 82.67 P
3 F
0.42 (denotes the third element of array) 87 69.67 P
7 F
1 (NP) 240.42 69.67 P
3 F
0.42 (. When using array state-space variables, the repetition feature in) 253.62 69.67 P
3 9 Q
(Figure 38.  Model of system consisting of two triad to simplex subsystems.) 179.75 303 T
87 309 543 726 C
115 320 515 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 110 197 498 591 388 394 121 326 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig38.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig38.ps)
%%CreationDate: (4/21/95) (1:58 PM)
%%BoundingBox: 110 197 498 591
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
122.5 566.6098 m
117.4233 566.6098 113.3076 570.7256 113.3076 575.8023 c
113.3076 580.8789 117.4233 584.9947 122.5 584.9947 c
133.75 584.9947 l
138.8267 584.9947 142.9424 580.8789 142.9424 575.8023 c
142.9424 570.7256 138.8267 566.6098 133.75 566.6098 c
122.5 566.6098 l
s
128 575.8023 m
S
142.75 575.8023 m
183.75 575.8023 l
S
0 To
1 0 0 1 162.5 581.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
187.0088 575.8023 m
180.4575 574.2588 l
181.8638 575.8023 L
180.4575 577.3457 l
187.0088 575.8023 L
f
U
0 To
1 0 0 1 128 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3030) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.5 566.6098 m
191.4233 566.6098 187.3076 570.7256 187.3076 575.8023 c
187.3076 580.8789 191.4233 584.9947 196.5 584.9947 c
207.75 584.9947 l
212.8267 584.9947 216.9424 580.8789 216.9424 575.8023 c
216.9424 570.7256 212.8267 566.6098 207.75 566.6098 c
196.5 566.6098 l
s
202 575.8023 m
S
0 To
1 0 0 1 202 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(2130) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
217 575.8023 m
258 575.8023 l
S
0 To
1 0 0 1 236.75 581.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
261.2588 575.8023 m
254.7075 574.2588 l
256.1138 575.8023 L
254.7075 577.3457 l
261.2588 575.8023 L
f
U
0 R
0 G
0.75 w
270.75 566.6098 m
265.6733 566.6098 261.5576 570.7256 261.5576 575.8023 c
261.5576 580.8789 265.6733 584.9947 270.75 584.9947 c
282 584.9947 l
287.0767 584.9947 291.1924 580.8789 291.1924 575.8023 c
291.1924 570.7256 287.0767 566.6098 282 566.6098 c
270.75 566.6098 l
s
276.25 575.8023 m
S
0 To
1 0 0 1 276.25 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1230) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
128.5523 566.625 m
128.5523 515.375 l
S
u
0 O
0 g
1 w
128.5523 512.1162 m
127.0088 518.6675 l
128.5523 517.2612 L
130.0957 518.6675 l
128.5523 512.1162 L
f
U
0 R
0 G
0.75 w
202.5523 566.625 m
202.5523 515.375 l
S
u
0 O
0 g
1 w
202.5523 512.1162 m
201.0088 518.6675 l
202.5523 517.2612 L
204.0957 518.6675 l
202.5523 512.1162 L
f
U
0 To
1 0 0 1 138 538.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 212.25 538.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
122.5 493.1098 m
117.4233 493.1098 113.3076 497.2256 113.3076 502.3023 c
113.3076 507.3789 117.4233 511.4947 122.5 511.4947 c
133.75 511.4947 l
138.8267 511.4947 142.9424 507.3789 142.9424 502.3023 c
142.9424 497.2256 138.8267 493.1098 133.75 493.1098 c
122.5 493.1098 l
s
128 502.3023 m
S
142.75 502.3023 m
183.75 502.3023 l
S
0 To
1 0 0 1 162.5 508.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
187.0088 502.3023 m
180.4575 500.7588 l
181.8638 502.3023 L
180.4575 503.8457 l
187.0088 502.3023 L
f
U
0 To
1 0 0 1 128 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3021) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.5 493.1098 m
191.4233 493.1098 187.3076 497.2256 187.3076 502.3023 c
187.3076 507.3789 191.4233 511.4947 196.5 511.4947 c
207.75 511.4947 l
212.8267 511.4947 216.9424 507.3789 216.9424 502.3023 c
216.9424 497.2256 212.8267 493.1098 207.75 493.1098 c
196.5 493.1098 l
s
202 502.3023 m
S
0 To
1 0 0 1 202 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(2121) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
217 502.3023 m
258 502.3023 l
S
0 To
1 0 0 1 236.75 508.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
261.2588 502.3023 m
254.7075 500.7588 l
256.1138 502.3023 L
254.7075 503.8457 l
261.2588 502.3023 L
f
U
0 R
0 G
0.75 w
270.75 493.1098 m
265.6733 493.1098 261.5576 497.2256 261.5576 502.3023 c
261.5576 507.3789 265.6733 511.4947 270.75 511.4947 c
282 511.4947 l
287.0767 511.4947 291.1924 507.3789 291.1924 502.3023 c
291.1924 497.2256 287.0767 493.1098 282 493.1098 c
270.75 493.1098 l
s
276.25 502.3023 m
S
0 To
1 0 0 1 276.25 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1221) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
128.5523 493.125 m
128.5523 441.875 l
S
u
0 O
0 g
1 w
128.5523 438.6162 m
127.0088 445.1675 l
128.5523 443.7612 L
130.0957 445.1675 l
128.5523 438.6162 L
f
U
0 R
0 G
0.75 w
202.5523 493.125 m
202.5523 441.875 l
S
u
0 O
0 g
1 w
202.5523 438.6162 m
201.0088 445.1675 l
202.5523 443.7612 L
204.0957 445.1675 l
202.5523 438.6162 L
f
U
0 To
1 0 0 1 138 465.0523 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 212.25 465.0523 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
122.5 419.6098 m
117.4233 419.6098 113.3076 423.7256 113.3076 428.8023 c
113.3076 433.8789 117.4233 437.9947 122.5 437.9947 c
133.75 437.9947 l
138.8267 437.9947 142.9424 433.8789 142.9424 428.8023 c
142.9424 423.7256 138.8267 419.6098 133.75 419.6098 c
122.5 419.6098 l
s
0 To
1 0 0 1 128 425.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3012) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.5 419.6098 m
191.4233 419.6098 187.3076 423.7256 187.3076 428.8023 c
187.3076 433.8789 191.4233 437.9947 196.5 437.9947 c
207.75 437.9947 l
212.8267 437.9947 216.9424 433.8789 216.9424 428.8023 c
216.9424 423.7256 212.8267 419.6098 207.75 419.6098 c
196.5 419.6098 l
s
0 To
1 0 0 1 202 425.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(2112) Tx 
(\r) TX 
TO
u
178.5523 300.1162 m
177.0088 306.6675 l
178.5523 305.2612 L
180.0957 306.6675 l
178.5523 300.1162 L
f
U
0 R
0 G
0.75 w
252.5523 303.375 m
252.5523 354.625 l
252.5523 374.625 248 451 211 493.5 c
S
u
0 O
0 g
1 w
252.5523 300.1162 m
251.0088 306.6675 l
252.5523 305.2612 L
254.0957 306.6675 l
252.5523 300.1162 L
f
U
0 R
0 G
0.75 w
172.5 281.1098 m
167.4233 281.1098 163.3076 285.2256 163.3076 290.3023 c
163.3076 295.3789 167.4233 299.4947 172.5 299.4947 c
183.75 299.4947 l
188.8267 299.4947 192.9424 295.3789 192.9424 290.3023 c
192.9424 285.2256 188.8267 281.1098 183.75 281.1098 c
172.5 281.1098 l
s
178 290.3023 m
S
192.75 290.3023 m
233.75 290.3023 l
S
0 To
1 0 0 1 212.5 296.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
237.0088 290.3023 m
230.4575 288.7588 l
231.8638 290.3023 L
230.4575 291.8457 l
237.0088 290.3023 L
f
U
0 To
1 0 0 1 178 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3010) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
246.5 281.1098 m
241.4233 281.1098 237.3076 285.2256 237.3076 290.3023 c
237.3076 295.3789 241.4233 299.4947 246.5 299.4947 c
257.75 299.4947 l
262.8267 299.4947 266.9424 295.3789 266.9424 290.3023 c
266.9424 285.2256 262.8267 281.1098 257.75 281.1098 c
246.5 281.1098 l
s
252 290.3023 m
S
0 To
1 0 0 1 252 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(2110) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
267 290.3023 m
308 290.3023 l
S
0 To
1 0 0 1 286.75 296.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
311.2588 290.3023 m
304.7075 288.7588 l
306.1138 290.3023 L
304.7075 291.8457 l
311.2588 290.3023 L
f
U
0 R
0 G
0.75 w
320.75 281.1098 m
315.6733 281.1098 311.5576 285.2256 311.5576 290.3023 c
311.5576 295.3789 315.6733 299.4947 320.75 299.4947 c
332 299.4947 l
337.0767 299.4947 341.1924 295.3789 341.1924 290.3023 c
341.1924 285.2256 337.0767 281.1098 332 281.1098 c
320.75 281.1098 l
s
326.25 290.3023 m
S
0 To
1 0 0 1 326.25 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1210) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
178.5523 281.125 m
178.5523 229.875 l
S
u
0 O
0 g
1 w
178.5523 226.6162 m
177.0088 233.1675 l
178.5523 231.7612 L
180.0957 233.1675 l
178.5523 226.6162 L
f
U
0 R
0 G
0.75 w
252.5523 281.125 m
252.5523 229.875 l
S
u
0 O
0 g
1 w
252.5523 226.6162 m
251.0088 233.1675 l
252.5523 231.7612 L
254.0957 233.1675 l
252.5523 226.6162 L
f
U
0 To
1 0 0 1 188 253.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 262.25 253.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
172.5 207.6098 m
167.4233 207.6098 163.3076 211.7256 163.3076 216.8023 c
163.3076 221.8789 167.4233 225.9947 172.5 225.9947 c
183.75 225.9947 l
188.8267 225.9947 192.9424 221.8789 192.9424 216.8023 c
192.9424 211.7256 188.8267 207.6098 183.75 207.6098 c
172.5 207.6098 l
s
0 To
1 0 0 1 178 213.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3001) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
246.5 207.6098 m
241.4233 207.6098 237.3076 211.7256 237.3076 216.8023 c
237.3076 221.8789 241.4233 225.9947 246.5 225.9947 c
257.75 225.9947 l
262.8267 225.9947 266.9424 221.8789 266.9424 216.8023 c
266.9424 211.7256 262.8267 207.6098 257.75 207.6098 c
246.5 207.6098 l
s
0 To
1 0 0 1 252 213.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(2101) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 476.6098 m
337.4233 476.6098 333.3076 480.7256 333.3076 485.8023 c
333.3076 490.8789 337.4233 494.9947 342.5 494.9947 c
353.75 494.9947 l
358.8267 494.9947 362.9424 490.8789 362.9424 485.8023 c
362.9424 480.7256 358.8267 476.6098 353.75 476.6098 c
342.5 476.6098 l
s
348 485.8023 m
S
0 To
1 0 0 1 348 482.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(1030) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
363 485.8023 m
404 485.8023 l
S
0 To
1 0 0 1 382.75 491.8023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
407.2588 485.8023 m
400.7075 484.2588 l
402.1138 485.8023 L
400.7075 487.3457 l
407.2588 485.8023 L
f
U
0 R
0 G
0.75 w
416.75 476.6098 m
411.6733 476.6098 407.5576 480.7256 407.5576 485.8023 c
407.5576 490.8789 411.6733 494.9947 416.75 494.9947 c
428 494.9947 l
433.0767 494.9947 437.1924 490.8789 437.1924 485.8023 c
437.1924 480.7256 433.0767 476.6098 428 476.6098 c
416.75 476.6098 l
s
422.25 485.8023 m
S
0 To
1 0 0 1 422.25 482.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(0130) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
348.5523 476.625 m
348.5523 425.375 l
S
u
0 O
0 g
1 w
348.5523 422.1162 m
347.0088 428.6675 l
348.5523 427.2612 L
350.0957 428.6675 l
348.5523 422.1162 L
f
U
0 To
1 0 0 1 358.25 448.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 403.1098 m
337.4233 403.1098 333.3076 407.2256 333.3076 412.3023 c
333.3076 417.3789 337.4233 421.4947 342.5 421.4947 c
353.75 421.4947 l
358.8267 421.4947 362.9424 417.3789 362.9424 412.3023 c
362.9424 407.2256 358.8267 403.1098 353.75 403.1098 c
342.5 403.1098 l
s
348 412.3023 m
S
0 To
1 0 0 1 348 408.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1021) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
363 412.3023 m
404 412.3023 l
S
0 To
1 0 0 1 382.75 418.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
407.2588 412.3023 m
400.7075 410.7588 l
402.1138 412.3023 L
400.7075 413.8457 l
407.2588 412.3023 L
f
U
0 R
0 G
0.75 w
416.75 403.1098 m
411.6733 403.1098 407.5576 407.2256 407.5576 412.3023 c
407.5576 417.3789 411.6733 421.4947 416.75 421.4947 c
428 421.4947 l
433.0767 421.4947 437.1924 417.3789 437.1924 412.3023 c
437.1924 407.2256 433.0767 403.1098 428 403.1098 c
416.75 403.1098 l
s
422.25 412.3023 m
S
0 To
1 0 0 1 422.25 408.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(0121) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
348.5523 403.125 m
348.5523 351.875 l
S
u
0 O
0 g
1 w
348.5523 348.6162 m
347.0088 355.1675 l
348.5523 353.7612 L
350.0957 355.1675 l
348.5523 348.6162 L
f
U
0 To
1 0 0 1 358.25 375.0523 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 329.6098 m
337.4233 329.6098 333.3076 333.7256 333.3076 338.8023 c
333.3076 343.8789 337.4233 347.9947 342.5 347.9947 c
353.75 347.9947 l
358.8267 347.9947 362.9424 343.8789 362.9424 338.8023 c
362.9424 333.7256 358.8267 329.6098 353.75 329.6098 c
342.5 329.6098 l
s
0 To
1 0 0 1 348 335.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1012) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
399.5 273.1098 m
394.4233 273.1098 390.3076 277.2256 390.3076 282.3023 c
390.3076 287.3789 394.4233 291.4947 399.5 291.4947 c
410.75 291.4947 l
415.8267 291.4947 419.9424 287.3789 419.9424 282.3023 c
419.9424 277.2256 415.8267 273.1098 410.75 273.1098 c
399.5 273.1098 l
s
405 282.3023 m
S
0 To
1 0 0 1 405 278.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(1010) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
420 282.3023 m
461 282.3023 l
S
0 To
1 0 0 1 439.75 288.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
464.2588 282.3023 m
457.7075 280.7588 l
459.1138 282.3023 L
457.7075 283.8457 l
464.2588 282.3023 L
f
U
0 R
0 G
0.75 w
473.75 273.1098 m
468.6733 273.1098 464.5576 277.2256 464.5576 282.3023 c
464.5576 287.3789 468.6733 291.4947 473.75 291.4947 c
485 291.4947 l
490.0767 291.4947 494.1924 287.3789 494.1924 282.3023 c
494.1924 277.2256 490.0767 273.1098 485 273.1098 c
473.75 273.1098 l
s
479.25 282.3023 m
S
0 To
1 0 0 1 479.25 278.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1011) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
405.5523 273.125 m
405.5523 221.875 l
S
u
0 O
0 g
1 w
405.5523 218.6162 m
404.0088 225.1675 l
405.5523 223.7612 L
407.0957 225.1675 l
405.5523 218.6162 L
f
U
0 To
1 0 0 1 415.25 245.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
399.5 199.6098 m
394.4233 199.6098 390.3076 203.7256 390.3076 208.8023 c
390.3076 213.8789 394.4233 217.9947 399.5 217.9947 c
410.75 217.9947 l
415.8267 217.9947 419.9424 213.8789 419.9424 208.8023 c
419.9424 203.7256 415.8267 199.6098 410.75 199.6098 c
399.5 199.6098 l
s
0 To
1 0 0 1 405 205.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1110) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
214 569.5 m
292.0223 556.576 334.2602 497.0076 v
S
214 495.5 m
292.3943 482.5144 334.5613 422.5814 v
S
178.5523 303.375 m
178.5523 354.625 l
178.5523 374.625 174 451 137 493.5 c
S
405.5523 295.375 m
405.5523 346.625 l
405.5523 366.625 403 390.5 360 405.5 c
S
u
0 O
0 g
1 w
405.5523 292.1162 m
404.0088 298.6675 l
405.5523 297.2612 L
407.0957 298.6675 l
405.5523 292.1162 L
f
U
0 To
1 0 0 1 290.25 472.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 261.25 379.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 186.75 379.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 414.75 342.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 326.25 262.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
336.6785 419.5283 m
331.566 423.906 l
333.642 423.6817 L
334.0579 425.7278 l
336.6785 419.5283 L
f
U
0 To
1 0 0 1 303.25 539.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
392.2354 276.3134 m
388.3183 270.84 l
388.3614 272.9277 L
386.287 273.1644 l
392.2354 276.3134 L
f
U
u
336.6785 493.5283 m
331.566 497.906 l
333.642 497.6817 L
334.0579 499.7278 l
336.6785 493.5283 L
f
U
0 R
0 G
0.5 w
262.2529 282.5023 m
277.527 261.9924 301.9624 248.7078 329.5 248.7078 c
353.0821 248.7078 374.3892 258.4501 389.616 274.1293 c
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 309 543 726 C
0 0 612 792 C
236.68 139.54 244.18 151.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
238.43 149.54 238.43 141.04 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
238.43 149.54 242.68 149.54 2 L
N
238.43 141.04 242.68 141.04 2 L
N
239.93 149.54 239.93 141.29 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
323.07 139.79 330.81 151.28 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
329.07 149.78 329.07 141.28 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
329.07 149.78 324.82 149.78 2 L
N
329.07 141.28 324.82 141.28 2 L
N
327.57 149.78 327.57 141.53 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 58
%%Page: "53" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(53) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.29 (the) 87 718.67 P
7 F
3.1 (START) 104.48 718.67 P
3 F
1.29 ( statement is convenient to use. Repetition allows the user to specify a sequence such as) 137.48 718.67 P
7 F
(3,3,3,3,3) 87 705.67 T
3 F
( by a shorthand notation,) 146.4 705.67 T
7 F
(5 of 3) 258.23 705.67 T
3 F
(.) 297.83 705.67 T
(The following model describes a system of) 105 686.51 T
7 F
(N) 297.17 686.51 T
3 F
( independent triads:) 303.77 686.51 T
7 9.75 Q
(INPUT N_TRIADS;        \050* Number of triads initially *\051) 87 668.18 T
(LAMBDA = 1E-4;         \050* Failure rate of active processors *\051) 87 656.28 T
(DELTA = 3.6E3;         \050* Reconfiguration rate *\051) 87 644.37 T
-0.47 (SPACE = \050NP: ARRAY[1..N_TRIADS] OF 0..3, \050* Num. active processors in triad *\051) 87 627.46 P
(         NFP: ARRAY[1..N_TRIADS] Of 0..3\051; \050* Num. failed active procs *\051) 87 615.55 T
(START = \050N_TRIADS OF 3, N_TRIADS OF 0\051;) 87 597.64 T
(FOR J = 1, N_TRIADS;) 87 579.73 T
(   IF NP[J] > NFP[J] TRANTO NFP[J] = NFP[J]+1) 87 567.83 T
(        BY \050NP[J]-NFP[J]\051*LAMBDA; \050* Active processor failure *\051) 87 555.92 T
(   IF NFP[J] > 0 TRANTO) 87 538.01 T
(        NP[J]=1, NFP[J]=0 BY FAST DELTA;) 87 526.1 T
(   DEATHIF 2 * NFP[J] >= NP[J];) 87 508.2 T
(     \050* Two faults in an active triad or simplex with a fault *\051) 87 496.29 T
(ENDFOR;) 87 484.38 T
3 11 Q
-0.03 (The user is prompted during ASSIST execution for the number of independent triads to be modeled) 105 466.64 P
(by) 87 453.64 T
7 F
(N_TRIADS) 100.75 453.64 T
3 F
(.  Two array state-space variables are used:) 153.55 453.64 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
(1.) 105 434.48 T
7 F
(NP[J]) 117 434.48 T
3 F
( is the array containing number of active processors in each subsystem) 150 434.48 T
7 F
(J) 462.83 434.48 T
3 F
(.) 469.43 434.48 T
(2.) 105 415.32 T
7 F
(NFP[J]) 117 415.32 T
3 F
( is the array containing number of faulty processors in each triad) 156.6 415.32 T
7 F
(J) 443.15 415.32 T
3 F
(.) 449.75 415.32 T
0.93 (Because reconfiguration collapses a triad to a simplex, the value of each) 105 396.16 P
7 F
2.24 (NP[J]) 436.63 396.16 P
3 F
0.93 ( must always be) 469.63 396.16 P
0.5 (either 3) 87 383.16 P
0.5 (or) 123.55 383.16 P
0.5 (1. Processor failure in triad) 135.46 383.16 P
7 F
1.2 (J) 260.16 383.16 P
3 F
0.5 ( results in the increment of) 266.76 383.16 P
7 F
1.2 (NFP[J]) 390.13 383.16 P
3 F
0.5 (. Note that the) 429.73 383.16 P
7 F
1.2 (DEATHIF) 496.8 383.16 P
3 F
(condition covers both the triplex and the simplex situation.) 87 370.16 T
4 10.5 Q
(10.3. The Additive Law of Pr) 105 345.34 T
(obability) 234.6 345.34 T
3 11 Q
-0.14 (As shown in section 10.2, larger systems can be constructed by combining several independent sub-) 105 327.35 P
0.55 (systems. If the probability of failure of a single subsystem is) 87 314.35 P
5 F
0.55 (P) 361.33 314.35 P
3 F
0.55 (\050) 368.06 314.35 P
5 F
0.55 (E) 371.72 314.35 P
5 8.8 Q
0.44 (i) 378.44 311.6 P
3 11 Q
0.55 (\051, then the probability of failure of a) 380.89 314.35 P
(system consisting of two of these subsystems that fails when either subsystem fails is) 87 301.35 T
5 F
(P) 206.88 282.19 T
3 8.8 Q
(sys) 213.6 279.44 T
3 11 Q
( =) 224.85 282.19 T
5 F
(P) 236.55 282.19 T
3 F
(\050) 243.27 282.19 T
5 F
(E) 246.93 282.19 T
3 8.8 Q
(1) 253.65 279.44 T
3 11 Q
( or) 258.05 282.19 T
5 F
(E) 272.72 282.19 T
3 8.8 Q
(2) 279.44 279.44 T
3 11 Q
(\051 =) 283.84 282.19 T
5 F
(P) 299.21 282.19 T
3 F
(\050) 305.93 282.19 T
5 F
(E) 309.59 282.19 T
3 8.8 Q
(1) 316.31 279.44 T
3 11 Q
(\051 +) 320.71 282.19 T
5 F
(P) 336.08 282.19 T
3 F
(\050) 342.8 282.19 T
5 F
(E) 346.46 282.19 T
3 8.8 Q
(2) 353.18 279.44 T
3 11 Q
(\051) 357.58 282.19 T
6 F
(-) 364 282.19 T
5 F
(P) 372.79 282.19 T
3 F
(\050) 379.51 282.19 T
5 F
(E) 383.17 282.19 T
3 8.8 Q
(1) 389.89 279.44 T
3 11 Q
(\051) 394.29 282.19 T
5 F
(P) 397.95 282.19 T
3 F
(\050) 404.67 282.19 T
5 F
(E) 408.34 282.19 T
3 8.8 Q
(2) 415.06 279.44 T
3 11 Q
(\051) 419.46 282.19 T
0.43 (This formula follows from the independence of the subsystems and the additive law of probability) 105 263.03 P
0.62 (and can be used to greatly simplify the analysis of many systems. The formula can be illustrated with) 87 250.03 P
0.57 (the models presented in section 10.2. ASSIST was used to generate a model of a system consisting of) 87 237.03 P
(two independent triads. This system could be solved by submitting the model to a Markov solver:) 87 224.03 T
7 9.75 Q
(air58% paws) 87 205.71 T
( PAWS V7.9.3   NASA Langley Research Center) 87 189.8 T
( 1? read twotriads) 87 173.89 T
( 2: N_TRIADS = 2;) 87 157.98 T
( 3: LAMBDA = 1E-4;) 87 146.07 T
( 4: DELTA = 3.6E3;) 87 134.17 T
( 5:) 87 122.26 T
( 6:) 87 110.35 T
( 7:      2\050* 3,3,0,0 *\051,     3\050* 3,3,1,0 *\051       = \0503-0\051*LAMBDA;) 87 98.44 T
( 8:      2\050* 3,3,0,0 *\051,     4\050* 3,3,0,1 *\051       = \0503-0\051*LAMBDA;) 87 86.53 T
( 9:      3\050* 3,3,1,0 *\051,     5\050* 1,3,0,0 *\051       = FAST DELTA;) 87 74.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 59
%%Page: "54" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(54) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(10:      3\050* 3,3,1,0 *\051,     1\050* 3,3,2,0 DEATH *\051 = \0503-1\051*LAMBDA;) 87 719.5 T
(11:      3\050* 3,3,1,0 *\051,     6\050* 3,3,1,1 *\051       = \0503-0\051*LAMBDA;) 87 707.48 T
(12:      4\050* 3,3,0,1 *\051,     7\050* 3,1,0,0 *\051       = FAST DELTA;) 87 695.46 T
(13:      4\050* 3,3,0,1 *\051,     6\050* 3,3,1,1 *\051       = \0503-0\051*LAMBDA;) 87 683.45 T
(14:      4\050* 3,3,0,1 *\051,     1\050* 3,3,0,2 DEATH *\051 = \0503-1\051*LAMBDA;) 87 671.43 T
(15:      5\050* 1,3,0,0 *\051,     1\050* 1,3,1,0 DEATH *\051 = \0501-0\051*LAMBDA;) 87 659.41 T
(16:      5\050* 1,3,0,0 *\051,     8\050* 1,3,0,1 *\051       = \0503-0\051*LAMBDA;) 87 647.39 T
(17:      6\050* 3,3,1,1 *\051,     8\050* 1,3,0,1 *\051       = FAST DELTA;) 87 635.37 T
(18:      6\050* 3,3,1,1 *\051,     9\050* 3,1,1,0 *\051       = FAST DELTA;) 87 623.35 T
(19:      6\050* 3,3,1,1 *\051,     1\050* 3,3,2,1 DEATH *\051 = \0503-1\051*LAMBDA;) 87 611.34 T
(20:      6\050* 3,3,1,1 *\051,     1\050* 3,3,1,2 DEATH *\051 = \0503-1\051*LAMBDA;) 87 599.32 T
(21:      7\050* 3,1,0,0 *\051,     9\050* 3,1,1,0 *\051       = \0503-0\051*LAMBDA;) 87 587.3 T
(22:      7\050* 3,1,0,0 *\051,     1\050* 3,1,0,1 DEATH *\051 = \0501-0\051*LAMBDA;) 87 575.28 T
(23:      8\050* 1,3,0,1 *\051,    10\050* 1,1,0,0 *\051       = FAST DELTA;) 87 563.26 T
(24:      8\050* 1,3,0,1 *\051,     1\050* 1,3,1,1 DEATH *\051 = \0501-0\051*LAMBDA;) 87 551.24 T
(25:      8\050* 1,3,0,1 *\051,     1\050* 1,3,0,2 DEATH *\051 = \0503-1\051*LAMBDA;) 87 539.23 T
(26:      9\050* 3,1,1,0 *\051,    10\050* 1,1,0,0 *\051       = FAST DELTA;) 87 527.21 T
(27:      9\050* 3,1,1,0 *\051,     1\050* 3,1,2,0 DEATH *\051 = \0503-1\051*LAMBDA;) 87 515.19 T
(28:      9\050* 3,1,1,0 *\051,     1\050* 3,1,1,1 DEATH *\051 = \0501-0\051*LAMBDA;) 87 503.17 T
(29:     10\050* 1,1,0,0 *\051,     1\050* 1,1,1,0 DEATH *\051 = \0501-0\051*LAMBDA;) 87 491.15 T
(30:     10\050* 1,1,0,0 *\051,     1\050* 1,1,0,1 DEATH *\051 = \0501-0\051*LAMBDA;) 87 479.14 T
(31:) 87 467.12 T
(32: \050* NUMBER OF STATES IN MODEL = 10 *\051) 87 455.1 T
(33: \050* NUMBER OF TRANSITIONS IN MODEL = 24 *\051) 87 443.08 T
(34: \050* 12 DEATH STATES AGGREGATED INTO STATE 1 *\051) 87 431.06 T
(      0.07 SECS. TO READ MODEL FILE) 87 414.05 T
(35? run) 87 402.03 T
(MODEL FILE = twotriads.mod               PAWS V7.9.3 7 Feb 92 14:43:49) 87 385.01 T
(                  PROBABILITY        ACCURACY     ----- RUN #1) 87 367.99 T
(-----------   -------------------   --------) 87 355.97 T
(              2.9961673328249e-06   7 DIGITS) 87 343.95 T
(0.050 SECS. CPU TIME UTILIZED) 87 326.93 T
(36? exit) 87 309.92 T
3 11 Q
-0.23 (Another way to solve this system is to apply the additive law of probability. First solve a single triad) 105 292.07 P
(subsystem:) 87 279.07 T
7 9.75 Q
(air58% paws) 87 260.63 T
(  PAWS V7.9.3 NASA Langley Research Center) 87 248.61 T
(  1? read onetriad) 87 231.59 T
(  2: N_TRIADS = 1;) 87 214.58 T
(  3: LAMBDA = 1E-4;) 87 202.56 T
(  4: DELTA = 3.6E3;) 87 190.54 T
(  5:) 87 178.52 T
(  6:) 87 166.5 T
(  7:      2\050* 3,0 *\051,      3\050* 3,1 *\051       = \0503-0\051*LAMBDA;) 87 154.48 T
(  8:      3\050* 3,1 *\051,      4\050* 1,0 *\051       = FAST DELTA;) 87 142.47 T
(  9:      3\050* 3,1 *\051,      1\050* 3,2 DEATH *\051 = \0503-1\051*LAMBDA;) 87 130.45 T
( 10:      4\050* 1,0 *\051,      1\050* 1,1 DEATH *\051 = \0501-0\051*LAMBDA;) 87 118.43 T
( 11:) 87 106.41 T
( 12: \050* NUMBER OF STATES IN MODEL = 4 *\051) 87 94.39 T
( 13: \050* NUMBER OF TRANSITIONS IN MODEL = 4 *\051) 87 82.38 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 60
%%Page: "55" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(55) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(14: \050* 2 DEATH STATES AGGREGATED INTO STATE 1 *\051) 93.6 719.5 T
(       0.00 SECS. TO READ MODEL FILE) 87 702.35 T
( 15? run) 87 690.21 T
(MODEL FILE = onetriad.mod                 PAWS V7.9.3 7 Feb 92 14:44:01) 87 673.06 T
(                 PROBABILITY       ACCURACY       ----- RUN #1) 87 655.91 T
(-----------   -------------------  --------) 87 643.76 T
(              1.4980847885419e-06  9 DIGITS) 87 631.62 T
( 0.017 SECS. CPU TIME UTILIZED) 87 614.47 T
3 11 Q
(Then, apply the additive law of probability:) 87 596.49 T
0.87 (Notice that the same answer is obtained as in the N-triad model. This calculation is automated in the) 87 500.28 P
7 F
(ORPROB) 87 487.28 T
3 F
( command found in SURE, PAWS, and STEM as illustrated below:) 126.6 487.28 T
7 9.75 Q
(air58% paws) 87 469.72 T
(  PAWS V7.9.3   NASA Langley Research Center) 87 453.57 T
(  1? read0 onetriad) 87 437.42 T
( 15? run) 87 421.28 T
(                   PROBABILITY        ACCURACY     ----- RUN #1) 87 405.13 T
( -----------   -------------------   --------) 87 388.98 T
(               1.4980847885419e-06   9 DIGITS) 87 376.83 T
( 16? read0 onetriad) 87 360.69 T
( 30? run) 87 348.54 T
(                   PROBABILITY        ACCURACY     ----- RUN #2) 87 332.39 T
( -----------   -------------------   --------) 87 320.24 T
(               1.4980847885419e-06   9 DIGITS) 87 308.1 T
( 31? orprob) 87 291.95 T
(    RUN #    PROBABILITY) 87 275.8 T
( ---------- -----------) 87 263.66 T
(      1     1.49808e-06) 87 251.51 T
(      2     1.49808e-06) 87 239.36 T
( ---------- -----------) 87 227.21 T
( OR PROB = 2.99617e-06) 87 215.07 T
3 11 Q
1.05 ( The SURE command) 105 198.09 P
7 F
2.53 (read0) 208.82 198.09 P
3 F
1.05 ( prevents the echoing of the file as it is read in. It is equivalent to) 241.82 198.09 P
7 F
0.56 (ECHO) 87 185.09 P
0.56 (=) 120 185.09 P
0.56 (0;) 133.2 185.09 P
0.56 (READ) 153 185.09 P
0.56 (onetriad) 182.38 185.09 P
3 F
0.23 (. The) 235.18 185.09 P
7 F
0.56 (orprob) 261.01 185.09 P
3 F
0.23 ( command at line 31 first reports the results of the pre-) 300.61 185.09 P
(vious runs, then gives the result of applying the additive law of probability to independent events.) 87 172.09 T
4 12 Q
(1) 87 146.02 T
(1. Model Pruning) 92.34 146.02 T
3 11 Q
-0.18 ( A model of a system with a large number of components tends to have many long paths that consist) 105 127.29 P
0.59 (of one or two failures of each component before a condition of system failure is reached. Because the) 87 114.29 P
0.38 (occurrence of so many failures is unlikely during a short mission, these long paths typically contribute) 87 101.29 P
-0.11 (insignificant amounts to the probability of system failure. The dominant failure modes of the system are) 87 88.29 P
0.3 (typically the short paths to system failure that consist of failures of critically coupled components. The) 87 75.29 P
164.6 520.01 465.4 580.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(P) 165.6 571.55 T
3 8.5 Q
(s) 172.41 567.38 T
(y) 175.72 567.38 T
(s) 179.97 567.38 T
5 10.5 Q
(P) 199.69 571.55 T
(E) 212.99 571.55 T
3 8.5 Q
(1) 219.8 567.38 T
3 10.5 Q
(o) 227.29 571.55 T
(r) 232.54 571.55 T
5 F
(E) 239.29 571.55 T
3 8.5 Q
(2) 246.1 567.38 T
6 10.5 Q
(\050) 208.48 571.55 T
(\051) 250.83 571.55 T
5 F
(P) 272.5 571.55 T
(E) 285.8 571.55 T
3 8.5 Q
(1) 292.61 567.38 T
6 10.5 Q
(\050) 281.29 571.55 T
(\051) 297.34 571.55 T
5 F
(P) 313.76 571.55 T
(E) 327.06 571.55 T
3 8.5 Q
(2) 333.87 567.38 T
6 10.5 Q
(\050) 322.55 571.55 T
(\051) 338.6 571.55 T
5 F
(P) 354.35 571.55 T
(E) 367.65 571.55 T
3 8.5 Q
(1) 374.46 567.38 T
6 10.5 Q
(\050) 363.14 571.55 T
(\051) 379.19 571.55 T
5 F
(P) 385.06 571.55 T
(E) 398.36 571.55 T
3 8.5 Q
(2) 405.17 567.38 T
6 10.5 Q
(\050) 393.85 571.55 T
(\051) 409.9 571.55 T
3 F
(\320) 346.48 571.55 T
(+) 305.22 571.55 T
(=) 188.52 571.55 T
(=) 261.33 571.55 T
(1) 199.69 547.14 T
(.) 204.94 547.14 T
(4) 207.57 547.14 T
(9) 212.82 547.14 T
(8) 218.07 547.14 T
(1) 234.33 547.14 T
(0) 239.58 547.14 T
3 8.5 Q
(6) 249.8 553.63 T
(\320) 245.23 553.63 T
6 10.5 Q
(\264) 225.94 547.14 T
3 F
(1) 265.23 547.14 T
(.) 270.48 547.14 T
(4) 273.1 547.14 T
(9) 278.35 547.14 T
(8) 283.6 547.14 T
(1) 299.86 547.14 T
(0) 305.11 547.14 T
3 8.5 Q
(6) 315.33 553.63 T
(\320) 310.76 553.63 T
3 10.5 Q
(1) 336.34 547.14 T
(.) 341.59 547.14 T
(4) 344.22 547.14 T
(9) 349.47 547.14 T
(8) 354.72 547.14 T
(1) 370.98 547.14 T
(0) 376.23 547.14 T
3 8.5 Q
(6) 386.45 553.63 T
(\320) 381.88 553.63 T
6 10.5 Q
(\264) 362.59 547.14 T
(\050) 331.84 547.14 T
(\051) 391.18 547.14 T
3 F
(1) 403.31 545.89 T
(.) 408.56 545.89 T
(4) 411.19 545.89 T
(9) 416.44 545.89 T
(8) 421.69 545.89 T
(1) 437.95 545.89 T
(0) 443.2 545.89 T
3 8.5 Q
(6) 453.42 552.38 T
(\320) 448.85 552.38 T
6 10.5 Q
(\264) 429.56 545.89 T
(\050) 398.81 545.89 T
(\051) 458.15 545.89 T
3 F
(\320) 322.21 547.14 T
6 F
(\264) 291.47 547.14 T
3 F
(+) 256.68 547.14 T
(=) 188.52 547.14 T
(2) 199.69 524.64 T
(.) 204.94 524.64 T
(9) 207.57 524.64 T
(9) 212.82 524.64 T
(6) 218.07 524.64 T
(1) 234.33 524.64 T
(0) 239.58 524.64 T
3 8.5 Q
(6) 249.8 531.12 T
(\320) 245.23 531.12 T
6 10.5 Q
(\264) 225.94 524.64 T
3 F
(=) 188.52 524.64 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 61
%%Page: "56" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(56) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.28 (model can be pruned to eliminate the long paths by conservatively assuming that system failure occurs) 87 718.67 P
2.73 (earlier on these paths. Model pruning is supported in ASSIST by the) 87 705.67 P
7 F
6.56 (PRUNEIF) 423.81 705.67 P
3 F
2.73 ( statement. The) 470.01 705.67 P
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(PRUNEIF) 87 692.67 T
3 F
( statement has the same syntax as the) 133.2 692.67 T
7 F
(DEATHIF) 299.4 692.67 T
3 F
( statements:) 345.6 692.67 T
7 F
(PRUNEIF) 105 672.05 T
5 F
(condition) 153.95 672.05 T
3 F
(;) 195.51 672.05 T
(where) 87 651.43 T
5 F
( condition) 113.87 651.43 T
3 F
( is a Boolean expression describing the states to be pruned.  The following syntax:) 158.18 651.43 T
7 F
(PRUNIF) 105 631.81 T
5 F
(condition) 147.35 631.81 T
3 F
(;) 188.91 631.81 T
-0.19 (is also acceptable. The pruned states generated are grouped by the) 87 611.18 P
7 F
-0.47 (PRUNEIF) 378.11 611.18 P
3 F
-0.19 ( statement they satisfy, just) 424.31 611.18 P
-0.03 (as the death states are. In a model generated from an input file with three) 87 598.18 P
7 F
-0.06 (DEATHIF) 409.8 598.18 P
3 F
-0.03 ( statements and two) 456 598.18 P
7 F
1.53 (PRUNEIF) 87 585.18 P
3 F
0.64 ( statements, states \0501\051 through \0503\051 will be death states corresponding to the three) 133.2 585.18 P
7 F
1.53 (DEATHIF) 496.8 585.18 P
3 F
0.48 (statements and states \0504\051 and \0505\051 will be pruned states corresponding to the two) 87 572.18 P
7 F
1.14 (PRUNEIF) 444.38 572.18 P
3 F
0.48 ( statements.) 490.58 572.18 P
-0.06 (ASSIST generates a statement in the model file that identifies the pruned states in the model. For exam-) 87 559.18 P
(ple, the model with four death states and two pruned states would contain the statement) 87 546.18 T
7 F
(PRUNESTATES = \0505,6\051;) 107.75 526.57 T
3 F
-0.22 (which will be used by SURE to separately list the prune state probabilities from the death state probabil-) 87 505.95 P
-0.25 (ities. Versions of SURE earlier than 6.0 will simply list the pruned states as death states. The SURE pro-) 87 492.95 P
(gram reports the ASSIST pruned states separately from the death states as follows:) 87 479.95 T
7 10 Q
(DEATHSTATE    LOWERBOUND    UPPERBOUND   COMMENTS                RUN #4) 87 460.99 T
(----------   -----------   -----------   ---------------------------------) 87 447.37 T
(     1       9.99500e-12   1.00000e-11) 87 433.75 T
(     2       1.66542e-10   1.66667e-10) 87 420.13 T
(     3       9.99500e-14   1.00000e-13) 87 406.51 T
(sure prune   0.00000e+00   1.22666e-14) 87 392.89 T
(             -----------   -----------) 87 379.27 T
(  SUBTOTAL   1.76637e-10   1.76779e-10) 87 365.65 T
(PRUNESTATE    LOWERBOUND    UPPERBOUND) 87 347.03 T
(----------   -----------   -----------) 87 333.41 T
(prune   5    9.99500e-15   1.00000e-14) 87 319.79 T
(prune   6    9.99500e-18   1.00000e-17) 87 306.17 T
(             -----------   -----------) 87 292.55 T
(  SUBTOTAL   1.00050e-14   1.00100e-14) 87 278.93 T
(TOTAL        1.76637E-10   1.76789e-10) 87 260.3 T
3 11 Q
1.48 (In the) 105 241.02 P
7 F
3.55 (TOTAL) 136.07 241.02 P
3 F
1.48 ( line, the upper bound includes the contribution of the pruned states, whereas the) 169.07 241.02 P
0.3 (lower bound does not. Thus, the) 87 228.02 P
7 F
0.71 (TOTAL) 232.99 228.02 P
3 F
0.3 ( lines are valid bounds on the system failure probability. If the) 265.99 228.02 P
-0.25 (prune state upper bound is significant with respect to the) 87 215.02 P
7 F
-0.59 (TOTAL) 336.29 215.02 P
3 F
-0.25 ( upper bound, then the  model has prob-) 369.29 215.02 P
-0.27 (ably been pruned too severely. The upper and lower bounds can be made significantly closer by relaxing) 87 202.02 P
-0.21 (the amount of pruning. The ASSIST program wrote the following into the SURE input file to inform the) 87 189.02 P
(SURE program which states are ASSIST-level pruned states:) 87 176.02 T
7 F
(PRUNESTATES = \0505,6\051;) 105 155.4 T
3 F
-0.07 (Two types of pruning are supported by SURE and ASSIST. One is SURE-level pruning, which was) 105 134.78 P
1.03 (described in section 5.3.6, and the other is ASSIST-level pruning, which is described in this section.) 87 121.78 P
-0.08 (ASSIST-level pruning is done at model generation time. After model building is completed, the amount) 87 108.78 P
0.83 (of processing time can be reduced by using SURE-level pruning. This is invoked by the SURE com-) 87 95.78 P
1.45 (mand) 87 82.78 P
7 F
3.47 (PRUNE) 115.64 82.78 P
3.47 (=) 155.24 82.78 P
3.47 (<rate>) 168.44 82.78 P
3 F
1.45 (. SURE-level pruning will still be effective in conjunction with ASSIST-) 208.04 82.78 P
(level pruning. ASSIST pruning will be demonstrated for many systems in subsequent sections.) 87 69.78 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 62
%%Page: "57" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(57) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
(12. Multiple Subsystems W) 87 718 T
(ith Failur) 226.13 718 T
(e Dependencies) 274.92 718 T
3 11 Q
0.07 (Flight control systems are composed of many different components, including processors. Previous) 105 696.86 P
0.35 (sections have only considered processors. In this section, how to include the fault behavior of all com-) 87 683.86 P
(ponents in a typical flight control system architecture in the reliability model will be discussed.) 87 670.86 T
4 10.5 Q
(12.1. Simple Flight Contr) 105 643.38 T
(ol System) 218.27 643.38 T
3 11 Q
(The system shown in figure 39 consists of five subsystems:) 105 622.74 T
(1.) 105 600.93 T
(Triplicated sensors) 117 600.93 T
(2.) 105 579.12 T
(Triplicated  bus from sensor to processor) 117 579.12 T
7 F
(SP_BUS) 300 579.12 T
3 F
(3.) 105 557.32 T
(Degradable quadraplex of processors) 117 557.32 T
(4.) 105 535.51 T
(Triplicated  bus from processor to actuator) 117 535.51 T
7 F
(PA_BUS) 307.32 535.51 T
3 F
(5.) 105 513.7 T
(Force-sum voting actuator) 117 513.7 T
0.75 (All sensor values are sent to all processors over the) 105 238.67 P
7 F
1.79 (SP_BUS) 340.36 238.67 P
3 F
0.75 (. The system fails when two sensors) 379.96 238.67 P
0.57 (have failed. No dependencies exist between the sensors and the processors. Thus, as long as the fault-) 87 225.67 P
0.5 (tolerant) 87 212.67 P
7 F
1.2 (SP_BUS) 123.85 212.67 P
3 F
0.5 ( is working, each sensor value can reach all processors. Of course, the system fails if) 163.45 212.67 P
0.04 (two) 87 199.67 P
0.04 (channels of the) 106.29 199.67 P
7 F
0.1 (SP_BUS) 175.77 199.67 P
3 F
0.04 ( fail. The processors form a degradable quadraplex. Outputs of the proces-) 215.37 199.67 P
0.92 (sors are sent over all channels of the triplicated) 87 186.67 P
7 F
2.2 (PA_BUS) 305.1 186.67 P
3 F
0.92 (. This transmission is accomplished by time) 344.7 186.67 P
-0.04 (multiplexing the bus. As long as at least two) 87 173.67 P
7 F
-0.1 (PA_BUS) 284.62 173.67 P
3 F
-0.04 ( channels are working, all working-processor out-) 324.22 173.67 P
1.38 (puts reach the force-sum actuation system. Thus, no dependencies exist between the processors, the) 87 160.67 P
-0.14 (force-sum actuator, and the) 87 147.67 P
7 F
-0.34 (PA_BUS) 209.53 147.67 P
3 F
-0.14 (. For simplicity, the force-sum actuation system will be treated as a) 249.13 147.67 P
1.52 (black box. Force-sum actuation systems are complex mechanical and electronic systems that utilize) 87 134.67 P
-0.14 (multiple actuators, and sometimes, internal fault-tolerant electronics, and thus, would require a sophisti-) 87 121.67 P
0.66 (cated model to properly analyze.  The force-sum actuator will be assumed to ignore the outputs of all) 87 108.67 P
2.16 (processors that have been removed from the quadraplex. Thus, the force-sum actuator performs a) 87 95.67 P
-0.27 (mechanical vote on all outputs from processors that are currently in the configuration. The failure rate of) 87 82.67 P
(the force-sum actuator is 10) 87 69.67 T
6 8.8 Q
(-) 209.8 74.07 T
3 F
(8) 214.63 74.07 T
3 11 Q
(/hr.) 219.04 69.67 T
3 9 Q
(Figure 39.  System with five subsystems.) 241 275.81 T
87 281.81 543 486.03 C
103.5 292.81 526.5 486.03 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 101 300 512 495 411 195 109.5 291.7 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig39.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig39.ps)
%%CreationDate: (7/27/95) (8:33 AM)
%%BoundingBox: 101 300 512 495
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
369 430.5 m
190.5 430.5 L
S
369 377 m
190.5 377 L
S
369 322 m
369 483 L
190.5 483 L
190.5 322 L
369 322 L
s
279.75 402.5 m
S
509.5 394.5 m
425 394.5 420 394.5 v
415 394.5 407 399 409.5 402.5 c
412 406 414.5 413 430 413.5 c
445.5 414 476 407.5 509.5 394.5 c
s
0 To
1 0 0 1 127.5 472 0 Tp
TP
-12.2465 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(Sensor\r) Tx 
8.2463 -9 Td
(s1) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.75 w
334 474.5 m
334 492 L
226 492 L
226 474.5 L
334 474.5 L
b
280 483.25 m
B
U
u
334 421 m
334 438.5 L
226 438.5 L
226 421 L
334 421 L
b
280 429.75 m
B
U
u
334 367.5 m
334 385 L
226 385 L
226 367.5 L
334 367.5 L
b
280 376.25 m
B
U
u
334 314 m
334 331.5 L
226 331.5 L
226 314 L
334 314 L
b
280 322.75 m
B
U
u
151 456.5 m
151 484 L
103.5 484 L
103.5 456.5 L
151 456.5 L
s
127.25 470.25 m
S
U
0 To
1 0 0 1 278 481.5 0 Tp
TP
-23.369 0 Td
0 Tr
0 O
0 g
1 w
(Computer c1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 278 428 0 Tp
TP
-23.369 0 Td
0 Tr
(Computer c2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 278 374.5 0 Tp
TP
-23.369 0 Td
0 Tr
(Computer c3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 278 321 0 Tp
TP
-23.369 0 Td
0 Tr
(Computer c4) Tx 
(\r) TX 
TO
1 g
0 R
0 G
0.75 w
190.5 402.5 m
151 402.5 l
B
0 To
1 0 0 1 127.5 404 0 Tp
TP
-12.2465 0 Td
0 Tr
0 g
1 w
(Sensor\r) Tx 
8.2463 -9 Td
(s2) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
151 388.5 m
151 416 L
103.5 416 L
103.5 388.5 L
151 388.5 L
s
127.25 402.25 m
S
U
0 O
1 g
190.5 470 m
151 470 l
B
190.5 334 m
151 334 l
B
0 To
1 0 0 1 127.5 335.5 0 Tp
TP
-12.2465 0 Td
0 Tr
0 g
1 w
(Sensor\r) Tx 
8.2463 -9 Td
(s3) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
151 320 m
151 347.5 L
103.5 347.5 L
103.5 320 L
151 320 L
s
127.25 333.75 m
S
U
0 To
1 0 0 1 458 376.5 0 Tp
TP
-19.2415 0 Td
0 Tr
0 O
0 g
1 w
(Force-sum\r) Tx 
4.7516 -9 Td
(actuator) Tx 
(\r) TX 
TO
0 To
1 0 0 1 353.5 303 0 Tp
TP
-16.196 0 Td
0 Tr
/_Courier 9 Tf
(PA_bus) Tx 
(\r) TX 
TO
0 To
1 0 0 1 205.5 303 0 Tp
TP
-16.196 0 Td
0 Tr
(SP_bus) Tx 
(\r) TX 
TO
1 g
0 R
0 G
0.75 w
409 402.5 m
369.5 402.5 l
B
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 281.81 543 486.03 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 63
%%Page: "58" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(58) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.14 (Because no failure dependencies exist, the separate subsystems can be represented by separate reli-) 105 718.67 P
1.03 (ability models. Each model is solved in isolation. Finally, the results are added together probabilisti-) 87 705.67 P
0.67 (cally, that is, the probability of the union as described in section 10.3. The SURE command) 87 692.67 P
7 F
1.6 (ORPROB) 503.4 692.67 P
3 F
(performs the probabilistic addition automatically. The SURE input file is) 87 679.67 T
7 9.75 Q
(LAMBDA_SENSORS = 3.8E-6;) 87 661.32 T
(1,2 = 3*LAMBDA_SENSORS;) 87 649.4 T
(2,3 = 2*LAMBDA_SENSORS;) 87 637.47 T
(RUN;) 87 625.54 T
(LAMBDA_SP_BUS = 3.8E-6;) 87 607.62 T
(1,2 = 3*LAMBDA_SP_BUS;) 87 595.69 T
(2,3 = 2*LAMBDA_SP_BUS;) 87 583.76 T
(RUN;) 87 571.84 T
(LAMBDA_PA_BUS = 3.8E-6;) 87 553.91 T
(1,2 = 3*LAMBDA_PA_BUS;) 87 541.98 T
(2,3 = 2*LAMBDA_PA_BUS;) 87 530.05 T
(RUN;) 87 518.13 T
(LAMBDA_ACT = 1E-8;) 87 500.2 T
(1,2 = LAMBDA_ACT;) 87 488.27 T
(RUN;) 87 476.35 T
(LAMBDA = 1E-4;                  \050* Failure rate of processor *\051) 87 458.42 T
(MEANREC = 1E-5;                 \050* Mean reconfiguration time *\051) 87 446.49 T
(STDREC = 1E-5;                  \050* Standard deviation of \322 \322 *\051) 87 434.57 T
(1,2 = 4*LAMBDA;) 87 416.64 T
(2,3 = 3*LAMBDA;) 87 404.71 T
(2,4 = <MEANREC,STDREC>;) 87 392.79 T
(4,5 = 3*LAMBDA;) 87 380.86 T
(5,6 = 2*LAMBDA;) 87 368.93 T
(5,7 = <MEANREC,STDREC>;) 87 357.01 T
(7,8 = LAMBDA;) 87 345.08 T
(RUN;) 87 333.15 T
(ORPROB;) 87 315.23 T
3 11 Q
1.38 (The interactive session uses a single input file with three models, three) 105 296.47 P
7 F
3.32 (RUN) 435.35 296.47 P
3 F
1.38 ( statements, and an) 455.14 296.47 P
7 F
(ORPROB) 87 283.47 T
3 F
( command:) 126.6 283.47 T
7 9.75 Q
($ sure) 87 265.12 T
(  SURE V7.4    NASA Langley Research Center) 87 247.2 T
(  1? read sa) 87 229.27 T
(  2: LAMBDA_SENSORS = 3.8E-6;) 87 211.34 T
(  3: 1,2 = 3*LAMBDA_SENSORS;) 87 199.41 T
(  4: 2,3 = 2*LAMBDA_SENSORS;) 87 187.49 T
(  5: RUN;) 87 175.56 T
(MODEL FILE = sa.mod                      SURE V7.4 24 Jan 90   10:28:46) 87 157.64 T
(               LOWERBOUND   UPPERBOUND    COMMENTS               RUN #1) 87 133.96 T
-0.03 ( -----------   -----------   -----------    ---------------------------------) 87 122.03 P
(              4.33173e-09  4.33200e-09) 87 110.1 T
(1 PATH\050S\051 TO DEATH STATES) 87 92.18 T
(0.034 SECS. CPU TIME UTILIZED) 87 80.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 64
%%Page: "59" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(59) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
( 6:) 87 719.33 T
( 7: LAMBDA_SP_BUS = 3.8E-6;) 87 706.8 T
( 8: 1,2 = 3*LAMBDA_SP_BUS;) 87 694.27 T
( 9: 2,3 = 2*LAMBDA_SP_BUS;) 87 681.74 T
(10: RUN;) 87 669.21 T
(MODEL FILE = sa.mod                      SURE V7.4 24 Jan 90   10:28:46) 87 650.68 T
(               LOWERBOUND    UPPERBOUND   COMMENTS                 RUN #2) 87 626.15 T
-0.55 ( -----------   -----------   -----------    ---------------------------------) 87 613.62 P
(              4.33173e-09   4.33200e-09) 87 601.09 T
(1 PATH\050S\051 TO DEATH STATES) 87 582.56 T
(0.034 SECS. CPU TIME UTILIZED) 87 570.03 T
(11:) 87 557.5 T
(12: LAMBDA_PA_BUS = 3.8E-6;) 87 544.97 T
(13: 1,2 = 3*LAMBDA_PA_BUS;) 87 532.44 T
(14: 2,3 = 2*LAMBDA_PA_BUS;) 87 519.91 T
(15: RUN;) 87 507.38 T
(MODEL FILE = sa.mod                      SURE V7.4 24 Jan 90   10:28:47) 87 488.85 T
(               LOWERBOUND    UPPERBOUND   COMMENTS                 RUN #3) 87 464.31 T
-0.55 ( -----------   -----------   -----------    ---------------------------------) 87 451.78 P
(              4.33173e-09   4.33200e-09) 87 439.25 T
(1 PATH\050S\051 TO DEATH STATES) 87 420.72 T
(0.050 SECS. CPU TIME UTILIZED) 87 408.19 T
(16:) 87 395.66 T
(17: LAMBDA_ACT = 1E8;) 87 383.13 T
(18: 1,2 = LAMBDA_ACT;) 87 370.6 T
(19: RUN) 87 358.07 T
(MODEL FILE = sa.mod               SURE V7.4 24 Jan 90   10:28:47) 87 339.54 T
(               LOWERBOUND    UPPERBOUND    COMMENTS               RUN #4) 87 315.01 T
-0.5 ( -----------   -----------    -----------    --------------------------------) 87 302.48 P
(              1.00000e-07    1.00000e-07) 87 289.95 T
(1 PATH\050S\051 TO DEATH STATES) 87 271.42 T
(0.050 SECS. CPU TIME UTILIZED) 87 258.89 T
(20:) 87 246.36 T
(21: LAMBDA = 1E-4;                    \050* Failure rate of processor *\051) 87 233.83 T
(22: MEANREC = 1E-5;                   \050* Mean reconfiguration time *\051) 87 221.29 T
(23: STDREC =  1E-5;                   \050* Standard deviation of " " *\051) 87 208.76 T
(24:) 87 196.23 T
(25: 1,2 = 4*LAMBDA;) 87 183.7 T
(26: 2,3 = 3*LAMBDA;) 87 171.17 T
(27: 2,4 = <MEANREC,STDREC>;) 87 158.64 T
(28: 4,5 = 3*LAMBDA;) 87 146.11 T
(29: 5,6 = 2*LAMBDA;) 87 133.58 T
(30: 5,7 = <MEANREC,STDREC>;) 87 121.05 T
(31: 7,8 = LAMBDA;) 87 108.52 T
(32: RUN;) 87 95.99 T
(MODEL FILE = sa.mod                       SURE V7.4 24 Jan 90   10:28:47) 87 77.46 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 65
%%Page: "60" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(60) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
(               LOWERBOUND    UPPERBOUND    COMMENTS               RUN #5) 87 719.33 T
( -----------   -----------   -----------    --------------------------------) 87 704.67 T
(               2.00574e-09  2.01201e-09) 87 690.02 T
(3 PATH\050S\051 TO DEATH STATES) 87 669.36 T
(0.134 SECS. CPU TIME UTILIZED) 87 654.7 T
(33:) 87 640.04 T
(34: ORPROB;) 87 625.38 T
( MODEL FILE = sa.mod                      SURE V7.4 24 Jan 90   10:28:48) 87 604.72 T
(   RUN #      LOWERBOUND    UPPERBOUND) 87 578.06 T
(----------   -----------   -----------) 87 563.4 T
(     1       4.33173e-09   4.33200e-09) 87 548.74 T
(     2       4.33173e-09   4.33200e-09) 87 534.08 T
(     3       4.33173e-09   4.33200e-09) 87 519.43 T
(     4       1.00000e-07   1.00000e-07) 87 504.77 T
(     5       2.00574e-09   2.01201e-09) 87 490.11 T
(----------   -----------   -----------) 87 475.45 T
( OR PROB =   1.15001e-07   1.15008e-07) 87 460.79 T
(        0.70 SECS. TO READ MODEL FILE) 87 434.13 T
(35? exit) 87 419.47 T
3 11 Q
0.14 (The sensor subsystem for this example was very simple to model. Section 12.2 shows a more com-) 105 398.15 P
(plex sensor subsystem.) 87 385.15 T
4 10.5 Q
(12.2. Flight Contr) 105 357.82 T
(ol System W) 184.73 357.82 T
(ith Failur) 240.53 357.82 T
(e Dependency) 283.23 357.82 T
3 11 Q
-0.27 (The flight control system modeled in this section contains components that are dependent upon each) 105 337.33 P
-0.16 (other.   The system consists of four sensors \050s1, s2, s3, and s4\051, four computers \050c1, c2, c3, and c4\051 and a) 87 324.33 P
(quadraplex) 87 311.33 T
7 F
(PA_BUS) 138.62 311.33 T
3 F
(.  The system is illustrated in figure 40.) 178.22 311.33 T
3 9 Q
(Figure 40.  Flight control system with dependent components.) 203.25 69 T
87 75 543 283.66 C
127 86 503 283.66 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 101 300 465 500 364 200 133 84.33 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig40.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig40.ps)
%%CreationDate: (8/3/95) (3:53 PM)
%%BoundingBox: 101 300 465 500
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
369 430.5 m
190.5 430.5 L
S
369 377 m
190.5 377 L
S
190.5 322 m
369 322 L
369 483.5 L
190.5 483.5 L
S
279.75 402.5 m
S
0 To
1 0 0 1 127.5 485.5 0 Tp
TP
-12.2465 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(Sensor\r) Tx 
8.2463 -9 Td
(s1) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.75 w
334 475 m
334 492.5 L
226 492.5 L
226 475 L
334 475 L
b
280 483.75 m
B
U
u
334 421 m
334 438.5 L
226 438.5 L
226 421 L
334 421 L
b
280 429.75 m
B
U
u
334 367.5 m
334 385 L
226 385 L
226 367.5 L
334 367.5 L
b
280 376.25 m
B
U
u
334 314 m
334 331.5 L
226 331.5 L
226 314 L
334 314 L
b
280 322.75 m
B
U
u
151 470 m
151 497.5 L
103.5 497.5 L
103.5 470 L
151 470 L
s
127.25 483.75 m
S
U
0 To
1 0 0 1 278 482 0 Tp
TP
-23.369 0 Td
0 Tr
0 O
0 g
1 w
(Computer c1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 278 428 0 Tp
TP
-23.369 0 Td
0 Tr
(Computer c2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 278 374.5 0 Tp
TP
-23.369 0 Td
0 Tr
(Computer c3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 278 321 0 Tp
TP
-23.369 0 Td
0 Tr
(Computer c4) Tx 
(\r) TX 
TO
1 g
0 R
0 G
0.75 w
190.5 430.5 m
151 430.5 l
B
0 To
1 0 0 1 127.5 432 0 Tp
TP
-12.2465 0 Td
0 Tr
0 g
1 w
(Sensor\r) Tx 
8.2463 -9 Td
(s2) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
151 416.5 m
151 444 L
103.5 444 L
103.5 416.5 L
151 416.5 L
s
127.25 430.25 m
S
U
0 O
1 g
190.5 483.5 m
151 483.5 l
B
190.5 377 m
151 377 l
B
0 To
1 0 0 1 127.5 378.5 0 Tp
TP
-12.2465 0 Td
0 Tr
0 g
1 w
(Sensor\r) Tx 
8.2463 -9 Td
(s3) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
151 363 m
151 390.5 L
103.5 390.5 L
103.5 363 L
151 363 L
s
127.25 376.75 m
S
U
0 To
1 0 0 1 353.5 303 0 Tp
TP
-16.196 0 Td
0 Tr
0 O
0 g
1 w
/_Courier 9 Tf
(PA_BUS) Tx 
(\r) TX 
TO
1 g
0 R
0 G
0.75 w
409 402.5 m
369.5 402.5 l
B
190.5 322 m
151 322 l
B
0 To
1 0 0 1 127.5 323.5 0 Tp
TP
-12.2465 0 Td
0 Tr
0 g
1 w
/_Times-Roman 9 Tf
(Sensor\r) Tx 
8.2463 -9 Td
(s4) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
151 308 m
151 335.5 L
103.5 335.5 L
103.5 308 L
151 308 L
s
127.25 321.75 m
S
U
0 To
1 0 0 1 434 403.5 0 Tp
TP
-19.2415 0 Td
0 Tr
0 O
0 g
1 w
(Force-sum\r) Tx 
4.7516 -9 Td
(actuator) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
457.5 388 m
457.5 415.5 L
410 415.5 L
410 388 L
457.5 388 L
s
433.75 401.75 m
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 75 543 283.66 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 66
%%Page: "61" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(61) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.54 (Each sensor is connected to only one processor; therefore, the failure of a processor makes the) 105 718.67 P
0.12 (attached sensor useless.  However, the reverse is not true because the processors are cross-strapped and) 87 705.67 P
(exchange sensor values.) 87 692.67 T
-0.04 (Because the sensors and the computers are dependent, they can no longer be analyzed with separate) 105 673.33 P
0.09 (models. Furthermore, counting the number of sensor and computer failures is no longer sufficient.  The) 87 660.33 P
0.37 (specific sensor or computer that has failed must be recorded in the state information. Consider the two) 87 647.33 P
(sequences of failures:) 87 634.33 T
(1.) 105 615 T
(Sensor 1 fails, then processor 1 fails.) 117 615 T
(2.) 105 595.66 T
(Sensor 1 fails, then processor 2 fails.) 117 595.66 T
0.28 (Note that in both cases one sensor and one processor fail.  However, the second sequence of failures is) 87 576.33 P
(more serious, because it results in the loss of two sensors.) 87 563.33 T
7 10 Q
(LS    = 6.5E-5;   \050* Failure rate of sensors *\051) 87 544.66 T
(LC    = 3.5E-4;   \050* Failure rate of computers *\051) 87 532.33 T
(DELTA = 1E4;      \050* Rate of removing faulty computer from configuration *\051) 87 519.99 T
(ONEDEATH OFF;) 87 507.66 T
(SPACE = \050WS : ARRAY[1..4] OF 0..1,  \050* Status of the 3 sensors *\051) 87 495.32 T
-0.8 (          AC : ARRAY[1..4]) 87 482.99 P
-0.8 ( OF 0..1,   \050* Computers in configuration *\051) 234.22 482.99 P
(         WC : ARRAY[1..4]) 87 470.65 T
(OF 0..1) 240.32 470.65 T
( \050* Working computers in configuration *\051) 296.81 470.65 T
(        \051;) 87 458.32 T
(START = \0504 OF 1, 4 OF 1, 4 OF 1\051;) 87 445.98 T
(FOR I = 1,4) 87 433.65 T
(   IF WS[I] = 1 TRANTO WS[I] = 0            BY LS; \050* Sensor   fails *\051) 87 421.32 T
(   IF WC[I] = 1 TRANTO WC[I] = 0, WS[I] = 0 BY LC; \050* Computer fails *\051) 87 408.98 T
(   IF AC[I] = 1 AND WC[I] = 0 TRANTO AC[I] = 0 BY DELTA;) 87 396.65 T
(ENDFOR;) 87 384.31 T
(DEATHIF WS[1] + WS[2] + WS[3] + WS[4] = 0;) 87 371.98 T
-0.35 (DEATHIF AC[1] + AC[2] + AC[3] + AC[4] >= 2 * \050WC[1] + WC[2] + WC[3] + WC[4]\051;) 87 359.64 P
3 11 Q
0.53 (The first three statements define the failure rates of the sensors, the failure rates of the computers,) 105 340.64 P
1.01 (and the recovery rate of the computers. The) 87 327.64 P
7 F
2.43 (ONEDEATH) 289.69 327.64 P
2.43 (OFF) 349.09 327.64 P
3 F
1.01 ( statement turns off aggregation of the) 368.89 327.64 P
-0.19 (death states. By default, ASSIST collapses all death states into one state. This command causes ASSIST) 87 314.64 P
1.26 (to give each death state a unique state number. The) 87 301.64 P
7 F
3.04 (FOR) 327.24 301.64 P
3 F
1.26 ( loop effectively creates 12) 347.04 301.64 P
7 F
3.04 (TRANTO) 475.25 301.64 P
3 F
1.26 ( rules.) 514.85 301.64 P
0.7 (These rules create failure transitions corresponding to failures of the eight individual components and) 87 288.64 P
0.62 (recovery transitions corresponding to the removal of faulty processors. The two) 87 275.64 P
7 F
1.49 (DEATHIF) 446.99 275.64 P
3 F
0.62 ( statements) 493.19 275.64 P
(define two failure conditions:) 87 262.64 T
(1.) 105 243.31 T
(No sensors are left.) 117 243.31 T
(2.) 105 223.97 T
(A majority of the processors  are no longer working.) 117 223.97 T
(The ASSIST output is) 105 204.64 T
7 10 Q
(ASSIST VERSION 7.1                         NASA Langley Research Center) 87 185.97 T
(PARSING TIME = 0.23 sec.) 87 173.64 T
(generating SURE model file...) 87 161.3 T
( 100 transitions processed.) 87 148.97 T
( 200 transitions processed.) 87 136.63 T
( 300 transitions processed.) 87 124.3 T
( 400 transitions processed.) 87 111.96 T
( 500 transitions processed.) 87 99.63 T
( 00 transitions processed.) 87 87.29 T
(RULE GENERATION TIME = 1.09 sec.) 87 74.96 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 67
%%Page: "62" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(62) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
(NUMBER OF STATES IN MODEL = 397) 87 719.33 T
(NUMBER OF TRANSITIONS IN MODEL = 600) 87 706.82 T
3 11 Q
( The transcript of the SURE run follows:) 105 688.65 T
7 10 Q
(% sure) 87 669.8 T
(  SURE V7.9.8   NASA Langley Research Center) 87 652.29 T
(  1? read0 fcs-dep) 87 634.78 T
(       0.60 SECS. TO READ MODEL FILE) 87 611.27 T
(1810? run) 87 598.76 T
( MODEL FILE = fcs-dep.mod               SURE V7.9.8 27 Jun 94  08:56:16) 87 581.25 T
(             LOWERBOUND  UPPERBOUND   COMMENTS           RUN #1) 87 556.23 T
-2 (-----------   -----------   -----------    ---------------------------) 87 543.72 P
(             1.71645e-07  1.71645e-07  <prune 1.3e-14> <ExpMat>) 87 531.2 T
(6171 PATH\050S\051 TO DEATH STATES 666 PATH\050S\051 PRUNED) 87 513.69 T
(HIGHEST PRUNE LEVEL =  1.59354e-15) 87 501.18 T
(Q\050T\051 ACCURACY >= 9 DIGITS) 87 488.67 T
(30.500 SECS. CPU TIME UTILIZED) 87 476.16 T
(% sure) 87 458.65 T
(  SURE V7.9.8   NASA Langley Research Center) 87 440.14 T
(  1? read0 fcs-dep) 87 422.63 T
(       0.60 SECS. TO READ MODEL FILE) 87 399.12 T
(1810? run) 87 386.61 T
( MODEL FILE = fcs-dep.mod               SURE V7.9.8 27 Jun 94  09:25:56) 87 369.1 T
(              LOWERBOUND  UPPERBOUND  COMMENTS          RUN #1) 87 344.08 T
-2.28 ( -----------    -----------   -----------    -------------------------) 87 331.57 P
(              1.71645e-07  1.71645e-0   <prune 1.3e-14> <ExpMat>) 87 319.05 T
(6171 PATH\050S\051 TO DEATH STATES 666 PATH\050S\051 PRUNED) 87 301.54 T
(HIGHEST PRUNE LEVEL =  1.59354e-15) 87 289.03 T
(Q\050T\051 ACCURACY >= 9 DIGITS) 87 276.52 T
(29.883 SECS. CPU TIME UTILIZED) 87 264.01 T
3 11 Q
0.62 (The SURE program found 6171 paths in the model that lead to a death state.  The SURE pruning) 105 244.84 P
-0.17 (facility pruned 666 paths that contributed a total of 1.3) 87 231.84 P
6 F
-0.17 (\264) 328.22 231.84 P
3 F
-0.17 ( 10) 334.26 231.84 P
6 8.8 Q
-0.13 (-) 347.84 236.23 P
3 F
-0.13 (14) 352.67 236.23 P
3 11 Q
-0.17 ( to the upper bound. Because this number) 361.47 231.84 P
-0.22 (is small when compared with the final value of 1.7) 87 218.84 P
6 F
-0.22 (\264) 310.57 218.84 P
3 F
-0.22 ( 10) 316.61 218.84 P
6 8.8 Q
-0.18 (-) 330.14 223.23 P
3 F
-0.18 (7) 334.97 223.23 P
3 11 Q
-0.22 (, the pruning is not too severe. The SURE exe-) 339.37 218.84 P
0.01 (cution time was 29.9 sec. Although, the default pruning level was used in this case, the user can specify) 87 205.84 P
0.71 (a probability level for model pruning, for example 10) 87 192.84 P
6 8.8 Q
0.57 (-) 327.64 197.23 P
3 F
0.57 (15) 332.47 197.23 P
3 11 Q
0.71 (. Each time the probability of encountering a) 341.27 192.84 P
1.14 (state in the model falls below the specified value, that path is pruned. The SURE program sums the) 87 179.84 P
0.16 (probabilities of all pruned paths and reports that value to the user as the estimated error due to pruning.) 87 166.84 P
(SURE always adds the pruned value to the upper bound.) 87 153.84 T
0.44 (This run did not account for the failure of the) 105 134.32 P
7 F
1.06 (PA_BUS) 311.05 134.32 P
3 F
0.44 ( or the actuator. Because these components) 350.64 134.32 P
(are not dependent upon the sensors or the computers, they can be analyzed by separate models:) 87 121.32 T
7 10 Q
(1811? read fcs-other) 87 102.48 T
(1812: LAMBDA_PA_BUS = 3.8E-6;) 87 84.97 T
(1813: 1,2 = 3*LAMBDA_PA_BUS;) 87 72.46 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 68
%%Page: "63" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(63) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
(1814: 2,3 = 2*LAMBDA_PA_BUS;) 87 719.33 T
(1815: RUN;) 87 707.22 T
( MODEL FILE = fcs-other.mod          SURE V7.9.8 27 Jun 94  09:28:29) 87 695.12 T
(               LOWERBOUND    UPPERBOUND    COMMENTS            RUN #2) 87 670.9 T
(-----------   -----------   -----------   ---------------------------) 87 658.79 T
(              4.33173e-09   4.33200e-09) 87 646.68 T
( 1 PATH\050S\051 TO DEATH STATES) 87 634.57 T
( 0.000 SECS. CPU TIME UTILIZED) 87 622.46 T
(1816:) 87 610.35 T
(1817: LAMBDA_ACT = 1E-8;) 87 598.25 T
(1818: 1,2 = LAMBDA_ACT;) 87 586.14 T
(1819: RUN;) 87 574.03 T
( MODEL FILE = fcs-other.mod             SURE V7.9.8 27 Jun 94  09:28:29) 87 555.92 T
(              LOWERBOUND   UPPERBOUND  COMMENTS            RUN #3) 87 534.81 T
-2.36 (-----------    -----------   -----------    --------------------------) 87 522.7 P
(              1.00000e-0  1.00000e-07) 87 510.59 T
( 1 PATH\050S\051 TO DEATH STATES) 87 492.49 T
( 0.016 SECS. CPU TIME UTILIZED) 87 480.38 T
(       0.03 SECS. TO READ MODEL FILE) 87 462.27 T
(1820? ORPROB) 87 450.16 T
( MODEL FILE = fcs-other.mod             SURE V7.9.8 27 Jun 94  09:28:44) 87 432.05 T
(    RUN #      LOWERBOUND    UPPERBOUND) 87 413.94 T
( ----------   -----------   -----------) 87 401.83 T
(     1        1.71645e-07   1.71645e-07) 87 389.73 T
(     2        4.33173e-09   4.33200e-09) 87 377.62 T
(     3        1.00000e-07   1.00000e-07) 87 365.51 T
( ----------   -----------   -----------) 87 353.4 T
(  OR PROB =   2.75976e-07   2.75976e-07) 87 341.29 T
(1821?) 87 324.18 T
3 11 Q
(The final) 87 306.41 T
7 F
(ORPROB) 129.77 306.41 T
3 F
( command calculates the final system reliability from the three separate SURE runs.) 169.37 306.41 T
0.71 (Suppose a new) 105 288.3 P
7 F
1.7 (X) 175.86 288.3 P
3 F
0.71 ( component is added to the architecture.  This component is dependent upon the) 182.46 288.3 P
(computer to which it is attached in the same way that the sensors are.  The new ASSIST model is) 87 275.3 T
7 10 Q
(LS = 6.5E-5;   \050* Failure rate of sensors *\051) 87 256.85 T
(LC = 3.5E-4;   \050* Failure rate of computers *\051) 87 244.75 T
(LX = 5.0E-5;   \050* Failure rate of X component *\051) 87 232.64 T
(DELTA = 1E4;   \050* Rate of removing faulty computer from configuration *\051) 87 220.53 T
(ONEDEATH OFF;) 87 205.42 T
(SPACE = \050WS : ARRAY[1..4] OF 0..1,  \050* Status of the 3 sensors *\051) 87 190.31 T
-0.6 (          AC : ARRAY[1..4] OF 0..1,  \050* Computers in configuration *\051) 87 178.2 P
-0.55 (          WC : ARRAY[1..4] OF 0..1,  \050* Working computers in configuration *\051) 87 166.09 P
(         WX : ARRAY[1..4] OF 0..1  \050* Status of the 4 X-components *\051) 87 153.99 T
(        \051;) 87 141.88 T
(START = \0504 OF 1, 4 OF 1, 4 OF 1, 4 OF 1\051;) 87 123.77 T
(FOR I = 1,4) 87 105.66 T
(   IF WS[I] = 1 TRANTO WS[I] = 0                       BY LS;) 87 93.55 T
(   IF WC[I] = 1 TRANTO WC[I] = 0, WS[I] = 0, WX[I] = 0 BY LC;) 87 81.44 T
(   IF AC[I] = 1 AND WC[I] = 0 TRANTO AC[I] = 0         BY FAST DELTA;) 87 69.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 69
%%Page: "64" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(64) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
(   IF WX[I] = 1 TRANTO WX[I] = 0,                      BY LX;) 87 719.33 T
(ENDFOR;) 87 706.63 T
(DEATHIF WS[1] + WS[2] + WS[3] + WS[4] = 0;) 87 687.93 T
(DEATHIF WX[1] + WX[2] + WX[3] + WX[4] = 0;) 87 675.23 T
-0.35 (DEATHIF AC[1] + AC[2] + AC[3] + AC[4] >= 2 * \050WC[1] + WC[2] + WC[3] + WC[4]\051;) 87 662.53 P
3 11 Q
0.1 (Notice that the second) 105 643.16 P
7 F
0.24 (TRANTO) 206.21 643.16 P
3 F
0.1 ( statement in the) 245.81 643.16 P
7 F
0.24 (FOR) 321.38 643.16 P
3 F
0.1 ( loop has been modified to include the depen-) 341.18 643.16 P
0.05 (dency of the) 87 630.16 P
7 F
0.13 (X) 144.28 630.16 P
3 F
0.05 ( component on the computer to which it is connected.  The ASSIST generation transcript) 150.88 630.16 P
(follows:) 87 617.16 T
7 10 Q
(% assist frcs-dep) 87 598.12 T
(ASSIST VERSION 7.1                          NASA Langley Research Center) 87 585.42 T
(PARSING TIME = 0.22 sec.) 87 572.72 T
(generating SURE model file...) 87 560.02 T
( 100 transitions processed.) 87 547.32 T
( 200 transitions processed.) 87 534.61 T
( 300 transitions processed.) 87 521.91 T
( 400 transitions processed.) 87 509.21 T
( 500 transitions processed.) 87 496.51 T
( 600 transitions processed.) 87 483.81 T
( 700 transitions processed.) 87 471.11 T
( 800 transitions processed.) 87 458.4 T
( 900 transitions processed.) 87 445.7 T
(1000 transitions processed.) 87 433 T
(2000 transitions processed.) 87 420.3 T
(3000 transitions processed.) 87 407.6 T
(4000 transitions processed.) 87 394.9 T
(5000 transitions processed.) 87 382.19 T
(6000 transitions processed.) 87 369.49 T
(7000 transitions processed.) 87 356.79 T
(8000 transitions processed.) 87 344.09 T
(9000 transitions processed.) 87 331.39 T
(10000 transitions processed.) 87 318.69 T
(RULE GENERATION TIME = 28.12 sec.) 87 305.98 T
(NUMBER OF STATES IN MODEL = 8387) 87 293.28 T
(NUMBER OF TRANSITIONS IN MODEL = 14328) 87 280.58 T
3 11 Q
-0.07 (The addition of the four) 105 262.21 P
7 F
-0.16 (X) 212.51 262.21 P
3 F
-0.07 ( components to the system has increased the number of states from 397 to) 219.11 262.21 P
0.03 (8387, a significant increase.  The system is allowed to aggregate the death states. The ASSIST program) 87 249.21 P
(is rerun with the death state aggregation and the following is obtained:) 87 236.21 T
7 10 Q
(% assist fcs-dep) 87 217.18 T
(ASSIST VERSION 7.1                          NASA Langley Research Center) 87 204.47 T
(PARSING TIME = 0.21 sec.) 87 191.77 T
(generating SURE model file...) 87 179.07 T
( 100 transitions processed.) 87 166.37 T
(  .) 87 153.67 T
(  .) 87 140.97 T
(10000 transitions processed.) 87 128.27 T
(RULE GENERATION TIME = 27.60 sec.) 87 115.56 T
(NUMBER OF STATES IN MODEL = 2214) 87 102.86 T
(NUMBER OF TRANSITIONS IN MODEL = 14328) 87 90.16 T
(6176 DEATH STATES AGGREGATED INTO STATES 1 - 3) 87 77.46 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 70
%%Page: "65" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(65) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.21 (Death state aggregation has significantly reduced the number of states, but  a large number of tran-) 105 718.67 P
0.76 (sitions remain in the model.  This large number of transitions is one of the major difficulties encoun-) 87 705.67 P
3.83 (tered when modeling real systems. The number of states and transitions in the model grows) 87 692.67 P
0.53 (exponentially with the number of components.  The reason that the models become large is that many) 87 679.67 P
-0.01 (combinations of components in the system can fail before system failure occurs.  In this model,  combi-) 87 666.67 P
-0.06 (nations of up to four or more failures that involve different  components can occur before a condition of) 87 653.67 P
0.73 (system failure is reached.  Because the occurrence of so many failures is unlikely during a short mis-) 87 640.67 P
1.3 (sion, these long paths typically contribute insignificant amounts to the probability of system failure.) 87 627.67 P
0.31 (The dominant failure modes of the system are typically the short paths to system failure that consist of) 87 614.67 P
-0.15 (failures of only two or three components. Although the long paths contribute insignificantly to the prob-) 87 601.67 P
0.44 (ability of system failure, the majority of the execution time needed to generate and solve this model is) 87 588.67 P
(spent handling long paths.) 87 575.67 T
0.56 (Fortunately, model pruning can be used to eliminate the long paths to system failure by conserva-) 105 556.42 P
0.32 (tively assuming that system failure occurs earlier on these paths. However, a more effective strategy is) 87 543.42 P
0.16 (to prune long paths in ASSIST to prevent the generation of all  these paths. Although SURE will prune) 87 530.42 P
(them, a large amount of time can be consumed by SURE in reading the generated file.) 87 517.42 T
0.56 (Pruning in the ASSIST program can reduce the model generation time and memory requirements,) 105 498.17 P
0.39 (as well as the solution time.  However, because pruning in ASSIST must be based on state-space vari-) 87 485.17 P
0.64 (able values rather than probability calculations, it must be done more crudely. The ASSIST user typi-) 87 472.17 P
0.45 (cally specifies pruning at a certain level of component failures in the system.  For example, if the user) 87 459.17 P
1.24 (knows or suspects that the dominant failures occur after only three or four component failures, then) 87 446.17 P
-0.17 (ASSIST can be commanded to prune the model at the fourth component failure.  This pruning is usually) 87 433.17 P
0.87 (done by introducing a new state space,) 87 420.17 P
7 F
2.09 (NF) 265.99 420.17 P
3 F
0.87 (, that counts the total number of component failures in the) 279.19 420.17 P
0.1 (system.  This state-space variable must be incremented in every) 87 407.17 P
7 F
0.25 (TRANTO) 371.22 407.17 P
3 F
0.1 ( statement that defines a com-) 410.82 407.17 P
-0.05 (ponent failure.  The input file for flight control system with the) 87 394.17 P
7 F
-0.13 (X) 366.51 394.17 P
3 F
-0.05 ( component modified to perform prun-) 373.11 394.17 P
(ing at the fourth component failure level is) 87 381.17 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 10 Q
(LS = 6.5E-5;   \050* Failure rate of sensors *\051) 87 362.58 T
(LC = 3.5E-4;   \050* Failure rate of computers *\051) 87 350.33 T
(LX = 5.0E-5;   \050* Failure rate of X component *\051) 87 338.08 T
(DELTA = 1E4;   \050* Rate of removing faulty computer from configuration *\051) 87 325.83 T
(ONEDEATH OFF;) 87 307.58 T
(SPACE = \050WS : ARRAY[1..4] OF 0..1,  \050* Status of the 3 sensors *\051) 87 289.33 T
-0.6 (          AC : ARRAY[1..4] OF 0..1,  \050* Computers in configuration *\051) 87 277.08 P
-0.55 (          WC : ARRAY[1..4] OF 0..1,  \050* Working computers in configuration *\051) 87 264.83 P
-1.37 (            WX : ARRAY[1..4] OF 0..1,   \050* Status of the 4 X-components *\051) 87 252.58 P
(         NF : 0..16) 87 240.33 T
(        \051;) 87 228.08 T
(START = \0504 OF 1, 4 OF 1, 4 OF 1, 4 OF 1, 0\051;) 87 209.83 T
(FOR I = 1,4) 87 191.58 T
(   IF WS[I] = 1 TRANTO WS[I] = 0, NF = NF + 1    BY LS;) 87 179.33 T
-0.22 (   IF WC[I] = 1 TRANTO WC[I] = 0, WS[I] = 0, WX[I] = 0 NF = NF + 1 BY LC;) 87 167.08 P
(   IF AC[I] = 1 AND WC[I] = 0 TRANTO AC[I] = 0   BY FAST DELTA;) 87 154.83 T
(   IF WX[I] = 1 TRANTO WX[I] = 0, NF = NF + 1    BY LX;) 87 142.58 T
(ENDFOR;) 87 130.33 T
(DEATHIF WS[1] + WS[2] + WS[3] + WS[4] = 0;) 87 112.08 T
(DEATHIF WX[1] + WX[2] + WX[3] + WX[4] = 0;) 87 99.83 T
-0.35 (DEATHIF AC[1] + AC[2] + AC[3] + AC[4] >= 2 * \050WC[1] + WC[2] + WC[3] + WC[4]\051;) 87 87.58 P
(PRUNEIF NF >= 4;) 87 69.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 71
%%Page: "66" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(66) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.93 (Notice that all failure) 105 718.67 P
7 F
2.23 (TRANTO) 205.26 718.67 P
3 F
0.93 ( statements now increment the) 244.86 718.67 P
7 F
2.23 (NF) 386.08 718.67 P
3 F
0.93 ( variable.  The) 399.28 718.67 P
7 F
2.23 (PRUNEIF) 469.29 718.67 P
3 F
0.93 ( state-) 515.49 718.67 P
(ment informs ASSIST to prune all states where) 87 705.67 T
7 F
(NF >= 4) 297.82 705.67 T
3 F
(. The ASSIST transcript follows:) 344.02 705.67 T
7 F
(% assist fcs-dep-prune) 87 685.62 T
-0.81 (ASSIST VERSION 7.1                          NASA Langley Research Center) 87 671.58 P
(PARSING TIME = 0.26 sec.) 87 657.53 T
(generating SURE model file...) 87 643.49 T
( 100 transitions processed.) 87 629.45 T
(  .) 87 615.4 T
(  .) 87 601.36 T
(3000 transitions processed.) 87 587.31 T
(RULE GENERATION TIME = 7.45 sec.) 87 573.27 T
(NUMBER OF STATES IN MODEL = 445) 87 559.23 T
(NUMBER OF TRANSITIONS IN MODEL = 3476) 87 545.18 T
(736 DEATH STATES AGGREGATED INTO STATES 1 - 3) 87 531.14 T
(1664 PRUNE STATES AGGREGATED INTO STATE 4) 87 517.09 T
3 F
0.16 (Thus, pruning at the fourth component level reduced the model from 2214 states and 14) 105 497.05 P
0.16 (328 transi-) 495.49 497.05 P
0.52 (tions to only 445 states and 3476 transitions. All pruned states are grouped into state \0504\051. If more than) 87 484.05 P
0.8 (one) 87 471.05 P
7 F
1.91 (PRUNEIF) 106.43 471.05 P
3 F
0.8 ( statement had existed, the pruned states would have been grouped according to which) 152.63 471.05 P
7 F
(PRUNEIF) 87 458.05 T
3 F
( statement  was satisfied.) 133.2 458.05 T
0.01 (Whenever the ASSIST input file includes one or more) 105 438.01 P
7 F
0.03 (PRUNEIF) 346.75 438.01 P
3 F
0.01 ( statements, the program automat-) 392.95 438.01 P
-0.1 (ically includes a statement in the SURE input file that indicates which states are pruned states generated) 87 425.01 P
(by ASSIST.  For this model, the following is generated:) 87 412.01 T
7 F
(PRUNESTATES = 4;) 118.75 391.96 T
3 F
(The output from the SURE run is) 105 371.92 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 F
(% sure) 87 351.87 T
(  SURE V7.9.8   NASA Langley Research Center) 87 331.83 T
(  1? read0 fcs-dep-prune) 87 311.79 T
(    PRUNE STATES ARE: 4) 87 291.74 T
(        4.33 SECS. TO READ MODEL FILE) 87 263.65 T
(10442? list = 2;) 87 249.61 T
(10443? run) 87 235.56 T
-0.33 ( MODEL FILE = fcs-dep-prune.mod        SURE V7.9.8 27 Jun 94  10:19:42) 87 215.52 P
-0.22 ( DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS            RUN #1) 87 195.48 P
-1.05 ( ----------   -----------   -----------    ---------------------------) 87 181.43 P
(      1       1.16655e-10   1.18689e-10) 87 167.39 T
(      2       8.30445e-11   8.45037e-11) 87 153.34 T
(      3       1.70577e-07   1.73274e-07) 87 139.3 T
( sure prune   0.00000e+00   1.55244e-12) 87 125.26 T
(              -----------   -----------) 87 111.21 T
(   SUBTOTAL   1.70777e-07   1.73478e-07) 87 97.17 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 72
%%Page: "67" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(67) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
( PRUNESTATE    LOWERBOUND    UPPERBOUND) 87 718.67 T
( ----------   -----------   -----------) 87 704.58 T
( prune   4    4.22619e-10   4.29605e-10) 87 690.49 T
(              -----------   -----------) 87 676.4 T
(   SUBTOTAL   4.22619e-10   4.29605e-10) 87 662.31 T
( TOTAL        1.70777e-07   1.73909e-07) 87 634.13 T
(  13836 PATH\050S\051 TO DEATH STATES, 243 PATH\050S\051 PRUNED) 87 614.05 T
(  HIGHEST PRUNE LEVEL =  5.85986e-12) 87 599.96 T
( 1.800 SECS. CPU TIME UTILIZED) 87 579.87 T
3 F
1.1 (The states pruned by ASSIST are reported separately from the death states.  When reporting the) 105 559.78 P
0.66 (total bounds on probability of system failure \050in the line labeled \322) 87 546.78 P
7 F
1.59 (TOTAL) 382.4 546.78 P
3 F
0.66 (\323\051, the upper bound includes) 415.4 546.78 P
0.79 (the contribution of the prune states, whereas the lower bound does not. Thus, the) 87 533.78 P
7 F
1.9 (TOTAL) 455.86 533.78 P
3 F
0.79 ( line reports) 488.86 533.78 P
0.9 (valid bounds on the system failure probability.  If the) 87 520.78 P
7 F
2.17 (PRUNESTATE) 332.84 520.78 P
3 F
0.9 ( upper bound is significant with) 398.84 520.78 P
0.43 (respect to the) 87 507.78 P
7 F
1.03 (TOTAL) 149.69 507.78 P
3 F
0.43 ( upper bound, then the model has probably been pruned too severely in ASSIST.) 182.69 507.78 P
0.29 (For this example, the upper bound on the error due to the pruning done in ASSIST is 4.29605) 87 494.78 P
6 F
0.29 (\264) 506.54 494.78 P
3 F
0.29 ( 10) 512.58 494.78 P
6 8.8 Q
0.23 (-) 526.62 499.18 P
3 F
0.23 (10) 531.45 499.18 P
3 11 Q
0.29 (.) 540.25 494.78 P
0.43 (The SURE program performed some additional pruning which added 1.55) 87 481.78 P
6 F
0.43 (\264) 420.96 481.78 P
3 F
0.43 ( 10) 427 481.78 P
6 8.8 Q
0.34 (-) 441.18 486.18 P
3 F
0.34 (12) 446.01 486.18 P
3 11 Q
0.43 (.  Both numbers are) 454.81 481.78 P
1.37 (insignificant in comparison with the total upper bound of 1.7) 87 468.78 P
6 F
1.37 (\264) 371.07 468.78 P
3 F
1.37 ( 10) 377.11 468.78 P
6 8.8 Q
1.09 (-) 392.22 473.18 P
3 F
1.09 (7) 397.05 473.18 P
3 11 Q
1.37 (.  The user often wants to find) 401.45 468.78 P
1.68 (the) 87 455.78 P
1.68 (best level of pruning.  This level can be found by rerunning the model with different levels of) 103.19 455.78 P
1.71 (pruning.  The model is rerun with level 3 pruning. That is, the) 87 442.78 P
7 F
4.11 (PRUNEIF) 384.24 442.78 P
3 F
1.71 ( statement is changed to) 430.44 442.78 P
7 F
(PRUNEIF NF) 87 429.78 T
(>=) 159.6 429.78 T
(3) 179.4 429.78 T
3 F
(;) 186 429.78 T
(The following transcript shows the result of running both SURE and ASSIST:) 87 409.69 T
7 F
(%assist fcs-dep-prune) 87 390.6 T
-0.81 (ASSIST VERSION 7.1                          NASA Langley Research Center) 87 376.51 P
(PARSING TIME = 0.22 sec.) 87 362.42 T
(generating SURE model file...) 87 348.34 T
( 100 transitions processed.) 87 334.25 T
(  .) 87 320.16 T
(  .) 87 306.07 T
(1000 transitions processed.) 87 291.98 T
(RULE GENERATION TIME = 2.41 sec.) 87 277.89 T
(NUMBER OF STATES IN MODEL = 123) 87 263.8 T
(NUMBER OF TRANSITIONS IN MODEL = 1060) 87 249.72 T
(132 DEATH STATES AGGREGATED INTO STATES 1 - 3) 87 235.63 T
(724 PRUNE STATES AGGREGATED INTO STATE 4) 87 221.54 T
(% sure) 87 201.45 T
(  SURE V7.9.8   NASA Langley Research Center) 87 181.36 T
(  1? read0 fcs-dep-prune) 87 161.27 T
(    PRUNE STATES ARE: 4) 87 141.18 T
(       1.33 SECS. TO READ MODEL FILE) 87 121.09 T
(3194? run) 87 107.01 T
-0.33 ( MODEL FILE = fcs-dep-prune.mod        SURE V7.9.8 27 Jun 94  10:27:34) 87 86.92 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 73
%%Page: "68" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(68) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(                LOWERBOUND   UPPERBOUND     COMMENT           RUN #1) 87 718.67 T
(-----------) 100.2 705.23 T
(-----------) 186 705.23 T
(-----------) 271.8 705.23 T
(--------------------------) 370.8 705.23 T
(               1.70286e-07   5.35732e-07    <prune 1.2e-10>) 87 691.79 T
(1724 PATH\050S\051 TO DEATH STATES 6 PATH\050S\051 PRUNED) 87 666.35 T
(HIGHEST PRUNE LEVEL =  5.54876e-11) 87 652.91 T
(ASSIST PRUNE STATE PROBABILITY IS IN [ 3.57338e-07,  3.62633e-07]) 87 639.47 T
(0.233 SECS. CPU TIME UTILIZED) 87 626.03 T
3 F
1.17 (A significant reduction in the size of the model was obtained; however, the reported pruning by) 105 606.59 P
-0.26 (ASSIST of 3.6) 87 593.59 P
6 F
-0.26 (\264) 154.05 593.59 P
3 F
-0.26 ( 10) 160.09 593.59 P
6 8.8 Q
-0.21 (-) 173.58 597.99 P
3 F
-0.21 (7) 178.41 597.99 P
3 11 Q
-0.26 ( is significant in comparison with the upper bound. Although this amount has been) 182.81 593.59 P
1 (added to the upper bound, and thus, the bound is indeed an upper bound, it is not close to the lower) 87 580.59 P
(bound of 1.7) 87 567.59 T
6 F
(\264) 145.66 567.59 T
3 F
( 10) 151.7 567.59 T
6 8.8 Q
(-) 165.45 571.99 T
3 F
(7) 170.28 571.99 T
3 11 Q
(. If this level of accuracy is not sufficient, one must return to level 4 pruning.) 174.68 567.59 T
4 10.5 Q
(12.3. Monitor) 105 542.48 T
(ed Sensors) 165.76 542.48 T
3 11 Q
0.8 (In this example, a set of monitored sensors is modeled.  The system consists of five sensors with) 105 524.21 P
0.55 (five monitors to detect the failure of each sensor.  Sensors fail at rate) 87 511.21 P
6 F
0.55 (l) 399.82 511.21 P
5 8.8 Q
0.44 (S) 405.86 508.46 P
3 11 Q
0.55 (, and monitors fail at rate) 410.26 511.21 P
6 F
0.55 (l) 526.88 511.21 P
5 8.8 Q
0.44 (M) 532.92 508.46 P
3 11 Q
0.55 (.) 540.25 511.21 P
0.12 (The monitors are assumed to fail in a fail-stop manner, that is, a good sensor is not falsely accused. If a) 87 498.21 P
-0.05 (sensor fails and the monitor is working, the monitor will detect with 90-percent probability that the sen-) 87 485.21 P
0.54 (sor failed and will remove that sensor from the active configuration.  If the monitor has failed or does) 87 472.21 P
0.26 (not detect that the sensor has failed, then the faulty sensor remains in the active configuration and con-) 87 459.21 P
(tributes faulty answers to the voting.  There is no other means of reconfiguration.) 87 446.21 T
0.71 (Because values from all sensors in the active configuration are voted, system failure occurs when) 105 426.77 P
(half or more of the active sensors are faulty.) 87 413.77 T
(The ASSIST input file to describe this system is as follows:) 105 394.33 T
7 F
(LAMBDA_S = 1E-4;    \050* Failure rate of sensor *\051) 87 374.89 T
(LAMBDA_M = 1E-5;    \050* Failure rate of monitor *\051) 87 361.45 T
(COV = .90;          \050* Detection coverage of monitor *\051) 87 348.01 T
(SPACE = \050NW: 0..5,      \050* Number of working sensors *\051) 87 328.57 T
(         NW_MON: 0..5,  \050* Number of working sensors with monitors *\051) 87 315.13 T
(         NF: 0..5\051;     \050* Number of failed active sensors *\051) 87 301.69 T
(START = \0505,5,0\051;   \050* Start with 5 working sensors with monitors *\051) 87 282.25 T
(   \050* Failure of monitored sensor *\051) 87 262.81 T
(IF \050NW_MON > 0\051 THEN) 87 249.37 T
(   TRANTO NW=NW-1,NW_MON=NW_MON-1 BY COV*LAMBDA_S;) 87 235.93 T
(   TRANTO NW=NW-1,NW_MON=NW_MON-1,NF=NF+1 BY \0501-COV\051*LAMBDA_S;) 87 222.49 T
(ENDIF;) 87 209.05 T
(   \050* Failure of unmonitored sensor *\051) 87 189.61 T
(IF \050NW > NW_MON\051 TRANTO NW = NW-1, NF=NF+1 BY \050NW-NW_MON\051*LAMBDA_S;) 87 176.18 T
(   \050* Failure of monitor *\051) 87 156.74 T
(IF NW_MON > 0 TRANTO NW_MON = NW_MON-1 BY LAMBDA_M;) 87 143.3 T
(DEATHIF NF >= NW;) 87 123.86 T
3 F
1.48 (The state space consists of three variables:) 105 104.42 P
7 F
3.55 (NW) 305.05 104.42 P
3 F
1.48 (,) 318.25 104.42 P
7 F
3.55 (NW_MON) 325.23 104.42 P
3 F
1.48 (, and) 364.83 104.42 P
7 F
3.55 (NF) 391.92 104.42 P
3 F
1.48 (.  The state-space variable) 405.12 104.42 P
7 F
3.55 (NW) 529.8 104.42 P
3 F
0.93 (represents the number of working sensors in the active configuration and is decremented whenever a) 87 91.42 P
-0.11 (monitor detects that its sensor has failed.  The variable) 87 78.42 P
7 F
-0.27 (NW_MON) 328.76 78.42 P
3 F
-0.11 ( represents how many of the) 368.36 78.42 P
7 F
-0.27 (NW) 494.78 78.42 P
3 F
-0.11 ( sensors) 507.98 78.42 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 74
%%Page: "69" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(69) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.26 (have functioning monitors.  This variable is decremented whenever a monitor fails or a monitored sen-) 87 718.67 P
1.14 (sor fails.  The variable) 87 705.67 P
7 F
2.74 (NF) 194.12 705.67 P
3 F
1.14 ( represents the number of failed sensors in the active configuration and is) 207.32 705.67 P
0.15 (incremented whenever a sensor fails and its monitor is either faulty or fails to detect that the sensor has) 87 692.67 P
(failed.) 87 679.67 T
4 10.5 Q
(12.4. T) 105 654.36 T
(wo T) 134.85 654.36 T
(riads W) 156.53 654.36 T
(ith Thr) 192.22 654.36 T
(ee Power Supplies) 224.42 654.36 T
3 11 Q
-0.12 (This example consists of two triads of computers with one triad of power supplies connected so that) 105 635.89 P
0.4 (one computer in each triad is connected to each power supply.  Thus, if a power supply fails, then one) 87 622.89 P
0.78 (computer in each triad fails.  Because of the complex failure dependencies, this system is not easy to) 87 609.89 P
0.18 (model.  The usual method of using state-space variables to represent the number of failed computers in) 87 596.89 P
0.18 (each triad is insufficient because which computers have failed is also important state information.  One) 87 583.89 P
0.76 (method to model this system is to use the state-space variables as flags to indicate the failure of each) 87 570.89 P
0.32 (computer and power supply.  This method uses a large number of state-space variables, but the system) 87 557.89 P
(can be described with only a few simple) 87 544.89 T
7 F
(TRANTO) 266.63 544.89 T
3 F
( statements.  The ASSIST input file is as follows:) 306.23 544.89 T
7 10 Q
(LAM_PS = 1E-6;             \050* Failure rate of power supplies *\051) 87 525.91 T
(LAM_C = 1E-5;              \050* Failure rate of computers *\051) 87 513.27 T
(SPACE = \050CAF: ARRAY[1..3] OF 0..1,     \050* Failed computers in Triad A *\051) 87 495.63 T
(         CBF: ARRAY[1..3] OF 0..1,     \050* Failed computers in Triad B *\051) 87 482.99 T
(         PSF: ARRAY[1..3] OF 0..1\051;    \050* Failed power supplies *\051) 87 470.35 T
(START = \0509 OF 0\051;) 87 457.71 T
-0.35 (DEATHIF CAF[1] + CAF[2] + CAF[3] > 1;  \050* 2/3 computers in Triad A failed *\051) 87 439.07 P
-0.35 (DEATHIF CBF[1] + CBF[2] + CBF[3] > 1;  \050* 2/3 computers in Triad B failed *\051) 87 426.43 P
(FOR I = 1,3) 87 407.79 T
(   IF CAF[I]=0 TRANTO CAF[I] = 1 BY LAM_C;) 87 395.15 T
(      \050* Failure of computer in Triad A *\051) 87 382.51 T
(   IF CBF[I]=0 TRANTO CBF[I] = 1 BY LAM_C;) 87 369.87 T
(      \050* Failure of computer in Triad B *\051) 87 357.23 T
(   IF PSF[I]=0 TRANTO CAF[I] = 1, CBF[I] = 1, PSF[I] = 1 BY LAM_PS;) 87 344.59 T
(      \050* Power supply failure *\051) 87 331.95 T
(ENDFOR;) 87 319.31 T
3 11 Q
0.08 (This method of modeling each component individually can lead to a combinatorial explosion in the) 105 301.01 P
0.91 (number of states in the generated model when the number of components becomes large.  The semi-) 87 288.01 P
0.79 (Markov model generated for this relatively simple example contains 21 states and 138 transitions.  A) 87 275.01 P
0.36 (different ASSIST description could be developed for this system by taking advantage of the symmetry) 87 262.01 P
0.04 (that exists in the system to reduce the model size.  However, that description would be more difficult to) 87 249.01 P
0.33 (understand and verify.  It is not unusual to encounter a trade-off between the size of the model and the) 87 236.01 P
(simplicity of the rules for generating the model.) 87 223.01 T
4 10.5 Q
(12.5. Failur) 105 197.7 T
(e Rate Dependencies) 156.44 197.7 T
3 11 Q
0.1 (Consider a triad of processors in which the processors are protected from voltage surges by voltage) 105 179.23 P
0.75 (regulators.  The processors fail at rate) 87 166.23 P
7 F
1.8 (LAMBDA_P) 260.86 166.23 P
3 F
0.75 (.  The system initially contains two voltage regula-) 313.66 166.23 P
-0.06 (tors.  These voltage regulators fail at rate) 87 153.23 P
7 F
-0.14 (LAMBDA_R) 269.5 153.23 P
3 F
-0.06 (.  Once both voltage regulators fail, the processors) 322.3 153.23 P
(are also subject to failure due to voltage surges, which arrive at an exponential rate) 87 140.23 T
7 F
(LAMBDA_V) 454.19 140.23 T
3 F
(.) 506.99 140.23 T
7 10 Q
(\050* FAILURE RATE DEPENDENCIES *\051) 87 121.25 T
(LAMBDA_P = 1E-5;) 87 103.61 T
(\050* Permanent failure rate of processors *\051) 243 103.61 T
(LAMBDA_V = 1E-2;) 87 90.97 T
(\050* Arrival rate of damaging voltage surges *\051) 243 90.97 T
(LAMBDA_R = 1E-3;) 87 78.33 T
(\050* Failure rate of voltage regulators *\051) 243 78.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 75
%%Page: "70" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(70) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
(SPACE = \050NP: 0..3,) 87 719.33 T
(\050* Number of active processors *\051) 243 719.33 T
(         NFP: 0..3,) 87 706.35 T
(\050* Number of failed active processors *\051) 243 706.35 T
(         NR: 0..2\051;) 87 693.37 T
(\050* Number of working voltage regulators *\051) 243 693.37 T
(START = \0503,0,2\051;) 87 680.38 T
(\050* Start with 3 working processors, 2 regs. *\051) 243 680.38 T
(DEATHIF 2 * NFP >= NP;) 87 662.4 T
(\050* Voter defeated *\051) 243 662.4 T
(  \050* Processor failures *\051) 87 644.41 T
(IF NP > NFP TRANTO NFP = NFP+1 BY \050NP-NFP\051*LAMBDA_P;) 87 631.43 T
(  \050* Failure of processor due to voltage surge *\051) 87 613.45 T
(IF \050NR = 0\051 AND \050NP > NFP\051 TRANTO NFP = NFP+1 BY \050NP-NFP\051*LAMBDA_V;) 87 600.46 T
(  \050* Voltage regulator failures *\051) 87 582.48 T
(IF NR > 0 TRANTO NR = NR-1 BY NR*LAMBDA_R;) 87 569.49 T
(  \050* Reconfiguration *\051) 87 551.51 T
(IF NFP > 0 TRANTO \050NP-1,NFP-1,NR\051 BY <8.0E-5,3.0E-5>;) 87 538.53 T
3 11 Q
0.48 (Because this model contains only one) 105 519.88 P
7 F
1.15 (DEATHIF) 276.52 519.88 P
3 F
0.48 ( statement, all system failure probabilities will be) 322.72 519.88 P
-0.18 (grouped together.  The addition of another) 87 506.88 P
7 F
-0.44 (DEATHIF) 275.12 506.88 P
3 F
-0.18 ( statement placed in front of the existing one could) 321.32 506.88 P
(capture the probability of both voltage regulators failing before the system failure condition is reached:) 87 493.88 T
7 10 Q
(DEATHIF \050NR=0\051 AND \0502 * NFP >= NP\051;) 105 474.56 T
3 11 Q
1.17 (This modification allows the user to better understand the failure modes of the system, but does not) 87 455.91 P
(affect the total system failure probability.) 87 442.91 T
4 10.5 Q
(12.6. Recovery Rate Dependencies) 105 417.26 T
3 11 Q
0.74 (In this system, the speed of the recovery process is significantly affected by the number of active) 105 398.44 P
1.22 (components.  This recovery process is modeled by making the recovery rate a function of the state-) 87 385.44 P
(space variable) 87 372.44 T
7 F
(NP) 152.36 372.44 T
3 F
(, which is the number of active processors.) 165.56 372.44 T
7 10 Q
(\050* RECOVERY RATE DEPENDENCIES *\051) 87 353.12 T
(N_PROCS = 10;           \050* Initial number of processors *\051) 87 334.14 T
(LAMBDA_P = 8E-3;        \050* Permanent failure rate of processors *\051) 87 321.16 T
(SPACE = \050NP: 0..N_PROCS,        \050* Number of active processors *\051) 87 302.17 T
(         NFP: 0..N_PROCS\051;      \050* Number of failed active processors *\051) 87 289.19 T
(START = \050N_PROCS,0\051;) 87 270.2 T
(DEATHIF 2 * NFP >= NP;  \050* Voter defeated *\051) 87 251.22 T
(  \050* Processor failures *\051) 87 232.24 T
(IF NP > NFP TRANTO NFP = NFP+1 BY \050NP-NFP\051*LAMBDA_P;) 87 219.25 T
(  \050* Reconfiguration where rate is a function of NP *\051) 87 200.27 T
(IF NFP > 0 TRANTO \050NP-1,NFP-1\051 BY <NP*1.0E-5 + 3.0E-5,NP*2.0E-6 + 1.0E-5>;) 87 187.28 T
3 11 Q
-0.18 (The ASSIST language gives the user great flexibility in describing the reconfiguration behavior of a) 105 167.64 P
(system.) 87 154.64 T
4 12 Q
(13. Multiple T) 87 127.98 T
(riads W) 159.12 127.98 T
(ith Pooled Spar) 199.91 127.98 T
(es) 279.04 127.98 T
3 11 Q
0.26 (This section starts with a simple model of two triads that share a pool of cold spares. Next, models) 105 108.67 P
0.39 (of systems with various reconfiguration concepts are introduced and spare failures are included. These) 87 95.67 P
-0.22 (models are then generalized to model more than two triads. Finally, the section concludes with a general) 87 82.67 P
(discussion of how to model multiple competing recoveries.) 87 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 76
%%Page: "71" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(71) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.1. T) 105 719 T
(wo T) 134.85 719 T
(riads W) 156.53 719 T
(ith Pooled Cold Spar) 192.22 719 T
(es) 285.67 719 T
3 11 Q
0.34 (In this section, a system that consists of two triads, which operate independently but replace faulty) 105 700.9 P
-0.07 (processors from a common pool of spares will be modeled.  When the pool of spares runs out, the triads) 87 687.9 P
0.22 (continue operating with faulty processors and do not degrade to simplex.  The system fails when either) 87 674.9 P
0.23 (triad has two faulty processors.  This failure can happen because a second fault occurs in a triad before) 87 661.9 P
-0.19 (the first faulty processor can be replaced by an available spare or because the supply of spares to replace) 87 648.9 P
0.09 (the faulty processors has been exhausted.  For this model, it is assumed that the spares do not fail while) 87 635.9 P
(they are inactive.) 87 622.9 T
0.97 (To facilitate performing trade-off studies, the ASSIST) 105 603.62 P
7 F
2.34 (INPUT) 353.17 603.62 P
3 F
0.97 ( statement will be used to define a) 386.17 603.62 P
0.24 (constant) 87 590.62 P
7 F
0.57 (N_SPARES) 126.65 590.62 P
3 F
0.24 ( to represent the initial number of spares in the system. The ASSIST program will) 179.45 590.62 P
(query the user interactively for the value of this constant before generating the model.) 87 577.62 T
0.61 (Because the triads do not degrade to a simplex configuration, there is no need to track the current) 105 558.35 P
-0.11 (number of processors in a triad.  Thus, the state of each triad can be represented by a single variable) 87 545.35 P
7 F
-0.27 (NW) 527.05 545.35 P
3 F
-0.11 (,) 540.25 545.35 P
0.09 (which is the number of working processors.  Similarly, the spares do not fail while they are inactive, so) 87 532.35 P
-0.26 (their state can be represented by a single variable) 87 519.35 P
7 F
-0.64 (NS) 303.63 519.35 P
3 F
-0.26 (, which is the number of spares available.  Thus, the) 316.83 519.35 P
(state space is) 87 506.35 T
7 10 Q
(SPACE = \050NW1, NW2, N_SPARES\051;) 105 487.75 T
3 11 Q
(The full model description is) 87 469.81 T
7 10 Q
(\050*  TWO TRIADS WITH POOL OF SPARES *\051) 87 452.21 T
(INPUT N_SPARES;         \050* Number of spares *\051) 87 434.94 T
(LAMBDA_P = 1E-4;        \050* Failure rate of active processors *\051) 87 422.67 T
(DELTA1 = 3.6E3;         \050* Reconfiguration rate of triad 1 *\051) 87 410.4 T
(DELTA2 = 6.3E3;         \050* Reconfiguration rate of triad 2 *\051) 87 398.12 T
(SPACE = \050NW1,           \050* Number of working processors in triad 1 *\051) 87 380.85 T
(         NW2,           \050* Number of working processors in triad 2 *\051) 87 368.58 T
(         NS\051;           \050* Number of spare processors *\051) 87 356.31 T
(START = \0503, 3, N_SPARES\051;) 87 339.04 T
(   \050* Active processor failure *\051) 87 321.77 T
(IF NW1 > 0 TRANTO NW1 = NW1-1 BY NW1*LAMBDA_P;) 87 309.5 T
(IF NW2 > 0 TRANTO NW2 = NW2-1 BY NW2*LAMBDA_P;) 87 297.23 T
(   \050* Replace failed processor with working spare *\051) 87 279.96 T
(IF \050NW1 < 3\051 AND \050NS > 0\051 TRANTO NW1 = NW1+1, NS = NS-1 BY FAST DELTA1;) 87 267.69 T
(IF \050NW2 < 3\051 AND \050NS > 0\051 TRANTO NW2 = NW2+1, NS = NS-1 BY FAST DELTA2;) 87 255.42 T
(DEATHIF NW1 < 2;       \050* Two faults in triad 1 is system failure *\051) 87 237.15 T
(DEATHIF NW2 < 2;       \050* Two faults in triad 2 is system failure *\051) 87 224.88 T
3 11 Q
-0.24 (The start state is) 105 205.94 P
7 F
-0.58 (\0503,) 178.59 205.94 P
-0.58 (3,) 204.99 205.94 P
-0.58 (N_SPARES\051) 224.79 205.94 P
3 F
-0.24 (, which indicates that both triads have a full complement of) 284.19 205.94 P
0.25 (working processors and the number of initial spares is) 87 192.94 P
7 F
0.59 (N_SPARES) 329.67 192.94 P
3 F
0.25 (. The first two) 382.46 192.94 P
7 F
0.59 (TRANTO) 448.53 192.94 P
3 F
0.25 ( rules define) 488.13 192.94 P
1.18 (the fault-arrival process in each triad.  This process is modeled by decrementing either) 87 179.94 P
7 F
2.84 (NW1) 486.37 179.94 P
3 F
1.18 ( or) 506.17 179.94 P
7 F
2.84 (NW2) 523.2 179.94 P
3 F
0.84 (depending upon which triad experiences the failure.  The next two) 87 166.94 P
7 F
2.01 (TRANTO) 390.7 166.94 P
3 F
0.84 ( rules define recovery by) 430.3 166.94 P
0.42 (replacing the faulty processor with a spare. These rules are conditioned upon) 87 153.94 P
7 F
1.01 (NS) 432.67 153.94 P
1.01 (>) 452.47 153.94 P
1.01 (0) 465.67 153.94 P
3 F
0.42 (, that is, if there) 472.27 153.94 P
0.07 (are no spares, recovery cannot take place.  The result of reconfiguration is the replacement of the faulty) 87 140.94 P
-0.13 (processor with a working processor \050) 87 127.94 P
7 F
-0.32 (NWx = NWx + 1) 249.15 127.94 P
3 F
-0.13 ( for triad) 333.67 127.94 P
7 F
-0.32 (x) 374.51 127.94 P
3 F
-0.13 (\051 and depletion of one spare from the) 381.11 127.94 P
0.77 (pool \050) 87 114.94 P
7 F
1.85 (NS = NS - 1) 113.74 114.94 P
3 F
0.77 (\051.  The system fails whenever either triad experiences two or more coincident) 193.75 114.94 P
(faults \050) 87 101.94 T
7 F
(NW1 < 2 or NW2 < 2) 117.86 101.94 T
3 F
(\051.) 236.65 101.94 T
-0 (This system has two different recovery processes\321recovery in triad 1 and recovery in triad 2\321that) 105 82.67 P
0.05 (can potentially occur at the same time.  Because this model was developed with the assumption that the) 87 69.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 77
%%Page: "72" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(72) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.59 (completion times for both recovery processes are exponentially distributed, the SURE keyword) 87 718.67 P
7 F
1.42 (FAST) 516.6 718.67 P
3 F
-0.2 (was used. Thus, the SURE program will automatically calculate the conditional recovery rates wherever) 87 705.67 P
-0.03 (these two recovery processes compete.  This feature was described in section 5.2.7.  Modeling of multi-) 87 692.67 P
0.28 (ple competing recovery processes that are not exponentially distributed and systems in which the com-) 87 679.67 P
(peting recoveries are not independent are  discussed in section 13.8.) 87 666.67 T
4 10.5 Q
(13.2. T) 105 640.68 T
(wo T) 134.85 640.68 T
(riads W) 156.53 640.68 T
(ith Pooled Cold Spar) 192.22 640.68 T
(es Reducible to One T) 285.67 640.68 T
(riad) 383.48 640.68 T
3 11 Q
0.46 (The model given in section 13.2 can be modified easily to describe a system that can survive with) 105 621.52 P
0.06 (only one triad.  This strategy was used in the) 87 608.52 P
7 F
0.16 (FTMP) 287.15 608.52 P
3 F
0.06 ( system \050ref. 23\051.  If spares are available, the system) 313.55 608.52 P
0.45 (reconfigures by replacing a faulty processor with a spare.  If no spares are available, the faulty triad is) 87 595.52 P
0.03 (removed and its good processors are added to the spares pool.  There is one exception, however.  When) 87 582.52 P
0.17 (only one triad is left, the system maintains the faulty triad until it can no longer out vote the faulty pro-) 87 569.52 P
0.04 (cessor, that is, until the second fault arrives. This system is said to be reducible to one triad.  This situa-) 87 556.52 P
0.98 (tion is very different from degradation.  Note that it requires that the system be capable of surviving) 87 543.52 P
1.03 (with only one triad of processing power,  although it initially begins with significantly more parallel) 87 530.52 P
(computational power in the form of multiple triads.) 87 517.52 T
0.3 (As before, this model assumes that the spares are cold, that is, they do not fail while inactive.  The) 105 497.2 P
0.77 (state space must be modified to include whether a triad is active or not.  This modification is accom-) 87 484.2 P
0.65 (plished by setting) 87 471.2 P
7 F
1.57 (NWx = 0) 169.32 471.2 P
3 F
0.65 ( when triad) 218.66 471.2 P
7 F
1.57 (x) 272.85 471.2 P
3 F
0.65 ( is inactive.  The number of triads is maintained in a state-) 279.45 471.2 P
-0.07 (space variable) 87 458.2 P
7 F
-0.16 (NT) 152.23 458.2 P
3 F
-0.07 (. Although this variable is redundant because the number of active triads can be deter-) 165.43 458.2 P
0.11 (mined by looking at) 87 445.2 P
7 F
0.27 (NW1) 178.51 445.2 P
3 F
0.11 ( and) 198.31 445.2 P
7 F
0.27 (NW2) 219.92 445.2 P
3 F
0.11 (, the inclusion of this extra state-space variable greatly simplifies the) 239.72 445.2 P
(ASSIST input description.  Thus, the state space is) 87 432.2 T
7 10 Q
(SPACE = \050NW1,      \050* Number of working processors in triad 1 *\051) 105 412.54 T
(NW2,      \050* Number of working processors in triad 2 *\051) 158.81 399.22 T
(         NT,       \050* Number of active triads *\051) 105 385.9 T
(         NS\051;      \050* Number of spare processors *\051) 105 372.58 T
3 11 Q
(The initial state is \050) 87 353.59 T
7 F
(3,) 171.94 353.59 T
(3,) 191.74 353.59 T
(2,) 211.54 353.59 T
(N_SPARES) 231.34 353.59 T
3 F
(\051.  The) 284.14 353.59 T
7 F
(DEATHIF) 315.91 353.59 T
3 F
( statement becomes) 362.11 353.59 T
7 10 Q
(DEATHIF \050NW1 = 1\051 OR \050NW2 = 1\051;) 105 334.93 T
3 11 Q
1.69 (Note that the statement) 105 315.94 P
7 F
4.07 (DEATHIF) 216.27 315.94 P
4.07 (\050NW1) 269.07 315.94 P
4.07 (<) 302.07 315.94 P
4.07 (2\051) 315.27 315.94 P
4.07 (OR) 335.07 315.94 P
4.07 (\050NW2) 354.87 315.94 P
4.07 (<) 387.87 315.94 P
4.07 (2\051;) 401.07 315.94 P
3 F
1.69 ( is wrong.  This statement) 420.87 315.94 P
-0.19 (would conflict with the strategy of setting) 87 302.94 P
7 F
-0.46 (NWx) 272.35 302.94 P
3 F
-0.19 ( equal to 0 when triad) 292.15 302.94 P
7 F
-0.46 (x) 389.37 302.94 P
3 F
-0.19 ( becomes inactive.  Note also that) 395.97 302.94 P
-0.01 (the condition) 87 289.94 P
7 F
-0.02 (\050NW1) 147.48 289.94 P
-0.02 (=) 180.48 289.94 P
-0.02 (0\051) 193.68 289.94 P
-0.02 (AND) 213.48 289.94 P
-0.02 (\050NW2) 239.88 289.94 P
-0.02 (=) 272.88 289.94 P
-0.02 (0\051) 286.08 289.94 P
3 F
-0.01 ( is also not included.  This clause could be added, but it) 299.28 289.94 P
0.53 (would not change the model because the last triad is never collapsed into spares.  Thus, this condition) 87 276.94 P
(can never be satisfied.) 87 263.94 T
0.91 (Next, two new constants) 105 243.62 P
7 F
2.18 (OMEGA1) 219.53 243.62 P
3 F
0.91 ( and) 259.13 243.62 P
7 F
2.18 (OMEGA2) 282.33 243.62 P
3 F
0.91 ( that define the rate at which triads are collapsed) 321.92 243.62 P
(when no spares are available are defined:) 87 230.62 T
7 10 Q
(OMEGA1 = 5.6E3;               \050* Collapsing rate of triad 1 *\051) 105 210.97 T
(OMEGA2 = 8.3E3;               \050* Collapsing rate of triad 2 *\051) 105 197.64 T
3 11 Q
0.17 (The fault-arrival rules are the same as in the previous model. However, the reconfiguration specifi-) 105 178.65 P
(cation must be altered.  The rules for each triad) 87 165.65 T
7 F
(x) 297.47 165.65 T
3 F
( are) 304.07 165.65 T
7 10 Q
(IF \050NWx = 2\051 AND \050NS > 0\051 TRANTO NWx = NWx+1, NS = NS-1) 105 146 T
(BY FAST DELTAx;) 105 132.68 T
-0.57 (IF \050NWx = 2\051 AND \050NS = 0\051 AND \050NT > 1\051 TRANTO NWx = 0, NS = NS+2, NT = NT-1) 105 119.35 P
(BY FAST OMEGAx;) 105 106.03 T
3 11 Q
-0.04 (The first rule defines reconfiguration by replacement with a spare.  Thus, this rule is conditioned by) 105 87.04 P
7 F
2.75 (\050NS) 87 74.04 P
2.75 (>) 113.4 74.04 P
2.75 (0\051) 126.6 74.04 P
3 F
1.15 (.  The second rule defines the collapsing of a triad when no spares are available, that is,) 139.8 74.04 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 78
%%Page: "73" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(73) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.14 (when) 87 718.67 P
7 F
-0.34 (NS) 113.44 718.67 P
-0.34 (=) 133.24 718.67 P
-0.34 (0) 146.44 718.67 P
3 F
-0.14 (.  Note that the condition) 153.04 718.67 P
7 F
-0.34 (\050NT) 261.72 718.67 P
-0.34 (>) 288.12 718.67 P
-0.34 (1\051) 301.32 718.67 P
3 F
-0.14 (prevents the collapse of the last triad.  The complete) 314.52 718.67 P
(model is) 87 705.67 T
7 10 Q
(\050*  TWO TRIADS WITH POOL OF SPARES --> 1 TRIAD *\051) 87 686.84 T
(INPUT N_SPARES;         \050* Number of spares *\051) 87 674.34 T
(LAMBDA1 = 1E-4;         \050* Failure rate of active processors *\051) 87 661.84 T
(LAMBDA2 = 1E-4;         \050* Failure rate of active processors *\051) 87 649.35 T
(DELTA1 = 3.6E3;         \050* Reconfiguration rate of triad 1 *\051) 87 636.85 T
(DELTA2 = 6.3E3;         \050* Reconfiguration rate of triad 2 *\051) 87 624.36 T
(OMEGA1 = 5.6E3;         \050* Collapsing rate of triad 1 *\051) 87 611.86 T
(OMEGA2 = 8.3E3;         \050* Collapsing rate of triad 2 *\051) 87 599.36 T
(SPACE = \050NW1,           \050* Number of working processors in triad 1 *\051) 87 581.87 T
(         NW2,           \050* Number of working processors in triad 2 *\051) 87 569.37 T
(         NT,            \050* Number of active triads *\051) 87 556.88 T
(         NS\051;           \050* Number of spare processors *\051) 87 544.38 T
(START = \0503, 3, 2, N_SPARES\051;) 87 526.88 T
(   \050* Active processor failure *\051) 87 509.39 T
(IF \050NW1 > 0\051 TRANTO NW1 = NW1-1 BY NW1*LAMBDA1;) 87 496.89 T
(IF \050NW2 > 0\051 TRANTO NW2 = NW2-1 BY NW2*LAMBDA2;) 87 484.39 T
(   \050* Replace failed processor with working spare *\051) 87 466.9 T
(IF \050NW1 = 2\051 AND \050NS > 0\051 TRANTO NW1 = NW1+1, NS = NS-1 BY FAST DELTA1;) 87 454.4 T
(IF \050NW2 = 2\051 AND \050NS > 0\051 TRANTO NW2 = NW2+1, NS = NS-1 BY FAST DELTA2;) 87 441.9 T
(IF \050NW1 = 2\051 AND \050NS = 0\051 AND \050NT > 1\051 TRANTO NW1 = 0, NS = NS+2, NT = NT-1) 87 429.41 T
(     BY FAST OMEGA1;    \050* Degrade to one triad only -- triad 2 *\051) 87 416.91 T
(IF \050NW2 = 2\051 AND \050NS = 0\051 AND \050NT > 1\051 TRANTO NW2 = 0, NS = NS+2, NT = NT-1) 87 404.42 T
(     BY FAST OMEGA2;    \050* Degrade to one triad only -- triad 1*\051) 87 391.92 T
(DEATHIF \050NW1 = 1\051 OR \050NW2 = 1\051;) 87 373.42 T
4 10.5 Q
(13.3. T) 105 348.6 T
(wo Degradable T) 134.85 348.6 T
(riads W) 211.07 348.6 T
(ith Pooled Cold Spar) 246.76 348.6 T
(es) 340.21 348.6 T
3 11 Q
0.26 (The system modeled in this section consists of two triads that can degrade to a simplex.  However,) 105 330.27 P
0.01 (unlike the previous example, this system requires the throughput of two processors.  Therefore, the sys-) 87 317.27 P
-0.07 (tem does not degrade to one triad.  Instead, when no spares are available, the system degrades the faulty) 87 304.27 P
(triad into a simplex. The extra nonfaulty processor is added to the spares pool.) 87 291.27 T
0.25 (In this system, each of two triads can be degraded into a simplex.  Therefore, it is necessary to add) 105 271.77 P
0.22 (state-space variables that indicate whether the active configuration is a triad or simplex. Otherwise it is) 87 258.77 P
0.38 (impossible to determine whether each state that satisfies the condition) 87 245.77 P
7 F
0.9 (NWx) 401.18 245.77 P
0.9 (=) 427.58 245.77 P
0.9 (1) 440.78 245.77 P
3 F
0.38 ( for triad) 447.38 245.77 P
7 F
0.9 (x) 489.75 245.77 P
3 F
0.38 ( is a failed) 496.35 245.77 P
0.35 (state \050one good out of three\051 or an operational state \050one good out of one\051.  Thus, two state-space vari-) 87 232.77 P
0.83 (ables,) 87 219.77 P
7 F
2 (NC1) 115.94 219.77 P
3 F
0.83 ( and) 135.74 219.77 P
7 F
2 (NC2) 158.79 219.77 P
3 F
0.83 (, are added to the model to indicate the total number of processors in the current) 178.59 219.77 P
0.69 (configuration of each triad.  If triad) 87 206.77 P
7 F
1.65 (x) 250.06 206.77 P
3 F
0.69 ( still has three active processors, then) 256.66 206.77 P
7 F
1.65 (NCx) 428.29 206.77 P
1.65 (=) 454.69 206.77 P
1.65 (3;) 467.89 206.77 P
3 F
0.69 ( if triad) 481.09 206.77 P
7 F
1.65 (x) 518.3 206.77 P
3 F
0.69 ( has) 524.9 206.77 P
(already degraded to a simplex, then) 87 193.77 T
7 F
(NCx) 246.16 193.77 T
(=) 272.56 193.77 T
(1) 285.76 193.77 T
3 F
(.  The complete state space is) 292.36 193.77 T
7 10 Q
(SPACE = \050NC1,           \050* Number of active processors in triad 1 *\051) 87 174.94 T
(         NW1,           \050* Number of working processors in triad 1 *\051) 87 162.44 T
(         NC2,           \050* Number of active processors in triad 2 *\051) 87 149.95 T
(         NW2,           \050* Number of working processors in triad 2 *\051) 87 137.45 T
(         NS\051;           \050* Number of spare processors *\051) 87 124.96 T
3 11 Q
-0.23 (The initial state is) 87 106.79 P
7 F
-0.56 (\0503,) 167.34 106.79 P
-0.56 (3,) 193.74 106.79 P
-0.56 (3,) 213.54 106.79 P
-0.56 (3,) 233.34 106.79 P
-0.56 (N_SPARES\051) 253.14 106.79 P
3 F
-0.23 ( where) 312.54 106.79 P
7 F
-0.56 (N_SPARES) 344.45 106.79 P
3 F
-0.23 ( represents the number of proces-) 397.24 106.79 P
0.99 (sors in the spares pool initially.  The processor failure rules are the same as in previous models.  As) 87 93.79 P
(expected, the reconfiguration rules must be altered.  These rules for each triad are) 87 80.79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 79
%%Page: "74" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(74) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
(IF \050NWx < 3\051 AND \050NCx = 3\051 AND \050NS > 0\051 TRANTO NWx = NWx+1, NS = NS-1) 105 719.33 T
(     BY FAST DELTAx;    \050* Replace failed processor with working spare *\051) 105 706.62 T
(IF \050NWx < 3\051 AND \050NS = 0\051 AND \050NCx=3\051 TRANTO NCx = 1, NWx = 1, NS = NS+1) 105 688.91 T
(     BY FAST OMEGAx;    \050* Degrade to simplex *\051) 105 676.2 T
3 11 Q
0.22 (where) 87 656.83 P
7 F
0.52 (x) 116.84 656.83 P
3 F
0.22 ( represents triad 1 or triad 2.  The first rule describes the replacement of a faulty processor in a) 123.44 656.83 P
-0.08 (triad with a spare.  Note that the condition) 87 643.83 P
7 F
-0.19 ( NCx) 271.82 643.83 P
-0.19 (=) 304.64 643.83 P
-0.19 (3) 317.84 643.83 P
3 F
-0.08 ( has been added. Otherwise states with) 324.44 643.83 P
7 F
-0.19 (NWx) 496.8 643.83 P
-0.19 (=) 523.2 643.83 P
-0.19 (1) 536.4 643.83 P
3 F
1.02 (and) 87 630.83 P
7 F
2.45 (NCx) 106.65 630.83 P
2.45 (=) 133.05 630.83 P
2.45 (1) 146.26 630.83 P
3 F
1.02 ( \050i.e., a good simplex processor\051 would erroneously have a recovery transition leaving) 152.85 630.83 P
0.04 (them.  The second rule describes the process of degrading a triad to a simplex.  Note that this process is) 87 617.83 P
2.08 (only done when no spares are available, that is,) 87 604.83 P
7 F
4.99 (NS) 316.22 604.83 P
4.99 (=) 336.02 604.83 P
4.99 (0) 349.22 604.83 P
3 F
2.08 (.  Also, the extra nonfaulty processor is) 355.82 604.83 P
(returned to the spares pool, that is,) 87 591.83 T
7 F
(NS = NS + 1) 241.29 591.83 T
3 F
(.  The) 313.89 591.83 T
7 F
(DEATHIF) 341.99 591.83 T
3 F
( conditions are) 388.19 591.83 T
7 F
(DEATHIF 2*NWx <= NCx;) 105 573.78 T
3 F
-0.18 (for each triad) 87 555.41 P
7 F
-0.42 (x) 147.86 555.41 P
3 F
-0.18 (.  This condition restricts the operational states to only those where a majority of the pro-) 154.46 555.41 P
(cessors are working.  The complete specification is) 87 542.41 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 10 Q
(\050*  TWO DEGRADABLE TRIADS WITH A POOL OF SPARES *\051) 87 524.36 T
(INPUT N_SPARES;         \050* Number of spares *\051) 87 506.65 T
(LAMBDA1 = 1E-4;         \050* Failure rate of processor in triad 1 *\051) 87 493.95 T
(LAMBDA2 = 1E-4;         \050* Failure rate of processor in triad 2 *\051) 87 481.23 T
(DELTA1 = 3.6E3;         \050* Reconfiguration rate of triad 1 *\051) 87 468.52 T
(DELTA2 = 6.3E3;         \050* Reconfiguration rate of triad 2 *\051) 87 455.82 T
(OMEGA1 = 5.6E3;         \050* Reconfiguration rate of triad 1 *\051) 87 443.11 T
(OMEGA2 = 8.3E3;         \050* Reconfiguration rate of triad 2 *\051) 87 430.39 T
(SPACE = \050NC1,           \050* Number of active processors in triad 1 *\051) 87 412.69 T
(         NW1,           \050* Number of working processors in triad 1 *\051) 87 399.98 T
(         NC2,           \050* Number of active processors in triad 2 *\051) 87 387.27 T
(         NW2,           \050* Number of working processors in triad 2 *\051) 87 374.56 T
(         NS\051;           \050* Number of spare processors *\051) 87 361.85 T
(START = \0503, 3, 3, 3, N_SPARES\051;) 87 344.14 T
(   \050* Active processor failure *\051) 87 326.43 T
(IF NW1 > 0 TRANTO NW1 = NW1-1 BY NW1*LAMBDA1;) 87 313.72 T
(IF NW2 > 0 TRANTO NW2 = NW2-1 BY NW2*LAMBDA2;) 87 301.01 T
(   \050* Replace failed processor with working spare *\051) 87 283.3 T
(IF \050NW1 < 3\051 AND \050NC1 = 3\051 AND \050NS > 0\051 TRANTO NW1 = NW1+1, NS = NS-1) 87 270.59 T
(     BY FAST DELTA1;) 87 257.88 T
(IF \050NW2 < 3\051 AND \050NC2 = 3\051 AND \050NS > 0\051 TRANTO NW2 = NW2+1, NS = NS-1) 87 245.17 T
(     BY FAST DELTA2;) 87 232.46 T
(   \050* Degrade to simplex *\051) 87 213.75 T
(IF \050NW1 < 3\051 AND \050NS = 0\051 AND \050NC1=3\051 TRANTO NC1 = 1, NW1 = 1, NS = NS+1) 87 201.04 T
(     BY FAST OMEGA1;) 87 188.33 T
(IF \050NW2 < 3\051 AND \050NS = 0\051 AND \050NC2=3\051 TRANTO NC2 = 1, NW2 = 1, NS = NS+1) 87 175.62 T
(     BY FAST OMEGA2;) 87 162.91 T
(DEATHIF 2*NW1 <= NC1;) 87 144.2 T
(DEATHIF 2*NW2 <= NC2;) 87 131.49 T
3 11 Q
0.73 ( All previous models have used the simplifying assumption that spare processors cannot fail until) 105 106.11 P
-0.08 (they are brought into the active configuration. While this assumption significantly simplifies the model-) 87 93.11 P
(ing, it is too optimistic an assumption for many systems, especially those with long mission times.) 87 80.11 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 80
%%Page: "75" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(75) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13.4. T) 105 719 T
(wo Degradable T) 134.85 719 T
(riads W) 211.07 719 T
(ith Pooled W) 246.76 719 T
(arm Spar) 304.52 719 T
(es) 347.2 719 T
3 11 Q
1.08 (The models presented in section 13.3 can be generalized by allowing the spares to fail while) 105 700.83 P
1.08 (in-) 530.78 700.83 P
0.05 (active. This generalization can be accomplished by adding a variable) 87 687.83 P
7 F
0.13 (NWS) 393.34 687.83 P
3 F
0.05 ( to track the number of work-) 413.14 687.83 P
-0.18 (ing spares.  A rule for generating the transitions corresponding to the failure of the spares must be added) 87 674.83 P
7 F
-1.75 (LAMBDA_S = 1E-5;           \050* Failure rate of inactive warm spare *\051) 105 656.16 P
(IF NWS > 0 TRANTO NWS = NWS - 1 BY NWS*LAMBDA_S;) 105 638.82 T
3 F
0.2 (In this system, the failure of a warm spare is not detectable. Thus, faulty spares can be brought into the) 87 620.82 P
(active configuration by a recovery process.  The recovery) 87 607.82 T
7 F
(TRANTO) 342.97 607.82 T
3 F
( rules must cover two cases:) 382.57 607.82 T
(1. Recovery with a working spare) 105 589.48 T
(2. Recovery with a faulty spare) 105 570.14 T
1.91 (Because) 105 550.8 P
7 F
4.59 (NWS) 146.31 550.8 P
3 F
1.91 ( working spares and) 166.11 550.8 P
7 F
4.59 (NS-NWS) 264.79 550.8 P
3 F
1.91 ( faulty spares remain, the probability of selecting a) 304.39 550.8 P
-0 (working spare is) 87 537.8 P
7 F
-0 (NWS/NS) 162.46 537.8 P
3 F
-0 ( and the corresponding recovery rate is) 202.06 537.8 P
7 F
-0 (\050NWS/NS\051*DELTA1) 375.86 537.8 P
3 F
-0 (.  Similarly, the) 474.86 537.8 P
0.62 (rate of recovery with a faulty spare is) 87 524.8 P
7 F
1.5 (\050\050NS-NWS\051/NS\051*DELTA1) 258.77 524.8 P
3 F
0.62 (. Notice that the sum of these two) 390.77 524.8 P
(rates are) 87 511.8 T
7 F
(DELTA1) 126.7 511.8 T
3 F
(, as one would expect.) 166.3 511.8 T
(Also the reconfiguration process must be generalized to include two distinct results:) 105 492.46 T
(1.) 105 473.13 T
(A faulty warm spare is brought into the active configuration.) 117 473.13 T
(2.) 105 453.79 T
(A working warm spare is brought into the active configuration.) 117 453.79 T
-0.12 (Thus, the model presented in section 13.3 can be modified to describe a system of two degradable triads) 87 434.45 P
(with a pool of warm spares:) 87 421.45 T
7 10 Q
(\050*  TWO DEGRADABLE TRIADS WITH A POOL OF WARM SPARES *\051) 87 403.78 T
(INPUT N_SPARES;         \050* Number of spares *\051) 87 386.44 T
(LAMBDA1 = 1E-4;         \050* Failure rate of processor in triad 1 *\051) 87 374.1 T
(LAMBDA2 = 1E-4;         \050* Failure rate of processor in triad 2 *\051) 87 361.77 T
(LAMBDA_S = 1E-5;        \050* Failure rate of spare processors *\051) 87 349.43 T
(DELTA1 = 3.6E3;         \050* Reconfiguration rate of triad 1 *\051) 87 337.09 T
(DELTA2 = 6.3E3;         \050* Reconfiguration rate of triad 2 *\051) 87 324.75 T
(OMEGA1 = 5.6E3;         \050* Reconfiguration rate of triad 1 *\051) 87 312.42 T
(OMEGA2 = 8.3E3; \050* Reconfiguration rate of triad 2 *\051) 87 300.08 T
(SPACE = \050NC1,           \050* Number of active processors in triad 1 *\051) 87 282.74 T
(         NW1,           \050* Number of working processors in triad 1 *\051) 87 270.4 T
(         NC2,           \050* Number of active processors in triad 2 *\051) 87 258.06 T
(         NW2,           \050* Number of working processors in triad 2 *\051) 87 245.72 T
(         NS,            \050* Total number of warm spares *\051) 87 233.39 T
(         NWS\051;          \050* Number of working warm spares*\051) 87 221.05 T
(START = \0503, 3, 3, 3, N_SPARES, N_SPARES\051;) 87 203.71 T
-0.75 (IF NW1 > 0 TRANTO NW1 = NW1-1 BY NW1*LAMBDA1;  \050* Active processor failure *\051) 87 186.37 P
-0.4 (IF NW2 > 0 TRANTO NW2 = NW2-1 BY NW2*LAMBDA2;  \050* Active processor failure *\051) 87 174.04 P
(IF NWS > 0 TRANTO NWS = NWS-1 BY NWS*LAMBDA_S;  \050* Warm spare failure *\051) 87 161.7 T
(IF \050NW1 < 3\051 AND \050NC1 = 3\051 THEN        \050* Triad 1 has a fault *\051) 87 143.36 T
(   IF \050NWS > 0\051                        \050* Replace with working spare *\051) 87 131.02 T
(      TRANTO NW1 = NW1+1, NS = NS-1, NWS = NWS - 1) 87 118.68 T
(         BY FAST \050NWS/NS\051*DELTA1;) 87 106.35 T
(   IF \050NS > NWS\051                       \050* Replace with failed spare *\051) 87 94.01 T
(      TRANTO NS = NS-1 BY FAST \050\050NS-NWS\051/NS\051*DELTA1;) 87 81.67 T
(ENDIF;) 87 69.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 81
%%Page: "76" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(76) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
(IF \050NW2 < 3\051 AND \050NC2 = 3\051 THEN        \050* Triad 2 has a fault *\051) 87 719.33 T
(   IF \050NWS > 0\051                        \050* Replace with working spare *\051) 87 706.96 T
(      TRANTO NW2 = NW2+1, NS = NS-1, NWS = NWS - 1) 87 694.59 T
(          BY FAST \050NWS/NS\051*DELTA2;) 87 682.22 T
(   IF \050NS > NWS\051                       \050* Replace with failed spare *\051) 87 669.85 T
(      TRANTO NS = NS-1 BY FAST \050\050NS-NWS\051/NS\051*DELTA2;) 87 657.48 T
(ENDIF;) 87 639.11 T
(IF \050NW1 < 3\051 AND \050NS = 0\051 AND \050NC1=3\051           \050* Degrade to simplex *\051) 87 620.74 T
(      TRANTO NC1 = 1, NW1 = 1, NS = NS+1, NWS = NWS + 1 BY FAST OMEGA1;) 87 608.37 T
(IF \050NW2 < 3\051 AND \050NS = 0\051 AND \050NC2=3\051           \050* Degrade to simplex *\051) 87 596 T
(   TRANTO NC2 = 1, NW2 = 1, NS = NS+1, NWS = NWS + 1 BY FAST OMEGA2;) 87 583.63 T
(DEATHIF 2*NW1 <= NC1;) 87 565.26 T
(DEATHIF 2*NW2 <= NC2;) 87 552.89 T
3 11 Q
-0.19 (Four sections are devoted to recovery in this model.  The first two sections cover the recovery of the) 105 533.85 P
0.27 (two triads by using a spare.  The last two sections deal with the situation where no spares are available) 87 520.85 P
0.75 (and the triad is degraded to a simplex.  Notice that the first two sections begin with an) 87 507.85 P
7 F
1.79 (IF) 481.42 507.85 P
3 F
0.75 ( test of the) 494.62 507.85 P
(form) 87 494.85 T
7 10 Q
(IF \050NWx < 3\051 AND \050NCx = 3\051 THEN           \050* Triad x has a fault *\051) 105 476.14 T
3 11 Q
1.27 (The second term of the) 105 458.11 P
7 F
3.05 (IF) 215.53 458.11 P
3 F
1.27 ( test) 228.73 458.11 P
7 F
3.05 (\050NCx) 252.06 458.11 P
3.05 (=) 285.06 458.11 P
3.05 (3\051) 298.26 458.11 P
3 F
1.27 ( insures that the triad is still intact.  The first term) 311.46 458.11 P
7 F
1.15 (\050NWx) 87 445.11 P
1.15 (<) 120 445.11 P
1.15 (3\051) 133.2 445.11 P
3 F
0.48 ( indicates that a failed processor exists in the triad.  The last two recovery sections begin) 146.4 445.11 P
(with  an) 87 432.11 T
7 F
(IF) 125.19 432.11 T
3 F
( test of the form) 138.39 432.11 T
7 10 Q
(IF \050NWx < 3\051 AND \050NS = 0\051 AND \050NCx=3\051     \050* Degrade to simplex *\051) 105 413.4 T
3 11 Q
2.12 (The last term of the) 105 395.36 P
7 F
5.09 (IF) 204.51 395.36 P
3 F
2.12 ( test) 217.71 395.36 P
7 F
5.09 (\050NCx) 242.73 395.36 P
5.09 (=) 275.73 395.36 P
5.09 (3\051) 288.92 395.36 P
3 F
2.12 ( insures that the triad is still intact.  The first term) 302.12 395.36 P
7 F
1.79 (\050NWx) 87 382.36 P
1.79 (<) 120 382.36 P
1.79 (3\051) 133.2 382.36 P
3 F
0.75 ( indicates that a failed processor exists in the triad.  The second term) 146.4 382.36 P
7 F
1.79 (\050NS=0\051) 460.8 382.36 P
3 F
0.75 ( indicates) 500.4 382.36 P
(that no spares are available.) 87 369.36 T
0.09 (If the system were designed so that the extra working processor of a collapsed triad were not added) 105 349.99 P
(to the spares pool, the last two recovery) 87 336.99 T
7 F
(TRANTO) 264.5 336.99 T
3 F
( sections would be as follows:) 304.1 336.99 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
7 10 Q
(IF \050NW1 < 3\051 AND \050NS = 0\051 AND \050NC1=3\051          \050* Degrade to simplex *\051) 87 318.29 T
(   TRANTO NC1 = 1, NW1 = 1 BY FAST OMEGA1;) 87 305.92 T
(IF \050NW2 < 3\051 AND \050NS = 0\051 AND \050NC2=3\051          \050* Degrade to simplex *\051) 87 293.55 T
(   TRANTO NC2 = 1, NW2 = 1 BY FAST OMEGA2;) 87 281.18 T
3 11 Q
(with the) 87 263.14 T
7 F
(NS = NS+1, NWS = NWS + 1) 125.5 263.14 T
3 F
( phrases removed.) 283.9 263.14 T
4 10.5 Q
(13.5. Multiple Nondegradable T) 105 238.1 T
(riads W) 247.44 238.1 T
(ith Pooled Cold Spar) 283.13 238.1 T
(es) 376.58 238.1 T
3 11 Q
0.82 (This section demonstrates development of a generalized description that can be used to model an) 105 219.9 P
0.09 (arbitrary number of triads.  This modeling will be accomplished by creating a general specification that) 87 206.9 P
-0.23 (will work for any number of initial triads and having the ASSIST program prompt for a specific value to) 87 193.9 P
(generate a specific model.) 87 180.9 T
0.75 (For simplicity, a system that is incapable of collapsing a triad into either a simplex or into spares) 105 161.53 P
0.37 (will be investigated. Thus, this system fails when any triad fails. This first model will be simplified by) 87 148.53 P
0.22 (assuming that cold spares cannot fail until they are brought into the active configuration. The complete) 87 135.53 P
(generalized specification is) 87 122.53 T
7 10 Q
(\050*  MULTIPLE TRIADS WITH POOL OF COLD SPARES *\051) 87 103.83 T
(INPUT N_TRIADS;              \050* Number of triads initially *\051) 87 85.45 T
(INPUT N_SPARES;              \050* Number of spares *\051) 87 73.08 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 82
%%Page: "77" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(77) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
(LAMBDA = 1E-4;               \050* Failure rate of active processors *\051) 87 719.33 T
(DELTA = 5.1E3;               \050* Reconfiguration rate to switch in spare *\051) 87 707.31 T
-0.5 (SPACE = \050NW: ARRAY[1..N_TRIADS] OF 0..3, \050* Number working procs per triad *\051) 87 689.29 P
(         NS\051;                             \050* Number of spare processors *\051) 87 677.27 T
(START = \050N_TRIADS OF 3, N_SPARES\051;) 87 659.25 T
(FOR J = 1, N_TRIADS;) 87 641.22 T
(      \050* Active processor failure *\051) 87 623.2 T
(   IF NW[J] > 0 TRANTO NW[J] = NW[J]-1 BY NW[J]*LAMBDA;) 87 611.18 T
(      \050* Replace failed processor with working spare *\051) 87 593.16 T
(   IF \050NW[J] < 3\051 AND \050NS > 0\051 TRANTO NW[J] = NW[J]+1, NS = NS-1) 87 581.14 T
(      BY FAST DELTA^J;) 87 569.12 T
(   DEATHIF NW[J] < 2;        \050* Two faults in a triad is system failure *\051) 87 551.09 T
(ENDFOR;) 87 533.07 T
3 11 Q
-0.06 (The array state-space variable) 105 514.38 P
7 F
-0.15 (NW) 239.13 514.38 P
3 F
-0.06 ( contains a value for each triad representing a count of the number) 252.33 514.38 P
-0.22 (of working processors in that triad. Similarly, the) 87 501.38 P
7 F
-0.53 (FOR) 304.59 501.38 P
3 F
-0.22 ( loop, which terminates at the) 324.39 501.38 P
7 F
-0.53 (ENDFOR) 455.96 501.38 P
3 F
-0.22 ( statement,) 495.56 501.38 P
(defines for each triad) 87 488.38 T
(1.) 105 469.36 T
( The active processor failures in that triad) 117 469.36 T
(2.) 105 450.34 T
(The replacement of failed processors in that triad with spares from the pool) 117 450.34 T
(3.) 105 431.32 T
(The conditions for that triad that result in system failure) 117 431.32 T
0.1 (To accommodate systems with different reconfiguration rates for different triads, the concatenation) 105 412.3 P
0.39 (feature was used in the rate expression of the reconfiguration) 87 399.3 P
7 F
0.93 (TRANTO) 362.15 399.3 P
3 F
0.39 ( statement.  The rate expression) 401.75 399.3 P
7 F
4.41 (BY) 87 386.3 P
4.41 (FAST) 106.8 386.3 P
4.41 (DELTA^J) 139.8 386.3 P
3 F
1.84 ( within the) 186 386.3 P
7 F
4.41 (FOR) 241.32 386.3 P
3 F
1.84 ( loop results in a reconfiguration rate of) 261.11 386.3 P
7 F
4.41 (FAST) 452.99 386.3 P
4.41 (DELTA1) 485.99 386.3 P
3 F
1.84 ( for) 525.59 386.3 P
0.55 (triad) 87 373.3 P
0.55 (1 and) 109.91 373.3 P
7 F
1.32 (FAST) 137.9 373.3 P
1.32 (DELTA2) 170.9 373.3 P
3 F
0.55 ( for triad 2.  Unfortunately, because the number of triads is unknown until) 210.49 373.3 P
0.62 (run time \050) 87 360.3 P
7 F
1.5 (N_TRIADS) 131.63 360.3 P
3 F
0.62 ( is specified with the) 184.43 360.3 P
7 F
1.5 (INPUT) 281.35 360.3 P
3 F
0.62 ( statement\051, no way exists to assign values to these) 314.35 360.3 P
0.4 (identifiers.  This must be done by editing the output file or entering them at SURE run time.  For sim-) 87 347.3 P
0.76 (plicity, the rest of the models in this section will assume that all triads have the same reconfiguration) 87 334.3 P
(rates.) 87 321.3 T
4 10.5 Q
(13.6. Multiple T) 105 296.61 T
(riads W) 175.98 296.61 T
(ith Pooled Cold Spar) 211.67 296.61 T
(es Reducible to One) 305.12 296.61 T
3 11 Q
0.06 (In this section, the simple model given  in section 13.5 will be modified to allow degradation of tri-) 105 278.75 P
-0.22 (ads.  When no spares are available, each faulty triad is broken up and the nonfaulty processors are added) 87 265.75 P
1.98 (to the spares pool. It is assumed that the system can operate with degraded performance with the) 87 252.75 P
0.05 (throughput of only one processor. In other words, although the initial configuration consists of multiple) 87 239.75 P
-0.23 (triads, the system can still maintain its vital functions with only one triad remaining.  Because triads will) 87 226.75 P
-0.17 (be broken up, a method of deciding whether a triad is active is needed.  This method adds an array state-) 87 213.75 P
0.25 (space variable) 87 200.75 P
7 F
0.6 (NP) 152.86 200.75 P
3 F
0.25 ( to track the number of active processors in a triad.  This variable will have the value) 166.06 200.75 P
-0.18 (of  3 for each triad initially and will be set to 0 for each triad when it is broken up.  The array state-space) 87 187.75 P
-0.09 (variable) 87 174.75 P
7 F
-0.23 (NFP) 125.09 174.75 P
3 F
-0.09 ( counts the number of failed processors active in each triad.  The state-space variable) 144.89 174.75 P
7 F
-0.23 (NT) 519.81 174.75 P
3 F
-0.09 ( is) 533.01 174.75 P
0.85 (used to  track  how many triads are still in operation.  This variable will always equal the number of) 87 161.75 P
1.04 (nonzero entries in array) 87 148.75 P
7 F
2.5 (NP) 198.08 148.75 P
3 F
1.04 (.  Thus, it is in some sense redundant.  However, the specification of the) 211.28 148.75 P
7 F
(TRANTO) 87 135.75 T
3 F
( is simplified by including it in the) 126.6 135.75 T
7 F
(SPACE) 281.23 135.75 T
3 F
( statement.) 314.23 135.75 T
(The specification is) 105 116.73 T
7 10 Q
(\050*  REDUCEABLE MULTIPLE TRIADS WITH POOL OF COLD SPARES *\051) 87 98.38 T
(INPUT N_TRIADS;              \050* Number of triads initially *\051) 87 81.35 T
(INPUT N_SPARES;              \050* Number of spares *\051) 87 69.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 83
%%Page: "78" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(78) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.9 Q
(LAMBDA = 1E-4;               \050* Failure rate of active processors *\051) 87 719.4 T
(DELTA1 = 3.6E3;              \050* Reconfiguration rate to switch in spare *\051) 87 707.32 T
-0.05 (DELTA2 = 5.1E3;              \050* Reconfiguration rate to break up a triad *\051) 87 695.24 P
-0.56 (SPACE = \050NP: ARRAY[1..N_TRIADS] OF 0..3,  \050* Number of processors per triad *\051) 87 677.16 P
-0.7 (         NFP: ARRAY[1..N_TRIADS] OF 0..3, \050* Num. failed active procs/triad *\051) 87 665.08 P
(         NS,                 \050* Number of spare processors *\051) 87 653 T
(         NT: 0..N_TRIADS\051;   \050* Number of non-failed triads *\051) 87 640.92 T
(START = \050N_TRIADS OF 3, N_TRIADS OF 0, N_SPARES, N_TRIADS\051;) 87 622.84 T
(FOR J = 1, N_TRIADS;) 87 604.76 T
(   IF NP[J] > NFP[J] TRANTO NFP[J] = NFP[J]+1) 87 586.68 T
(        BY \050NP[J]-NFP[J]\051*LAMBDA;  \050* Active processor failure *\051) 87 574.6 T
(   IF NFP[J] > 0 THEN) 87 556.52 T
(      IF NS > 0 THEN TRANTO NFP[J] = NFP[J]-1, NS = NS-1) 87 544.44 T
(            BY FAST DELTA1;) 87 532.36 T
(            \050* Replace failed processor with working spare *\051) 87 520.28 T
(      ELSE) 87 502.2 T
-0.35 (       IF NT > 1 TRANTO NP[J]=0, NFP[J]=0, NS = NS + \050NP[J]-NFP[J]\051, NT = NT-1) 87 490.12 P
(            BY FAST DELTA2;) 87 478.04 T
(            \050* Break up a failed triad when no spares available *\051) 87 465.96 T
(      ENDIF;) 87 453.88 T
(   ENDIF;) 87 441.8 T
(   DEATHIF 2 * NFP[J] >= NP[J] AND NP[J] > 0;) 87 423.72 T
(     \050* Two faults in an active triad is system failure *\051) 87 411.64 T
(ENDFOR;) 87 392.56 T
3 11 Q
1.24 ( As before, all) 105 373.75 P
7 F
2.98 (TRANTO) 175.02 373.75 P
3 F
1.24 ( and) 214.62 373.75 P
7 F
2.98 (DEATHIF) 238.49 373.75 P
3 F
1.24 ( statements are set inside of a) 284.69 373.75 P
7 F
2.98 (FOR) 425.04 373.75 P
3 F
1.24 ( loop so that they are) 444.84 373.75 P
1.01 (repeated for each triad.  The first) 87 360.75 P
7 F
2.42 (TRANTO) 241.29 360.75 P
3 F
1.01 ( statement defines failure of an active processor.  When a) 280.89 360.75 P
0.79 (triad has an active failed processor, the second) 87 347.75 P
7 F
1.89 (TRANTO) 300.72 347.75 P
3 F
0.79 ( statement replaces that failed processor with) 340.32 347.75 P
-0.15 (one from the pool of spares.  If no spares are available, then the faulty triad is broken up and its working) 87 334.75 P
0.67 (processors are put into the spares pool. \050This procedure assumes that the system can determine which) 87 321.75 P
0.11 (processor has failed with 100-percent accuracy.\051  However, if the faulty triad is the last triad in the sys-) 87 308.75 P
-0.04 (tem \050i.e.,) 87 295.75 P
7 F
-0.1 (NT) 128.77 295.75 P
-0.1 (<=) 148.57 295.75 P
-0.1 (1) 168.37 295.75 P
3 F
-0.04 (\051 then the triad is not broken up. This test makes the statement) 174.97 295.75 P
7 F
-0.1 (DEATHIF) 450.6 295.75 P
-0.1 (NT) 503.4 295.75 P
-0.1 (=) 523.2 295.75 P
-0.1 (0) 536.4 295.75 P
3 F
-0.2 (unnecessary. The last triad is allowed to continue operation with one faulty processor until another of its) 87 282.75 P
0.72 (processors fails and defeats the voter.  The single) 87 269.75 P
7 F
1.74 (DEATHIF) 312.85 269.75 P
3 F
0.72 ( statement captures the occurrence of the) 359.05 269.75 P
(second fault in the last triad as well as near-coincident faults in the other triads.) 87 256.75 T
(The following sequence of states represents a typical path through the model:) 105 237.57 T
7 F
(\0503,3,3,0,0,0,1,3\051 -> \0503,3,3,0,0,1,1,3\051 -> \0503,3,3,0,0,0,0,3\051 ->) 105 219.05 T
(\0503,3,3,1,0,0,0,3\051 -> \0500,3,3,0,0,0,2,2\051 -> \0500,3,3,0,1,0,2,2\051 ->) 105 206.87 T
(\0500,3,3,0,0,0,1,2\051 -> \0500,3,3,0,1,0,1,2\051 -> \0500,3,3,0,0,0,0,2\051 ->) 105 194.69 T
(\0500,3,3,0,1,0,0,2\051 -> \0500,0,3,0,0,0,2,1\051 -> ...) 105 182.51 T
4 10.5 Q
( 13.7. Multiple Reducible T) 105 158 T
(riads W) 226.15 158 T
(ith Pooled W) 261.84 158 T
(arm Spar) 319.6 158 T
(es) 362.28 158 T
3 11 Q
(The model given in section 13.7 can be easily modified to include spare failures:) 105 139.99 T
7 9.9 Q
(\050*  REDUCIBLE MULTIPLE TRIADS WITH POOL OF WARM SPARES *\051) 87 121.54 T
(INPUT N_TRIADS;              \050* Number of triads initially *\051) 87 104.46 T
(INPUT N_SPARES;              \050* Number of spares *\051) 87 92.38 T
(LAMBDA_P = 1E-4;             \050* Failure rate of active processors *\051) 87 80.3 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 84
%%Page: "79" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(79) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.9 Q
(LAMBDA_S = 1E-5;             \050* Failure rate of warm spare processors *\051) 87 719.4 T
(DELTA1 = 3.6E3;              \050* Reconfiguration rate to switch in spare *\051) 87 707.36 T
-0.05 (DELTA2 = 5.1E3;              \050* Reconfiguration rate to break up a triad *\051) 87 695.31 P
-0.56 (SPACE = \050NP: ARRAY[1..N_TRIADS] OF 0..3,  \050* Number of processors per triad *\051) 87 677.27 P
-0.41 (         NFP: ARRAY[1..N_TRIADS] Of 0..3, \050* Num. failed active procs/triad *\051) 87 665.23 P
(         NS,                 \050* Number of spare processors *\051) 87 653.18 T
-0.18 (         NFS,                \050* Number of failed spare processors *\051) 87 641.14 P
(         NT: 0..N_TRIADS\051;   \050* Number of non-failed triads *\051) 87 629.1 T
(START = \050N_TRIADS OF 3, N_TRIADS OF 0, N_SPARES, 0, N_TRIADS\051;) 87 611.05 T
(IF NS > NFS TRANTO NFS = NFS+1 BY \050NS-NFS\051*LAMBDA_S;  \050* Spare failure *\051) 87 593.01 T
(FOR J = 1, N_TRIADS;) 87 574.97 T
(   IF NP[J] > NFP[J] TRANTO NFP[J] = NFP[J]+1) 87 556.93 T
(        BY \050NP[J]-NFP[J]\051*LAMBDA_P;  \050* Active processor failure *\051) 87 544.88 T
(   IF NFP[J] > 0 THEN) 87 526.84 T
(      IF NS > 0 THEN) 87 514.8 T
(         IF NS > NFS TRANTO NFP[J] = NFP[J]-1, NS = NS-1) 87 502.75 T
(            BY FAST \0501-\050NFS/NS\051\051*DELTA1;) 87 490.71 T
(            \050* Replace failed processor with working spare *\051) 87 478.67 T
(         IF NFS > 0 TRANTO NS = NS-1, NFS = NFS-1) 87 460.62 T
(            BY FAST \050NFS/NS\051*DELTA1;) 87 448.58 T
(            \050* Replace failed processor with failed spare *\051) 87 436.54 T
(      ELSE) 87 418.49 T
(         IF NT > 1 TRANTO NP[J]=0, NFP[J]=0, NS = NP[J]-NFP[J], NT = NT-1) 87 406.45 T
(            BY FAST DELTA2;) 87 394.41 T
(            \050* Break up a failed triad when no spares available *\051) 87 382.36 T
(      ENDIF;) 87 370.32 T
(   ENDIF;) 87 358.28 T
(   DEATHIF 2 * NFP[J] >= NP[J] AND NP[J] > 0;) 87 340.24 T
(     \050* Two faults in an active triad is system failure *\051) 87 328.19 T
(ENDFOR;) 87 309.15 T
3 11 Q
-0.22 (The additional state-space variable) 105 290.37 P
7 F
-0.53 (NFS) 259.91 290.37 P
3 F
-0.22 ( is needed to  track  how many failed spares are in the spares) 279.71 290.37 P
0.16 (pool.  The failure of spares is defined by the first) 87 277.37 P
7 F
0.39 (TRANTO) 306.28 277.37 P
3 F
0.16 ( statement.  Note the placement of this state-) 345.88 277.37 P
0.02 (ment outside of the) 87 264.37 P
7 F
0.04 (FOR) 174.45 264.37 P
3 F
0.02 ( loop. If this statement were incorrectly placed inside of the) 194.25 264.37 P
7 F
0.04 (FOR) 458.98 264.37 P
3 F
0.02 ( loop, it would) 478.78 264.37 P
1.75 (be equivalent to having the spare failure rate multiplied by) 87 251.37 P
7 F
4.19 (N_TRIADS) 364.75 251.37 P
3 F
1.75 (.  This model includes two) 417.55 251.37 P
7 F
-0.64 (TRANTO) 87 238.37 P
3 F
-0.27 ( statements to define replacement of a failed processor with a spare.  The first statement defines) 126.6 238.37 P
1 (replacement of the failed processor with a working spare that is conditional on the existence of non-) 87 225.37 P
0.05 (failed spares.  The second statement defines replacement of a failed processor with a failed spare that is) 87 212.37 P
(conditional upon the existence of failed spares.) 87 199.37 T
4 10.5 Q
(13.8. Multiple Competing Recoveries) 105 174.56 T
3 11 Q
-0.22 (In the examples of multiple triads with pooled spares,  the first example of a model containing states) 105 156.59 P
0.02 (with multiple recovery processes that leave a single state was encountered. Multiple recovery processes) 87 143.59 P
0.47 (occurs when multiple faults accumulate in different parts of the system that together do not cause sys-) 87 130.59 P
(tem failure.  The diagram in figure 41 illustrates this concept.) 87 117.59 T
0.46 (In this model, two triads are accumulating faults\321the first at rate) 105 98.44 P
6 F
0.46 (l) 400.25 98.44 P
3 8.8 Q
0.37 (1) 406.29 95.69 P
3 11 Q
0.46 ( and the second at rate) 410.69 98.44 P
6 F
0.46 (l) 514.23 98.44 P
3 8.8 Q
0.37 (2) 520.27 95.69 P
3 11 Q
0.46 (.  In) 524.67 98.44 P
0.63 (state \0502,2,7\051,  both triads have a faulty processor active at the same time.  This situation is not system) 87 85.44 P
1.2 (failure because the two failures are in separately voted triads. Two recoveries are possible from this) 87 72.45 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 85
%%Page: "80" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(80) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.16 (state\321triad 1 recovers first then triad 2, or triad 2 recovers first then triad 1. Which case occurs depends) 87 481.78 P
(upon how long each recovery takes.) 87 468.78 T
0.77 (In some systems, the recovery process may take longer when another recovery is also ongoing in) 105 448.91 P
-0.22 (the system. When the two recovery processes have no effect on each other in the system, the presence of) 87 435.91 P
0.07 (competing recoveries still impacts the transition specification because the SURE program requires con-) 87 422.91 P
0.11 (ditional means and conditional standard deviations for the competing recovery processes.  Consider the) 87 409.91 P
0.93 (simple case of two identical recovery distributions.  On average, half of the time triad 1 will recover) 87 396.91 P
0.51 (first, and half of the time triad 2 will recover first. The conditional mean recovery time is the mean of) 87 383.91 P
0.17 (the minimum of the two competing recovery times.  The SURE program also requires the specification) 87 370.91 P
1.23 (of a third parameter\321the transition probability. The transition probability is the probability that this) 87 357.91 P
-0.12 (transition will be traversed rather than one of the other fast transitions leaving this state.  The sum of the) 87 344.91 P
(transition probabilities given for all  fast transitions leaving a state must equal one.) 87 331.91 T
0.4 (In all the preceeding examples of section 13, the recovery processes were assumed to be exponen-) 105 312.04 P
0.23 (tially distributed, and the) 87 299.04 P
7 F
0.54 (SURE) 200.65 299.04 P
0.54 (FAST) 233.65 299.04 P
3 F
0.23 ( keyword was used to specify these transitions.  As discussed in) 260.05 299.04 P
0.62 (section 5.2.7, the) 87 286.04 P
7 F
1.48 (FAST) 166.45 286.04 P
3 F
0.62 ( keyword causes the SURE program to automatically calculate the conditional) 192.85 286.04 P
(rates from the unconditional fast exponential rates that are provided.) 87 273.03 T
1.39 (For systems with nonexponential recovery times or in which recovery times are affected by the) 105 253.16 P
0.34 (presence of other competing recoveries, the problem of competing recoveries can be difficult to model) 87 240.16 P
-0.08 (accurately.  How the system actually behaves in state \0502,2,7\051 of the two-triad example depends upon the) 87 227.16 P
0.86 (design of the redundancy management system.  Many possibilities exist.  To illustrate, three possible) 87 214.16 P
(systems are discussed:) 87 201.16 T
(1.) 105 181.29 T
(The system always repairs triad 1 first) 117 181.29 T
(2.) 105 161.41 T
(The system repairs both triads at the same time) 117 161.41 T
(3.) 105 141.54 T
(Two independent repair processes take place) 117 141.54 T
0.3 (The model for case 1 in which triad 1 is always repaired first, is shown in figure 42.  Although the) 105 121.67 P
0.3 (two recovery transitions no longer occur simultaneously, the recovery transition rates,) 87 108.67 P
7 F
0.72 (R1_FIRST) 471.27 108.67 P
3 F
0.3 ( and) 524.07 108.67 P
7 F
-0.41 (R2_SECOND) 87 95.67 P
3 F
-0.17 (, may or may not have the same distribution as the noncompeting recovery transition rates,) 146.4 95.67 P
7 F
8.85 (R1) 87 82.67 P
3 F
3.69 ( and) 100.2 82.67 P
7 F
8.85 (R2) 128.96 82.67 P
3 F
3.69 (. This distribution depends on the system, and may be determined by analysis or) 142.16 82.67 P
(experimentation.) 87 69.67 T
3 9 Q
(Figure 41.  Model with multiple competing recoveries.) 216.38 512.11 T
87 518.11 543 726 C
201.5 529.11 428.5 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 148 321 363 518 215 197 207.5 530.11 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig41.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig41.ps)
%%CreationDate: (8/18/95) (10:51 AM)
%%BoundingBox: 148 321 363 518
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 O
1 g
0 R
0 G
0 i 0 J 0 j 0.8625 w 4 M []0 d
%AI3_Note:
0 D
176.5 492.4475 m
182.3382 492.4475 187.0712 497.1806 187.0712 503.0187 c
187.0712 508.8569 182.3382 513.5899 176.5 513.5899 c
170.6618 513.5899 165.9288 508.8569 165.9288 503.0187 c
165.9288 497.1806 170.6618 492.4475 176.5 492.4475 c
b
176.5 503.0187 m
B
U
0.75 w
187.125 503 m
248 503 l
S
u
0 O
1 g
0.8625 w
260.5 492.3913 m
266.3382 492.3913 271.0712 497.1243 271.0712 502.9625 c
271.0712 508.8007 266.3382 513.5337 260.5 513.5337 c
254.6618 513.5337 249.9288 508.8007 249.9288 502.9625 c
249.9288 497.1243 254.6618 492.3913 260.5 492.3913 c
b
260.5 502.9625 m
B
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(2,3,7) Tx 
(\r) TX 
TO
u
249.8838 503 m
243.3325 501.4565 l
244.7388 503 L
243.3325 504.5435 l
249.8838 503 L
f
U
0 R
0 G
0.75 w
271.125 503 m
332.25 503 l
S
u
0 O
1 g
0.8625 w
344.7875 492.4288 m
350.6257 492.4288 355.3587 497.1618 355.3587 503 c
355.3587 508.8382 350.6257 513.5712 344.7875 513.5712 c
338.9493 513.5712 334.2163 508.8382 334.2163 503 c
334.2163 497.1618 338.9493 492.4288 344.7875 492.4288 c
b
344.7875 503 m
B
U
0 To
1 0 0 1 344.75 499.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(1,3,7) Tx 
(\r) TX 
TO
u
334.1338 503 m
327.5825 501.4565 l
328.9888 503 L
327.5825 504.5435 l
334.1338 503 L
f
U
0 R
0 G
0.75 w
268.0407 495.4593 m
293.9332 469.5668 l
S
u
0 O
1 g
0.8625 w
252.5503 411.9996 m
256.6786 407.8715 263.372 407.8715 267.5002 411.9997 c
271.6285 416.1278 271.6285 422.8214 267.5002 426.9497 c
263.3721 431.0779 256.6786 431.0779 252.5503 426.9497 c
248.4221 422.8214 248.4221 416.1278 252.5503 411.9996 c
b
260.0253 419.4747 m
B
U
u
0 g
1 w
295.175 468.325 m
289.4511 471.8661 l
291.5369 471.9631 L
291.6339 474.0489 l
295.175 468.325 L
f
U
0 R
0 G
0.75 w
176.5 492.25 m
176.5 431.7499 l
S
u
0 O
1 g
0.8625 w
165.8913 419.2872 m
165.8912 413.4491 170.6243 408.716 176.4625 408.716 c
182.3007 408.716 187.0337 413.4492 187.0337 419.2872 c
187.0337 425.1254 182.3007 429.8586 176.4625 429.8586 c
170.6243 429.8586 165.8912 425.1254 165.8913 419.2872 c
b
176.4625 419.2872 m
B
U
u
0 g
1 w
176.5 429.8661 m
174.9565 436.4174 l
176.5 435.0111 L
178.0435 436.4174 l
176.5 429.8661 L
f
U
0 To
1 0 0 1 260.125 415.875 0 Tp
TP
-9 0 Td
0 Tr
(2,2,7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 176.5 416 0 Tp
TP
-9 0 Td
0 Tr
(3,2,7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 297.5 508.75 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 165.25 460.5 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
187 419 m
248 419 l
S
u
0 O
0 g
1 w
249.3838 419 m
242.8325 417.4565 l
244.2388 419 L
242.8325 420.5435 l
249.3838 419 L
f
U
u
1 g
0 R
0 G
0.8625 w
302.8562 450.535 m
308.6944 450.535 313.4275 455.2681 313.4275 461.1063 c
313.4275 466.9444 308.6944 471.6775 302.8562 471.6775 c
297.0181 471.6775 292.285 466.9444 292.285 461.1063 c
292.285 455.2681 297.0181 450.535 302.8562 450.535 c
b
302.8562 461.1063 m
B
U
0 To
1 0 0 1 302.875 457.625 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(3,3,6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
176.5 408.75 m
176.5 347.7499 l
S
u
0 O
1 g
0.8625 w
165.9288 335.2122 m
165.9287 329.3741 170.6618 324.641 176.5 324.641 c
182.3382 324.641 187.0712 329.3742 187.0712 335.2122 c
187.0712 341.0504 182.3382 345.7836 176.5 345.7836 c
170.6618 345.7836 165.9287 341.0504 165.9288 335.2122 c
b
176.5 335.2122 m
B
U
u
0 g
1 w
176.5 345.7411 m
174.9565 352.2924 l
176.5 350.8861 L
178.0435 352.2924 l
176.5 345.7411 L
f
U
0 To
1 0 0 1 176.5 332 0 Tp
TP
-9 0 Td
0 Tr
(3,1,7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
184.0407 411.9593 m
210.1832 385.8168 l
S
u
0 O
0 g
1 w
210.7375 385.2625 m
205.0136 388.8036 l
207.0994 388.9006 L
207.1964 390.9864 l
210.7375 385.2625 L
f
U
u
1 g
0 R
0 G
0.8625 w
210.5503 369.9996 m
214.6786 365.8715 221.372 365.8715 225.5002 369.9997 c
229.6285 374.1278 229.6285 380.8214 225.5002 384.9497 c
221.3721 389.0779 214.6786 389.0779 210.5503 384.9497 c
206.4221 380.8214 206.4221 374.1278 210.5503 369.9996 c
b
218.0253 377.4747 m
B
U
0 To
1 0 0 1 218.125 373.875 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(3,3,6) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.8625 w
335.9441 411.9621 m
340.0723 407.834 346.7657 407.834 350.894 411.9622 c
355.0222 416.0904 355.0222 422.7839 350.894 426.9122 c
346.7659 431.0404 340.0723 431.0404 335.9441 426.9122 c
331.8158 422.7839 331.8158 416.0904 335.9441 411.9621 c
b
343.419 419.4372 m
B
U
0 To
1 0 0 1 343.5 415.875 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(1,2,7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
270.375 419 m
331.375 419 l
S
u
0 O
0 g
1 w
333.0088 419 m
326.4575 417.4565 l
327.8638 419 L
326.4575 420.5435 l
333.0088 419 L
f
U
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-9 0 Td
0 Tr
(3,3,7) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.8625 w
252.5503 327.9996 m
256.6786 323.8715 263.372 323.8715 267.5002 327.9997 c
271.6285 332.1278 271.6285 338.8214 267.5002 342.9497 c
263.3721 347.0779 256.6786 347.0779 252.5503 342.9497 c
248.4221 338.8214 248.4221 332.1278 252.5503 327.9996 c
b
260.0253 335.4747 m
B
U
0 To
1 0 0 1 260.125 331.875 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(2,1,7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
260 408.75 m
260 348.2499 l
S
u
0 O
0 g
1 w
260 346.3661 m
258.4565 352.9174 l
260 351.5111 L
261.5435 352.9174 l
260 346.3661 L
f
U
u
1 g
0 R
0 G
0.8625 w
321.8757 375.0335 m
323.3868 369.3942 329.1835 366.0475 334.8228 367.5586 c
340.4621 369.0695 343.8088 374.8663 342.2978 380.5056 c
340.7869 386.1449 334.99 389.4916 329.3507 387.9806 c
323.7115 386.4695 320.3647 380.6727 321.8757 375.0335 c
b
332.0868 377.7696 m
B
U
0.75 w
268.61 413.913 m
321.4377 383.413 l
S
u
0 O
0 g
1 w
322.8526 382.5961 m
316.4073 384.535 l
318.3969 385.1686 L
317.9508 387.2084 l
322.8526 382.5961 L
f
U
u
1 g
0 R
0 G
0.8625 w
291.2278 350.0864 m
289.7169 344.4471 293.0636 338.6504 298.703 337.1394 c
304.3422 335.6282 310.139 338.9751 311.65 344.6144 c
313.1611 350.2536 309.8143 356.0504 304.175 357.5614 c
298.5357 359.0725 292.7389 355.7257 291.2278 350.0864 c
b
301.439 347.3504 m
B
U
0.75 w
264.538 410.3899 m
295.0383 357.5623 l
S
u
0 O
0 g
1 w
295.8552 356.1473 m
291.2428 361.0492 l
293.2826 360.6031 L
293.9162 362.5927 l
295.8552 356.1473 L
f
U
0 To
1 0 0 1 332 374.625 0 Tp
TP
-9 0 Td
0 Tr
(3,2,6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.75 344.125 0 Tp
TP
-9 0 Td
0 Tr
(2,3,6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 214 508.75 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 297.5 424.25 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 214 424.25 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
260.5 492.25 m
260.5 431.7499 l
S
u
0 O
0 g
1 w
260.5 429.8661 m
258.9565 436.4174 l
260.5 435.0111 L
262.0435 436.4174 l
260.5 429.8661 L
f
U
0 To
1 0 0 1 249.25 460.5 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 287.25 487 0 Tp
TP
-5.2515 0 Td
0 Tr
0 Ts
(R1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302.25 401.5 0 Tp
TP
-5.2515 0 Td
0 Tr
(R1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 289.25 380.5 0 Tp
TP
-5.2515 0 Td
0 Tr
(R2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 202.75 402.5 0 Tp
TP
-5.2515 0 Td
0 Tr
(R2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 165.25 368 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 249.25 368 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
346.75 376.6161 m
347.2381 376.6161 347.6339 377.0119 347.6339 377.5 c
347.6339 377.9881 347.2381 378.3839 346.75 378.3839 c
346.2619 378.3839 345.8661 377.9881 345.8661 377.5 c
345.8661 377.0119 346.2619 376.6161 346.75 376.6161 c
f
346.75 377.5 m
F
U
u
351.5 376.6161 m
351.9881 376.6161 352.3839 377.0119 352.3839 377.5 c
352.3839 377.9881 351.9881 378.3839 351.5 378.3839 c
351.0119 378.3839 350.6161 377.9881 350.6161 377.5 c
350.6161 377.0119 351.0119 376.6161 351.5 376.6161 c
f
351.5 377.5 m
F
U
u
356.25 376.6161 m
356.7381 376.6161 357.1339 377.0119 357.1339 377.5 c
357.1339 377.9881 356.7381 378.3839 356.25 378.3839 c
355.7619 378.3839 355.3661 377.9881 355.3661 377.5 c
355.3661 377.0119 355.7619 376.6161 356.25 376.6161 c
f
356.25 377.5 m
F
U
u
330.8661 363 m
330.8661 362.5119 331.2619 362.1161 331.75 362.1161 c
332.2381 362.1161 332.6339 362.5119 332.6339 363 c
332.6339 363.4881 332.2381 363.8839 331.75 363.8839 c
331.2619 363.8839 330.8661 363.4881 330.8661 363 c
f
331.75 363 m
F
U
u
330.8661 358.25 m
330.8661 357.7619 331.2619 357.3661 331.75 357.3661 c
332.2381 357.3661 332.6339 357.7619 332.6339 358.25 c
332.6339 358.7381 332.2381 359.1339 331.75 359.1339 c
331.2619 359.1339 330.8661 358.7381 330.8661 358.25 c
f
331.75 358.25 m
F
U
u
330.8661 353.5 m
330.8661 353.0119 331.2619 352.6161 331.75 352.6161 c
332.2381 352.6161 332.6339 353.0119 332.6339 353.5 c
332.6339 353.9881 332.2381 354.3839 331.75 354.3839 c
331.2619 354.3839 330.8661 353.9881 330.8661 353.5 c
f
331.75 353.5 m
F
U
u
316.25 346.1161 m
316.7381 346.1161 317.1339 346.5119 317.1339 347 c
317.1339 347.4881 316.7381 347.8839 316.25 347.8839 c
315.7619 347.8839 315.3661 347.4881 315.3661 347 c
315.3661 346.5119 315.7619 346.1161 316.25 346.1161 c
f
316.25 347 m
F
U
u
321 346.1161 m
321.4881 346.1161 321.8839 346.5119 321.8839 347 c
321.8839 347.4881 321.4881 347.8839 321 347.8839 c
320.5119 347.8839 320.1161 347.4881 320.1161 347 c
320.1161 346.5119 320.5119 346.1161 321 346.1161 c
f
321 347 m
F
U
u
325.75 346.1161 m
326.2381 346.1161 326.6339 346.5119 326.6339 347 c
326.6339 347.4881 326.2381 347.8839 325.75 347.8839 c
325.2619 347.8839 324.8661 347.4881 324.8661 347 c
324.8661 346.5119 325.2619 346.1161 325.75 346.1161 c
f
325.75 347 m
F
U
u
300.3661 332.5 m
300.3661 332.0119 300.7619 331.6161 301.25 331.6161 c
301.7381 331.6161 302.1339 332.0119 302.1339 332.5 c
302.1339 332.9881 301.7381 333.3839 301.25 333.3839 c
300.7619 333.3839 300.3661 332.9881 300.3661 332.5 c
f
301.25 332.5 m
F
U
u
300.3661 327.75 m
300.3661 327.2619 300.7619 326.8661 301.25 326.8661 c
301.7381 326.8661 302.1339 327.2619 302.1339 327.75 c
302.1339 328.2381 301.7381 328.6339 301.25 328.6339 c
300.7619 328.6339 300.3661 328.2381 300.3661 327.75 c
f
301.25 327.75 m
F
U
u
300.3661 323 m
300.3661 322.5119 300.7619 322.1161 301.25 322.1161 c
301.7381 322.1161 302.1339 322.5119 302.1339 323 c
302.1339 323.4881 301.7381 323.8839 301.25 323.8839 c
300.7619 323.8839 300.3661 323.4881 300.3661 323 c
f
301.25 323 m
F
U
u
232.75 376.6161 m
233.2381 376.6161 233.6339 377.0119 233.6339 377.5 c
233.6339 377.9881 233.2381 378.3839 232.75 378.3839 c
232.2619 378.3839 231.8661 377.9881 231.8661 377.5 c
231.8661 377.0119 232.2619 376.6161 232.75 376.6161 c
f
232.75 377.5 m
F
U
u
237.5 376.6161 m
237.9881 376.6161 238.3839 377.0119 238.3839 377.5 c
238.3839 377.9881 237.9881 378.3839 237.5 378.3839 c
237.0119 378.3839 236.6161 377.9881 236.6161 377.5 c
236.6161 377.0119 237.0119 376.6161 237.5 376.6161 c
f
237.5 377.5 m
F
U
u
242.25 376.6161 m
242.7381 376.6161 243.1339 377.0119 243.1339 377.5 c
243.1339 377.9881 242.7381 378.3839 242.25 378.3839 c
241.7619 378.3839 241.3661 377.9881 241.3661 377.5 c
241.3661 377.0119 241.7619 376.6161 242.25 376.6161 c
f
242.25 377.5 m
F
U
u
216.8661 363 m
216.8661 362.5119 217.2619 362.1161 217.75 362.1161 c
218.2381 362.1161 218.6339 362.5119 218.6339 363 c
218.6339 363.4881 218.2381 363.8839 217.75 363.8839 c
217.2619 363.8839 216.8661 363.4881 216.8661 363 c
f
217.75 363 m
F
U
u
216.8661 358.25 m
216.8661 357.7619 217.2619 357.3661 217.75 357.3661 c
218.2381 357.3661 218.6339 357.7619 218.6339 358.25 c
218.6339 358.7381 218.2381 359.1339 217.75 359.1339 c
217.2619 359.1339 216.8661 358.7381 216.8661 358.25 c
f
217.75 358.25 m
F
U
u
216.8661 353.5 m
216.8661 353.0119 217.2619 352.6161 217.75 352.6161 c
218.2381 352.6161 218.6339 353.0119 218.6339 353.5 c
218.6339 353.9881 218.2381 354.3839 217.75 354.3839 c
217.2619 354.3839 216.8661 353.9881 216.8661 353.5 c
f
217.75 353.5 m
F
U
u
317.25 460.1161 m
317.7381 460.1161 318.1339 460.5119 318.1339 461 c
318.1339 461.4881 317.7381 461.8839 317.25 461.8839 c
316.7619 461.8839 316.3661 461.4881 316.3661 461 c
316.3661 460.5119 316.7619 460.1161 317.25 460.1161 c
f
317.25 461 m
F
U
u
322 460.1161 m
322.4881 460.1161 322.8839 460.5119 322.8839 461 c
322.8839 461.4881 322.4881 461.8839 322 461.8839 c
321.5119 461.8839 321.1161 461.4881 321.1161 461 c
321.1161 460.5119 321.5119 460.1161 322 460.1161 c
f
322 461 m
F
U
u
326.75 460.1161 m
327.2381 460.1161 327.6339 460.5119 327.6339 461 c
327.6339 461.4881 327.2381 461.8839 326.75 461.8839 c
326.2619 461.8839 325.8661 461.4881 325.8661 461 c
325.8661 460.5119 326.2619 460.1161 326.75 460.1161 c
f
326.75 461 m
F
U
u
301.3661 446.5 m
301.3661 446.0119 301.7619 445.6161 302.25 445.6161 c
302.7381 445.6161 303.1339 446.0119 303.1339 446.5 c
303.1339 446.9881 302.7381 447.3839 302.25 447.3839 c
301.7619 447.3839 301.3661 446.9881 301.3661 446.5 c
f
302.25 446.5 m
F
U
u
301.3661 441.75 m
301.3661 441.2619 301.7619 440.8661 302.25 440.8661 c
302.7381 440.8661 303.1339 441.2619 303.1339 441.75 c
303.1339 442.2381 302.7381 442.6339 302.25 442.6339 c
301.7619 442.6339 301.3661 442.2381 301.3661 441.75 c
f
302.25 441.75 m
F
U
u
301.3661 437 m
301.3661 436.5119 301.7619 436.1161 302.25 436.1161 c
302.7381 436.1161 303.1339 436.5119 303.1339 437 c
303.1339 437.4881 302.7381 437.8839 302.25 437.8839 c
301.7619 437.8839 301.3661 437.4881 301.3661 437 c
f
302.25 437 m
F
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 518.11 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 86
%%Page: "81" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(81) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.56 (The case 2 model of both triads being repaired at the same time is shown in figure 43.  The mean) 105 525.67 P
0.86 (and the standard deviation of the multiple recovery transition must be measured experimentally. This) 87 512.67 P
1.82 (measurement can be accomplished by injecting two simultaneous faults and measuring the time to) 87 499.67 P
(recovery completion.) 87 486.67 T
0.82 (The third case, two independent repair processes, is shown in figure 44. If the two recoveries are) 105 296.88 P
0.7 (truly independent and not competing for resources, the transition rates will be different from the non-) 87 283.88 P
-0.08 (competing rates because they are conditional upon winning the competition. The conditional means and) 87 270.89 P
0.49 (standard deviations cannot be analytically determined from the unconditional recovery distributions in) 87 257.89 P
(general; therefore, these four distributions must be measured experimentally.) 87 244.89 T
4 12 Q
(14. Multiple T) 87 216.54 T
(riads W) 159.12 216.54 T
(ith Other Dependencies) 199.91 216.54 T
3 11 Q
0.35 (In this section, the analysis of systems that consist of multiple triads is continued.  However, other) 105 195.53 P
(dependencies will be analyzed here.) 87 182.53 T
4 10.5 Q
(14.1. Modeling Multiple Identical T) 105 155.18 T
(riads) 263.49 155.18 T
3 11 Q
0.26 (In the previous sections, specific triads that were faulty in  the models were tracked.  This tracking) 105 134.67 P
-0.11 (was necessary because different triads had different failure rates and different recovery rates.  However,) 87 121.67 P
-0.24 (if all triads are identical, then a substantially simpler model can be developed that takes advantage of the) 87 108.67 P
2.17 (extra symmetry. Because of the symmetry, the specific triad that was faulty need not be tracked.) 87 95.67 P
0.21 (Instead, the number of triads with faults must be counted.  The following set of attributes are sufficient) 87 82.67 P
(to characterize this system:) 87 69.67 T
3 9 Q
(Figure 42.  Triad 1 always repaired first.) 242.14 558 T
(Figure 43.  Both triads repaired simultaneously.) 229.01 333.9 T
87 564 543 726 C
218.5 575 411.5 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 232 363 413 518 181 155 224.5 572.67 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig42.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig42.ps)
%%CreationDate: (8/18/95) (10:52 AM)
%%BoundingBox: 232 363 413 518
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 O
1 g
0 R
0 G
0 i 0 J 0 j 0.8625 w 4 M []0 d
%AI3_Note:
0 D
260.5 492.3913 m
266.3382 492.3913 271.0712 497.1243 271.0712 502.9625 c
271.0712 508.8007 266.3382 513.5337 260.5 513.5337 c
254.6618 513.5337 249.9288 508.8007 249.9288 502.9625 c
249.9288 497.1243 254.6618 492.3913 260.5 492.3913 c
b
260.5 502.9625 m
B
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(2,2,7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
271.125 503 m
332.25 503 l
S
u
0 O
1 g
0.8625 w
344.7875 492.4288 m
350.6257 492.4288 355.3587 497.1618 355.3587 503 c
355.3587 508.8382 350.6257 513.5712 344.7875 513.5712 c
338.9493 513.5712 334.2163 508.8382 334.2163 503 c
334.2163 497.1618 338.9493 492.4288 344.7875 492.4288 c
b
344.7875 503 m
B
U
0 To
1 0 0 1 344.75 499.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(1,2,7) Tx 
(\r) TX 
TO
u
334.1338 503 m
327.5825 501.4565 l
328.9888 503 L
327.5825 504.5435 l
334.1338 503 L
f
U
0 R
0 G
0.75 w
268.0407 495.4593 m
293.9332 469.5668 l
S
u
0 O
1 g
0.8625 w
252.5503 411.9996 m
256.6786 407.8715 263.372 407.8715 267.5002 411.9997 c
271.6285 416.1278 271.6285 422.8214 267.5002 426.9497 c
263.3721 431.0779 256.6786 431.0779 252.5503 426.9497 c
248.4221 422.8214 248.4221 416.1278 252.5503 411.9996 c
b
260.0253 419.4747 m
B
U
u
0 g
1 w
295.175 468.325 m
289.4511 471.8661 l
291.5369 471.9631 L
291.6339 474.0489 l
295.175 468.325 L
f
U
0 To
1 0 0 1 260.125 415.875 0 Tp
TP
-9 0 Td
0 Tr
(2,1,7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 297.5 508.75 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.8625 w
302.8562 450.535 m
308.6944 450.535 313.4275 455.2681 313.4275 461.1063 c
313.4275 466.9444 308.6944 471.6775 302.8562 471.6775 c
297.0181 471.6775 292.285 466.9444 292.285 461.1063 c
292.285 455.2681 297.0181 450.535 302.8562 450.535 c
b
302.8562 461.1063 m
B
U
0 To
1 0 0 1 302.875 457.625 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(3,2,6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
260.5 492.25 m
260.5 431.7499 l
S
u
0 O
0 g
1 w
260.5 429.8661 m
258.9565 436.4174 l
260.5 435.0111 L
262.0435 436.4174 l
260.5 429.8661 L
f
U
0 To
1 0 0 1 280.75 487 0 Tp
TP
0 Tr
/_Courier 9 Tf
0 Ta
(R1_FIRST) Tx 
(\r) TX 
TO
0 To
1 0 0 1 249.5 460.25 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
1 Ta
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
313.1875 460.9375 m
374.3125 460.9375 l
S
u
0 O
1 g
0.8625 w
386.85 450.3663 m
392.6882 450.3663 397.4212 455.0993 397.4212 460.9375 c
397.4212 466.7757 392.6882 471.5087 386.85 471.5087 c
381.0118 471.5087 376.2788 466.7757 376.2788 460.9375 c
376.2788 455.0993 381.0118 450.3663 386.85 450.3663 c
b
386.85 460.9375 m
B
U
0 To
1 0 0 1 386.8125 457.4375 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(2,2,6) Tx 
(\r) TX 
TO
u
376.1963 460.9375 m
369.645 459.394 l
371.0513 460.9375 L
369.645 462.481 l
376.1963 460.9375 L
f
U
0 R
0 G
0.75 w
310.1032 453.3968 m
335.9957 427.5043 l
S
u
0 O
1 g
0.8625 w
294.6128 369.9371 m
298.7411 365.809 305.4345 365.809 309.5627 369.9372 c
313.691 374.0653 313.691 380.7589 309.5627 384.8872 c
305.4346 389.0154 298.7411 389.0154 294.6128 384.8872 c
290.4846 380.7589 290.4846 374.0653 294.6128 369.9371 c
b
302.0878 377.4122 m
B
U
u
0 g
1 w
337.2375 426.2625 m
331.5136 429.8036 l
333.5994 429.9006 L
333.6964 431.9864 l
337.2375 426.2625 L
f
U
0 To
1 0 0 1 302.1875 373.8125 0 Tp
TP
-9 0 Td
0 Tr
(3,1,6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 339.5625 466.6875 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.8625 w
344.9187 408.4725 m
350.7569 408.4725 355.49 413.2056 355.49 419.0438 c
355.49 424.8819 350.7569 429.615 344.9187 429.615 c
339.0806 429.615 334.3475 424.8819 334.3475 419.0438 c
334.3475 413.2056 339.0806 408.4725 344.9187 408.4725 c
b
344.9187 419.0438 m
B
U
0 To
1 0 0 1 344.9375 415.5625 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(3,3,5) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
302.5625 450.1875 m
302.5625 389.6874 l
S
u
0 O
0 g
1 w
302.5625 387.8036 m
301.019 394.3549 l
302.5625 392.9486 L
304.106 394.3549 l
302.5625 387.8036 L
f
U
0 To
1 0 0 1 322.8125 444.9375 0 Tp
TP
0 Tr
/_Courier 9 Tf
0 Ta
(R2_SECOND) Tx 
(\r) TX 
TO
u
359.3125 418.0536 m
359.8006 418.0536 360.1964 418.4494 360.1964 418.9375 c
360.1964 419.4256 359.8006 419.8214 359.3125 419.8214 c
358.8244 419.8214 358.4286 419.4256 358.4286 418.9375 c
358.4286 418.4494 358.8244 418.0536 359.3125 418.0536 c
f
359.3125 418.9375 m
F
U
u
364.0625 418.0536 m
364.5506 418.0536 364.9464 418.4494 364.9464 418.9375 c
364.9464 419.4256 364.5506 419.8214 364.0625 419.8214 c
363.5744 419.8214 363.1786 419.4256 363.1786 418.9375 c
363.1786 418.4494 363.5744 418.0536 364.0625 418.0536 c
f
364.0625 418.9375 m
F
U
u
368.8125 418.0536 m
369.3006 418.0536 369.6964 418.4494 369.6964 418.9375 c
369.6964 419.4256 369.3006 419.8214 368.8125 419.8214 c
368.3244 419.8214 367.9286 419.4256 367.9286 418.9375 c
367.9286 418.4494 368.3244 418.0536 368.8125 418.0536 c
f
368.8125 418.9375 m
F
U
u
343.4286 404.4375 m
343.4286 403.9494 343.8244 403.5536 344.3125 403.5536 c
344.8006 403.5536 345.1964 403.9494 345.1964 404.4375 c
345.1964 404.9256 344.8006 405.3214 344.3125 405.3214 c
343.8244 405.3214 343.4286 404.9256 343.4286 404.4375 c
f
344.3125 404.4375 m
F
U
u
343.4286 399.6875 m
343.4286 399.1994 343.8244 398.8036 344.3125 398.8036 c
344.8006 398.8036 345.1964 399.1994 345.1964 399.6875 c
345.1964 400.1756 344.8006 400.5714 344.3125 400.5714 c
343.8244 400.5714 343.4286 400.1756 343.4286 399.6875 c
f
344.3125 399.6875 m
F
U
u
343.4286 394.9375 m
343.4286 394.4494 343.8244 394.0536 344.3125 394.0536 c
344.8006 394.0536 345.1964 394.4494 345.1964 394.9375 c
345.1964 395.4256 344.8006 395.8214 344.3125 395.8214 c
343.8244 395.8214 343.4286 395.4256 343.4286 394.9375 c
f
344.3125 394.9375 m
F
U
0 To
1 0 0 1 291.5625 418.1875 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
1 Ta
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
401.1875 459.9286 m
401.6756 459.9286 402.0714 460.3244 402.0714 460.8125 c
402.0714 461.3006 401.6756 461.6964 401.1875 461.6964 c
400.6994 461.6964 400.3036 461.3006 400.3036 460.8125 c
400.3036 460.3244 400.6994 459.9286 401.1875 459.9286 c
f
401.1875 460.8125 m
F
U
u
405.9375 459.9286 m
406.4256 459.9286 406.8214 460.3244 406.8214 460.8125 c
406.8214 461.3006 406.4256 461.6964 405.9375 461.6964 c
405.4494 461.6964 405.0536 461.3006 405.0536 460.8125 c
405.0536 460.3244 405.4494 459.9286 405.9375 459.9286 c
f
405.9375 460.8125 m
F
U
u
410.6875 459.9286 m
411.1756 459.9286 411.5714 460.3244 411.5714 460.8125 c
411.5714 461.3006 411.1756 461.6964 410.6875 461.6964 c
410.1994 461.6964 409.8036 461.3006 409.8036 460.8125 c
409.8036 460.3244 410.1994 459.9286 410.6875 459.9286 c
f
410.6875 460.8125 m
F
U
u
385.3036 446.3125 m
385.3036 445.8244 385.6994 445.4286 386.1875 445.4286 c
386.6756 445.4286 387.0714 445.8244 387.0714 446.3125 c
387.0714 446.8006 386.6756 447.1964 386.1875 447.1964 c
385.6994 447.1964 385.3036 446.8006 385.3036 446.3125 c
f
386.1875 446.3125 m
F
U
u
385.3036 441.5625 m
385.3036 441.0744 385.6994 440.6786 386.1875 440.6786 c
386.6756 440.6786 387.0714 441.0744 387.0714 441.5625 c
387.0714 442.0506 386.6756 442.4464 386.1875 442.4464 c
385.6994 442.4464 385.3036 442.0506 385.3036 441.5625 c
f
386.1875 441.5625 m
F
U
u
385.3036 436.8125 m
385.3036 436.3244 385.6994 435.9286 386.1875 435.9286 c
386.6756 435.9286 387.0714 436.3244 387.0714 436.8125 c
387.0714 437.3006 386.6756 437.6964 386.1875 437.6964 c
385.6994 437.6964 385.3036 437.3006 385.3036 436.8125 c
f
386.1875 436.8125 m
F
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 564 543 726 C
0 0 612 792 C
87 339.9 543 461 C
243.5 350.9 386.5 461 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 232 405 363 518 131 113 249.5 349.67 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig43.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig43.ps)
%%CreationDate: (8/18/95) (10:52 AM)
%%BoundingBox: 232 405 363 518
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 O
1 g
0 R
0 G
0 i 0 J 0 j 0.8625 w 4 M []0 d
%AI3_Note:
0 D
260.5 492.3913 m
266.3382 492.3913 271.0712 497.1243 271.0712 502.9625 c
271.0712 508.8007 266.3382 513.5337 260.5 513.5337 c
254.6618 513.5337 249.9288 508.8007 249.9288 502.9625 c
249.9288 497.1243 254.6618 492.3913 260.5 492.3913 c
b
260.5 502.9625 m
B
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(2,2,7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
271.125 503 m
332.25 503 l
S
u
0 O
1 g
0.8625 w
344.7875 492.4288 m
350.6257 492.4288 355.3587 497.1618 355.3587 503 c
355.3587 508.8382 350.6257 513.5712 344.7875 513.5712 c
338.9493 513.5712 334.2163 508.8382 334.2163 503 c
334.2163 497.1618 338.9493 492.4288 344.7875 492.4288 c
b
344.7875 503 m
B
U
0 To
1 0 0 1 344.75 499.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(1,2,7) Tx 
(\r) TX 
TO
u
334.1338 503 m
327.5825 501.4565 l
328.9888 503 L
327.5825 504.5435 l
334.1338 503 L
f
U
0 R
0 G
0.75 w
268.0407 495.4593 m
293.9332 469.5668 l
S
u
0 O
1 g
0.8625 w
252.5503 411.9996 m
256.6786 407.8715 263.372 407.8715 267.5002 411.9997 c
271.6285 416.1278 271.6285 422.8214 267.5002 426.9497 c
263.3721 431.0779 256.6786 431.0779 252.5503 426.9497 c
248.4221 422.8214 248.4221 416.1278 252.5503 411.9996 c
b
260.0253 419.4747 m
B
U
u
0 g
1 w
295.175 468.325 m
289.4511 471.8661 l
291.5369 471.9631 L
291.6339 474.0489 l
295.175 468.325 L
f
U
0 To
1 0 0 1 260.125 415.875 0 Tp
TP
-9 0 Td
0 Tr
(2,1,7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 297.5 508.75 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.8625 w
302.8562 450.535 m
308.6944 450.535 313.4275 455.2681 313.4275 461.1063 c
313.4275 466.9444 308.6944 471.6775 302.8562 471.6775 c
297.0181 471.6775 292.285 466.9444 292.285 461.1063 c
292.285 455.2681 297.0181 450.535 302.8562 450.535 c
b
302.8562 461.1063 m
B
U
0 To
1 0 0 1 302.875 457.625 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(3,3,5) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
260.5 492.25 m
260.5 431.7499 l
S
u
0 O
0 g
1 w
260.5 429.8661 m
258.9565 436.4174 l
260.5 435.0111 L
262.0435 436.4174 l
260.5 429.8661 L
f
U
0 To
1 0 0 1 280.75 487 0 Tp
TP
0 Tr
/_Courier 9 Tf
0 Ta
(R_1AND2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 249.5 460.25 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
1 Ta
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
317.6875 459.9286 m
318.1756 459.9286 318.5714 460.3244 318.5714 460.8125 c
318.5714 461.3006 318.1756 461.6964 317.6875 461.6964 c
317.1994 461.6964 316.8036 461.3006 316.8036 460.8125 c
316.8036 460.3244 317.1994 459.9286 317.6875 459.9286 c
f
317.6875 460.8125 m
F
U
u
322.4375 459.9286 m
322.9256 459.9286 323.3214 460.3244 323.3214 460.8125 c
323.3214 461.3006 322.9256 461.6964 322.4375 461.6964 c
321.9494 461.6964 321.5536 461.3006 321.5536 460.8125 c
321.5536 460.3244 321.9494 459.9286 322.4375 459.9286 c
f
322.4375 460.8125 m
F
U
u
327.1875 459.9286 m
327.6756 459.9286 328.0714 460.3244 328.0714 460.8125 c
328.0714 461.3006 327.6756 461.6964 327.1875 461.6964 c
326.6994 461.6964 326.3036 461.3006 326.3036 460.8125 c
326.3036 460.3244 326.6994 459.9286 327.1875 459.9286 c
f
327.1875 460.8125 m
F
U
u
301.8036 446.3125 m
301.8036 445.8244 302.1994 445.4286 302.6875 445.4286 c
303.1756 445.4286 303.5714 445.8244 303.5714 446.3125 c
303.5714 446.8006 303.1756 447.1964 302.6875 447.1964 c
302.1994 447.1964 301.8036 446.8006 301.8036 446.3125 c
f
302.6875 446.3125 m
F
U
u
301.8036 441.5625 m
301.8036 441.0744 302.1994 440.6786 302.6875 440.6786 c
303.1756 440.6786 303.5714 441.0744 303.5714 441.5625 c
303.5714 442.0506 303.1756 442.4464 302.6875 442.4464 c
302.1994 442.4464 301.8036 442.0506 301.8036 441.5625 c
f
302.6875 441.5625 m
F
U
u
301.8036 436.8125 m
301.8036 436.3244 302.1994 435.9286 302.6875 435.9286 c
303.1756 435.9286 303.5714 436.3244 303.5714 436.8125 c
303.5714 437.3006 303.1756 437.6964 302.6875 437.6964 c
302.1994 437.6964 301.8036 437.3006 301.8036 436.8125 c
f
302.6875 436.8125 m
F
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 339.9 543 461 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 87
%%Page: "82" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(82) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(1.) 105 389.23 T
7 F
(NAT) 117 389.23 T
3 F
(, number of active triads) 136.8 389.23 T
(2.) 105 368.84 T
7 F
(NTWF) 117 368.84 T
3 F
(, number of triads with one fault) 143.4 368.84 T
(3.) 105 348.45 T
7 F
(NS) 117 348.45 T
3 F
(, number of spares available) 130.2 348.45 T
(4.) 105 328.06 T
7 F
(NCF) 117 328.06 T
3 F
(, one if and only if near-coincident failure) 136.8 328.06 T
(5.) 105 307.67 T
7 F
(NI) 117 307.67 T
3 F
(, number of triads initially) 130.2 307.67 T
(6.) 105 287.28 T
7 F
(NSI) 117 287.28 T
3 F
(, number of initial spares) 136.8 287.28 T
(7.) 105 266.89 T
7 F
(MNT) 117 266.89 T
3 F
(, minimum number of triads needed) 136.8 266.89 T
0.94 (If a processor in a triad fails, the) 105 246.5 P
7 F
2.25 (NTWF) 257.61 246.5 P
3 F
0.94 ( variable is incremented.  If a second processor in a triad) 284.01 246.5 P
0.24 (fails, then the) 87 233.5 P
7 F
0.58 (NCF) 150.05 233.5 P
3 F
0.24 ( variable is set to 1.  Any state with) 169.85 233.5 P
7 F
0.58 (NCF) 330.21 233.5 P
0.58 (=) 356.61 233.5 P
0.58 (1) 369.82 233.5 P
3 F
0.24 ( is a death state.  The system replaces) 376.42 233.5 P
0.25 (faulty processors by a spare.  This replacement is represented by decrementing the) 87 220.5 P
7 F
0.61 (NTWF) 455.66 220.5 P
3 F
0.25 ( variable by 1) 482.06 220.5 P
0.75 (and the number of spares variable) 87 207.5 P
7 F
1.79 (NS) 243 207.5 P
3 F
0.75 ( by 1.  If no spares are available, the system removes the faulty) 256.2 207.5 P
0.76 (triad from the system.  The remaining good processors are added to the spares pool.  This addition is) 87 194.5 P
1.65 (accomplished by decrementing the) 87 181.5 P
7 F
3.97 (NAT) 249.42 181.5 P
3 F
1.65 ( variable by 1, decrementing the NTWF variable by 1, and) 269.22 181.5 P
(incrementing the number of spares variable by 2.  The complete ASSIST model is) 87 168.5 T
7 10.75 Q
(LAMBDA = 1e-4;) 87 148.28 T
(DELTA1 = 1e4;) 87 134.14 T
(DELTA2 = 1e4;) 87 120 T
(INPUT NI;       \050* Number of triads initially *\051) 87 105.86 T
(INPUT NSI;      \050* Number of spares initially *\051) 87 91.72 T
(INPUT MNT;      \050* Minimum number triads needed *\051) 87 77.58 T
3 9 Q
(Figure 44.  Two independent repair processes.) 231.77 421.56 T
87 427.56 543 726 C
162.5 438.56 467.5 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 232 231 525 518 293 287 168.5 439.56 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig44.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig44.ps)
%%CreationDate: (8/18/95) (10:53 AM)
%%BoundingBox: 232 231 525 518
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 O
1 g
0 R
0 G
0 i 0 J 0 j 0.8625 w 4 M []0 d
%AI3_Note:
0 D
260.5 492.3913 m
266.3382 492.3913 271.0712 497.1243 271.0712 502.9625 c
271.0712 508.8007 266.3382 513.5337 260.5 513.5337 c
254.6618 513.5337 249.9288 508.8007 249.9288 502.9625 c
249.9288 497.1243 254.6618 492.3913 260.5 492.3913 c
b
260.5 502.9625 m
B
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(2,2,7) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
271.125 503 m
332.25 503 l
S
u
0 O
1 g
0.8625 w
344.7875 492.4288 m
350.6257 492.4288 355.3587 497.1618 355.3587 503 c
355.3587 508.8382 350.6257 513.5712 344.7875 513.5712 c
338.9493 513.5712 334.2163 508.8382 334.2163 503 c
334.2163 497.1618 338.9493 492.4288 344.7875 492.4288 c
b
344.7875 503 m
B
U
0 To
1 0 0 1 344.75 499.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(1,2,7) Tx 
(\r) TX 
TO
u
334.1338 503 m
327.5825 501.4565 l
328.9888 503 L
327.5825 504.5435 l
334.1338 503 L
f
U
u
1 g
0 R
0 G
0.8625 w
252.5503 411.9996 m
256.6786 407.8715 263.372 407.8715 267.5002 411.9997 c
271.6285 416.1278 271.6285 422.8214 267.5002 426.9497 c
263.3721 431.0779 256.6786 431.0779 252.5503 426.9497 c
248.4221 422.8214 248.4221 416.1278 252.5503 411.9996 c
b
260.0253 419.4747 m
B
U
0 To
1 0 0 1 260.125 415.875 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(2,1,7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 297.5 508.75 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
260.5 492.25 m
260.5 431.7499 l
S
u
0 O
0 g
1 w
260.5 429.8661 m
258.9565 436.4174 l
260.5 435.0111 L
262.0435 436.4174 l
260.5 429.8661 L
f
U
0 To
1 0 0 1 341.75 479.5 0 Tp
TP
0 Tr
0 Ts
0 Ta
(R2A) Tx 
(\r) TX 
TO
0 To
1 0 0 1 249.5 460.25 0 Tp
TP
-6.9697 0 Td
0 Tr
1 Ta
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.8625 w
414 442.3913 m
419.8382 442.3913 424.5712 447.1243 424.5712 452.9625 c
424.5712 458.8007 419.8382 463.5337 414 463.5337 c
408.1618 463.5337 403.4288 458.8007 403.4288 452.9625 c
403.4288 447.1243 408.1618 442.3913 414 442.3913 c
b
414 452.9625 m
B
U
0 To
1 0 0 1 414 449.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(3,2,6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
424.625 453 m
485.75 453 l
S
u
0 O
1 g
0.8625 w
498.2875 442.4288 m
504.1257 442.4288 508.8587 447.1618 508.8587 453 c
508.8587 458.8382 504.1257 463.5712 498.2875 463.5712 c
492.4493 463.5712 487.7163 458.8382 487.7163 453 c
487.7163 447.1618 492.4493 442.4288 498.2875 442.4288 c
b
498.2875 453 m
B
U
0 To
1 0 0 1 498.25 449.5 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(2,2,6) Tx 
(\r) TX 
TO
u
487.6338 453 m
481.0825 451.4565 l
482.4888 453 L
481.0825 454.5435 l
487.6338 453 L
f
U
0 R
0 G
0.75 w
421.5407 445.4593 m
489.1832 377.8168 l
S
u
0 O
1 g
0.8625 w
406.0503 361.9996 m
410.1786 357.8715 416.872 357.8715 421.0002 361.9997 c
425.1285 366.1278 425.1285 372.8214 421.0002 376.9497 c
416.8721 381.0779 410.1786 381.0779 406.0503 376.9497 c
401.9221 372.8214 401.9221 366.1278 406.0503 361.9996 c
b
413.5253 369.4747 m
B
U
u
0 g
1 w
490.425 376.575 m
484.7011 380.1161 l
486.7869 380.2131 L
486.8839 382.2989 l
490.425 376.575 L
f
U
0 To
1 0 0 1 413.625 365.875 0 Tp
TP
-9 0 Td
0 Tr
(3,1,6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 451 458.75 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.8625 w
498.1062 358.785 m
503.9444 358.785 508.6775 363.5181 508.6775 369.3563 c
508.6775 375.1944 503.9444 379.9275 498.1062 379.9275 c
492.2681 379.9275 487.535 375.1944 487.535 369.3563 c
487.535 363.5181 492.2681 358.785 498.1062 358.785 c
b
498.1062 369.3563 m
B
U
0 To
1 0 0 1 498.125 365.875 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(3,3,5) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
414 442.25 m
414 381.7499 l
S
u
0 O
0 g
1 w
414 379.8661 m
412.4565 386.4174 l
414 385.0111 L
415.5435 386.4174 l
414 379.8661 L
f
U
0 To
1 0 0 1 453.75 417.5 0 Tp
TP
0 Tr
0 Ta
(R1B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 403 410.25 0 Tp
TP
-6.9697 0 Td
0 Tr
1 Ta
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
512.9375 368.1786 m
513.4256 368.1786 513.8214 368.5744 513.8214 369.0625 c
513.8214 369.5506 513.4256 369.9464 512.9375 369.9464 c
512.4494 369.9464 512.0536 369.5506 512.0536 369.0625 c
512.0536 368.5744 512.4494 368.1786 512.9375 368.1786 c
f
512.9375 369.0625 m
F
U
u
517.6875 368.1786 m
518.1756 368.1786 518.5714 368.5744 518.5714 369.0625 c
518.5714 369.5506 518.1756 369.9464 517.6875 369.9464 c
517.1994 369.9464 516.8036 369.5506 516.8036 369.0625 c
516.8036 368.5744 517.1994 368.1786 517.6875 368.1786 c
f
517.6875 369.0625 m
F
U
u
522.4375 368.1786 m
522.9256 368.1786 523.3214 368.5744 523.3214 369.0625 c
523.3214 369.5506 522.9256 369.9464 522.4375 369.9464 c
521.9494 369.9464 521.5536 369.5506 521.5536 369.0625 c
521.5536 368.5744 521.9494 368.1786 522.4375 368.1786 c
f
522.4375 369.0625 m
F
U
u
497.0536 354.5625 m
497.0536 354.0744 497.4494 353.6786 497.9375 353.6786 c
498.4256 353.6786 498.8214 354.0744 498.8214 354.5625 c
498.8214 355.0506 498.4256 355.4464 497.9375 355.4464 c
497.4494 355.4464 497.0536 355.0506 497.0536 354.5625 c
f
497.9375 354.5625 m
F
U
u
497.0536 349.8125 m
497.0536 349.3244 497.4494 348.9286 497.9375 348.9286 c
498.4256 348.9286 498.8214 349.3244 498.8214 349.8125 c
498.8214 350.3006 498.4256 350.6964 497.9375 350.6964 c
497.4494 350.6964 497.0536 350.3006 497.0536 349.8125 c
f
497.9375 349.8125 m
F
U
u
497.0536 345.0625 m
497.0536 344.5744 497.4494 344.1786 497.9375 344.1786 c
498.4256 344.1786 498.8214 344.5744 498.8214 345.0625 c
498.8214 345.5506 498.4256 345.9464 497.9375 345.9464 c
497.4494 345.9464 497.0536 345.5506 497.0536 345.0625 c
f
497.9375 345.0625 m
F
U
u
512.9375 451.6786 m
513.4256 451.6786 513.8214 452.0744 513.8214 452.5625 c
513.8214 453.0506 513.4256 453.4464 512.9375 453.4464 c
512.4494 453.4464 512.0536 453.0506 512.0536 452.5625 c
512.0536 452.0744 512.4494 451.6786 512.9375 451.6786 c
f
512.9375 452.5625 m
F
U
u
517.6875 451.6786 m
518.1756 451.6786 518.5714 452.0744 518.5714 452.5625 c
518.5714 453.0506 518.1756 453.4464 517.6875 453.4464 c
517.1994 453.4464 516.8036 453.0506 516.8036 452.5625 c
516.8036 452.0744 517.1994 451.6786 517.6875 451.6786 c
f
517.6875 452.5625 m
F
U
u
522.4375 451.6786 m
522.9256 451.6786 523.3214 452.0744 523.3214 452.5625 c
523.3214 453.0506 522.9256 453.4464 522.4375 453.4464 c
521.9494 453.4464 521.5536 453.0506 521.5536 452.5625 c
521.5536 452.0744 521.9494 451.6786 522.4375 451.6786 c
f
522.4375 452.5625 m
F
U
u
497.0536 438.0625 m
497.0536 437.5744 497.4494 437.1786 497.9375 437.1786 c
498.4256 437.1786 498.8214 437.5744 498.8214 438.0625 c
498.8214 438.5506 498.4256 438.9464 497.9375 438.9464 c
497.4494 438.9464 497.0536 438.5506 497.0536 438.0625 c
f
497.9375 438.0625 m
F
U
u
497.0536 433.3125 m
497.0536 432.8244 497.4494 432.4286 497.9375 432.4286 c
498.4256 432.4286 498.8214 432.8244 498.8214 433.3125 c
498.8214 433.8006 498.4256 434.1964 497.9375 434.1964 c
497.4494 434.1964 497.0536 433.8006 497.0536 433.3125 c
f
497.9375 433.3125 m
F
U
u
497.0536 428.5625 m
497.0536 428.0744 497.4494 427.6786 497.9375 427.6786 c
498.4256 427.6786 498.8214 428.0744 498.8214 428.5625 c
498.8214 429.0506 498.4256 429.4464 497.9375 429.4464 c
497.4494 429.4464 497.0536 429.0506 497.0536 428.5625 c
f
497.9375 428.5625 m
F
U
u
1 g
0 R
0 G
0.8625 w
308 330.8913 m
313.8382 330.8913 318.5712 335.6243 318.5712 341.4625 c
318.5712 347.3007 313.8382 352.0337 308 352.0337 c
302.1618 352.0337 297.4288 347.3007 297.4288 341.4625 c
297.4288 335.6243 302.1618 330.8913 308 330.8913 c
b
308 341.4625 m
B
U
0 To
1 0 0 1 308 338 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(3,2,6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
318.625 341.5 m
379.75 341.5 l
S
u
0 O
1 g
0.8625 w
392.2875 330.9288 m
398.1257 330.9288 402.8587 335.6618 402.8587 341.5 c
402.8587 347.3382 398.1257 352.0712 392.2875 352.0712 c
386.4493 352.0712 381.7163 347.3382 381.7163 341.5 c
381.7163 335.6618 386.4493 330.9288 392.2875 330.9288 c
b
392.2875 341.5 m
B
U
0 To
1 0 0 1 392.25 338 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
(2,2,6) Tx 
(\r) TX 
TO
u
381.6338 341.5 m
375.0825 339.9565 l
376.4888 341.5 L
375.0825 343.0435 l
381.6338 341.5 L
f
U
0 R
0 G
0.75 w
315.5407 333.9593 m
383.1832 266.3168 l
S
u
0 O
1 g
0.8625 w
300.0503 250.4996 m
304.1786 246.3715 310.872 246.3715 315.0002 250.4997 c
319.1285 254.6278 319.1285 261.3214 315.0002 265.4497 c
310.8721 269.5779 304.1786 269.5779 300.0503 265.4497 c
295.9221 261.3214 295.9221 254.6278 300.0503 250.4996 c
b
307.5253 257.9747 m
B
U
u
0 g
1 w
384.425 265.075 m
378.7011 268.6161 l
380.7869 268.7131 L
380.8839 270.7989 l
384.425 265.075 L
f
U
0 To
1 0 0 1 307.625 254.375 0 Tp
TP
-9 0 Td
0 Tr
(3,1,6) Tx 
(\r) TX 
TO
0 To
1 0 0 1 345 347.25 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
1 g
0 R
0 G
0.8625 w
392.1062 247.285 m
397.9444 247.285 402.6775 252.0181 402.6775 257.8563 c
402.6775 263.6944 397.9444 268.4275 392.1062 268.4275 c
386.2681 268.4275 381.535 263.6944 381.535 257.8563 c
381.535 252.0181 386.2681 247.285 392.1062 247.285 c
b
392.1062 257.8563 m
B
U
0 To
1 0 0 1 392.125 254.375 0 Tp
TP
-9 0 Td
0 Tr
0 g
1 w
0 Ts
(3,3,5) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
308 330.75 m
308 270.2499 l
S
u
0 O
0 g
1 w
308 268.3661 m
306.4565 274.9174 l
308 273.5111 L
309.5435 274.9174 l
308 268.3661 L
f
U
0 To
1 0 0 1 347.75 306 0 Tp
TP
0 Tr
0 Ta
(R2B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 297 298.75 0 Tp
TP
-6.9697 0 Td
0 Tr
1 Ta
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
406.9375 256.6786 m
407.4256 256.6786 407.8214 257.0744 407.8214 257.5625 c
407.8214 258.0506 407.4256 258.4464 406.9375 258.4464 c
406.4494 258.4464 406.0536 258.0506 406.0536 257.5625 c
406.0536 257.0744 406.4494 256.6786 406.9375 256.6786 c
f
406.9375 257.5625 m
F
U
u
411.6875 256.6786 m
412.1756 256.6786 412.5714 257.0744 412.5714 257.5625 c
412.5714 258.0506 412.1756 258.4464 411.6875 258.4464 c
411.1994 258.4464 410.8036 258.0506 410.8036 257.5625 c
410.8036 257.0744 411.1994 256.6786 411.6875 256.6786 c
f
411.6875 257.5625 m
F
U
u
416.4375 256.6786 m
416.9256 256.6786 417.3214 257.0744 417.3214 257.5625 c
417.3214 258.0506 416.9256 258.4464 416.4375 258.4464 c
415.9494 258.4464 415.5536 258.0506 415.5536 257.5625 c
415.5536 257.0744 415.9494 256.6786 416.4375 256.6786 c
f
416.4375 257.5625 m
F
U
u
391.0536 243.0625 m
391.0536 242.5744 391.4494 242.1786 391.9375 242.1786 c
392.4256 242.1786 392.8214 242.5744 392.8214 243.0625 c
392.8214 243.5506 392.4256 243.9464 391.9375 243.9464 c
391.4494 243.9464 391.0536 243.5506 391.0536 243.0625 c
f
391.9375 243.0625 m
F
U
u
391.0536 238.3125 m
391.0536 237.8244 391.4494 237.4286 391.9375 237.4286 c
392.4256 237.4286 392.8214 237.8244 392.8214 238.3125 c
392.8214 238.8006 392.4256 239.1964 391.9375 239.1964 c
391.4494 239.1964 391.0536 238.8006 391.0536 238.3125 c
f
391.9375 238.3125 m
F
U
u
391.0536 233.5625 m
391.0536 233.0744 391.4494 232.6786 391.9375 232.6786 c
392.4256 232.6786 392.8214 233.0744 392.8214 233.5625 c
392.8214 234.0506 392.4256 234.4464 391.9375 234.4464 c
391.4494 234.4464 391.0536 234.0506 391.0536 233.5625 c
f
391.9375 233.5625 m
F
U
u
406.9375 340.1786 m
407.4256 340.1786 407.8214 340.5744 407.8214 341.0625 c
407.8214 341.5506 407.4256 341.9464 406.9375 341.9464 c
406.4494 341.9464 406.0536 341.5506 406.0536 341.0625 c
406.0536 340.5744 406.4494 340.1786 406.9375 340.1786 c
f
406.9375 341.0625 m
F
U
u
411.6875 340.1786 m
412.1756 340.1786 412.5714 340.5744 412.5714 341.0625 c
412.5714 341.5506 412.1756 341.9464 411.6875 341.9464 c
411.1994 341.9464 410.8036 341.5506 410.8036 341.0625 c
410.8036 340.5744 411.1994 340.1786 411.6875 340.1786 c
f
411.6875 341.0625 m
F
U
u
416.4375 340.1786 m
416.9256 340.1786 417.3214 340.5744 417.3214 341.0625 c
417.3214 341.5506 416.9256 341.9464 416.4375 341.9464 c
415.9494 341.9464 415.5536 341.5506 415.5536 341.0625 c
415.5536 340.5744 415.9494 340.1786 416.4375 340.1786 c
f
416.4375 341.0625 m
F
U
u
391.0536 326.5625 m
391.0536 326.0744 391.4494 325.6786 391.9375 325.6786 c
392.4256 325.6786 392.8214 326.0744 392.8214 326.5625 c
392.8214 327.0506 392.4256 327.4464 391.9375 327.4464 c
391.4494 327.4464 391.0536 327.0506 391.0536 326.5625 c
f
391.9375 326.5625 m
F
U
u
391.0536 321.8125 m
391.0536 321.3244 391.4494 320.9286 391.9375 320.9286 c
392.4256 320.9286 392.8214 321.3244 392.8214 321.8125 c
392.8214 322.3006 392.4256 322.6964 391.9375 322.6964 c
391.4494 322.6964 391.0536 322.3006 391.0536 321.8125 c
f
391.9375 321.8125 m
F
U
u
391.0536 317.0625 m
391.0536 316.5744 391.4494 316.1786 391.9375 316.1786 c
392.4256 316.1786 392.8214 316.5744 392.8214 317.0625 c
392.8214 317.5506 392.4256 317.9464 391.9375 317.9464 c
391.4494 317.9464 391.0536 317.5506 391.0536 317.0625 c
f
391.9375 317.0625 m
F
U
0 R
0 G
0.75 w
269.7015 497.6875 m
403.1375 459.125 l
S
u
0 O
0 g
1 w
404.8182 458.4425 m
398.1051 458.9263 l
399.9082 459.9793 L
399.0272 461.8724 l
404.8182 458.4425 L
f
U
0 R
0 G
0.75 w
265.8125 493.7984 m
301.8753 352.3625 l
S
u
0 O
0 g
1 w
302.4338 350.4638 m
299.2682 356.4036 l
301.1197 355.4382 L
302.2528 357.1921 l
302.4338 350.4638 L
f
U
0 To
1 0 0 1 280.25 441.5 0 Tp
TP
0 Tr
0 Ts
0 Ta
(R1A) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 427.56 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 88
%%Page: "83" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(83) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10.75 Q
(SPACE = \050NAT: 0..NI,    \050* Number of Active Triads *\051) 87 718.83 T
(         NTWF: 0..NI,   \050* Number of Triads with 1 fault *\051) 87 704.78 T
(         NS: 0..NSI,    \050* Number of Available Spares *\051) 87 690.72 T
(         NCF: 0..1\051;    \050* 1 iff near-coincident failure *\051) 87 676.66 T
(START = \050NI,0,NSI,0\051;) 87 656.6 T
(IF NAT > 0 THEN) 87 636.54 T
(   IF NAT > NTWF TRANTO NTWF = NTWF + 1 BY 3*\050NAT-NTWF\051*LAMBDA;) 87 622.48 T
(   IF NTWF > 0 TRANTO NCF = 1 BY 2*\050NTWF\051*LAMBDA;) 87 608.43 T
(   IF \050NTWF > 0\051 THEN) 87 594.37 T
(      IF NS > 0 THEN) 87 580.31 T
-0.07 (         TRANTO NTWF = NTWF - 1, NS = NS - 1 BY FAST NTWF*DELTA2;) 87 566.25 P
(      ELSE) 87 552.2 T
-0.3 (         IF NAT > MNT TRANTO NAT = NAT - 1, NTWF = NTWF - 1, NS = NS + 2) 87 538.14 P
(                                  BY FAST NTWF*DELTA1;) 87 524.08 T
(      ENDIF;) 87 510.02 T
(   ENDIF;) 87 495.96 T
(ENDIF;) 87 481.9 T
(DEATHIF \050NAT=MNT\051 AND NCF=1;) 87 467.85 T
(DEATHIF NCF = 1;) 87 453.79 T
4 10.5 Q
(14.2. Multiple T) 105 427.9 T
(riad Systems W) 175.98 427.9 T
(ith Limited Ability to Handle  Multiple Faults) 246.37 427.9 T
3 11 Q
1.63 ( The example considered in this section is similar to \050and motivated by\051 a system analyzed by) 105 408.76 P
-0.03 (Alan) 87 395.76 P
-0.03 (White of the Assessment Technology Branch at Langley Research Center.  The system consists of) 111.13 395.76 P
7 F
0.37 (N) 87 382.76 P
3 F
0.16 ( triads. If a processor in a triad fails and spares are available, the system repairs the triad with a spare.) 93.6 382.76 P
0.08 (If no spares are available, the system removes the faulty triad from the configuration and adds the good) 87 369.76 P
0.06 (processors to the spares pool.  System failure occurs  when a triad has two faulty processors \050i.e., a sec-) 87 356.76 P
0.89 (ond processor fails before it can be repaired or removed from the system\051 or when not enough triads) 87 343.76 P
0.46 (remain to run the workload \050exhaustion of parts\051.  The system has difficulty diagnosing which proces-) 87 330.76 P
0.16 (sors are faulty when more than one triad has a faulty processor.  Therefore, in this situation, the system) 87 317.76 P
-0.05 (does not reconfigure. For simplicity, the system is assumed to never misdiagnose a faulty processor and) 87 304.76 P
(know when it has more than one triad with a faulty processor.) 87 291.76 T
8 10.5 Q
(14.2.1. T) 105 267.28 T
(wo triads.) 142.53 267.28 T
3 11 Q
0.3 ( In this section, a two-triad configuration will be modeled, that is, a system with) 187.16 267.28 P
(two initial triads that can still operate with only one triad. The complete model is shown in figure 45.) 87 254.28 T
0.11 (Initially the system has two good triads and no spares.  Thus, the first transition is from state \0503\051) 105 233.97 P
6 F
0.11 (\256) 532.14 233.97 P
3 F
0.29 (state \0504\051 with rate 6) 87 220.97 P
6 F
0.29 (l) 173.69 220.97 P
3 F
0.29 (.  After the system is in state \0504\051 several events can happen.  Another processor in) 179.73 220.97 P
0.25 (the same triad could fail and cause system failure \050i.e., enter state \0501\051\051. This failure is a near-coincident) 87 207.97 P
1.54 (failure that occurs at rate 2) 87 194.97 P
6 F
1.54 (l) 212.32 194.97 P
3 F
1.54 (. Alternatively, the system could recover from the first fault and go to) 218.36 194.97 P
0.23 (state) 87 181.97 P
0.23 (\0506\051.  One option remains; a processor could fail in the other triad.  This causes the system to enter) 109.91 181.97 P
-0.04 (state \0505\051 and occurs at rate 3) 87 168.97 P
6 F
-0.04 (l) 210.77 168.97 P
3 F
-0.04 (. The rest of the model is clear if one keeps in mind that the two good pro-) 216.8 168.97 P
0.29 (cessors of the removed triad are made spares.  Thus, the recovery transitions from state \0507\051) 87 155.97 P
6 F
0.29 (\256) 493.07 155.97 P
3 F
0.29 ( state \0508\051) 503.93 155.97 P
-0.1 (and from state \0509\051) 87 142.97 P
6 F
-0.1 (\256) 167.85 142.97 P
3 F
-0.1 ( state \05010\051 replace a faulty processor with a spare.  While not active, the failure rate) 178.7 142.97 P
(of the spares is assumed to be 0 to simplify the model.) 87 129.97 T
-0.23 (One interesting question to explore is whether the trimming of all failure transitions from a recovery) 105 109.67 P
0.2 (state that does not immediately lead to a death state is a good approximation.  Such an approach would) 87 96.67 P
0.44 (lead to the model shown in figure 46.  In this model, the transition from state \0504\051) 87 83.67 P
6 F
0.44 (\256) 450.98 83.67 P
3 F
0.44 ( state \0505\051 has been) 461.83 83.67 P
(removed.) 87 70.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 89
%%Page: "84" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(84) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.04 (The probability of system failure after 1000 hr is given in table 2.  For this system, the difference is) 105 177.34 P
2.4 (clearly negligible. It is important that a bound on the error due to removing these transitions be) 87 164.34 P
1.29 (calculated. In the next section, an example of the contribution of the removed states is shown to be) 87 151.34 P
(significant.) 87 138.34 T
8 10.5 Q
( 14.2.2. N triads.) 105 109.17 T
3 11 Q
0.77 (In this section, a system consisting of) 179.09 109.17 P
7 F
1.84 (NI) 351.91 109.17 P
3 F
0.77 ( triads will be analyzed.  The larger) 365.11 109.17 P
7 F
1.84 (NI) 529.8 109.17 P
3 F
0.09 (becomes, the larger the number of transitions removed by the strategy described in the previous section) 87 96.17 P
0.11 (becomes. Consider a system with 10 triads.  A portion of the 175-state model that begins with 10 triads) 87 83.17 P
(is shown in figure 47.) 87 70.17 T
3 9 Q
(Figure 45.  Full model of two triads.) 249.62 439.89 T
(Figure 46.  Trimmed model of two triads.) 240.13 207.67 T
87 445.89 543 726 C
188 456.89 442 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 98 322 340 593 242 271 194 456.78 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig45.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig45.ps)
%%CreationDate: (4/19/95) (1:04 PM)
%%BoundingBox: 98 322 340 593
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
110.5 493.8076 m
115.5767 493.8076 119.6924 497.9233 119.6924 503 c
119.6924 508.0767 115.5767 512.1924 110.5 512.1924 c
105.4233 512.1924 101.3076 508.0767 101.3076 503 c
101.3076 497.9233 105.4233 493.8076 110.5 493.8076 c
s
110.5 503 m
S
U
119.5 503 m
141 503 l
S
u
153.5 493.8076 m
158.5767 493.8076 162.6924 497.9233 162.6924 503 c
162.6924 508.0767 158.5767 512.1924 153.5 512.1924 c
148.4233 512.1924 144.3076 508.0767 144.3076 503 c
144.3076 497.9233 148.4233 493.8076 153.5 493.8076 c
s
153.5 503 m
S
U
0 To
1 0 0 1 153.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 128.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(6) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
144.2588 503 m
137.7075 501.4565 l
139.1138 503 L
137.7075 504.5435 l
144.2588 503 L
f
U
0 R
0 G
0.75 w
163 503 m
184.5 503 l
S
u
197 493.8076 m
202.0767 493.8076 206.1924 497.9233 206.1924 503 c
206.1924 508.0767 202.0767 512.1924 197 512.1924 c
191.9233 512.1924 187.8076 508.0767 187.8076 503 c
187.8076 497.9233 191.9233 493.8076 197 493.8076 c
s
197 503 m
S
U
0 To
1 0 0 1 197 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 173 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
187.7588 503 m
181.2075 501.4565 l
182.6138 503 L
181.2075 504.5435 l
187.7588 503 L
f
U
0 R
0 G
0.75 w
153.25 493.75 m
153.25 459.875 l
S
u
0 O
0 g
1 w
153.25 456.6162 m
151.7065 463.1675 l
153.25 461.7612 L
154.7935 463.1675 l
153.25 456.6162 L
f
U
0 To
1 0 0 1 158.25 477.25 0 Tp
TP
0 Tr
0 Ta
(d) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
153.5 437.8076 m
158.5767 437.8076 162.6924 441.9233 162.6924 447 c
162.6924 452.0767 158.5767 456.1924 153.5 456.1924 c
148.4233 456.1924 144.3076 452.0767 144.3076 447 c
144.3076 441.9233 148.4233 437.8076 153.5 437.8076 c
s
153.5 447 m
S
U
162.5 447 m
184 447 l
S
u
196.5 437.8076 m
201.5767 437.8076 205.6924 441.9233 205.6924 447 c
205.6924 452.0767 201.5767 456.1924 196.5 456.1924 c
191.4233 456.1924 187.3076 452.0767 187.3076 447 c
187.3076 441.9233 191.4233 437.8076 196.5 437.8076 c
s
196.5 447 m
S
U
0 To
1 0 0 1 196.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 172.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
187.2588 447 m
180.7075 445.4565 l
182.1138 447 L
180.7075 448.5435 l
187.2588 447 L
f
U
0 R
0 G
0.75 w
206 447 m
227.5 447 l
S
u
240 437.8076 m
245.0767 437.8076 249.1924 441.9233 249.1924 447 c
249.1924 452.0767 245.0767 456.1924 240 456.1924 c
234.9233 456.1924 230.8076 452.0767 230.8076 447 c
230.8076 441.9233 234.9233 437.8076 240 437.8076 c
s
240 447 m
S
U
0 To
1 0 0 1 240 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 214 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
230.7588 447 m
224.2075 445.4565 l
225.6138 447 L
224.2075 448.5435 l
230.7588 447 L
f
U
0 To
1 0 0 1 153.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 153.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.375 437.75 m
196.375 403.875 l
S
u
0 O
0 g
1 w
196.375 400.6162 m
194.8315 407.1675 l
196.375 405.7612 L
197.9185 407.1675 l
196.375 400.6162 L
f
U
0 To
1 0 0 1 201.375 421.25 0 Tp
TP
0 Tr
/_Symbol 9 Tf
0 Ta
(d) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
196.5 381.3076 m
201.5767 381.3076 205.6924 385.4233 205.6924 390.5 c
205.6924 395.5767 201.5767 399.6924 196.5 399.6924 c
191.4233 399.6924 187.3076 395.5767 187.3076 390.5 c
187.3076 385.4233 191.4233 381.3076 196.5 381.3076 c
s
196.5 390.5 m
S
U
0 To
1 0 0 1 196.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(8) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
206 390.5 m
227.5 390.5 l
S
u
240 381.3076 m
245.0767 381.3076 249.1924 385.4233 249.1924 390.5 c
249.1924 395.5767 245.0767 399.6924 240 399.6924 c
234.9233 399.6924 230.8076 395.5767 230.8076 390.5 c
230.8076 385.4233 234.9233 381.3076 240 381.3076 c
s
240 390.5 m
S
U
0 To
1 0 0 1 240 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(9) Tx 
(\r) TX 
TO
0 To
1 0 0 1 214 394.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
230.7588 390.5 m
224.2075 388.9565 l
225.6138 390.5 L
224.2075 392.0435 l
230.7588 390.5 L
f
U
0 R
0 G
0.75 w
249.5 390.5 m
271 390.5 l
S
u
283.5 381.3076 m
288.5767 381.3076 292.6924 385.4233 292.6924 390.5 c
292.6924 395.5767 288.5767 399.6924 283.5 399.6924 c
278.4233 399.6924 274.3076 395.5767 274.3076 390.5 c
274.3076 385.4233 278.4233 381.3076 283.5 381.3076 c
s
283.5 390.5 m
S
U
0 To
1 0 0 1 283.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 257.5 394.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
274.2588 390.5 m
267.7075 388.9565 l
269.1138 390.5 L
267.7075 392.0435 l
274.2588 390.5 L
f
U
0 R
0 G
0.75 w
240.875 381.25 m
240.875 347.375 l
S
u
0 O
0 g
1 w
240.875 344.1162 m
239.3315 350.6675 l
240.875 349.2612 L
242.4185 350.6675 l
240.875 344.1162 L
f
U
0 To
1 0 0 1 245.875 364.75 0 Tp
TP
0 Tr
0 Ta
(d) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
241 324.8076 m
246.0767 324.8076 250.1924 328.9233 250.1924 334 c
250.1924 339.0767 246.0767 343.1924 241 343.1924 c
235.9233 343.1924 231.8076 339.0767 231.8076 334 c
231.8076 328.9233 235.9233 324.8076 241 324.8076 c
s
241 334 m
S
U
0 To
1 0 0 1 241 330.5 0 Tp
TP
-4.5 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(10) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
250.5 334 m
272 334 l
S
u
284.5 324.8076 m
289.5767 324.8076 293.6924 328.9233 293.6924 334 c
293.6924 339.0767 289.5767 343.1924 284.5 343.1924 c
279.4233 343.1924 275.3076 339.0767 275.3076 334 c
275.3076 328.9233 279.4233 324.8076 284.5 324.8076 c
s
284.5 334 m
S
U
0 To
1 0 0 1 284.5 330.5 0 Tp
TP
-4.5 0 Td
0 Tr
0 O
0 g
1 w
(12) Tx 
(\r) TX 
TO
0 To
1 0 0 1 258.5 338 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
275.2588 334 m
268.7075 332.4565 l
270.1138 334 L
268.7075 335.5435 l
275.2588 334 L
f
U
0 R
0 G
0.75 w
294 334 m
315.5 334 l
S
u
328 324.8076 m
333.0767 324.8076 337.1924 328.9233 337.1924 334 c
337.1924 339.0767 333.0767 343.1924 328 343.1924 c
322.9233 343.1924 318.8076 339.0767 318.8076 334 c
318.8076 328.9233 322.9233 324.8076 328 324.8076 c
s
328 334 m
S
U
0 To
1 0 0 1 328 330.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 338 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
318.7588 334 m
312.2075 332.4565 l
313.6138 334 L
312.2075 335.5435 l
318.7588 334 L
f
U
0 To
1 0 0 1 110.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
160.3943 509.7907 m
197.5174 546.9139 l
S
u
212.8563 549.2527 m
216.4461 552.8425 216.4461 558.663 212.8563 562.2527 c
209.2665 565.8425 203.446 565.8425 199.8563 562.2527 c
196.2665 558.663 196.2665 552.8425 199.8562 549.2527 c
203.446 545.6629 209.2665 545.6629 212.8563 549.2527 c
s
206.3563 555.7527 m
S
U
u
0 O
0 g
1 w
199.8217 549.2182 m
196.2807 543.4943 l
196.1837 545.5801 L
194.0979 545.6771 l
199.8217 549.2182 L
f
U
0 To
1 0 0 1 206 553 0 Tp
TP
-2.25 0 Td
0 Tr
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 171 529.25 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
214.6852 558.5711 m
264.3808 575.5008 l
S
u
279.1773 570.8302 m
283.9828 572.4673 286.5515 577.6903 284.9144 582.4959 c
283.2773 587.3014 278.0543 589.8701 273.2488 588.233 c
268.4432 586.5959 265.8746 581.3728 267.5116 576.5673 c
269.1487 571.7618 274.3718 569.1931 279.1773 570.8302 c
s
276.213 579.5316 m
S
U
u
0 O
0 g
1 w
267.4655 576.5516 m
261.7618 572.978 l
262.5953 574.8925 L
260.7664 575.9001 l
267.4655 576.5516 L
f
U
0 To
1 0 0 1 275.75 576.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 235 570.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 445.89 543 726 C
0 0 612 792 C
87 213.67 543 418.89 C
188 224.67 442 418.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 98 322 340 517 242 195 194 224.56 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig46.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig46.ps)
%%CreationDate: (4/19/95) (1:04 PM)
%%BoundingBox: 98 322 340 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
110.5 493.8076 m
115.5767 493.8076 119.6924 497.9233 119.6924 503 c
119.6924 508.0767 115.5767 512.1924 110.5 512.1924 c
105.4233 512.1924 101.3076 508.0767 101.3076 503 c
101.3076 497.9233 105.4233 493.8076 110.5 493.8076 c
s
110.5 503 m
S
U
119.5 503 m
141 503 l
S
u
153.5 493.8076 m
158.5767 493.8076 162.6924 497.9233 162.6924 503 c
162.6924 508.0767 158.5767 512.1924 153.5 512.1924 c
148.4233 512.1924 144.3076 508.0767 144.3076 503 c
144.3076 497.9233 148.4233 493.8076 153.5 493.8076 c
s
153.5 503 m
S
U
0 To
1 0 0 1 153.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 128.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(6) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
144.2588 503 m
137.7075 501.4565 l
139.1138 503 L
137.7075 504.5435 l
144.2588 503 L
f
U
0 R
0 G
0.75 w
163 503 m
184.5 503 l
S
u
197 493.8076 m
202.0767 493.8076 206.1924 497.9233 206.1924 503 c
206.1924 508.0767 202.0767 512.1924 197 512.1924 c
191.9233 512.1924 187.8076 508.0767 187.8076 503 c
187.8076 497.9233 191.9233 493.8076 197 493.8076 c
s
197 503 m
S
U
0 To
1 0 0 1 197 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 173 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
187.7588 503 m
181.2075 501.4565 l
182.6138 503 L
181.2075 504.5435 l
187.7588 503 L
f
U
0 R
0 G
0.75 w
153.25 493.75 m
153.25 459.875 l
S
u
0 O
0 g
1 w
153.25 456.6162 m
151.7065 463.1675 l
153.25 461.7612 L
154.7935 463.1675 l
153.25 456.6162 L
f
U
0 To
1 0 0 1 158.25 477.25 0 Tp
TP
0 Tr
0 Ta
(d) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
153.5 437.8076 m
158.5767 437.8076 162.6924 441.9233 162.6924 447 c
162.6924 452.0767 158.5767 456.1924 153.5 456.1924 c
148.4233 456.1924 144.3076 452.0767 144.3076 447 c
144.3076 441.9233 148.4233 437.8076 153.5 437.8076 c
s
153.5 447 m
S
U
162.5 447 m
184 447 l
S
u
196.5 437.8076 m
201.5767 437.8076 205.6924 441.9233 205.6924 447 c
205.6924 452.0767 201.5767 456.1924 196.5 456.1924 c
191.4233 456.1924 187.3076 452.0767 187.3076 447 c
187.3076 441.9233 191.4233 437.8076 196.5 437.8076 c
s
196.5 447 m
S
U
0 To
1 0 0 1 196.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 172.5 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
187.2588 447 m
180.7075 445.4565 l
182.1138 447 L
180.7075 448.5435 l
187.2588 447 L
f
U
0 R
0 G
0.75 w
206 447 m
227.5 447 l
S
u
240 437.8076 m
245.0767 437.8076 249.1924 441.9233 249.1924 447 c
249.1924 452.0767 245.0767 456.1924 240 456.1924 c
234.9233 456.1924 230.8076 452.0767 230.8076 447 c
230.8076 441.9233 234.9233 437.8076 240 437.8076 c
s
240 447 m
S
U
0 To
1 0 0 1 240 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 214 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
230.7588 447 m
224.2075 445.4565 l
225.6138 447 L
224.2075 448.5435 l
230.7588 447 L
f
U
0 To
1 0 0 1 153.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 153.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.375 437.75 m
196.375 403.875 l
S
u
0 O
0 g
1 w
196.375 400.6162 m
194.8315 407.1675 l
196.375 405.7612 L
197.9185 407.1675 l
196.375 400.6162 L
f
U
0 To
1 0 0 1 201.375 421.25 0 Tp
TP
0 Tr
/_Symbol 9 Tf
0 Ta
(d) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
196.5 381.3076 m
201.5767 381.3076 205.6924 385.4233 205.6924 390.5 c
205.6924 395.5767 201.5767 399.6924 196.5 399.6924 c
191.4233 399.6924 187.3076 395.5767 187.3076 390.5 c
187.3076 385.4233 191.4233 381.3076 196.5 381.3076 c
s
196.5 390.5 m
S
U
0 To
1 0 0 1 196.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(8) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
206 390.5 m
227.5 390.5 l
S
u
240 381.3076 m
245.0767 381.3076 249.1924 385.4233 249.1924 390.5 c
249.1924 395.5767 245.0767 399.6924 240 399.6924 c
234.9233 399.6924 230.8076 395.5767 230.8076 390.5 c
230.8076 385.4233 234.9233 381.3076 240 381.3076 c
s
240 390.5 m
S
U
0 To
1 0 0 1 240 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(9) Tx 
(\r) TX 
TO
0 To
1 0 0 1 214 394.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
230.7588 390.5 m
224.2075 388.9565 l
225.6138 390.5 L
224.2075 392.0435 l
230.7588 390.5 L
f
U
0 R
0 G
0.75 w
249.5 390.5 m
271 390.5 l
S
u
283.5 381.3076 m
288.5767 381.3076 292.6924 385.4233 292.6924 390.5 c
292.6924 395.5767 288.5767 399.6924 283.5 399.6924 c
278.4233 399.6924 274.3076 395.5767 274.3076 390.5 c
274.3076 385.4233 278.4233 381.3076 283.5 381.3076 c
s
283.5 390.5 m
S
U
0 To
1 0 0 1 283.5 387 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 257.5 394.5 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
274.2588 390.5 m
267.7075 388.9565 l
269.1138 390.5 L
267.7075 392.0435 l
274.2588 390.5 L
f
U
0 R
0 G
0.75 w
240.875 381.25 m
240.875 347.375 l
S
u
0 O
0 g
1 w
240.875 344.1162 m
239.3315 350.6675 l
240.875 349.2612 L
242.4185 350.6675 l
240.875 344.1162 L
f
U
0 To
1 0 0 1 245.875 364.75 0 Tp
TP
0 Tr
0 Ta
(d) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
241 324.8076 m
246.0767 324.8076 250.1924 328.9233 250.1924 334 c
250.1924 339.0767 246.0767 343.1924 241 343.1924 c
235.9233 343.1924 231.8076 339.0767 231.8076 334 c
231.8076 328.9233 235.9233 324.8076 241 324.8076 c
s
241 334 m
S
U
0 To
1 0 0 1 241 330.5 0 Tp
TP
-4.5 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
1 Ta
(10) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
250.5 334 m
272 334 l
S
u
284.5 324.8076 m
289.5767 324.8076 293.6924 328.9233 293.6924 334 c
293.6924 339.0767 289.5767 343.1924 284.5 343.1924 c
279.4233 343.1924 275.3076 339.0767 275.3076 334 c
275.3076 328.9233 279.4233 324.8076 284.5 324.8076 c
s
284.5 334 m
S
U
0 To
1 0 0 1 284.5 330.5 0 Tp
TP
-4.5 0 Td
0 Tr
0 O
0 g
1 w
(12) Tx 
(\r) TX 
TO
0 To
1 0 0 1 258.5 338 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
275.2588 334 m
268.7075 332.4565 l
270.1138 334 L
268.7075 335.5435 l
275.2588 334 L
f
U
0 R
0 G
0.75 w
294 334 m
315.5 334 l
S
u
328 324.8076 m
333.0767 324.8076 337.1924 328.9233 337.1924 334 c
337.1924 339.0767 333.0767 343.1924 328 343.1924 c
322.9233 343.1924 318.8076 339.0767 318.8076 334 c
318.8076 328.9233 322.9233 324.8076 328 324.8076 c
s
328 334 m
S
U
0 To
1 0 0 1 328 330.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 338 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
318.7588 334 m
312.2075 332.4565 l
313.6138 334 L
312.2075 335.5435 l
318.7588 334 L
f
U
0 To
1 0 0 1 110.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 213.67 543 418.89 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 90
%%Page: "85" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(85) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(A complete description of the model can be given with the ASSIST language:) 105 291.62 T
7 F
(LAMBDA = 1e-4;  \050* processors failure rate *\051) 87 271.69 T
(DELTA1 = 1e4;   \050* reconfiguration by collapsing a triad *\051) 87 257.77 T
(DELTA2 = 1e4;   \050* reconfiguration by replacing with a spare *\051) 87 243.84 T
(INPUT NI;       \050* Number of triads initially *\051) 87 229.92 T
(INPUT MNT;      \050* Minimum number triads needed *\051) 87 215.99 T
(INPUT MAXNTF;   \050* Maximum number of faults handled *\051) 87 202.07 T
(TIME = 1000;) 87 188.14 T
(SPACE = \050NAT: 0..NI,    \050* Number of Active Triads *\051) 87 167.22 T
(         NTWF: 0..NI,   \050* Number of Triads with 1 fault *\051) 87 153.29 T
(         NS: 0..NI*3,   \050* Number of Available Spares *\051) 87 139.37 T
(         NCF: 0..1\051;    \050* 1 iff near-coincident failure *\051) 87 125.44 T
(START = \050NI,0,0,0\051;) 87 104.52 T
(IF NAT > 0 THEN) 87 83.59 T
(   IF NAT > NTWF TRANTO NTWF = NTWF + 1 BY 3*\050NAT-NTWF\051*LAMBDA;) 87 69.67 T
202.22 647.5 427.78 653.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
3 7.2 Q
0 X
0 0 0 1 0 0 0 K
(a) 220.22 645.1 T
3 9 Q
(See figure 45.) 223.42 641.5 T
3 7.2 Q
(b) 220.22 634.1 T
3 9 Q
(See figure 46.) 223.82 630.5 T
(Table 2.) 208.01 720 T
5 F
(P) 242 720 T
5 7.2 Q
(f) 247.5 717.75 T
3 9 Q
(  Estimated by PAWS for State \0502,1\051 at 1000 hr,) 249.5 720 T
6 F
(l) 267.59 704.95 T
3 F
( = 10) 272.53 704.95 T
6 7.2 Q
(-) 291.1 708.55 T
3 F
(4) 295.06 708.55 T
3 9 Q
(/hr) 298.66 704.95 T
(, and) 308.3 704.95 T
6 F
(d) 328.04 704.95 T
3 F
( = 10) 332.49 704.95 T
3 7.2 Q
(4) 351.06 708.55 T
3 9 Q
(/hr) 354.66 704.95 T
(Model) 245.75 687.95 T
5 F
(P) 366.53 687.95 T
5 7.2 Q
(f) 372.03 685.7 T
3 9 Q
(Full model) 226.82 671.9 T
3 7.2 Q
(a) 266.08 675.5 T
3 9 Q
(2.03968) 342.66 671.9 T
6 F
(\264) 374.16 671.9 T
3 F
( 10) 379.1 671.9 T
6 7.2 Q
(-) 390.35 675.5 T
3 F
(5) 394.3 675.5 T
3 9 Q
(T) 226.82 657.5 T
(rimmed model) 232.01 657.5 T
3 7.2 Q
(b) 284.76 661.1 T
3 9 Q
(2.03942) 342.66 657.5 T
6 F
(\264) 374.16 657.5 T
3 F
( 10) 379.1 657.5 T
6 7.2 Q
(-) 390.35 661.1 T
3 F
(5) 394.3 661.1 T
3 9 Q
(Figure 47.  Full model of) 253.67 319.95 T
7 F
(N) 346.43 319.95 T
3 F
( triads.) 351.83 319.95 T
202.22 695.7 202.22 653.75 2 L
V
0.5 H
0 Z
N
312.78 696.2 312.78 653.25 2 L
V
N
427.78 695.7 427.78 653.75 2 L
V
N
201.97 695.95 428.03 695.95 2 L
V
N
201.97 682.3 428.03 682.3 2 L
V
N
201.97 653.5 428.03 653.5 2 L
V
N
87 325.95 543 607.5 C
98 336.95 532 607.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 117 344 539 612 422 268 104 337.95 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig47.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig47.ps)
%%CreationDate: (4/19/95) (1:15 PM)
%%BoundingBox: 117 344 539 612
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
u
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
129.5 493.8076 m
134.5767 493.8076 138.6924 497.9233 138.6924 503 c
138.6924 508.0767 134.5767 512.1924 129.5 512.1924 c
124.4233 512.1924 120.3076 508.0767 120.3076 503 c
120.3076 497.9233 124.4233 493.8076 129.5 493.8076 c
s
129.5 503 m
S
U
138.5 503 m
201 503 l
S
u
213.5 493.8076 m
218.5767 493.8076 222.6924 497.9233 222.6924 503 c
222.6924 508.0767 218.5767 512.1924 213.5 512.1924 c
208.4233 512.1924 204.3076 508.0767 204.3076 503 c
204.3076 497.9233 208.4233 493.8076 213.5 493.8076 c
s
213.5 503 m
S
U
0 To
1 0 0 1 213.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 170.5 507 0 Tp
TP
-6.9697 0 Td
0 Tr
(30) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
204.2588 503 m
197.7075 501.4565 l
199.1138 503 L
197.7075 504.5435 l
204.2588 503 L
f
U
0 R
0 G
0.75 w
223 503 m
285.5 503 l
S
u
298 493.8076 m
303.0767 493.8076 307.1924 497.9233 307.1924 503 c
307.1924 508.0767 303.0767 512.1924 298 512.1924 c
292.9233 512.1924 288.8076 508.0767 288.8076 503 c
288.8076 497.9233 292.9233 493.8076 298 493.8076 c
s
298 503 m
S
U
0 To
1 0 0 1 298 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 255 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
288.7588 503 m
282.2075 501.4565 l
283.6138 503 L
282.2075 504.5435 l
288.7588 503 L
f
U
0 R
0 G
0.75 w
213.25 493.75 m
213.25 459.875 l
S
u
0 O
0 g
1 w
213.25 456.6162 m
211.7065 463.1675 l
213.25 461.7612 L
214.7935 463.1675 l
213.25 456.6162 L
f
U
0 To
1 0 0 1 220.75 477.25 0 Tp
TP
-2.2225 0 Td
0 Tr
(d) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
213.5 437.8076 m
218.5767 437.8076 222.6924 441.9233 222.6924 447 c
222.6924 452.0767 218.5767 456.1924 213.5 456.1924 c
208.4233 456.1924 204.3076 452.0767 204.3076 447 c
204.3076 441.9233 208.4233 437.8076 213.5 437.8076 c
s
213.5 447 m
S
U
222.5 447 m
285 447 l
S
u
297.5 437.8076 m
302.5767 437.8076 306.6924 441.9233 306.6924 447 c
306.6924 452.0767 302.5767 456.1924 297.5 456.1924 c
292.4233 456.1924 288.3076 452.0767 288.3076 447 c
288.3076 441.9233 292.4233 437.8076 297.5 437.8076 c
s
297.5 447 m
S
U
0 To
1 0 0 1 297.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 254.5 451 0 Tp
TP
-6.9697 0 Td
0 Tr
(27) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
288.2588 447 m
281.7075 445.4565 l
283.1138 447 L
281.7075 448.5435 l
288.2588 447 L
f
U
0 R
0 G
0.75 w
307 447 m
369.5 447 l
S
u
382 437.8076 m
387.0767 437.8076 391.1924 441.9233 391.1924 447 c
391.1924 452.0767 387.0767 456.1924 382 456.1924 c
376.9233 456.1924 372.8076 452.0767 372.8076 447 c
372.8076 441.9233 376.9233 437.8076 382 437.8076 c
s
382 447 m
S
U
0 To
1 0 0 1 382 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 339 451 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
372.7588 447 m
366.2075 445.4565 l
367.6138 447 L
366.2075 448.5435 l
372.7588 447 L
f
U
0 To
1 0 0 1 213.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 213.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
297.375 437.75 m
297.375 403.875 l
S
u
0 O
0 g
1 w
297.375 400.6162 m
295.8315 407.1675 l
297.375 405.7612 L
298.9185 407.1675 l
297.375 400.6162 L
f
U
u
0 R
0 G
0.75 w
297.5 381.3076 m
302.5767 381.3076 306.6924 385.4233 306.6924 390.5 c
306.6924 395.5767 302.5767 399.6924 297.5 399.6924 c
292.4233 399.6924 288.3076 395.5767 288.3076 390.5 c
288.3076 385.4233 292.4233 381.3076 297.5 381.3076 c
s
297.5 390.5 m
S
U
0 To
1 0 0 1 297.5 387 0 Tp
TP
-4.5 0 Td
0 Tr
0 O
0 g
1 w
(11) Tx 
(\r) TX 
TO
0 To
1 0 0 1 332.75 352.25 0 Tp
TP
-6.75 0 Td
0 Tr
(174) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
332.75 346.5576 m
337.8267 346.5576 341.9424 350.6733 341.9424 355.75 c
341.9424 360.8267 337.8267 364.9424 332.75 364.9424 c
327.6733 364.9424 323.5576 360.8267 323.5576 355.75 c
323.5576 350.6733 327.6733 346.5576 332.75 346.5576 c
s
332.75 355.75 m
S
U
341.75 355.75 m
404.25 355.75 l
S
u
416.75 346.5576 m
421.8267 346.5576 425.9424 350.6733 425.9424 355.75 c
425.9424 360.8267 421.8267 364.9424 416.75 364.9424 c
411.6733 364.9424 407.5576 360.8267 407.5576 355.75 c
407.5576 350.6733 411.6733 346.5576 416.75 346.5576 c
s
416.75 355.75 m
S
U
0 To
1 0 0 1 416.75 352.25 0 Tp
TP
-6.75 0 Td
0 Tr
0 O
0 g
1 w
(175) Tx 
(\r) TX 
TO
0 To
1 0 0 1 373.75 359.75 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
407.5088 355.75 m
400.9575 354.2065 l
402.3638 355.75 L
400.9575 357.2935 l
407.5088 355.75 L
f
U
0 R
0 G
0.75 w
426.25 355.75 m
488.75 355.75 l
S
u
501.25 346.5576 m
506.3267 346.5576 510.4424 350.6733 510.4424 355.75 c
510.4424 360.8267 506.3267 364.9424 501.25 364.9424 c
496.1733 364.9424 492.0576 360.8267 492.0576 355.75 c
492.0576 350.6733 496.1733 346.5576 501.25 346.5576 c
s
501.25 355.75 m
S
U
0 To
1 0 0 1 501.25 352.25 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 458.25 359.75 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
492.0088 355.75 m
485.4575 354.2065 l
486.8638 355.75 L
485.4575 357.2935 l
492.0088 355.75 L
f
U
0 R
0 G
0.75 w
220.2175 509.7175 m
264.4117 553.9117 l
S
u
279.7506 556.2505 m
283.3404 559.8403 283.3404 565.6608 279.7506 569.2506 c
276.1608 572.8404 270.3403 572.8404 266.7506 569.2506 c
263.1608 565.6608 263.1608 559.8403 266.7505 556.2505 c
270.3403 552.6608 276.1608 552.6608 279.7506 556.2505 c
s
273.2506 562.7506 m
S
U
u
0 O
0 g
1 w
266.716 556.216 m
263.175 550.4922 l
263.078 552.578 L
260.9922 552.675 l
266.716 556.216 L
f
U
0 To
1 0 0 1 274 560 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(5) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
281.934 565.6218 m
341.2742 585.2454 l
S
u
0 O
0 g
1 w
344.3682 586.2686 m
338.6327 582.7461 l
339.4833 584.6531 L
337.6635 585.677 l
344.3682 586.2686 L
f
U
0 R
0 G
0.75 w
281.934 559.8782 m
341.2742 540.2546 l
S
u
0 O
0 g
1 w
344.3682 539.2314 m
338.6327 542.7539 l
339.4833 540.8469 L
337.6635 539.8229 l
344.3682 539.2314 L
f
U
u
0 R
0 G
0.75 w
360.2506 579.7505 m
363.8404 583.3403 363.8404 589.1608 360.2506 592.7506 c
356.6608 596.3404 350.8403 596.3404 347.2506 592.7506 c
343.6608 589.1608 343.6608 583.3403 347.2505 579.7505 c
350.8403 576.1608 356.6608 576.1608 360.2506 579.7505 c
s
353.7506 586.2506 m
S
U
0 To
1 0 0 1 354.5 583.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
360.2506 532.7505 m
363.8404 536.3403 363.8404 542.1608 360.2506 545.7506 c
356.6608 549.3404 350.8403 549.3404 347.2506 545.7506 c
343.6608 542.1608 343.6608 536.3403 347.2505 532.7505 c
350.8403 529.1608 356.6608 529.1608 360.2506 532.7505 c
s
353.7506 539.2506 m
S
U
0 To
1 0 0 1 354.5 536.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
362.684 588.6218 m
422.0242 608.2454 l
S
u
0 O
0 g
1 w
425.1182 609.2686 m
419.3827 605.7461 l
420.2333 607.6531 L
418.4135 608.677 l
425.1182 609.2686 L
f
U
0 R
0 G
0.75 w
362.684 582.8782 m
422.0242 563.2546 l
S
u
0 O
0 g
1 w
425.1182 562.2314 m
419.3827 565.7539 l
420.2333 563.8469 L
418.4135 562.8229 l
425.1182 562.2314 L
f
U
u
432.125 608.1376 m
432.8084 608.1376 433.3624 608.6916 433.3624 609.375 c
433.3624 610.0584 432.8084 610.6124 432.125 610.6124 c
431.4416 610.6124 430.8876 610.0584 430.8876 609.375 c
430.8876 608.6916 431.4416 608.1376 432.125 608.1376 c
f
432.125 609.375 m
F
U
u
440 608.1376 m
440.6834 608.1376 441.2374 608.6916 441.2374 609.375 c
441.2374 610.0584 440.6834 610.6124 440 610.6124 c
439.3166 610.6124 438.7626 610.0584 438.7626 609.375 c
438.7626 608.6916 439.3166 608.1376 440 608.1376 c
f
440 609.375 m
F
U
u
447.875 608.1376 m
448.5584 608.1376 449.1124 608.6916 449.1124 609.375 c
449.1124 610.0584 448.5584 610.6124 447.875 610.6124 c
447.1916 610.6124 446.6376 610.0584 446.6376 609.375 c
446.6376 608.6916 447.1916 608.1376 447.875 608.1376 c
f
447.875 609.375 m
F
U
0 R
0 G
0.75 w
304.7175 454.2175 m
348.9117 498.4117 l
S
u
364.2506 500.7505 m
367.8404 504.3403 367.8404 510.1608 364.2506 513.7506 c
360.6608 517.3404 354.8403 517.3404 351.2506 513.7506 c
347.6608 510.1608 347.6608 504.3403 351.2505 500.7505 c
354.8403 497.1608 360.6608 497.1608 364.2506 500.7505 c
s
357.7506 507.2506 m
S
U
u
0 O
0 g
1 w
351.216 500.716 m
347.675 494.9922 l
347.578 497.078 L
345.4922 497.175 l
351.216 500.716 L
f
U
0 To
1 0 0 1 358.5 504.5 0 Tp
TP
-4.5 0 Td
0 Tr
(10) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
366.8303 507.4211 m
429.3307 507.5099 l
S
u
0 O
0 g
1 w
432.5895 507.5145 m
426.0403 505.9617 l
427.4444 507.5072 L
426.036 509.0487 l
432.5895 507.5145 L
f
U
0 R
0 G
0.75 w
366.434 504.3782 m
425.7742 484.7546 l
S
u
0 O
0 g
1 w
428.8682 483.7314 m
423.1327 487.2539 l
423.9833 485.3469 L
422.1635 484.3229 l
428.8682 483.7314 L
f
U
u
0 R
0 G
0.75 w
448.7506 500.7505 m
452.3404 504.3403 452.3404 510.1608 448.7506 513.7506 c
445.1608 517.3404 439.3403 517.3404 435.7506 513.7506 c
432.1608 510.1608 432.1608 504.3403 435.7505 500.7505 c
439.3403 497.1608 445.1608 497.1608 448.7506 500.7505 c
s
442.2506 507.2506 m
S
U
0 To
1 0 0 1 443 504.5 0 Tp
TP
-4.5 0 Td
0 Tr
0 O
0 g
1 w
(12) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
444.7506 477.2505 m
448.3404 480.8403 448.3404 486.6608 444.7506 490.2506 c
441.1608 493.8404 435.3403 493.8404 431.7506 490.2506 c
428.1608 486.6608 428.1608 480.8403 431.7505 477.2505 c
435.3403 473.6608 441.1608 473.6608 444.7506 477.2505 c
s
438.2506 483.7506 m
S
U
0 To
1 0 0 1 439 481 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
451.4622 506.5892 m
513.9623 506.3967 l
S
u
0 O
0 g
1 w
517.2211 506.3867 m
510.6651 504.8634 l
512.0761 506.4025 L
510.6746 507.9503 l
517.2211 506.3867 L
f
U
0 R
0 G
0.75 w
451.184 503.8782 m
510.5242 484.2546 l
S
u
0 O
0 g
1 w
513.6182 483.2314 m
507.8827 486.7539 l
508.7333 484.8469 L
506.9135 483.8229 l
513.6182 483.2314 L
f
U
u
520.625 504.8876 m
521.3084 504.8876 521.8624 505.4416 521.8624 506.125 c
521.8624 506.8084 521.3084 507.3624 520.625 507.3624 c
519.9416 507.3624 519.3876 506.8084 519.3876 506.125 c
519.3876 505.4416 519.9416 504.8876 520.625 504.8876 c
f
520.625 506.125 m
F
U
u
528.5 504.8876 m
529.1834 504.8876 529.7374 505.4416 529.7374 506.125 c
529.7374 506.8084 529.1834 507.3624 528.5 507.3624 c
527.8166 507.3624 527.2626 506.8084 527.2626 506.125 c
527.2626 505.4416 527.8166 504.8876 528.5 504.8876 c
f
528.5 506.125 m
F
U
u
536.375 504.8876 m
537.0584 504.8876 537.6124 505.4416 537.6124 506.125 c
537.6124 506.8084 537.0584 507.3624 536.375 507.3624 c
535.6916 507.3624 535.1376 506.8084 535.1376 506.125 c
535.1376 505.4416 535.6916 504.8876 536.375 504.8876 c
f
536.375 506.125 m
F
U
u
306.4681 377.6051 m
306.9514 377.1218 307.7349 377.1218 308.2181 377.6051 c
308.7014 378.0883 308.7014 378.8718 308.2182 379.3551 c
307.7349 379.8383 306.9514 379.8383 306.4681 379.3551 c
305.9849 378.8718 305.9849 378.0883 306.4681 377.6051 c
f
307.3431 378.4801 m
F
U
u
312.0366 372.0366 m
312.5198 371.5534 313.3034 371.5534 313.7866 372.0366 c
314.2698 372.5198 314.2699 373.3034 313.7866 373.7866 c
313.3034 374.2699 312.5198 374.2698 312.0366 373.7866 c
311.5534 373.3034 311.5534 372.5198 312.0366 372.0366 c
f
312.9116 372.9116 m
F
U
u
317.6051 366.4681 m
318.0883 365.9849 318.8718 365.9849 319.3551 366.4681 c
319.8383 366.9514 319.8383 367.7349 319.3551 368.2182 c
318.8718 368.7014 318.0883 368.7014 317.6051 368.2181 c
317.1218 367.7349 317.1218 366.9514 317.6051 366.4681 c
f
318.4801 367.3431 m
F
U
0 To
1 0 0 1 129.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 304.75 419.75 0 Tp
TP
-2.2225 0 Td
0 Tr
/_Symbol 9 Tf
(d) Tx 
(\r) TX 
TO
0 To
1 0 0 1 315 476 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
(24) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 392 511.5 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
(21) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 474.5 509 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
(18) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 497 493 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Times-Roman 9 Tf
(6) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 411 493 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 231 531 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
(27) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 308 581.5 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
(24) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386.5 602.5 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
(21) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 398 576.5 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Times-Roman 9 Tf
(6) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
0 To
1 0 0 1 317.5 553 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 325.95 543 607.5 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 91
%%Page: "86" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(86) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(   IF NTWF > 0 TRANTO NCF = 1 BY 2*\050NTWF\051*LAMBDA;) 87 718.67 T
(   IF \050NTWF > 0\051 AND \050NTWF <= MAXNTF\051 THEN) 87 705.55 T
(      IF NS > 0 THEN) 87 692.44 T
-0.45 (        TRANTO NTWF = NTWF - 1, NS = NS - 1 BY FAST NTWF*DELTA2;) 87 679.33 P
(      ELSE) 87 666.21 T
-0.47 (        IF NAT > MNT TRANTO NAT = NAT - 1, NTWF = NTWF - 1, NS = NS + 2) 87 653.1 P
(                                  BY FAST NTWF*DELTA1;) 87 639.98 T
(      ENDIF;) 87 626.87 T
(   ENDIF;) 87 613.76 T
(ENDIF;) 87 600.64 T
(DEATHIF \050NAT=MNT\051 AND NCF=1;) 87 587.53 T
(DEATHIF NCF = 1;) 87 574.42 T
3 F
-0.27 (This model differs from the) 87 555.3 P
7 F
-0.65 (N) 209.98 555.3 P
3 F
-0.27 ( independent identical triads modeled in section 14.1 by the use of an addi-) 216.58 555.3 P
(tional test on the reconfiguration) 87 542.3 T
7 F
(TRANTO) 236.09 542.3 T
3 F
( rule:) 275.69 542.3 T
7 F
(IF \050NTWF > 0\051 AND \050NTWF <= MAXNTF\051 THEN) 105 524.19 T
3 F
-0.02 (This rule is only enabled when) 87 505.08 P
7 F
-0.04 (\050NTWF <= MAXNTF\051) 224.99 505.08 P
3 F
-0.02 (, that is, when the number of triads with faults is) 330.51 505.08 P
(less than the limit that the operating system can handle) 87 492.08 T
7 F
(MAXNTF) 330.82 492.08 T
3 F
(.) 370.42 492.08 T
(The model generated for) 105 473.96 T
7 F
(NI = 2) 216.19 473.96 T
3 F
( follows:) 255.79 473.96 T
7 F
(LAMBDA = 1E-4;) 87 454.85 T
(DELTA1 = 1E4;) 87 441.73 T
(DELTA2 = 1E4;) 87 428.62 T
(NI = 2;) 87 415.51 T
(MNT = 1;) 87 402.39 T
(MAXNTF = 99;) 87 389.28 T
(TIME = 1000;) 87 376.17 T
(3\050* 2,0,0,0 *\051,) 120 357.05 T
( 4\050* 2,1,0,0 *\051) 267 357.05 T
(= 3*\0502-0\051*LAMBDA;) 411 357.05 T
(4\050* 2,1,0,0 *\051,) 120 343.94 T
(5\050* 1,0,2,0 *\051) 274.51 343.94 T
(= FAST 1*DELTA1;) 411 343.94 T
(4\050* 2,1,0,0 *\051,) 120 330.83 T
( 6\050* 2,2,0,0 *\051) 267 330.83 T
(= 3*\0502-1\051*LAMBDA;) 411.91 330.83 T
(4\050* 2,1,0,0 *\051,) 120 317.71 T
( 2\050* 2,1,0,1 DEATH  *\051) 267 317.71 T
(= 2*\0501\051*LAMBDA;) 412.2 317.71 T
(5\050* 1,0,2,0 *\051,) 120 304.6 T
( 7\050* 1,1,2,0 *\051) 267 304.6 T
(= 3*\0501-0\051*LAMBDA;) 411.91 304.6 T
(6\050* 2,2,0,0 *\051,) 120 291.48 T
( 7\050* 1,1,2,0 *\051) 267 291.48 T
(= FAST 2*DELTA1;) 411 291.48 T
(6\050* 2,2,0,0 *\051,) 120 278.37 T
( 2\050* 2,2,0,1 DEATH  *\051) 267 278.37 T
(= 2*\0502\051*LAMBDA;) 412.2 278.37 T
(7\050* 1,1,2,0 *\051,) 120 265.26 T
( 8\050* 1,0,1,0 *\051) 267 265.26 T
(= FAST 1*DELTA2;) 411 265.26 T
(7\050* 1,1,2,0 *\051,) 120 252.14 T
( 1\050* 1,1,2,1 DEATH  *\051) 267 252.14 T
(= 2*\0501\051*LAMBDA;) 412.2 252.14 T
(8\050* 1,0,1,0 *\051,) 120 239.03 T
( 9\050* 1,1,1,0 *\051) 267 239.03 T
(= 3*\0501-0\051*LAMBDA;) 411 239.03 T
(9\050* 1,1,1,0 *\051,) 120 225.92 T
(10\050* 1,0,0,0 *\051) 267 225.92 T
(= FAST 1*DELTA2;) 411 225.92 T
(9\050* 1,1,1,0 *\051,) 120 212.8 T
( 1\050* 1,1,1,1 DEATH  *\051) 267 212.8 T
(= 2*\0501\051*LAMBDA;) 412.2 212.8 T
(10\050* 1,0,0,0 *\051,) 113.4 199.69 T
(11\050* 1,1,0,0 *\051) 267 199.69 T
(= 3*\0501-0\051*LAMBDA;) 411 199.69 T
(11\050* 1,1,0,0 *\051,) 113.4 186.58 T
( 1\050* 1,1,0,1 DEATH  *\051) 267 186.58 T
(= 2*\0501\051*LAMBDA;) 412.2 186.58 T
(\050* NUMBER OF STATES IN MODEL = 11 *\051) 87 173.46 T
(\050* NUMBER OF TRANSITIONS IN MODEL = 14 *\051) 87 160.35 T
(\050* 5 DEATH STATES AGGREGATED INTO STATES 1 - 2 *\051) 87 147.23 T
3 F
-0.23 (The trimmed model of) 105 128.12 P
7 F
-0.55 (N) 206.13 128.12 P
3 F
-0.23 ( triads analyzed can be generated by using the following ASSIST input file:) 212.73 128.12 P
7 F
(LAMBDA = 1e-4;) 87 109.01 T
(DELTA1 = 1e4;) 87 95.89 T
(DELTA2 = 1e4;) 87 82.78 T
(INPUT NI,MNT;    \050* Number triads initially, number needed *\051) 87 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 92
%%Page: "87" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(87) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(TIME = 1000;) 87 719.5 T
(SPACE = \050NAT: 0..NI,    \050* Number of Active Triads *\051) 87 700.9 T
(         NTWF: 0..NI,   \050* Number of Triads with 1 fault *\051) 87 687.29 T
(         NS: 0..NI*3,   \050* Number of Available Spares *\051) 87 673.68 T
(         NCF: 0..1\051;    \050* 1 iff near-coincident failure *\051) 87 660.08 T
(START = \050NI,0,0,0\051;) 87 641.47 T
(IF NAT> 0 THEN) 87 622.87 T
(   IF \050NAT > NTWF\051 AND \050NTWF=0\051 TRANTO NTWF = NTWF + 1 BY 3*) 87 609.26 T
(      \050NAT-NTWF\051*LAMBDA;) 87 597.51 T
(   IF NTWF > 0 TRANTO NCF = 1 BY 2*\050NTWF\051*LAMBDA;) 87 583.91 T
(   IF \050NTWF > 0\051 AND \050NTWF <= MAXNTF\051 THEN) 87 570.3 T
(      IF NS > 0 THEN) 87 556.7 T
(         TRANTO NTWF = NTWF - 1, NS = NS - 1 BY FAST NTWF*DELTA2;) 87 543.09 T
(      ELSE) 87 529.49 T
(         IF NAT > MNT TRANTO NAT = NAT - 1, NTWF = NTWF - 1, NS = NS + 2) 87 515.88 T
(                                 BY FAST NTWF*DELTA1;) 87 502.28 T
(      ENDIF;) 87 488.67 T
(   ENDIF;) 87 475.07 T
(ENDIF;) 87 461.46 T
(DEATHIF \050NAT=MNT\051 AND NCF=1;) 87 447.86 T
(DEATHIF NCF = 1;) 87 434.25 T
3 11 Q
0.81 (This model differs from the previous model in this section by the use of an additional test on the) 105 414.82 P
(fault-arrival) 87 401.82 T
7 F
(TRANTO) 142.29 401.82 T
3 F
( rule:) 181.89 401.82 T
7 9.75 Q
-0.06 (IF \050NAT > NTWF\051 AND \050NTWF=0\051 TRANTO NTWF = NTWF + 1 BY 3*\050NAT-NTWF\051*LAMBDA;) 105 381.79 P
3 11 Q
-0.18 (Note, this rule only applies when) 105 362.35 P
7 F
-0.44 (NTWF = 0) 252.08 362.35 P
3 F
-0.18 (, that is, when the number of triads with faults is 0.  As) 304.01 362.35 P
0.34 (before, the trimmed model does not have any failure transitions exiting from a recovery state that does) 87 349.36 P
(not end in a failure state.  The results for a system with) 87 336.36 T
7 F
(NI = 10) 331.41 336.36 T
3 F
( and) 377.61 336.36 T
7 F
(MNT = 1) 398.99 336.36 T
3 F
( are shown in table 3.) 445.19 336.36 T
0.34 (Thus, for this model, the trimming method yields a result that is significantly nonconservative \050the) 105 216 P
0.91 (exact value is four times larger than the trimmed value\051.  The nonconservatism grows as the mission) 87 203 P
(time is increased.  The results for a 2000 hr mission are given in table 4.) 87 190 T
3 9 Q
(Table 3.) 210.64 314.69 T
5 F
(P) 244.63 314.69 T
5 7.2 Q
(f) 250.13 312.44 T
3 9 Q
(  Estimated by PAWS for One Triad With Ten) 252.13 314.69 T
(Initial Spares at 1000 hr,) 219.84 299.64 T
6 F
(l) 313.08 299.64 T
3 F
( = 10) 318.02 299.64 T
6 7.2 Q
(-) 336.6 303.24 T
3 F
(4) 340.55 303.24 T
3 9 Q
(/hr) 344.15 299.64 T
(, and) 353.79 299.64 T
6 F
(d) 373.54 299.64 T
3 F
( = 10) 377.98 299.64 T
3 7.2 Q
(4) 396.56 303.24 T
3 9 Q
(/hr) 400.16 299.64 T
(Model) 243.53 281.64 T
5 F
(P) 371.78 281.64 T
5 7.2 Q
(f) 377.28 279.39 T
3 9 Q
(Full model) 219.35 264.99 T
(2.15) 354.66 262.59 T
6 F
(\264) 372.66 262.59 T
3 F
( 10) 377.6 262.59 T
6 7.2 Q
(-) 388.85 266.19 T
3 F
(7) 392.8 266.19 T
3 9 Q
(T) 219.35 247.59 T
(rimmed model) 224.53 247.59 T
(5.53) 354.66 245.19 T
6 F
(\264) 372.66 245.19 T
3 F
( 10) 377.6 245.19 T
6 7.2 Q
(-) 388.85 248.79 T
3 F
(8) 392.8 248.79 T
3 9 Q
(Table 4.) 205.76 162.33 T
5 F
(P) 239.75 162.33 T
5 7.2 Q
(f) 245.25 160.08 T
3 9 Q
(  Estimated by PAWS for State \05010,1\051 at 2000 hr,) 247.25 162.33 T
6 F
(l) 267.59 147.28 T
3 F
( = 10) 272.53 147.28 T
6 7.2 Q
(-) 291.1 150.88 T
3 F
(4) 295.06 150.88 T
3 9 Q
(/hr) 298.66 147.28 T
(, and) 308.3 147.28 T
6 F
(d) 328.04 147.28 T
3 F
( = 10) 332.49 147.28 T
3 7.2 Q
(4) 351.06 150.88 T
3 9 Q
(/hr) 354.66 147.28 T
(Model) 246.86 129.28 T
5 F
(P) 369.22 129.28 T
5 7.2 Q
(f) 374.72 127.03 T
3 9 Q
(Full model) 227.64 112.63 T
(6.62) 352.1 110.23 T
6 F
(\264) 370.1 110.23 T
3 F
( 10) 375.04 110.23 T
6 7.2 Q
(-) 386.29 113.83 T
3 F
(7) 390.24 113.83 T
3 9 Q
(T) 227.64 95.23 T
(rimmed model) 232.82 95.23 T
(1.05) 352.1 92.83 T
6 F
(\264) 370.1 92.83 T
3 F
( 10) 375.04 92.83 T
6 7.2 Q
(-) 386.29 96.43 T
3 F
(7) 390.24 96.43 T
194.75 290.39 194.75 239.44 2 L
V
0.5 H
0 Z
N
315.81 290.89 315.81 238.94 2 L
V
N
435.25 290.39 435.25 239.44 2 L
V
N
194.5 290.64 435.5 290.64 2 L
V
N
194.5 273.99 435.5 273.99 2 L
V
N
194.5 239.19 435.5 239.19 2 L
V
N
200.64 138.03 200.64 87.08 2 L
V
N
316.58 138.53 316.58 86.58 2 L
V
N
429.36 138.03 429.36 87.08 2 L
V
N
200.39 138.28 429.61 138.28 2 L
V
N
200.39 121.63 429.61 121.63 2 L
V
N
200.39 86.83 429.61 86.83 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 93
%%Page: "88" 94
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(88) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.25 (The error resulting from the trimming method can be shown to be negligible for many systems.) 105 718.67 P
0.95 (Thus, this technique can be used successfully if the probability contribution from all removed transi-) 87 705.67 P
0.91 (tions is assured to be insignificant.  This insignificance can be determined by performing some addi-) 87 692.67 P
1.35 (tional hand calculations \050refs. 24 and 25\051 or by using the ASSIST implementation of this technique) 87 679.67 P
0.12 (discussed in section 14.3. Clearly, optimistic models such as this one must be used with caution. Fortu-) 87 666.67 P
(nately, the ASSIST program performs trimming in a manner that guarantees a conservative result.) 87 653.67 T
4 10.5 Q
(14.3. ASSIST T) 105 624.64 T
(rimming) 173.66 624.64 T
3 11 Q
1.52 (The trimming method implemented in ASSIST for reducing the size of semi-Markov reliability) 105 602.45 P
0.09 (models was developed by Allan White and Daniel Palumbo of Langley Research Center. The details of) 87 589.45 P
0.52 (this trimming method and the theorem establishing that this method is conservative are given in refer-) 87 576.45 P
0.52 (ences 24 and 25. Either of these references can be used to determine the characteristics of systems for) 87 563.45 P
2.85 (which this trimming method is guaranteed to be conservative. Not all systems can be trimmed.) 87 550.45 P
2.34 (However, if used correctly, the ASSIST implementation of trimming guarantees that the result is) 87 537.45 P
(conservative.) 87 524.45 T
1.46 (In the implementation of ASSIST, the user has three choices.  First, the default is no trimming) 105 501.1 P
7 F
3 (\050TRIM) 87 488.1 P
3 (=) 126.6 488.1 P
3 (0;\051) 139.8 488.1 P
3 F
1.25 (. The second choice is conservative trimming of noncritically coupled failure transi-) 159.6 488.1 P
-0.07 (tions) 87 475.1 P
7 F
-0.16 (\050TRIM) 111.08 475.1 P
-0.16 (=) 150.68 475.1 P
-0.16 (1;\051) 163.88 475.1 P
3 F
-0.07 (.  In this mode, the model is altered so that each state in which the system is expe-) 183.68 475.1 P
-0.18 (riencing a recovery has all failure transitions from it that  do not go immediately to a death state go to an) 87 462.1 P
-0.23 (intermediate trim state. That intermediate trim state transitions to a final state at rate) 87 449.1 P
7 F
-0.55 (TRIMOMEGA) 456.25 449.1 P
3 F
-0.23 (.  This) 515.65 449.1 P
0.46 (mode is invoked by including the statement) 87 436.1 P
7 F
1.09 (TRIM) 284.82 436.1 P
1.09 (=) 317.82 436.1 P
1.09 (1) 331.02 436.1 P
1.09 (WITH) 344.22 436.1 P
1.09 (real) 373.83 436.1 P
3 F
0.46 ( where) 400.23 436.1 P
7 F
1.09 (real) 433.51 436.1 P
3 F
0.46 ( is some real num-) 459.91 436.1 P
(ber.  For example,) 87 423.1 T
7 F
(TRIM = 1 WITH 6e-4;) 105 399.74 T
3 F
2.46 (The expression) 105 376.38 P
7 F
5.9 (WITH) 179.57 376.38 P
5.9 (real) 211.18 376.38 P
3 F
2.46 ( is optional.  If this expression is not included, the user will be) 237.58 376.38 P
0.05 (prompted for the value.  In that case, the user is requested to type in the value followed by a semicolon.) 87 363.38 P
1.47 (A constant in ASSIST,) 87 350.38 P
7 F
3.54 (TRIMOMEGA) 196.48 350.38 P
3 F
1.47 (, will then be set to whatever value was specified by the user.) 255.88 350.38 P
(Proper setting of) 87 337.38 T
7 F
(TRIMOMEGA) 163.08 337.38 T
3 F
( is discussed below.) 222.48 337.38 T
1.82 (The justification for trimming) 105 314.02 P
7 F
4.37 (\050TRIM) 246.73 314.02 P
4.37 (=) 286.33 314.02 P
4.37 (1\051) 299.53 314.02 P
3 F
1.82 ( is as follows. In a typical reconfigurable system,) 312.73 314.02 P
0.48 (when a component fails, the system goes into a recovery state in which it is vulnerable to near-coinci-) 87 301.02 P
0.03 (dent failures until that failed component is removed from the active configuration.  While in that recov-) 87 288.02 P
0.84 (ery state, a component that is not critically coupled could fail and the system could go into a state in) 87 275.02 P
(which it is recovering from two simultaneous, but noncritically coupled, component failures.) 87 262.02 T
0.05 (Because of the combinatorics inherent in semi-Markov modeling, accurately modeling these highly) 105 238.67 P
0.47 (improbable states and transitions adds significant size and complexity to the model.  Trimming allows) 87 225.67 P
-0.04 (the user to automatically replace these complex parts of the model with a few simple transitions that are) 87 212.67 P
2.34 (conservative approximations. For each recovery state, all failure \050slow\051 transitions that do not go) 87 199.67 P
0.25 (directly to a death state, go to an intermediate state.  Because this intermediate state represents the sys-) 87 186.67 P
1.96 (tem experiencing two noncritically coupled component failures, an additional component failure is) 87 173.67 P
0.24 (assumed to cause system failure.  For simplicity,  any component failure from this intermediate state is) 87 160.67 P
0.52 (conservatively assumed to lead to immediate system failure.  Thus, a single transition leaves this state) 87 147.67 P
-0.17 (and goes to an absorbing state.The rate for this transition) 87 134.67 P
7 F
-0.41 (TRIMOMEGA) 337.96 134.67 P
3 F
-0.17 ( must be conservatively set to the) 397.36 134.67 P
1.04 (sum of all component failure rates in the system.  Trimming will not be valid for a system in which) 87 121.67 P
1.5 (some recovery \050fast\051 transitions from the trimmed states might lead to system failure because these) 87 108.67 P
0.49 (behaviors will not be modeled.  Also,) 87 95.67 P
7 F
1.17 (TRIMOMEGA) 258.15 95.67 P
3 F
0.49 ( must be set to conservatively cover the sum of all) 317.55 95.67 P
-0.24 (component failure rates, even if these rates change over the model.  For systems with unusual behaviors,) 87 82.67 P
(see reference 25 to determine if this method is valid for  a particular system.) 87 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 94
%%Page: "89" 95
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(89) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.3 (The third choice is similar to) 105 718.67 P
7 F
0.73 (TRIM) 236.37 718.67 P
0.73 (=) 269.37 718.67 P
0.73 (1) 282.57 718.67 P
3 F
0.3 (; however, extra transitions are added. In particular, from) 289.17 718.67 P
0.9 (each prune state an additional transition at rate) 87 705.67 P
7 F
2.17 (TRIMOMEGA) 301.95 705.67 P
3 F
0.9 ( is generated. This mode,) 361.35 705.67 P
7 F
2.17 (TRIM) 479.21 705.67 P
2.17 (=) 512.21 705.67 P
2.17 (2) 525.41 705.67 P
3 F
0.9 ( is) 532.01 705.67 P
(invoked similarly to the case of) 87 692.67 T
7 F
(TRIM) 228.15 692.67 T
(=) 261.15 692.67 T
(1) 274.35 692.67 T
3 F
(, with) 280.95 692.67 T
7 F
(TRIMOMEGA) 308.76 692.67 T
3 F
( specified in the same manner.) 368.16 692.67 T
-0.16 (The justification for the method of) 105 673.28 P
7 F
-0.37 (TRIM) 258.66 673.28 P
-0.37 (=) 291.66 673.28 P
-0.37 (2) 304.86 673.28 P
3 F
-0.16 ( is that each prune state of the model is not actually a) 311.46 673.28 P
0.62 (death state of the system, but a conservative approximation. Another failure of some component must) 87 660.28 P
-0.2 (occur before system failure can occur. The feature of) 87 647.28 P
7 F
-0.49 (TRIM) 320.95 647.28 P
-0.49 (=) 353.95 647.28 P
-0.49 (2) 367.15 647.28 P
3 F
-0.2 ( simply includes this extra failure tran-) 373.75 647.28 P
0.21 (sition before pruning the model.  For) 87 634.28 P
7 F
0.51 (TRIM) 253.48 634.28 P
0.51 (=) 286.48 634.28 P
0.51 (2) 299.68 634.28 P
3 F
0.21 ( to be guaranteed conservative, the same assumptions) 306.28 634.28 P
0.34 (must hold as for) 87 621.28 P
7 F
0.82 (TRIM) 162.31 621.28 P
0.82 (=) 195.31 621.28 P
0.82 (1) 208.51 621.28 P
3 F
0.34 (. Namely, no recovery \050fast\051 transitions can lead directly to system failure) 215.11 621.28 P
-0.01 (and) 87 608.28 P
7 F
-0.03 (TRIMOMEGA) 105.62 608.28 P
3 F
-0.01 ( must be greater than or equal to the sum of the failure rates for all components still in) 165.02 608.28 P
(the system when any prune state is reached.) 87 595.28 T
4 10.5 Q
(14.4. T) 105 573.22 T
(rimming Example) 134.85 573.22 T
3 11 Q
0.6 (Trimming with a model of a system of up to three independent triads, where the user is prompted) 105 555 P
-0.06 (for the number of triads will be illustrated.  For convenience,  array state-space variables will be used to) 87 542 P
-0.12 (model the failure behavior of the triads, and  the concatenation feature will be used to allow the triads to) 87 529 P
0.21 (have different failure rates. Although the user is prompted for the number of triads, only three or fewer) 87 516 P
-0.27 (triads can be modeled because failure and recovery rates have only been defined for the first three triads.) 87 503 P
(This model is, of course, easily expandable to accommodate a larger number of triads.) 87 490 T
7 9.75 Q
(INPUT N_TRIADS;       \050* Number of triads initially *\051) 87 472.45 T
(LAMBDA1 = 1E-4;       \050* Failure rate of active processors in 1 *\051) 87 455.31 T
(DELTA1 = 3.6E3;       \050* Reconfiguration rate in 1 *\051) 87 443.17 T
(LAMBDA2 = 1E-4;       \050* Failure rate of active processors in 2 *\051) 87 431.04 T
(DELTA2 = 3.6E3;       \050* Reconfiguration rate in 2 *\051) 87 418.9 T
(LAMBDA3 = 1E-4;       \050* Failure rate of active processors in 3 *\051) 87 406.76 T
(DELTA3 = 3.6E3;       \050* Reconfiguration rate in 3 *\051) 87 394.62 T
-0.47 (SPACE = \050NP: ARRAY[1..N_TRIADS] OF 0..3,  \050* Num. active processors in triad *\051) 87 377.48 P
(         NFP: ARRAY[1..N_TRIADS] Of 0..3\051; \050* Num. failed active procs *\051) 87 365.35 T
(START = \050N_TRIADS OF 3, N_TRIADS OF 0\051;) 87 348.21 T
(FOR J = 1, N_TRIADS;) 87 330.07 T
(   IF NP[J] > NFP[J] TRANTO NFP[J] = NFP[J]+1) 87 317.93 T
(        BY \050NP[J]-NFP[J]\051*LAMBDA^J;  \050* Active processor failure *\051) 87 305.79 T
(   IF NFP[J] > 0 TRANTO) 87 287.65 T
(        NP[J]=1, NFP[J]=0 BY FAST DELTA^J;) 87 275.52 T
(   DEATHIF 2 * NFP[J] >= NP[J];) 87 257.38 T
(     \050* Two faults in an active triad or simplex with a fault *\051) 87 245.24 T
(ENDFOR;) 87 233.1 T
3 11 Q
(Two state-space variables exist:) 87 214.13 T
(1.) 105 195.74 T
7 F
(NP[i]) 117 195.74 T
3 F
(, number of active processors in subsystem) 150 195.74 T
5 F
(i) 341.86 195.74 T
3 F
(2.) 105 176.36 T
7 F
(NFP[i]) 117 176.36 T
3 F
(, number of faulty processors in triad) 156.6 176.36 T
5 F
(i) 322.18 176.36 T
3 F
-0.2 (Because reconfiguration collapses a triad to a simplex,) 105 156.97 P
7 F
-0.49 (NP[i]) 346.24 156.97 P
3 F
-0.2 ( must be either 3 or 1.  Processor fail-) 379.24 156.97 P
0.18 (ure in triad) 87 143.97 P
5 F
0.18 (i) 138.56 143.97 P
3 F
0.18 ( results in the increment of) 141.62 143.97 P
7 F
0.44 (NFP[i]) 263.08 143.97 P
3 F
0.18 (.  The) 302.68 143.97 P
7 F
0.44 (DEATHIF) 331.33 143.97 P
3 F
0.18 ( condition covers both the triplex and) 377.54 143.97 P
(simplex situation.) 87 130.97 T
(The generated model for two triads is) 105 111.58 T
7 9.75 Q
(N_TRIADS = 2;) 87 93.03 T
(LAMBDA1 = 1E-4;) 87 80.89 T
(DELTA1 = 3.6E3;) 87 68.75 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 95
%%Page: "90" 96
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(90) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(LAMBDA2 = 1E-4;) 87 719.5 T
(DELTA2 = 3.6E3;) 87 707.73 T
(LAMBDA3 = 1E-4;) 87 695.96 T
(DELTA3 = 3.6E3;) 87 684.19 T
(     2\050* 3,3,0,0 *\051,     3\050* 3,3,1,0 *\051        = \0503-0\051*LAMBDA1;) 87 672.42 T
(     2\050* 3,3,0,0 *\051,     4\050* 3,3,0,1 *\051        = \0503-0\051*LAMBDA2;) 87 660.65 T
(     3\050* 3,3,1,0 *\051,     5\050* 1,3,0,0 *\051        = FAST DELTA1;) 87 648.88 T
(     3\050* 3,3,1,0 *\051,     1\050* 3,3,2,0 DEATH  *\051 = \0503-1\051*LAMBDA1;) 87 637.11 T
(     3\050* 3,3,1,0 *\051,     6\050* 3,3,1,1 *\051        = \0503-0\051*LAMBDA2;) 87 625.34 T
(     4\050* 3,3,0,1 *\051,     7\050* 3,1,0,0 *\051        = FAST DELTA2;) 87 613.57 T
(     4\050* 3,3,0,1 *\051,     6\050* 3,3,1,1 *\051        = \0503-0\051*LAMBDA1;) 87 601.8 T
(     4\050* 3,3,0,1 *\051,     1\050* 3,3,0,2 DEATH  *\051 = \0503-1\051*LAMBDA2;) 87 590.03 T
(     5\050* 1,3,0,0 *\051,     1\050* 1,3,1,0 DEATH  *\051 = \0501-0\051*LAMBDA1;) 87 578.26 T
(     5\050* 1,3,0,0 *\051,     8\050* 1,3,0,1 *\051        = \0503-0\051*LAMBDA2;) 87 566.49 T
(     6\050* 3,3,1,1 *\051,     8\050* 1,3,0,1 *\051        = FAST DELTA1;) 87 554.72 T
(     6\050* 3,3,1,1 *\051,     9\050* 3,1,1,0 *\051        = FAST DELTA2;) 87 542.95 T
(     6\050* 3,3,1,1 *\051,     1\050* 3,3,2,1 DEATH  *\051 = \0503-1\051*LAMBDA1;) 87 531.18 T
(     6\050* 3,3,1,1 *\051,     1\050* 3,3,1,2 DEATH  *\051 = \0503-1\051*LAMBDA2;) 87 519.41 T
(     7\050* 3,1,0,0 *\051,     9\050* 3,1,1,0 *\051        = \0503-0\051*LAMBDA1;) 87 507.64 T
(     7\050* 3,1,0,0 *\051,     1\050* 3,1,0,1 DEATH  *\051 = \0501-0\051*LAMBDA2;) 87 495.87 T
(     8\050* 1,3,0,1 *\051,    10\050* 1,1,0,0 *\051        = FAST DELTA2;) 87 484.1 T
(     8\050* 1,3,0,1 *\051,     1\050* 1,3,1,1 DEATH  *\051 = \0501-0\051*LAMBDA1;) 87 472.33 T
(     8\050* 1,3,0,1 *\051,     1\050* 1,3,0,2 DEATH  *\051 = \0503-1\051*LAMBDA2;) 87 460.56 T
(     9\050* 3,1,1,0 *\051,    10\050* 1,1,0,0 *\051        = FAST DELTA1;) 87 448.79 T
(     9\050* 3,1,1,0 *\051,     1\050* 3,1,2,0 DEATH  *\051 = \0503-1\051*LAMBDA1;) 87 437.02 T
(     9\050* 3,1,1,0 *\051,     1\050* 3,1,1,1 DEATH  *\051 = \0501-0\051*LAMBDA2;) 87 425.25 T
(    10\050* 1,1,0,0 *\051,     1\050* 1,1,1,0 DEATH  *\051 = \0501-0\051*LAMBDA1;) 87 413.48 T
(    10\050* 1,1,0,0 *\051,     1\050* 1,1,0,1 DEATH  *\051 = \0501-0\051*LAMBDA2;) 87 401.71 T
(\050* NUMBER OF STATES IN MODEL = 10 *\051) 87 384.94 T
(\050* NUMBER OF TRANSITIONS IN MODEL = 24 *\051) 87 373.17 T
(\050* 12 DEATH STATES AGGREGATED INTO STATE 1 *\051) 87 361.4 T
3 11 Q
(This model is shown in figure 48.) 105 343.8 T
(To use trimming,  the following two lines are added:) 105 324.78 T
7 9.75 Q
(MAX_LAMBDA = 1E-4;) 105 306.59 T
(TRIM=1 WITH 3*N_TRIADS*MAX_LAMBDA;) 105 294.82 T
3 11 Q
(The resulting ASSIST model is) 105 277.22 T
7 9.75 Q
(INPUT N_TRIADS;       \050* Number of triads initially *\051) 87 259.03 T
(LAMBDA1 = 1E-4;       \050* Failure rate of active processors in 1 *\051) 87 247.26 T
(DELTA1 = 3.6E3;       \050* Reconfiguration rate in 1 *\051) 87 235.49 T
(LAMBDA2 = 1E-4;       \050* Failure rate of active processors in 2 *\051) 87 223.72 T
(DELTA2 = 3.6E3;       \050* Reconfiguration rate in 2 *\051) 87 211.95 T
(LAMBDA3 = 1E-4;       \050* Failure rate of active processors in 3 *\051) 87 200.18 T
(DELTA3 = 3.6E3;       \050* Reconfiguration rate in 3 *\051) 87 188.41 T
(MAX_LAMBDA = 1E-4) 87 171.64 T
(TRIM=1 WITH 3*N_TRIADS*MAX_LAMBDA;) 87 154.87 T
-0.47 (SPACE = \050NP: ARRAY[1..N_TRIADS] OF 0..3,  \050* Num. active processors in triad *\051) 87 138.1 P
(         NFP: ARRAY[1..N_TRIADS] Of 0..3\051; \050* Num. failed active procs *\051) 87 126.33 T
(START = \050N_TRIADS OF 3, N_TRIADS OF 0\051;) 87 109.56 T
(FOR J = 1, N_TRIADS;) 87 92.79 T
(   IF NP[J] > NFP[J] TRANTO NFP[J] = NFP[J]+1) 87 81.02 T
(     BY \050NP[J]-NFP[J]\051*LAMBDA^J;  \050* Active processor failure *\051) 87 69.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 96
%%Page: "91" 97
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(91) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(  IF NFP[J] > 0 TRANTO) 87 280.39 T
(     NP[J]=1, NFP[J]=0 BY FAST DELTA^J;) 87 267.96 T
(  DEATHIF 2 * NFP[J] >= NP[J];) 87 243.53 T
(    \050* Two faults in an active triad or simplex with a fault *\051) 87 231.09 T
(ENDFOR;) 87 218.66 T
3 11 Q
( The following model is generated for) 105 200.39 T
7 F
(N_TRIADS = 2) 274.55 200.39 T
3 F
(:) 353.75 200.39 T
7 9.75 Q
(N_TRIADS = 2;) 87 181.54 T
(LAMBDA1 = 1E-4;) 87 169.11 T
(DELTA1 = 3.6E3;) 87 156.67 T
(LAMBDA2 = 1E-4;) 87 144.24 T
(DELTA2 = 3.6E3;) 87 131.81 T
(LAMBDA3 = 1E-4;) 87 119.37 T
(DELTA3 = 3.6E3;) 87 106.94 T
(MAX_LAMBDA = 1E-4;) 87 94.51 T
(TRIMOMEGA = 3*N_TRIADS*MAX_LAMBDA;) 87 82.07 T
(PRUNESTATES = 2;) 87 69.64 T
3 9 Q
(Figure 48.  Two triads.) 273.75 311.89 T
87 317.89 543 726 C
115 328.89 515 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 110 197 498 591 388 394 121 329.89 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig48.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig48.ps)
%%CreationDate: (4/21/95) (1:59 PM)
%%BoundingBox: 110 197 498 591
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
122.5 566.6098 m
117.4233 566.6098 113.3076 570.7256 113.3076 575.8023 c
113.3076 580.8789 117.4233 584.9947 122.5 584.9947 c
133.75 584.9947 l
138.8267 584.9947 142.9424 580.8789 142.9424 575.8023 c
142.9424 570.7256 138.8267 566.6098 133.75 566.6098 c
122.5 566.6098 l
s
128 575.8023 m
S
142.75 575.8023 m
183.75 575.8023 l
S
0 To
1 0 0 1 162.5 581.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
187.0088 575.8023 m
180.4575 574.2588 l
181.8638 575.8023 L
180.4575 577.3457 l
187.0088 575.8023 L
f
U
0 To
1 0 0 1 128 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3300) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.5 566.6098 m
191.4233 566.6098 187.3076 570.7256 187.3076 575.8023 c
187.3076 580.8789 191.4233 584.9947 196.5 584.9947 c
207.75 584.9947 l
212.8267 584.9947 216.9424 580.8789 216.9424 575.8023 c
216.9424 570.7256 212.8267 566.6098 207.75 566.6098 c
196.5 566.6098 l
s
202 575.8023 m
S
0 To
1 0 0 1 202 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3310) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
217 575.8023 m
258 575.8023 l
S
0 To
1 0 0 1 236.75 581.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
261.2588 575.8023 m
254.7075 574.2588 l
256.1138 575.8023 L
254.7075 577.3457 l
261.2588 575.8023 L
f
U
0 R
0 G
0.75 w
270.75 566.6098 m
265.6733 566.6098 261.5576 570.7256 261.5576 575.8023 c
261.5576 580.8789 265.6733 584.9947 270.75 584.9947 c
282 584.9947 l
287.0767 584.9947 291.1924 580.8789 291.1924 575.8023 c
291.1924 570.7256 287.0767 566.6098 282 566.6098 c
270.75 566.6098 l
s
276.25 575.8023 m
S
0 To
1 0 0 1 276.25 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3320) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
128.5523 566.625 m
128.5523 515.375 l
S
u
0 O
0 g
1 w
128.5523 512.1162 m
127.0088 518.6675 l
128.5523 517.2612 L
130.0957 518.6675 l
128.5523 512.1162 L
f
U
0 R
0 G
0.75 w
202.5523 566.625 m
202.5523 515.375 l
S
u
0 O
0 g
1 w
202.5523 512.1162 m
201.0088 518.6675 l
202.5523 517.2612 L
204.0957 518.6675 l
202.5523 512.1162 L
f
U
0 To
1 0 0 1 138 538.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 212.25 538.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
122.5 493.1098 m
117.4233 493.1098 113.3076 497.2256 113.3076 502.3023 c
113.3076 507.3789 117.4233 511.4947 122.5 511.4947 c
133.75 511.4947 l
138.8267 511.4947 142.9424 507.3789 142.9424 502.3023 c
142.9424 497.2256 138.8267 493.1098 133.75 493.1098 c
122.5 493.1098 l
s
128 502.3023 m
S
142.75 502.3023 m
183.75 502.3023 l
S
0 To
1 0 0 1 162.5 508.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
187.0088 502.3023 m
180.4575 500.7588 l
181.8638 502.3023 L
180.4575 503.8457 l
187.0088 502.3023 L
f
U
0 To
1 0 0 1 128 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3301) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.5 493.1098 m
191.4233 493.1098 187.3076 497.2256 187.3076 502.3023 c
187.3076 507.3789 191.4233 511.4947 196.5 511.4947 c
207.75 511.4947 l
212.8267 511.4947 216.9424 507.3789 216.9424 502.3023 c
216.9424 497.2256 212.8267 493.1098 207.75 493.1098 c
196.5 493.1098 l
s
202 502.3023 m
S
0 To
1 0 0 1 202 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3311) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
217 502.3023 m
258 502.3023 l
S
0 To
1 0 0 1 236.75 508.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
261.2588 502.3023 m
254.7075 500.7588 l
256.1138 502.3023 L
254.7075 503.8457 l
261.2588 502.3023 L
f
U
0 R
0 G
0.75 w
270.75 493.1098 m
265.6733 493.1098 261.5576 497.2256 261.5576 502.3023 c
261.5576 507.3789 265.6733 511.4947 270.75 511.4947 c
282 511.4947 l
287.0767 511.4947 291.1924 507.3789 291.1924 502.3023 c
291.1924 497.2256 287.0767 493.1098 282 493.1098 c
270.75 493.1098 l
s
276.25 502.3023 m
S
0 To
1 0 0 1 276.25 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3321) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
128.5523 493.125 m
128.5523 441.875 l
S
u
0 O
0 g
1 w
128.5523 438.6162 m
127.0088 445.1675 l
128.5523 443.7612 L
130.0957 445.1675 l
128.5523 438.6162 L
f
U
0 R
0 G
0.75 w
202.5523 493.125 m
202.5523 441.875 l
S
u
0 O
0 g
1 w
202.5523 438.6162 m
201.0088 445.1675 l
202.5523 443.7612 L
204.0957 445.1675 l
202.5523 438.6162 L
f
U
0 To
1 0 0 1 138 465.0523 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
122.5 419.6098 m
117.4233 419.6098 113.3076 423.7256 113.3076 428.8023 c
113.3076 433.8789 117.4233 437.9947 122.5 437.9947 c
133.75 437.9947 l
138.8267 437.9947 142.9424 433.8789 142.9424 428.8023 c
142.9424 423.7256 138.8267 419.6098 133.75 419.6098 c
122.5 419.6098 l
s
0 To
1 0 0 1 128 425.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3302) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.5 419.6098 m
191.4233 419.6098 187.3076 423.7256 187.3076 428.8023 c
187.3076 433.8789 191.4233 437.9947 196.5 437.9947 c
207.75 437.9947 l
212.8267 437.9947 216.9424 433.8789 216.9424 428.8023 c
216.9424 423.7256 212.8267 419.6098 207.75 419.6098 c
196.5 419.6098 l
s
0 To
1 0 0 1 202 425.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3312) Tx 
(\r) TX 
TO
u
178.5523 300.1162 m
177.0088 306.6675 l
178.5523 305.2612 L
180.0957 306.6675 l
178.5523 300.1162 L
f
U
0 R
0 G
0.75 w
252.5523 303.375 m
252.5523 354.625 l
252.5523 374.625 248 451 211 493.5 c
S
u
0 O
0 g
1 w
252.5523 300.1162 m
251.0088 306.6675 l
252.5523 305.2612 L
254.0957 306.6675 l
252.5523 300.1162 L
f
U
0 R
0 G
0.75 w
172.5 281.1098 m
167.4233 281.1098 163.3076 285.2256 163.3076 290.3023 c
163.3076 295.3789 167.4233 299.4947 172.5 299.4947 c
183.75 299.4947 l
188.8267 299.4947 192.9424 295.3789 192.9424 290.3023 c
192.9424 285.2256 188.8267 281.1098 183.75 281.1098 c
172.5 281.1098 l
s
178 290.3023 m
S
192.75 290.3023 m
233.75 290.3023 l
S
0 To
1 0 0 1 212.5 296.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
237.0088 290.3023 m
230.4575 288.7588 l
231.8638 290.3023 L
230.4575 291.8457 l
237.0088 290.3023 L
f
U
0 To
1 0 0 1 178 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3100) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
246.5 281.1098 m
241.4233 281.1098 237.3076 285.2256 237.3076 290.3023 c
237.3076 295.3789 241.4233 299.4947 246.5 299.4947 c
257.75 299.4947 l
262.8267 299.4947 266.9424 295.3789 266.9424 290.3023 c
266.9424 285.2256 262.8267 281.1098 257.75 281.1098 c
246.5 281.1098 l
s
252 290.3023 m
S
0 To
1 0 0 1 252 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3110) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
267 290.3023 m
308 290.3023 l
S
0 To
1 0 0 1 286.75 296.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
311.2588 290.3023 m
304.7075 288.7588 l
306.1138 290.3023 L
304.7075 291.8457 l
311.2588 290.3023 L
f
U
0 R
0 G
0.75 w
320.75 281.1098 m
315.6733 281.1098 311.5576 285.2256 311.5576 290.3023 c
311.5576 295.3789 315.6733 299.4947 320.75 299.4947 c
332 299.4947 l
337.0767 299.4947 341.1924 295.3789 341.1924 290.3023 c
341.1924 285.2256 337.0767 281.1098 332 281.1098 c
320.75 281.1098 l
s
326.25 290.3023 m
S
0 To
1 0 0 1 326.25 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3120) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
178.5523 281.125 m
178.5523 229.875 l
S
u
0 O
0 g
1 w
178.5523 226.6162 m
177.0088 233.1675 l
178.5523 231.7612 L
180.0957 233.1675 l
178.5523 226.6162 L
f
U
0 R
0 G
0.75 w
252.5523 281.125 m
252.5523 229.875 l
S
u
0 O
0 g
1 w
252.5523 226.6162 m
251.0088 233.1675 l
252.5523 231.7612 L
254.0957 233.1675 l
252.5523 226.6162 L
f
U
0 To
1 0 0 1 188 253.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 262.25 253.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
172.5 207.6098 m
167.4233 207.6098 163.3076 211.7256 163.3076 216.8023 c
163.3076 221.8789 167.4233 225.9947 172.5 225.9947 c
183.75 225.9947 l
188.8267 225.9947 192.9424 221.8789 192.9424 216.8023 c
192.9424 211.7256 188.8267 207.6098 183.75 207.6098 c
172.5 207.6098 l
s
0 To
1 0 0 1 178 213.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3101) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
246.5 207.6098 m
241.4233 207.6098 237.3076 211.7256 237.3076 216.8023 c
237.3076 221.8789 241.4233 225.9947 246.5 225.9947 c
257.75 225.9947 l
262.8267 225.9947 266.9424 221.8789 266.9424 216.8023 c
266.9424 211.7256 262.8267 207.6098 257.75 207.6098 c
246.5 207.6098 l
s
0 To
1 0 0 1 252 213.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3111) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 476.6098 m
337.4233 476.6098 333.3076 480.7256 333.3076 485.8023 c
333.3076 490.8789 337.4233 494.9947 342.5 494.9947 c
353.75 494.9947 l
358.8267 494.9947 362.9424 490.8789 362.9424 485.8023 c
362.9424 480.7256 358.8267 476.6098 353.75 476.6098 c
342.5 476.6098 l
s
348 485.8023 m
S
0 To
1 0 0 1 348 482.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(1300) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
363 485.8023 m
404 485.8023 l
S
0 To
1 0 0 1 382.75 491.8023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
407.2588 485.8023 m
400.7075 484.2588 l
402.1138 485.8023 L
400.7075 487.3457 l
407.2588 485.8023 L
f
U
0 R
0 G
0.75 w
416.75 476.6098 m
411.6733 476.6098 407.5576 480.7256 407.5576 485.8023 c
407.5576 490.8789 411.6733 494.9947 416.75 494.9947 c
428 494.9947 l
433.0767 494.9947 437.1924 490.8789 437.1924 485.8023 c
437.1924 480.7256 433.0767 476.6098 428 476.6098 c
416.75 476.6098 l
s
422.25 485.8023 m
S
0 To
1 0 0 1 422.25 482.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1310) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
348.5523 476.625 m
348.5523 425.375 l
S
u
0 O
0 g
1 w
348.5523 422.1162 m
347.0088 428.6675 l
348.5523 427.2612 L
350.0957 428.6675 l
348.5523 422.1162 L
f
U
0 To
1 0 0 1 358.25 448.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 403.1098 m
337.4233 403.1098 333.3076 407.2256 333.3076 412.3023 c
333.3076 417.3789 337.4233 421.4947 342.5 421.4947 c
353.75 421.4947 l
358.8267 421.4947 362.9424 417.3789 362.9424 412.3023 c
362.9424 407.2256 358.8267 403.1098 353.75 403.1098 c
342.5 403.1098 l
s
348 412.3023 m
S
0 To
1 0 0 1 348 408.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1301) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
363 412.3023 m
404 412.3023 l
S
0 To
1 0 0 1 382.75 418.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
407.2588 412.3023 m
400.7075 410.7588 l
402.1138 412.3023 L
400.7075 413.8457 l
407.2588 412.3023 L
f
U
0 R
0 G
0.75 w
416.75 403.1098 m
411.6733 403.1098 407.5576 407.2256 407.5576 412.3023 c
407.5576 417.3789 411.6733 421.4947 416.75 421.4947 c
428 421.4947 l
433.0767 421.4947 437.1924 417.3789 437.1924 412.3023 c
437.1924 407.2256 433.0767 403.1098 428 403.1098 c
416.75 403.1098 l
s
422.25 412.3023 m
S
0 To
1 0 0 1 422.25 408.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1311) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
348.5523 403.125 m
348.5523 351.875 l
S
u
0 O
0 g
1 w
348.5523 348.6162 m
347.0088 355.1675 l
348.5523 353.7612 L
350.0957 355.1675 l
348.5523 348.6162 L
f
U
0 To
1 0 0 1 358.25 375.0523 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 329.6098 m
337.4233 329.6098 333.3076 333.7256 333.3076 338.8023 c
333.3076 343.8789 337.4233 347.9947 342.5 347.9947 c
353.75 347.9947 l
358.8267 347.9947 362.9424 343.8789 362.9424 338.8023 c
362.9424 333.7256 358.8267 329.6098 353.75 329.6098 c
342.5 329.6098 l
s
0 To
1 0 0 1 348 335.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1302) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
399.5 273.1098 m
394.4233 273.1098 390.3076 277.2256 390.3076 282.3023 c
390.3076 287.3789 394.4233 291.4947 399.5 291.4947 c
410.75 291.4947 l
415.8267 291.4947 419.9424 287.3789 419.9424 282.3023 c
419.9424 277.2256 415.8267 273.1098 410.75 273.1098 c
399.5 273.1098 l
s
405 282.3023 m
S
0 To
1 0 0 1 405 278.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(1100) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
420 282.3023 m
461 282.3023 l
S
0 To
1 0 0 1 439.75 288.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
464.2588 282.3023 m
457.7075 280.7588 l
459.1138 282.3023 L
457.7075 283.8457 l
464.2588 282.3023 L
f
U
0 R
0 G
0.75 w
473.75 273.1098 m
468.6733 273.1098 464.5576 277.2256 464.5576 282.3023 c
464.5576 287.3789 468.6733 291.4947 473.75 291.4947 c
485 291.4947 l
490.0767 291.4947 494.1924 287.3789 494.1924 282.3023 c
494.1924 277.2256 490.0767 273.1098 485 273.1098 c
473.75 273.1098 l
s
479.25 282.3023 m
S
0 To
1 0 0 1 479.25 278.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1110) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
405.5523 273.125 m
405.5523 221.875 l
S
u
0 O
0 g
1 w
405.5523 218.6162 m
404.0088 225.1675 l
405.5523 223.7612 L
407.0957 225.1675 l
405.5523 218.6162 L
f
U
0 To
1 0 0 1 415.25 245.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
399.5 199.6098 m
394.4233 199.6098 390.3076 203.7256 390.3076 208.8023 c
390.3076 213.8789 394.4233 217.9947 399.5 217.9947 c
410.75 217.9947 l
415.8267 217.9947 419.9424 213.8789 419.9424 208.8023 c
419.9424 203.7256 415.8267 199.6098 410.75 199.6098 c
399.5 199.6098 l
s
0 To
1 0 0 1 405 205.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1101) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
214 569.5 m
295.5 556 337 493 v
S
214 495.5 m
292.5663 482.4859 334.6998 422.384 v
S
178.5523 303.375 m
178.5523 354.625 l
178.5523 374.625 174 451 137 493.5 c
S
405.5523 295.375 m
405.5523 346.625 l
405.5523 366.625 403 390.5 360 405.5 c
S
u
0 O
0 g
1 w
405.5523 292.1162 m
404.0088 298.6675 l
405.5523 297.2612 L
407.0957 298.6675 l
405.5523 292.1162 L
f
U
0 To
1 0 0 1 290.25 472.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 261.25 379.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 186.75 379.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 414.75 342.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 326.25 262.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
u
336.7466 419.2995 m
331.7469 423.8056 l
333.8165 423.5286 L
334.2843 425.5636 l
336.7466 419.2995 L
f
U
0 To
1 0 0 1 290.25 545.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
392.2128 276.3455 m
388.2957 270.8722 l
388.3389 272.9598 L
386.2644 273.1965 l
392.2128 276.3455 L
f
U
u
336.6559 493.5605 m
331.5434 497.9382 l
333.6194 497.7139 L
334.0353 499.76 l
336.6559 493.5605 L
f
U
0 R
0 G
0.75 w
262.2304 282.5345 m
277.5044 262.0245 301.9398 248.74 329.4774 248.74 c
353.0596 248.74 374.3666 258.4822 389.5935 274.1615 c
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 317.89 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 97
%%Page: "92" 98
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(92) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
(    4\050* 3,3,0,0 *\051,     5\050* 3,3,1,0 *\051        = \0503-0\051*LAMBDA1;) 87 718.67 T
(    4\050* 3,3,0,0 *\051,     6\050* 3,3,0,1 *\051        = \0503-0\051*LAMBDA2;) 87 705.5 T
(    5\050* 3,3,1,0 *\051,     7\050* 1,3,0,0 *\051        = FAST DELTA1;) 87 692.34 T
(    5\050* 3,3,1,0 *\051,     1\050* 3,3,2,0 DEATH  *\051 = \0503-1\051*LAMBDA1;) 87 679.18 T
(    5\050* 3,3,1,0 *\051,     3\050* 3,3,1,1 TRIM   *\051 = \0503-0\051*LAMBDA2;) 87 666.02 T
(    6\050* 3,3,0,1 *\051,     8\050* 3,1,0,0 *\051        = FAST DELTA2;) 87 652.85 T
(    6\050* 3,3,0,1 *\051,     3\050* 3,3,1,1 TRIM   *\051 = \0503-0\051*LAMBDA1;) 87 639.69 T
(    6\050* 3,3,0,1 *\051,     1\050* 3,3,0,2 DEATH  *\051 = \0503-1\051*LAMBDA2;) 87 626.53 T
(    7\050* 1,3,0,0 *\051,     1\050* 1,3,1,0 DEATH  *\051 = \0501-0\051*LAMBDA1;) 87 613.36 T
(    7\050* 1,3,0,0 *\051,     9\050* 1,3,0,1 *\051        = \0503-0\051*LAMBDA2;) 87 600.2 T
(    8\050* 3,1,0,0 *\051,    10\050* 3,1,1,0 *\051        = \0503-0\051*LAMBDA1;) 87 587.04 T
(    8\050* 3,1,0,0 *\051,     1\050* 3,1,0,1 DEATH  *\051 = \0501-0\051*LAMBDA2;) 87 573.88 T
(    9\050* 1,3,0,1 *\051,    11\050* 1,1,0,0 *\051        = FAST DELTA2;) 87 560.71 T
(    9\050* 1,3,0,1 *\051,     1\050* 1,3,1,1 DEATH  *\051 = \0501-0\051*LAMBDA1;) 87 547.55 T
(    9\050* 1,3,0,1 *\051,     1\050* 1,3,0,2 DEATH  *\051 = \0503-1\051*LAMBDA2;) 87 534.39 T
(   10\050* 3,1,1,0 *\051,    11\050* 1,1,0,0 *\051        = FAST DELTA1;) 87 521.22 T
(   10\050* 3,1,1,0 *\051,     1\050* 3,1,2,0 DEATH  *\051 = \0503-1\051*LAMBDA1;) 87 508.06 T
(   10\050* 3,1,1,0 *\051,     1\050* 3,1,1,1 DEATH  *\051 = \0501-0\051*LAMBDA2;) 87 494.9 T
(   11\050* 1,1,0,0 *\051,     1\050* 1,1,1,0 DEATH  *\051 = \0501-0\051*LAMBDA1;) 87 481.74 T
(   11\050* 1,1,0,0 *\051,     1\050* 1,1,0,1 DEATH  *\051 = \0501-0\051*LAMBDA2;) 87 468.57 T
(    3\050*  TRIM   *\051,     2\050*  TRIM.D *\051 = TRIMOMEGA;) 87 455.41 T
(\050* NUMBER OF STATES IN MODEL = 11 *\051) 87 436.25 T
(\050* NUMBER OF TRANSITIONS IN MODEL = 21 *\051) 87 423.09 T
(\050* 10 DEATH STATES AGGREGATED INTO STATE 1 *\051) 87 409.92 T
(\050* 2 TRIMMED TRANSITIONS AGGREGATED INTO STATE 3 *\051) 87 396.76 T
3 F
(This model is displayed in figure 49.) 105 378.6 T
(The result of solving the two-triad model with and without trimming follows:) 105 359.43 T
7 F
(air58% sure) 87 340.27 T
(  SURE V7.9.8   NASA Langley Research Center) 87 321.11 T
(  1? read0 nt) 87 301.95 T
(       0.03 SECS. TO READ MODEL FILE) 87 282.78 T
( 41? list=2) 87 269.62 T
( 42? run) 87 256.46 T
-0.42 ( MODEL FILE = nt.mod                    SURE V7.9.8 15 Apr 94  10:03:07) 87 237.29 P
-0.22 ( DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS             RUN #1) 87 212.13 P
-0.55 ( ----------   -----------   -----------    ---------------------------) 87 198.97 P
(      1       2.98539e-06   3.00633e-06) 87 185.81 T
( TOTAL        2.98539e-06   3.00633e-06) 87 166.64 T
(  32 PATH\050S\051 TO DEATH STATES) 87 147.48 T
( 0.017 SECS. CPU TIME UTILIZED) 87 128.32 T
( 43? read0 nt-trim) 87 115.16 T
(       0.03 SECS. TO READ MODEL FILE) 87 95.99 T
( 84? list=2) 87 82.83 T
( 85? run) 87 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 98
%%Page: "93" 99
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(93) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
-0.5 ( MODEL FILE = nt-trim.mod               SURE V7.9.8 15 Apr 94  10:03:23) 87 283.67 P
( DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS           RUN #2) 87 258.56 T
-0.55 ( ----------   -----------   -----------    ---------------------------) 87 245.45 P
(      1       2.98539e-06   3.00633e-06) 87 232.34 T
(              -----------   -----------) 87 219.22 T
(   SUBTOTAL   2.98539e-06   3.00633e-06) 87 206.11 T
( PRUNESTATE    LOWERBOUND    UPPERBOUND) 87 187 T
( ----------   -----------   -----------) 87 173.89 T
( prune   2    1.46089e-12   1.50000e-12) 87 160.78 T
(              -----------   -----------) 87 147.67 T
(   SUBTOTAL   1.46089e-12   1.50000e-12) 87 134.56 T
( TOTAL        2.98539e-06   3.00633e-06) 87 121.45 T
(  14 PATH\050S\051 TO DEATH STATES) 87 102.34 T
( 0.017 SECS. CPU TIME UTILIZED) 87 83.22 T
( 86? orprob) 87 70.11 T
3 9 Q
(Figure 49.  Two triads trimmed by ASSIST.) 235.62 313 T
87 319 543 726 C
115 330 515 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 110 197 498 591 388 394 121 330.44 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig49.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig49.ps)
%%CreationDate: (4/21/95) (2:18 PM)
%%BoundingBox: 110 197 498 591
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
122.5 566.6098 m
117.4233 566.6098 113.3076 570.7256 113.3076 575.8023 c
113.3076 580.8789 117.4233 584.9947 122.5 584.9947 c
133.75 584.9947 l
138.8267 584.9947 142.9424 580.8789 142.9424 575.8023 c
142.9424 570.7256 138.8267 566.6098 133.75 566.6098 c
122.5 566.6098 l
s
128 575.8023 m
S
142.75 575.8023 m
183.75 575.8023 l
S
0 To
1 0 0 1 162.5 581.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
187.0088 575.8023 m
180.4575 574.2588 l
181.8638 575.8023 L
180.4575 577.3457 l
187.0088 575.8023 L
f
U
0 To
1 0 0 1 128 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3300) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.5 566.6098 m
191.4233 566.6098 187.3076 570.7256 187.3076 575.8023 c
187.3076 580.8789 191.4233 584.9947 196.5 584.9947 c
207.75 584.9947 l
212.8267 584.9947 216.9424 580.8789 216.9424 575.8023 c
216.9424 570.7256 212.8267 566.6098 207.75 566.6098 c
196.5 566.6098 l
s
202 575.8023 m
S
0 To
1 0 0 1 202 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3310) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
217 575.8023 m
258 575.8023 l
S
0 To
1 0 0 1 236.75 581.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
261.2588 575.8023 m
254.7075 574.2588 l
256.1138 575.8023 L
254.7075 577.3457 l
261.2588 575.8023 L
f
U
0 R
0 G
0.75 w
270.75 566.6098 m
265.6733 566.6098 261.5576 570.7256 261.5576 575.8023 c
261.5576 580.8789 265.6733 584.9947 270.75 584.9947 c
282 584.9947 l
287.0767 584.9947 291.1924 580.8789 291.1924 575.8023 c
291.1924 570.7256 287.0767 566.6098 282 566.6098 c
270.75 566.6098 l
s
276.25 575.8023 m
S
0 To
1 0 0 1 276.25 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3320) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
128.5523 566.625 m
128.5523 515.375 l
S
u
0 O
0 g
1 w
128.5523 512.1162 m
127.0088 518.6675 l
128.5523 517.2612 L
130.0957 518.6675 l
128.5523 512.1162 L
f
U
0 R
0 G
0.75 w
202.5523 566.625 m
202.5523 515.375 l
S
u
0 O
0 g
1 w
202.5523 512.1162 m
201.0088 518.6675 l
202.5523 517.2612 L
204.0957 518.6675 l
202.5523 512.1162 L
f
U
0 To
1 0 0 1 138 538.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 212.25 538.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
122.5 493.1098 m
117.4233 493.1098 113.3076 497.2256 113.3076 502.3023 c
113.3076 507.3789 117.4233 511.4947 122.5 511.4947 c
133.75 511.4947 l
138.8267 511.4947 142.9424 507.3789 142.9424 502.3023 c
142.9424 497.2256 138.8267 493.1098 133.75 493.1098 c
122.5 493.1098 l
s
128 502.3023 m
S
142.75 502.3023 m
183.75 502.3023 l
S
0 To
1 0 0 1 162.5 508.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
187.0088 502.3023 m
180.4575 500.7588 l
181.8638 502.3023 L
180.4575 503.8457 l
187.0088 502.3023 L
f
U
0 To
1 0 0 1 128 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3301) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
196.5 493.1098 m
191.4233 493.1098 187.3076 497.2256 187.3076 502.3023 c
187.3076 507.3789 191.4233 511.4947 196.5 511.4947 c
207.75 511.4947 l
212.8267 511.4947 216.9424 507.3789 216.9424 502.3023 c
216.9424 497.2256 212.8267 493.1098 207.75 493.1098 c
196.5 493.1098 l
s
202 502.3023 m
S
0 To
1 0 0 1 202 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3311) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
215.1413 495.1375 m
251.4674 476.1258 l
S
0 To
1 0 0 1 253.75 489.3023 0 Tp
TP
-24.2941 0 Td
0 Tr
0 O
0 g
1 w
/_Courier 9 Tf
(TRIMOMEGA) Tx 
(\r) TX 
TO
u
254.3547 474.6147 m
247.8345 476.285 l
249.7962 477.0005 L
249.2659 479.02 l
254.3547 474.6147 L
f
U
0 R
0 G
0.75 w
262.25 460.1098 m
257.1733 460.1098 253.0576 464.2256 253.0576 469.3023 c
253.0576 474.3789 257.1733 478.4947 262.25 478.4947 c
273.5 478.4947 l
278.5767 478.4947 282.6924 474.3789 282.6924 469.3023 c
282.6924 464.2256 278.5767 460.1098 273.5 460.1098 c
262.25 460.1098 l
s
267.75 469.3023 m
S
0 To
1 0 0 1 267.75 467.3023 0 Tp
TP
-13.4967 0 Td
0 Tr
0 O
0 g
1 w
/_Courier 7.5 Tf
(TRIM.D) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
128.5523 493.125 m
128.5523 441.875 l
S
u
0 O
0 g
1 w
128.5523 438.6162 m
127.0088 445.1675 l
128.5523 443.7612 L
130.0957 445.1675 l
128.5523 438.6162 L
f
U
0 To
1 0 0 1 138 465.0523 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
122.5 419.6098 m
117.4233 419.6098 113.3076 423.7256 113.3076 428.8023 c
113.3076 433.8789 117.4233 437.9947 122.5 437.9947 c
133.75 437.9947 l
138.8267 437.9947 142.9424 433.8789 142.9424 428.8023 c
142.9424 423.7256 138.8267 419.6098 133.75 419.6098 c
122.5 419.6098 l
s
0 To
1 0 0 1 128 425.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3302) Tx 
(\r) TX 
TO
u
178.5523 300.1162 m
177.0088 306.6675 l
178.5523 305.2612 L
180.0957 306.6675 l
178.5523 300.1162 L
f
U
0 R
0 G
0.75 w
172.5 281.1098 m
167.4233 281.1098 163.3076 285.2256 163.3076 290.3023 c
163.3076 295.3789 167.4233 299.4947 172.5 299.4947 c
183.75 299.4947 l
188.8267 299.4947 192.9424 295.3789 192.9424 290.3023 c
192.9424 285.2256 188.8267 281.1098 183.75 281.1098 c
172.5 281.1098 l
s
178 290.3023 m
S
192.75 290.3023 m
233.75 290.3023 l
S
0 To
1 0 0 1 212.5 296.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
237.0088 290.3023 m
230.4575 288.7588 l
231.8638 290.3023 L
230.4575 291.8457 l
237.0088 290.3023 L
f
U
0 To
1 0 0 1 178 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(3100) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
246.5 281.1098 m
241.4233 281.1098 237.3076 285.2256 237.3076 290.3023 c
237.3076 295.3789 241.4233 299.4947 246.5 299.4947 c
257.75 299.4947 l
262.8267 299.4947 266.9424 295.3789 266.9424 290.3023 c
266.9424 285.2256 262.8267 281.1098 257.75 281.1098 c
246.5 281.1098 l
s
252 290.3023 m
S
0 To
1 0 0 1 252 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3110) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
267 290.3023 m
308 290.3023 l
S
0 To
1 0 0 1 286.75 296.3023 0 Tp
TP
-6.9697 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
311.2588 290.3023 m
304.7075 288.7588 l
306.1138 290.3023 L
304.7075 291.8457 l
311.2588 290.3023 L
f
U
0 R
0 G
0.75 w
320.75 281.1098 m
315.6733 281.1098 311.5576 285.2256 311.5576 290.3023 c
311.5576 295.3789 315.6733 299.4947 320.75 299.4947 c
332 299.4947 l
337.0767 299.4947 341.1924 295.3789 341.1924 290.3023 c
341.1924 285.2256 337.0767 281.1098 332 281.1098 c
320.75 281.1098 l
s
326.25 290.3023 m
S
0 To
1 0 0 1 326.25 286.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3120) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
178.5523 281.125 m
178.5523 229.875 l
S
u
0 O
0 g
1 w
178.5523 226.6162 m
177.0088 233.1675 l
178.5523 231.7612 L
180.0957 233.1675 l
178.5523 226.6162 L
f
U
0 R
0 G
0.75 w
252.5523 281.125 m
252.5523 229.875 l
S
u
0 O
0 g
1 w
252.5523 226.6162 m
251.0088 233.1675 l
252.5523 231.7612 L
254.0957 233.1675 l
252.5523 226.6162 L
f
U
0 To
1 0 0 1 188 253.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 262.25 253.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
172.5 207.6098 m
167.4233 207.6098 163.3076 211.7256 163.3076 216.8023 c
163.3076 221.8789 167.4233 225.9947 172.5 225.9947 c
183.75 225.9947 l
188.8267 225.9947 192.9424 221.8789 192.9424 216.8023 c
192.9424 211.7256 188.8267 207.6098 183.75 207.6098 c
172.5 207.6098 l
s
0 To
1 0 0 1 178 213.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3101) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
246.5 207.6098 m
241.4233 207.6098 237.3076 211.7256 237.3076 216.8023 c
237.3076 221.8789 241.4233 225.9947 246.5 225.9947 c
257.75 225.9947 l
262.8267 225.9947 266.9424 221.8789 266.9424 216.8023 c
266.9424 211.7256 262.8267 207.6098 257.75 207.6098 c
246.5 207.6098 l
s
0 To
1 0 0 1 252 213.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3111) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 476.6098 m
337.4233 476.6098 333.3076 480.7256 333.3076 485.8023 c
333.3076 490.8789 337.4233 494.9947 342.5 494.9947 c
353.75 494.9947 l
358.8267 494.9947 362.9424 490.8789 362.9424 485.8023 c
362.9424 480.7256 358.8267 476.6098 353.75 476.6098 c
342.5 476.6098 l
s
348 485.8023 m
S
0 To
1 0 0 1 348 482.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(1300) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
363 485.8023 m
404 485.8023 l
S
0 To
1 0 0 1 382.75 491.8023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
407.2588 485.8023 m
400.7075 484.2588 l
402.1138 485.8023 L
400.7075 487.3457 l
407.2588 485.8023 L
f
U
0 R
0 G
0.75 w
416.75 476.6098 m
411.6733 476.6098 407.5576 480.7256 407.5576 485.8023 c
407.5576 490.8789 411.6733 494.9947 416.75 494.9947 c
428 494.9947 l
433.0767 494.9947 437.1924 490.8789 437.1924 485.8023 c
437.1924 480.7256 433.0767 476.6098 428 476.6098 c
416.75 476.6098 l
s
422.25 485.8023 m
S
0 To
1 0 0 1 422.25 482.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1310) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
348.5523 476.625 m
348.5523 425.375 l
S
u
0 O
0 g
1 w
348.5523 422.1162 m
347.0088 428.6675 l
348.5523 427.2612 L
350.0957 428.6675 l
348.5523 422.1162 L
f
U
0 To
1 0 0 1 358.25 448.5523 0 Tp
TP
-6.9697 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 403.1098 m
337.4233 403.1098 333.3076 407.2256 333.3076 412.3023 c
333.3076 417.3789 337.4233 421.4947 342.5 421.4947 c
353.75 421.4947 l
358.8267 421.4947 362.9424 417.3789 362.9424 412.3023 c
362.9424 407.2256 358.8267 403.1098 353.75 403.1098 c
342.5 403.1098 l
s
348 412.3023 m
S
0 To
1 0 0 1 348 408.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1301) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
363 412.3023 m
404 412.3023 l
S
0 To
1 0 0 1 382.75 418.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
407.2588 412.3023 m
400.7075 410.7588 l
402.1138 412.3023 L
400.7075 413.8457 l
407.2588 412.3023 L
f
U
0 R
0 G
0.75 w
416.75 403.1098 m
411.6733 403.1098 407.5576 407.2256 407.5576 412.3023 c
407.5576 417.3789 411.6733 421.4947 416.75 421.4947 c
428 421.4947 l
433.0767 421.4947 437.1924 417.3789 437.1924 412.3023 c
437.1924 407.2256 433.0767 403.1098 428 403.1098 c
416.75 403.1098 l
s
422.25 412.3023 m
S
0 To
1 0 0 1 422.25 408.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1311) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
348.5523 403.125 m
348.5523 351.875 l
S
u
0 O
0 g
1 w
348.5523 348.6162 m
347.0088 355.1675 l
348.5523 353.7612 L
350.0957 355.1675 l
348.5523 348.6162 L
f
U
0 To
1 0 0 1 358.25 375.0523 0 Tp
TP
-6.9697 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
342.5 329.6098 m
337.4233 329.6098 333.3076 333.7256 333.3076 338.8023 c
333.3076 343.8789 337.4233 347.9947 342.5 347.9947 c
353.75 347.9947 l
358.8267 347.9947 362.9424 343.8789 362.9424 338.8023 c
362.9424 333.7256 358.8267 329.6098 353.75 329.6098 c
342.5 329.6098 l
s
0 To
1 0 0 1 348 335.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1302) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
399.5 273.1098 m
394.4233 273.1098 390.3076 277.2256 390.3076 282.3023 c
390.3076 287.3789 394.4233 291.4947 399.5 291.4947 c
410.75 291.4947 l
415.8267 291.4947 419.9424 287.3789 419.9424 282.3023 c
419.9424 277.2256 415.8267 273.1098 410.75 273.1098 c
399.5 273.1098 l
s
405 282.3023 m
S
0 To
1 0 0 1 405 278.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(1100) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
420 282.3023 m
461 282.3023 l
S
0 To
1 0 0 1 439.75 288.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
464.2588 282.3023 m
457.7075 280.7588 l
459.1138 282.3023 L
457.7075 283.8457 l
464.2588 282.3023 L
f
U
0 R
0 G
0.75 w
473.75 273.1098 m
468.6733 273.1098 464.5576 277.2256 464.5576 282.3023 c
464.5576 287.3789 468.6733 291.4947 473.75 291.4947 c
485 291.4947 l
490.0767 291.4947 494.1924 287.3789 494.1924 282.3023 c
494.1924 277.2256 490.0767 273.1098 485 273.1098 c
473.75 273.1098 l
s
479.25 282.3023 m
S
0 To
1 0 0 1 479.25 278.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1110) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
405.5523 273.125 m
405.5523 221.875 l
S
u
0 O
0 g
1 w
405.5523 218.6162 m
404.0088 225.1675 l
405.5523 223.7612 L
407.0957 225.1675 l
405.5523 218.6162 L
f
U
0 To
1 0 0 1 415.25 245.0523 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
399.5 199.6098 m
394.4233 199.6098 390.3076 203.7256 390.3076 208.8023 c
390.3076 213.8789 394.4233 217.9947 399.5 217.9947 c
410.75 217.9947 l
415.8267 217.9947 419.9424 213.8789 419.9424 208.8023 c
419.9424 203.7256 415.8267 199.6098 410.75 199.6098 c
399.5 199.6098 l
s
0 To
1 0 0 1 405 205.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(1101) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
214 569.5 m
295.5 556 337 493 v
S
178.5523 303.375 m
178.5523 354.625 l
178.5523 374.625 174 451 137 493.5 c
S
405.5523 295.375 m
405.5523 346.625 l
405.5523 366.625 403 390.5 360 405.5 c
S
u
0 O
0 g
1 w
405.5523 292.1162 m
404.0088 298.6675 l
405.5523 297.2612 L
407.0957 298.6675 l
405.5523 292.1162 L
f
U
0 To
1 0 0 1 186.75 379.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 414.75 342.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 326.25 262.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 290.25 545.0523 0 Tp
TP
-4.4725 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(d) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
u
392.4628 276.0955 m
388.5457 270.6222 l
388.5889 272.7098 L
386.5144 272.9465 l
392.4628 276.0955 L
f
U
u
336.9059 493.3105 m
331.7934 497.6882 l
333.8694 497.4639 L
334.2853 499.51 l
336.9059 493.3105 L
f
U
0 R
0 G
0.75 w
262.4804 282.2845 m
277.7544 261.7745 302.1898 248.49 329.7274 248.49 c
353.3096 248.49 374.6166 258.2322 389.8435 273.9115 c
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 319 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 99
%%Page: "94" 100
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(94) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
-0.5 ( MODEL FILE = nt-trim.mod               SURE V7.9.8 15 Apr 94  10:03:34) 87 718.67 P
(    RUN #      LOWERBOUND    UPPERBOUND) 87 698.99 T
( ----------   -----------   -----------) 87 685.31 T
(     1        2.98539e-06   3.00633e-06) 87 671.62 T
(     2        2.98539e-06   3.00633e-06) 87 657.94 T
( ----------   -----------   -----------) 87 644.26 T
(  OR PROB =   5.97078e-06   6.01266e-06) 87 630.58 T
( 87? exit) 87 610.9 T
3 F
0.37 (As can be seen, the results are the same. For two triads, the computation times are also very close.) 105 591.22 P
0.29 (However, for larger configurations, the savings due to trimming can be substantial. An ASSIST/SURE) 87 578.22 P
(session solving a similar model for) 87 565.22 T
7 F
(N_TRIADS = 10) 243.44 565.22 T
3 F
( with and without trimming follows:) 329.24 565.22 T
7 F
($ assist nt) 87 545.54 T
-0.62 (ASSIST VERSION 7.1                          NASA Langley Research Center) 87 531.86 P
(N_TRIADS? 10) 87 518.18 T
(PARSING TIME = 0.33 sec.) 87 498.5 T
(generating SURE model file...) 87 484.82 T
(787200 transitions processed.) 87 465.14 T
(RULE GENERATION TIME = 1941.87 sec.) 87 451.46 T
(NUMBER OF STATES IN MODEL = 59050) 87 437.78 T
(NUMBER OF TRANSITIONS IN MODEL = 787320) 87 424.1 T
(393660 DEATH STATES AGGREGATED INTO STATE 1) 87 410.42 T
($ assist nt-trim) 87 378.74 T
-0.62 (ASSIST VERSION 7.1                          NASA Langley Research Center) 87 365.06 P
(N_TRIADS? 10) 87 351.38 T
(PARSING TIME = 0.44 sec.) 87 331.69 T
(generating SURE model file...) 87 318.01 T
(66400 transitions processed.) 87 298.33 T
(RULE GENERATION TIME = 379.30 sec.) 87 284.65 T
(NUMBER OF STATES IN MODEL = 6147) 87 270.97 T
(NUMBER OF TRANSITIONS IN MODEL = 66561) 87 257.29 T
(33280 DEATH STATES AGGREGATED INTO STATE 1) 87 243.61 T
(23040 TRIMMED TRANSITIONS AGGREGATED INTO STATE 3) 87 229.93 T
3 F
-0.17 (Substantial savings can be realized by trimming.  The model generation time has been reduced from) 105 210.25 P
(1941 sec to 379 sec.  The SURE solution times are similarly reduced:) 87 197.25 T
7 F
($ sure) 87 177.57 T
(  SURE V7.9.3   NASA Langley Research Center) 87 157.89 T
(  1? read0 nt) 87 138.21 T
(    2081.90 SECS. TO READ MODEL FILE) 87 118.53 T
(2361989? run) 87 98.85 T
-0.62 ( MODEL FILE = nt.mod                     SURE V7.9.3 12 Feb 92  15:34:32) 87 79.17 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 100
%%Page: "95" 101
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(95) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 11 Q
-0.32 (                LOWERBOUND    UPPERBOUND    COMMENT              RUN #1) 87 718.67 P
-0.55 ( -----------   -----------   -----------    --------------------------) 87 705.42 P
(                1.49226e-05   1.52747e-05    <prune 5.5e-10>) 87 692.17 T
( 87968 PATH\050S\051 TO DEATH STATES 119932 PATH\050S\051 PRUNED) 87 678.92 T
( HIGHEST PRUNE LEVEL =  5.14253e-13) 87 665.67 T
( 39.716 SECS. CPU TIME UTILIZED) 87 652.42 T
(2361990? exit) 87 639.17 T
($ sure) 87 619.92 T
(  SURE V7.9.3   NASA Langley Research Center) 87 600.67 T
(  1? read0 nt-trim) 87 581.42 T
(    PRUNE STATES ARE: 2) 87 562.17 T
(      178.73 SECS. TO READ MODEL FILE) 87 536.92 T
(199715? run) 87 523.67 T
-0.96 ( MODEL FILE = nt-trim.mod               SURE V7.9.3 12 Feb 92  12:12:18) 87 504.42 P
-0.22 ( DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS             RUN #1) 87 479.17 P
-0.55 ( ----------   -----------   -----------    ---------------------------) 87 465.92 P
(      1       1.49226e-05   1.52741e-05) 87 452.67 T
( sure prune   0.00000e+00   1.72755e-08) 87 439.42 T
(              -----------   -----------) 87 426.17 T
(   SUBTOTAL   1.49226e-05   1.52741e-05) 87 412.92 T
( PRUNESTATE    LOWERBOUND    UPPERBOUND) 87 393.67 T
( ----------   -----------   -----------) 87 380.42 T
( prune   2    3.23486e-10   3.37530e-10) 87 367.17 T
(              -----------   -----------) 87 353.92 T
(   SUBTOTAL   3.23486e-10   3.37530e-10) 87 340.67 T
(  TOTAL        1.49226e-05   1.52917e-05) 87 315.42 T
(  4836 PATH\050S\051 TO DEATH STATES, 10830 PATH\050S\051 PRUNED) 87 296.17 T
(  HIGHEST PRUNE LEVEL =  2.75830e-11) 87 282.92 T
( 2.683 SECS. CPU TIME UTILIZED) 87 263.67 T
(199716? exit) 87 250.42 T
3 F
0.94 (As can be seen, most of the time was spent reading in the model. Because the trimmed model is) 105 231.17 P
0.06 (much smaller, the execution time is likewise much smaller\321less than 3 min rather than 34 min. A very) 87 218.17 P
1.21 (slight increase is seen in the separation of the bounds. The upper bound is) 87 205.17 P
7 F
2.89 (1.529e-05) 431.09 205.17 P
3 F
1.21 ( rather than) 490.49 205.17 P
7 F
0.06 (1.527e-05) 87 192.17 P
3 F
0.02 (.  However, this difference is clearly a very small price to pay for the dramatic decrease in) 146.4 192.17 P
(execution time.) 87 179.17 T
4 12 Q
(15. T) 87 153.25 T
(ransient and Intermittent Faults) 112.12 153.25 T
3 11 Q
0.72 (Computer systems are susceptible to transient and intermittent faults, as well as permanent faults.) 105 134.67 P
0.57 (Transient faults are faults that cause erroneous behavior for a short period of time and then disappear.) 87 121.67 P
0.12 (Intermittent faults are permanent faults that periodically exhibit erroneous behavior then correct behav-) 87 108.67 P
-0.16 (ior. Transient faults can corrupt the state \050i.e., memory\051 of an otherwise good processor. Unless the state) 87 95.67 P
0.28 (of the processor is recovered, the impact can be as damaging as a permanent fault. Transient faults can) 87 82.67 P
3.05 (also confuse a reconfigurable system. If the system improperly diagnoses a transient fault as a) 87 69.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 101
%%Page: "96" 102
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(96) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
2.41 (permanent fault, then a good processor is unnecessarily eliminated from the active configuration.) 87 718.67 P
-0.16 (Because  transient faults tend to occur more frequently than permanent faults, this can have a significant) 87 705.67 P
0.87 (impact on the probability of system failure.  Intermittent faults can deceive the operating system into) 87 692.67 P
-0.1 (diagnosing the fault as transient rather than permanent. Therefore, a processor experiencing an intermit-) 87 679.67 P
0.59 (tent fault may be left in operation much longer than a permanent fault or may be repeatedly removed,) 87 666.67 P
2.18 (restarted, and returned to operation. Thus, intermittent faults make the system vulnerable to near-) 87 653.67 P
-0.24 (coincident faults for a much longer time than a permanent fault, and also may increase the fault manage-) 87 640.67 P
1.1 (ment overhead enough to degrade performance. Clearly a properly designed system must deal effec-) 87 627.67 P
-0.21 (tively with these faults.  Furthermore, the assessment of such systems depends upon careful modeling of) 87 614.67 P
(these faults.) 87 601.67 T
4 10.5 Q
(15.1. T) 105 573.41 T
(ransient Fault Behavior) 134.85 573.41 T
3 11 Q
0.66 (A transient fault may or may not generate errors that are detectable by the voters of the operating) 105 551.98 P
(system.  The following two timing graphs illustrate the two possible effects of a single transient fault:) 87 538.98 T
-0.04 (where) 87 262.39 P
5 F
-0.04 (s) 116.59 262.39 P
3 F
-0.04 ( is time of fault arrival,) 120.86 262.39 P
5 F
-0.04 (e) 224.82 262.39 P
5 8.8 Q
-0.03 (i) 229.71 259.64 P
3 11 Q
-0.04 ( is time of detection of the) 232.15 262.39 P
5 F
-0.04 (i) 350.13 262.39 P
3 F
-0.04 (th error \0501 <) 353.19 262.39 P
5 F
-0.04 (i) 409.34 262.39 P
3 F
-0.04 ( <) 412.39 262.39 P
5 F
-0.04 (n) 424.02 262.39 P
3 F
-0.04 (\051,) 429.52 262.39 P
5 F
-0.04 (rt) 438.65 262.39 P
3 F
-0.04 ( is time operating sys-) 445.99 262.39 P
(tem reconfigures,) 87 249.39 T
5 F
(Z) 166.73 249.39 T
3 F
( is) 172.84 249.39 T
5 F
(e) 185.68 249.39 T
5 8.8 Q
(n) 190.57 246.64 T
6 11 Q
(-) 200.46 249.39 T
5 F
(s) 212 249.39 T
3 F
(, and) 216.28 249.39 T
5 F
(R) 240.42 249.39 T
3 F
( is) 247.14 249.39 T
5 F
(rt) 259.98 249.39 T
6 F
(-) 272.81 249.39 T
5 F
(s) 284.35 249.39 T
3 F
(.) 288.63 249.39 T
1.98 (These two cases represent the outcome of two competing processes\321the disappearance of the) 105 227.8 P
-0.16 (transient fault and its effects and the reconfiguration process of the operating system.  In the first case,) 87 214.8 P
5 F
-0.16 ( Z) 534.29 214.8 P
3 F
0.74 (is a random variable, which represents the duration of transient errors given that reconfiguration does) 87 201.8 P
-0.05 (not occur, and) 87 188.8 P
5 F
-0.05 (R) 152.23 188.8 P
3 F
-0.05 ( is a random variable, which represents the reconfiguration time given that reconfigura-) 158.95 188.8 P
0.61 (tion does occur.  Let) 87 175.8 P
5 F
0.61 (F) 182.93 175.8 P
5 8.8 Q
0.49 (R) 189.65 173.05 P
5 11 Q
0.61 (\050r\051) 195.02 175.8 P
3 F
0.61 ( represent the distribution of the reconfiguration time given that the system) 206.63 175.8 P
(reconfigures.) 87 162.8 T
3 10.5 Q
(\0501\051) 530.76 138.66 T
3 11 Q
0.92 (Let) 105 111.43 P
5 F
0.92 (F) 123.34 111.43 P
5 8.8 Q
0.74 (Z) 130.06 108.68 P
3 11 Q
0.92 (\050) 135.68 111.43 P
5 F
0.92 (z) 139.34 111.43 P
3 F
0.92 (\051 represent the distribution of the time for the disappearance of the transient error, given) 143.62 111.43 P
(that reconfiguration does not occur.) 87 98.43 T
3 10.5 Q
(\0502\051) 530.76 74.3 T
3 9 Q
(Case 1; reconfiguration does not occur.) 244.26 419.32 T
(Case 2; reconfiguration occurs.) 258.76 300.32 T
87 425.32 543 511.31 C
101 436.32 529 511.31 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 93 436 509 509 416 73 107 437.31 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/sketchB.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (sketchB.ps)
%%CreationDate: (4/20/95) (1:41 PM)
%%BoundingBox: 93 436 509 509
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 1 J 1 j 1.35 w 4 M []0 d
%AI3_Note:
0 D
95.5 499.75 m
383.5 499.75 l
389.25 506.25 l
389.25 492.5 l
396.875 500.125 l
490.75 500.125 l
S
0.5 w
121 493 m
121 481 l
S
0 To
1 0 0 1 121 470 0 Tp
TP
-1.7501 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(s) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
214 493 m
214 481 l
S
0 To
1 0 0 1 214 470 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
227 493 m
227 481 l
S
0 To
1 0 0 1 227 470 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
244.5 493 m
244.5 481 l
S
0 To
1 0 0 1 244.5 470 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(3) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
280.5 493 m
280.5 481 l
S
0 To
1 0 0 1 280.5 470 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(4) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
304 493 m
304 481 l
S
0 To
1 0 0 1 304 470 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(5) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
344 493 m
344 481 l
S
0 To
1 0 0 1 344 470 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(6) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
440 493 m
440 481 l
S
0 To
1 0 0 1 446.5 470 0 Tp
TP
-10.7853 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
-4 Ts
(n) Tx 
/_Times-Roman 9 Tf
0 Ts
( = ) Tx 
/_Times-Italic 9 Tf
(z) Tx 
(\r) TX 
TO
u
375.5 470.9393 m
376.0858 470.9393 376.5606 471.4142 376.5606 472 c
376.5606 472.5858 376.0858 473.0606 375.5 473.0606 c
374.9142 473.0606 374.4393 472.5858 374.4393 472 c
374.4393 471.4142 374.9142 470.9393 375.5 470.9393 c
f
375.5 472 m
F
U
u
389 470.9393 m
389.5858 470.9393 390.0606 471.4142 390.0606 472 c
390.0606 472.5858 389.5858 473.0606 389 473.0606 c
388.4142 473.0606 387.9393 472.5858 387.9393 472 c
387.9393 471.4142 388.4142 470.9393 389 470.9393 c
f
389 472 m
F
U
u
402.5 470.9393 m
403.0858 470.9393 403.5606 471.4142 403.5606 472 c
403.5606 472.5858 403.0858 473.0606 402.5 473.0606 c
401.9142 473.0606 401.4393 472.5858 401.4393 472 c
401.4393 471.4142 401.9142 470.9393 402.5 470.9393 c
f
402.5 472 m
F
U
0 R
0 G
1 J 1 j 0.5 w
123.5 446.125 m
279 446.125 l
S
296 445.875 m
383.5 445.875 l
389.25 452.25 l
389.25 438.5 l
396.875 446.125 l
437.75 446.125 l
S
121 451.5 m
121 439.5 l
S
440 451.5 m
440 439.5 l
S
0 To
1 0 0 1 288.25 443.25 0 Tp
TP
-2.5016 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
(Z) Tx 
(\r) TX 
TO
u
439.9006 446.125 m
433.3493 444.5815 l
434.7556 446.125 L
433.3493 447.6685 l
439.9006 446.125 L
f
U
u
121.0993 446.125 m
127.6506 444.5815 l
126.2444 446.125 L
127.6506 447.6685 l
121.0993 446.125 L
f
U
u
494.4006 500.125 m
487.8493 498.5815 l
489.2556 500.125 L
487.8493 501.6685 l
494.4006 500.125 L
f
U
0 To
1 0 0 1 498.5 497 0 Tp
TP
-1.2502 0 Td
0 Tr
(t) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 425.32 543 511.31 C
0 0 612 792 C
87 306.32 543 392.32 C
100.5 317.32 529.5 392.32 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 93 316 510 388 417 72 106.5 318.32 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/sketchC.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (sketchC.ps)
%%CreationDate: (4/21/95) (1:43 PM)
%%BoundingBox: 93 316 510 388
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 1 J 1 j 1.35 w 4 M []0 d
%AI3_Note:
0 D
95.5 379.25 m
383.5 379.25 l
389.25 385.75 l
389.25 372 l
396.875 379.625 l
490.75 379.625 l
S
0.5 w
121 372.5 m
121 360.5 l
S
0 To
1 0 0 1 121 349.5 0 Tp
TP
-1.7501 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(s) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
214 372.5 m
214 360.5 l
S
0 To
1 0 0 1 214 349.5 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(1) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
227 372.5 m
227 360.5 l
S
0 To
1 0 0 1 227 349.5 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(2) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
244.5 372.5 m
244.5 360.5 l
S
0 To
1 0 0 1 244.5 349.5 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(3) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
280.5 372.5 m
280.5 360.5 l
S
0 To
1 0 0 1 280.5 349.5 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(4) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
304 372.5 m
304 360.5 l
S
0 To
1 0 0 1 304 349.5 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(5) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
344 372.5 m
344 360.5 l
S
0 To
1 0 0 1 344 349.5 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
/_Times-Roman 9 Tf
-4 Ts
(6) Tx 
(\r) TX 
TO
0 R
0 G
1 J 1 j 0.5 w
427.25 372.5 m
427.25 360.5 l
S
0 To
1 0 0 1 428.25 349.5 0 Tp
TP
-4.2473 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
/_Times-Italic 9 Tf
0 Ts
(e) Tx 
-4 Ts
(n) Tx 
(\r) TX 
TO
u
375.5 350.4393 m
376.0858 350.4393 376.5606 350.9142 376.5606 351.5 c
376.5606 352.0858 376.0858 352.5606 375.5 352.5606 c
374.9142 352.5606 374.4393 352.0858 374.4393 351.5 c
374.4393 350.9142 374.9142 350.4393 375.5 350.4393 c
f
375.5 351.5 m
F
U
u
389 350.4393 m
389.5858 350.4393 390.0606 350.9142 390.0606 351.5 c
390.0606 352.0858 389.5858 352.5606 389 352.5606 c
388.4142 352.5606 387.9393 352.0858 387.9393 351.5 c
387.9393 350.9142 388.4142 350.4393 389 350.4393 c
f
389 351.5 m
F
U
u
402.5 350.4393 m
403.0858 350.4393 403.5606 350.9142 403.5606 351.5 c
403.5606 352.0858 403.0858 352.5606 402.5 352.5606 c
401.9142 352.5606 401.4393 352.0858 401.4393 351.5 c
401.4393 350.9142 401.9142 350.4393 402.5 350.4393 c
f
402.5 351.5 m
F
U
0 R
0 G
1 J 1 j 0.5 w
123.5 325.625 m
301.5 325.625 l
S
318.5 325.375 m
383.75 325.375 l
389.5 331.75 l
389.5 318 l
397.125 325.625 l
482 325.625 l
S
121 331 m
121 319 l
S
484.25 331 m
484.25 319 l
S
0 To
1 0 0 1 310.75 322.75 0 Tp
TP
-2.7488 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
0 Ts
(R) Tx 
(\r) TX 
TO
u
484.1506 325.625 m
477.5993 324.0815 l
479.0056 325.625 L
477.5993 327.1685 l
484.1506 325.625 L
f
U
u
121.0993 325.625 m
127.6506 324.0815 l
126.2444 325.625 L
127.6506 327.1685 l
121.0993 325.625 L
f
U
u
493.9006 379.625 m
487.3493 378.0815 l
488.7556 379.625 L
487.3493 381.1685 l
493.9006 379.625 L
f
U
0 R
0 G
1 J 1 j 0.5 w
484.25 372.5 m
484.25 360.5 l
S
0 To
1 0 0 1 485.25 349.5 0 Tp
TP
-3.0004 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w
(rt) Tx 
(\r) TX 
TO
0 To
1 0 0 1 499.5 376.5029 0 Tp
TP
-1.2502 0 Td
0 Tr
(t) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 306.32 543 392.32 C
0 0 612 792 C
256.53 130.36 361.23 147.54 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(F) 257.53 138.66 T
5 8.5 Q
(R) 264.34 134.49 T
5 10.5 Q
(r) 276.41 138.66 T
6 F
(\050) 271.91 138.66 T
(\051) 280.98 138.66 T
3 F
(P) 302.65 138.66 T
(r) 308.49 138.66 T
(o) 311.98 138.66 T
(b) 317.23 138.66 T
5 F
(R) 331.98 138.66 T
(r) 349.41 138.66 T
6 F
(<) 341.02 138.66 T
([) 327.48 138.66 T
(]) 353.98 138.66 T
3 F
(=) 291.48 138.66 T
0 0 612 792 C
257.05 66 360.71 83.17 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(F) 258.05 74.3 T
5 8.5 Q
(Z) 264.86 70.12 T
5 10.5 Q
(z) 276.47 74.3 T
6 F
(\050) 271.96 74.3 T
(\051) 281.03 74.3 T
3 F
(P) 302.7 74.3 T
(r) 308.54 74.3 T
(o) 312.04 74.3 T
(b) 317.29 74.3 T
5 F
(Z) 332.04 74.3 T
(z) 348.89 74.3 T
6 F
(<) 340.5 74.3 T
([) 327.54 74.3 T
(]) 353.46 74.3 T
3 F
(=) 291.53 74.3 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 102
%%Page: "97" 103
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(97) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.2 (The first distribution) 105 718.67 P
5 F
0.2 (F) 199.42 718.67 P
5 8.8 Q
0.16 (R) 206.14 715.92 P
3 11 Q
0.2 ( can be directly observed.  The second distribution) 211.52 718.67 P
5 F
0.2 (F) 438.2 718.67 P
5 8.8 Q
0.16 (Z) 444.92 715.92 P
3 11 Q
0.2 ( is more troublesome) 449.81 718.67 P
1.27 (to determine because a fault produces errors that may persist long after the fault has actually disap-) 87 705.67 P
0.7 (peared. Sometimes the errors disappear quickly, sometimes they do not. The exact time when the last) 87 692.67 P
0.08 (error has disappeared is not directly observable.  However, determination of a worst-case result is often) 87 679.67 P
0.78 (possible.  This maximum time of disappearance can sometimes be derived from the operating system) 87 666.67 P
-0.04 (code.  This follows from the fact that the operating system is responsible for the recovery from the tran-) 87 653.67 P
-0.06 (sient fault.  If the operating system does not perform a  state-restoration process periodically, a transient) 87 640.67 P
-0.1 (fault can be as damaging as a permanent fault.  For example, an alpha particle may flip a bit in memory.) 87 627.67 P
-0.11 (If this memory is not rewritten, the error will persist indefinitely.  Therefore, the fault-tolerant operating) 87 614.67 P
(system must periodically rewrite volatile memory with voted versions of the state.) 87 601.67 T
4 10.5 Q
(15.2. Modeling T) 105 576.97 T
(ransient Faults) 180.06 576.97 T
3 11 Q
(Techniques for modeling various systems with transient faults will be detailed in this section.) 105 559.1 T
8 10.5 Q
(15.2.1. Degradable triad subject to transient faults.) 105 535.91 T
3 11 Q
0.69 (In this section, modeling a triplex system that is) 326.98 535.91 P
0.84 (subject to transient faults will be investigated.  First, a failure rate) 87 522.91 P
6 F
0.84 (g) 388.55 522.91 P
3 F
0.84 ( must be determined for transient) 393.07 522.91 P
0.42 (faults \050the rate of transient fault arrivals\051. Often) 87 509.91 P
6 F
0.42 (g) 302.05 509.91 P
3 F
0.42 ( is assumed to be 10 times the permanent fault rate) 306.57 509.91 P
6 F
0.42 (l) 536.96 509.91 P
3 F
0.07 (\050ref. 6\051.  This system will be assumed to have been designed so that it can recover from transient faults.) 87 496.91 P
0.87 (Otherwise, transient faults are as damaging as permanent faults and should be modeled as permanent) 87 483.91 P
(faults.) 87 470.91 T
1.17 (This recovery is accomplished by periodically voting all volatile internal states of the processor.) 105 451.88 P
1.29 (Each nonfaulty processor rewrites each data value of its internal state with a voted value. Let ISVP) 87 438.88 P
0.38 (equal the period during which the operating system replaces the entire volatile state with voted values.) 87 425.88 P
-0.18 (The active duration of a transient fault is assumed to be small in comparison to ISVP. Assuming that the) 87 412.88 P
0.45 (time from the fault arrival to the operating system update is uniformly distributed, the mean is ISVP/2) 87 399.88 P
0.6 (and the standard deviation is ISVP/) 87 386.88 P
0.6 (. Of course, the actual mean and standard deviation should be) 266.33 386.88 P
0.47 (experimentally measured.  The values of these parameters would depend strongly upon the strategy of) 87 373.88 P
(transient recovery that is used by the operating system.) 87 360.88 T
0.28 (During the period of time from the arrival of a transient fault until the system can recover, the sys-) 105 341.85 P
-0.23 (tem is vulnerable to near-coincident failures.  If a second processor experiences a transient or permanent) 87 328.85 P
0.35 (fault while transient errors are present, then the three-way voter can no longer mask the faults.  Such a) 87 315.85 P
-0.27 (state is a system failure state.  In figure 50, a model of a degradable triad system subject to only transient) 87 302.85 P
(faults is shown.) 87 289.85 T
(The corresponding SURE model is) 105 135.82 T
7 9.75 Q
( GAMMA = 1E-4;          \050* Arrival rate for transient faults *\051) 93.6 116.79 T
(  MU1 = 2.7E-4;          \050* Mean reconfiguration time *\051) 87 104.59 T
(  SIGMA1 = 1.3E-4;       \050* Standard deviation of reconfiguration time *\051) 87 92.81 T
(  ISVP = 1E-3;           \050* Mean Internal State Voting Period *\051) 87 81.03 T
-0.36 (  PROB_RECONF = .1;      \050* Probability of reconfiguring out transient fault *\051) 87 69.25 P
3 9 Q
(Figure 50.  Degradable triad subject to transient faults.) 216.76 166.18 T
245.52 382.25 266.33 398.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10.5 Q
0 X
0 0 0 1 0 0 0 K
(2) 246.52 386.88 T
(3) 259.74 386.88 T
263.94 396.27 259.74 396.27 256.59 385.77 3 L
0.47 H
2 Z
N
256.59 385.77 254.49 388.78 253.44 387.28 3 L
N
0 0 612 792 C
87 172.18 543 268.18 C
212.5 183.18 417.5 268.18 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 198 582 391 664 193 82 218.5 184.18 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig50.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig50.ps)
%%CreationDate: (4/20/95) (7:13 AM)
%%BoundingBox: 198 582 391 664
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 116 115.5 496 676.5
%AI3_TemplateFile: hammer510::1945:t-50,51
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 210.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
210.25 641.3598 m
215.3267 641.3598 219.4424 645.4756 219.4424 650.5523 c
219.4424 655.6289 215.3267 659.7447 210.25 659.7447 c
205.1733 659.7447 201.0576 655.6289 201.0576 650.5523 c
201.0576 645.4756 205.1733 641.3598 210.25 641.3598 c
s
210.25 650.5523 m
S
U
219.25 650.5523 m
281.75 650.5523 l
S
u
294.25 641.3598 m
299.3267 641.3598 303.4424 645.4756 303.4424 650.5523 c
303.4424 655.6289 299.3267 659.7447 294.25 659.7447 c
289.1733 659.7447 285.0576 655.6289 285.0576 650.5523 c
285.0576 645.4756 289.1733 641.3598 294.25 641.3598 c
s
294.25 650.5523 m
S
U
0 To
1 0 0 1 294.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 251.25 654.5523 0 Tp
TP
-4.099 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(g) Tx 
(\r) TX 
TO
u
285.0088 650.5523 m
278.4575 649.0088 l
279.8638 650.5523 L
278.4575 652.0957 l
285.0088 650.5523 L
f
U
0 R
0 G
0.75 w
303.75 650.5523 m
366.25 650.5523 l
S
u
378.75 641.3598 m
383.8267 641.3598 387.9424 645.4756 387.9424 650.5523 c
387.9424 655.6289 383.8267 659.7447 378.75 659.7447 c
373.6733 659.7447 369.5576 655.6289 369.5576 650.5523 c
369.5576 645.4756 373.6733 641.3598 378.75 641.3598 c
s
378.75 650.5523 m
S
U
0 To
1 0 0 1 378.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 335.75 654.5523 0 Tp
TP
-4.099 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(g) Tx 
(\r) TX 
TO
u
369.5088 650.5523 m
362.9575 649.0088 l
364.3638 650.5523 L
362.9575 652.0957 l
369.5088 650.5523 L
f
U
0 R
0 G
0.75 w
294 641.3023 m
294 607.4273 l
S
u
0 O
0 g
1 w
294 604.1685 m
292.4565 610.7198 l
294 609.3135 L
295.5435 610.7198 l
294 604.1685 L
f
U
0 To
1 0 0 1 304 624.8023 0 Tp
TP
-4.4989 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
-4 Ts
(r) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
294.25 585.3598 m
299.3267 585.3598 303.4424 589.4756 303.4424 594.5523 c
303.4424 599.6289 299.3267 603.7447 294.25 603.7447 c
289.1733 603.7447 285.0576 599.6289 285.0576 594.5523 c
285.0576 589.4756 289.1733 585.3598 294.25 585.3598 c
s
294.25 594.5523 m
S
U
303.25 594.5523 m
365.75 594.5523 l
S
u
378.25 585.3598 m
383.3267 585.3598 387.4424 589.4756 387.4424 594.5523 c
387.4424 599.6289 383.3267 603.7447 378.25 603.7447 c
373.1733 603.7447 369.0576 599.6289 369.0576 594.5523 c
369.0576 589.4756 373.1733 585.3598 378.25 585.3598 c
s
378.25 594.5523 m
S
U
0 To
1 0 0 1 378.25 591.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 335.25 598.5523 0 Tp
TP
-1.849 0 Td
0 Tr
/_Symbol 9 Tf
(g) Tx 
(\r) TX 
TO
u
369.0088 594.5523 m
362.4575 593.0088 l
363.8638 594.5523 L
362.4575 596.0957 l
369.0088 594.5523 L
f
U
0 To
1 0 0 1 294.25 592.5523 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 294.25 591.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
216.965 639.5128 m
218.45 636.4329 221.6019 634.3076 225.25 634.3076 c
279 634.3076 l
282.5987 634.3076 285.5874 636.4428 287.2237 639.3881 c
287.8487 640.5131 288.5 643.375 y
S
u
0 O
0 g
1 w
215.943 643.469 m
216.54 636.7649 l
217.5624 638.5855 L
219.4701 637.7365 l
215.943 643.469 L
f
U
0 To
1 0 0 1 251.75 624.3023 0 Tp
TP
-4.4989 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
-4 Ts
(z) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 172.18 543 268.18 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 103
%%Page: "98" 104
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(98) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(  1,2 = 3*GAMMA;) 87 719.5 T
(  2,3 = 2*GAMMA;) 87 707.2 T
(  2,4 = <MU1,SIGMA1,PROB_RECONF>;) 87 694.9 T
(  2,1 = <ISVP/2,ISVP/\0502*SQRT\0503\051\051,1-PROB_RECONF>;) 87 682.6 T
(  4,5 = GAMMA;) 87 670.3 T
3 11 Q
1.21 (The transition labeled) 105 652.17 P
5 F
1.21 (F) 207.32 652.17 P
5 8.8 Q
0.97 (z) 214.04 649.42 P
3 11 Q
1.21 ( represents the disappearance of a transient fault and the removal of all) 217.47 652.17 P
-0.18 (errors produced by it.  The transition labeled) 87 639.17 P
5 F
-0.18 (F) 284.42 639.17 P
5 8.8 Q
-0.15 (r) 291.14 636.42 P
3 11 Q
-0.18 ( represents the improper reconfiguration of the system in) 294.56 639.17 P
0.62 (the presence of a transient fault. Because two recovery transitions occur from state \0502\051, it is necessary) 87 626.17 P
0.7 (with SURE that the three-parameter form of recovery must be used.  The first two parameters are the) 87 613.17 P
0.09 (conditional mean and standard deviation.  The third parameter is the probability that this transition suc-) 87 600.17 P
-0.17 (ceeds over the fast transitions.  The parameter) 87 587.17 P
7 F
-0.42 (PROB_RECONF) 290.59 587.17 P
3 F
-0.17 ( represents the probability that the recon-) 363.19 587.17 P
3.19 (figuration transition succeeds over the) 87 574.17 P
5 F
3.19 (F) 273.72 574.17 P
5 8.8 Q
2.55 (z) 280.44 571.42 P
3 11 Q
3.19 ( transition. Thus, the third SURE parameter for) 283.87 574.17 P
5 F
3.19 (F) 519.58 574.17 P
5 8.8 Q
2.55 (r) 526.3 571.42 P
3 11 Q
3.19 ( is) 529.72 574.17 P
7 F
0.77 (PROB_RECONF) 87 561.17 P
3 F
0.32 ( and the third SURE parameter for) 159.6 561.17 P
5 F
0.32 (F) 316.13 561.17 P
5 8.8 Q
0.26 (z) 322.85 558.42 P
3 11 Q
0.32 ( is) 326.28 561.17 P
7 F
0.77 (1) 339.76 561.17 P
0.77 (-) 352.96 561.17 P
0.77 (PROB_RECONF) 366.16 561.17 P
3 F
0.32 (.  An experimental pro-) 438.76 561.17 P
0.91 (cedure for measuring these parameters is described in reference 26.  The probability of failure of the) 87 548.17 P
(system as a function of the voting period ISVP is shown in figure 51.) 87 535.17 T
8 10.5 Q
(15.2.2. The SURE program and loop truncation.) 105 206.96 T
3 11 Q
1.54 (The model in figure 50 contains a loop, that is a) 317.08 206.96 P
0.36 (path that returns to a state.  Loops can lead to infinitely long paths.  Fortunately in SURE, pruning has) 87 193.96 P
(been shown to be conservative, even when used on models that include loops \050ref. 9\051.) 87 180.96 T
0.63 (The error due to SURE-level pruning is reported in the comments field as follows when) 105 161.41 P
7 F
1.52 (LIST=0) 503.4 161.41 P
3 F
(or) 87 148.41 T
7 F
(1) 98.91 148.41 T
3 F
(.) 105.51 148.41 T
7 9.75 Q
(<prune 1.2e-12>) 105 129.7 T
3 11 Q
(If) 87 111.56 T
7 F
(LIST) 97.08 111.56 T
3 F
( is set to 2 or more, the prune values are listed on a separate row as follows:) 123.48 111.56 T
7 9.75 Q
(DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS            RUN #4) 93.6 93.85 T
( ----------   -----------   -----------    ---------------------------) 87 81.55 T
(      1       9.19500E-12   1.00000E-11) 87 69.25 T
3 9 Q
(Figure 51.  Failure probability as function of ISVP.) 222.76 235.51 T
87 241.51 543 509.51 C
134 252.51 496 509.51 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 126 147 476 402 350 255 140 253.51 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig51.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig51.ps)
%%CreationDate: (4/20/95) (7:21 AM)
%%BoundingBox: 126 147 476 402
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 116 115.5 496 676.5
%AI3_TemplateFile: hammer510::1945:t-50,51
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
387 176 m
387 181 l
S
177.75 391.875 m
171.75 391.875 l
171.75 176 l
459.25 176 l
459.25 181 l
S
315.5 176 m
315.5 181 l
S
244 176 m
244 181 l
S
177.75 284.75 m
171.75 284.75 l
S
0 To
1 0 0 1 167.75 389.5 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
1 0 0 1 167.75 281 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
1 0 0 1 167.75 172.75 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\67) Tx 
(\r) TX 
TO
0 To
1 0 0 1 171.25 163 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
4 Ts
(\320\67) Tx 
(\r) TX 
TO
0 To
1 0 0 1 244 163 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
1 0 0 1 315.25 163 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
1 0 0 1 386.75 163 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\61) Tx 
(\r) TX 
TO
0 To
1 0 0 1 460.25 163 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 314.75 149 0 Tp
TP
-9.7493 0 Td
0 Tr
0 Ts
(ISVP) Tx 
(\r) TX 
TO
0 To
1 0 0 1 139.75 282.5 0 Tp
TP
-3.999 0 Td
0 Tr
/_Times-Italic 9 Tf
(P) Tx 
-4 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
207 194.5 m
335.25 195 348.75 195 v
362.25 195 396 195 417 232 c
438 269 460 334 y
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 241.51 543 509.51 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 104
%%Page: "99" 105
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(99) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(   4       3.46542E-10   4.77867E-10) 106.8 719.5 T
( sure prune   0.00000e+00   1.00000E-13) 87 706.34 T
(              -----------   -----------) 87 693.19 T
(   SUBTOTAL   3.475645-10   4.87797E-10) 87 680.04 T
3 11 Q
-0.22 (The row which begins \322) 105 661.05 P
7 F
-0.53 (sure prune) 209.82 661.05 P
3 F
-0.22 (\323 reports an upper bound on the error because of pruning.  As) 275.29 661.05 P
0.09 (mentioned previously, the pruning error is added to the upper bound.  The upper bound is consequently) 87 648.05 P
-0.14 (always an upper bound on the probability of system failure, even if pruning is too severe.  If the pruning) 87 635.05 P
(is too severe, then the bounds will be far apart, but valid.) 87 622.05 T
-0.18 (Models that contain fast loops, that is, loops with only fast transitions, can cause the SURE program) 105 601.64 P
-0.13 (to run forever unless a safety value is used.  Fast loops generate an infinite sequence of paths that do not) 87 588.64 P
-0.12 (decrease in probability \050as far as the upper bound of SURE is concerned\051.  Thus, the program would run) 87 575.64 P
0.37 (forever when only pruning is invoked.  The) 87 562.64 P
7 F
0.89 (TRUNC) 283.97 562.64 P
3 F
0.37 ( command sets the maximum number of times that) 316.97 562.64 P
0.17 (SURE will expand a loop.  The default value is 25, which will  not be  reached  in most models.  How-) 87 549.64 P
-0.28 (ever, for models containing fast loops, this value will keep the program from running forever. The math-) 87 536.64 P
(ematical basis for  loop truncation in SURE is given in the appendix.) 87 523.64 T
8 10.5 Q
(15.2.3. Nonrecon\336gurable system subject to transient faults.) 105 499.07 T
3 11 Q
0.52 (In this section, an NMR system subject) 367.24 499.07 P
0.84 (to both transient as well as permanent faults will be analyzed. The motivation for this example is the) 87 486.07 P
0.53 (RCP \050Reliable Computing Platform\051 architecture developed at Langley Research Center \050ref. 27\051. The) 87 473.07 P
0.52 (RCP utilizes NMR-style redundancy to mask faults and internal majority voting to flush the effects of) 87 460.07 P
0.55 (transient faults. A major goal of this work is to provide the system with significant capability to with-) 87 447.07 P
0.67 (stand the transient effects of High Intensity Radiated Fields \050HIRF\051. For simplicity, a quadraplex ver-) 87 434.07 P
(sion of the RCP system shown in figure 52 will be examined first.) 87 421.07 T
0.03 (These faults arrive at rate) 105 147.67 P
6 F
0.03 (l) 219.71 147.67 P
5 8.8 Q
0.03 (T) 225.75 144.92 P
3 11 Q
0.03 ( for transient faults and) 230.64 147.67 P
6 F
0.03 (l) 335.59 147.67 P
5 8.8 Q
0.03 (p) 341.63 144.92 P
3 11 Q
0.03 ( for permanent faults. The transient fault and) 346.03 147.67 P
-0.2 (all errors produced by it can be removed by voting the internal state. This removal is sometimes referred) 87 134.67 P
0.09 (to as transient fault scrubbing. In the RCP system, this scrubbing takes place continuously and does not) 87 121.67 P
1.7 (rely upon the system detecting the transient fault.  The presence of the transition from state \0502\051 to) 87 108.67 P
0.41 (state) 87 95.67 P
0.41 (\0501\051 depends upon the proper design of the operating system and is necessary so that a system can) 109.91 95.67 P
0.53 (recover the state of a processor that has been affected by a transient fault. To simplify this discussion,) 87 82.67 P
2.12 (the arrival of a second transient fault on the same processor before the disappearance of the first) 87 69.67 P
3 9 Q
(Figure 52.  Reliability model of quadraplex RCP.) 226.12 183.41 T
87 189.4 543 393.4 C
203.5 200.4 426.5 393.4 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 198 475 409 667 211 192 209.5 200.41 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig52.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig52.ps)
%%CreationDate: (4/21/95) (1:44 PM)
%%BoundingBox: 198 475 409 667
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 210.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
210.25 641.3598 m
215.3267 641.3598 219.4424 645.4756 219.4424 650.5523 c
219.4424 655.6289 215.3267 659.7447 210.25 659.7447 c
205.1733 659.7447 201.0576 655.6289 201.0576 650.5523 c
201.0576 645.4756 205.1733 641.3598 210.25 641.3598 c
s
210.25 650.5523 m
S
U
219.25 650.5523 m
281.75 650.5523 l
S
u
294.25 641.3598 m
299.3267 641.3598 303.4424 645.4756 303.4424 650.5523 c
303.4424 655.6289 299.3267 659.7447 294.25 659.7447 c
289.1733 659.7447 285.0576 655.6289 285.0576 650.5523 c
285.0576 645.4756 289.1733 641.3598 294.25 641.3598 c
s
294.25 650.5523 m
S
U
0 To
1 0 0 1 294.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 251.25 657.0523 0 Tp
TP
-7.2213 0 Td
0 Tr
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(T) Tx 
(\r) TX 
TO
u
285.0088 650.5523 m
278.4575 649.0088 l
279.8638 650.5523 L
278.4575 652.0957 l
285.0088 650.5523 L
f
U
0 R
0 G
0.75 w
303.75 650.5523 m
366.25 650.5523 l
S
u
378.75 641.3598 m
383.8267 641.3598 387.9424 645.4756 387.9424 650.5523 c
387.9424 655.6289 383.8267 659.7447 378.75 659.7447 c
373.6733 659.7447 369.5576 655.6289 369.5576 650.5523 c
369.5576 645.4756 373.6733 641.3598 378.75 641.3598 c
s
378.75 650.5523 m
S
U
0 To
1 0 0 1 378.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
(3) Tx 
(\r) TX 
TO
u
369.5088 650.5523 m
362.9575 649.0088 l
364.3638 650.5523 L
362.9575 652.0957 l
369.5088 650.5523 L
f
U
0 R
0 G
0.75 w
294 641.3023 m
294 581.4273 l
S
u
0 O
0 g
1 w
294 578.1685 m
292.4565 584.7198 l
294 583.3135 L
295.5435 584.7198 l
294 578.1685 L
f
U
u
0 R
0 G
0.75 w
294.25 559.3598 m
299.3267 559.3598 303.4424 563.4756 303.4424 568.5523 c
303.4424 573.6289 299.3267 577.7447 294.25 577.7447 c
289.1733 577.7447 285.0576 573.6289 285.0576 568.5523 c
285.0576 563.4756 289.1733 559.3598 294.25 559.3598 c
s
294.25 568.5523 m
S
U
218.75 568.5523 m
281.25 568.5523 l
S
u
210.25 559.3598 m
215.3267 559.3598 219.4424 563.4756 219.4424 568.5523 c
219.4424 573.6289 215.3267 577.7447 210.25 577.7447 c
205.1733 577.7447 201.0576 573.6289 201.0576 568.5523 c
201.0576 563.4756 205.1733 559.3598 210.25 559.3598 c
s
210.25 568.5523 m
S
U
0 To
1 0 0 1 210.25 565.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
u
284.5088 568.5523 m
277.9575 567.0088 l
279.3638 568.5523 L
277.9575 570.0957 l
284.5088 568.5523 L
f
U
0 To
1 0 0 1 294.25 566.5523 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 294.25 565.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
216.965 639.5128 m
218.45 636.4329 221.6019 634.3076 225.25 634.3076 c
279 634.3076 l
282.5987 634.3076 285.5874 636.4428 287.2237 639.3881 c
287.8487 640.5131 288.5 643.375 y
S
u
0 O
0 g
1 w
215.943 643.469 m
216.54 636.7649 l
217.5624 638.5855 L
219.4701 637.7365 l
215.943 643.469 L
f
U
0 R
0 G
0.75 w
210.5 641.3023 m
210.5 581.4273 l
S
u
0 O
0 g
1 w
210.5 578.1685 m
208.9565 584.7198 l
210.5 583.3135 L
212.0435 584.7198 l
210.5 578.1685 L
f
U
0 R
0 G
0.75 w
291.9966 641.5711 m
219.8134 576.5519 l
S
u
0 O
0 g
1 w
217.3861 574.3775 m
221.2358 579.8985 l
221.2183 577.8105 L
223.2956 577.5992 l
217.3861 574.3775 L
f
U
0 To
1 0 0 1 332 657.0523 0 Tp
TP
-7.2213 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(T) Tx 
(\r) TX 
TO
0 To
1 0 0 1 251.25 573.8023 0 Tp
TP
-7.2213 0 Td
0 Tr
/_Times-Roman 9 Tf
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(T) Tx 
(\r) TX 
TO
0 To
1 0 0 1 251.25 637.5523 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(r) Tx 
(\r) TX 
TO
0 To
1 0 0 1 305 611.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
(\r) TX 
TO
0 To
1 0 0 1 219.5 611.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
0 Ts
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
210.5 559.3023 m
210.5 499.4273 l
S
u
0 O
0 g
1 w
210.5 496.1685 m
208.9565 502.7198 l
210.5 501.3135 L
212.0435 502.7198 l
210.5 496.1685 L
f
U
0 To
1 0 0 1 219.5 529.8023 0 Tp
TP
-6.9697 0 Td
0 Tr
/_Times-Roman 9 Tf
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
210.25 478.1098 m
215.3267 478.1098 219.4424 482.2256 219.4424 487.3023 c
219.4424 492.3789 215.3267 496.4947 210.25 496.4947 c
205.1733 496.4947 201.0576 492.3789 201.0576 487.3023 c
201.0576 482.2256 205.1733 478.1098 210.25 478.1098 c
s
210.25 487.3023 m
S
U
0 To
1 0 0 1 210.25 483.8023 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
(6) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
269.5 526.25 m
269.5 513.25 l
S
262 534.5 m
277.5 534.5 l
S
278.9737 504.3881 m
277.3374 501.4428 274.3487 499.3076 270.75 499.3076 C
267.1019 499.3076 263.95 501.4329 262.465 504.5128 c
S
u
0 O
0 g
1 w
261.443 508.469 m
262.04 501.7649 l
263.0624 503.5855 L
264.9701 502.7365 l
261.443 508.469 L
f
U
0 To
1 0 0 1 285.25 532 0 Tp
TP
0 Tr
0 Ta
15 0 Tl
(Transient fault arrivals\r) Tx 
T*
(Permanent fault arrivals\r) Tx 
T*
(Disappearance of transient fault) Tx 
(\r) TX 
TO
0 To
1 0 0 1 260 598.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
1 Ta
9 0 Tl
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
(\r) TX 
TO
u
269.5 510.7935 m
267.9565 517.3448 l
269.5 515.9385 L
271.0435 517.3448 l
269.5 510.7935 L
f
U
u
279.1338 534.5523 m
272.5825 533.0088 l
273.9888 534.5523 L
272.5825 536.0957 l
279.1338 534.5523 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 189.4 543 393.4 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 105
%%Page: "100" 106
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(100) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.71 (transient fault has not been included in the model. The model has six states of which three are opera-) 87 718.67 P
0.25 (tional.  State \0501\051 represents the initial fault-free state of the system.  Only two transitions from state \0501\051) 87 705.67 P
0.59 (result from the arrival of either a transient or permanent fault.  These transitions carry the system into) 87 692.67 P
0.1 (states \0502\051 and \0504\051, both of which are not system failure states.  This property has been justified by a for-) 87 679.67 P
-0.01 (mal proof that establishes that for a quadraplex RCP, no single fault can cause the system to produce an) 87 666.67 P
0.43 (erroneous majority output.  All transitions except one from these states are  caused by second failures.) 87 653.67 P
0.3 (These second failures lead to system failure states.  The other transition from state \0502\051 back to state \0501\051) 87 640.67 P
0.58 (models the transient fault scrubbing process.  A formal proof justifying the inclusion of this transition) 87 627.67 P
1.74 (has been developed that demonstrates that the RCP system removes the effects of a transient fault) 87 614.67 P
(within a bounded amount of time \050ref. 27\051.) 87 601.67 T
0.58 (The probability of system failure as a function of 1/) 105 582.5 P
6 F
0.58 (r) 337.18 582.5 P
3 F
0.58 (, the rate of recovering the state, is shown in) 343.22 582.5 P
0.3 (figure 53. The model was solved by using the STEM reliability analysis program for the parameters of) 87 569.5 P
6 F
1.15 (l) 87 556.5 P
5 8.8 Q
0.92 (p) 93.04 553.75 P
3 11 Q
1.15 ( = 10) 97.44 556.5 P
6 8.8 Q
0.92 (-) 122.44 560.9 P
3 F
0.92 (4) 127.27 560.9 P
3 11 Q
1.15 (/hr,) 131.67 556.5 P
6 F
1.15 (l) 150.54 556.5 P
5 8.8 Q
0.92 (T) 156.58 553.75 P
3 11 Q
1.15 ( = 10) 161.48 556.5 P
6 8.8 Q
0.92 (-) 186.48 560.9 P
3 F
0.92 (3) 191.31 560.9 P
3 11 Q
1.15 (/hr, and mission time) 195.71 556.5 P
5 F
1.15 (T) 295.95 556.5 P
3 F
1.15 ( = 10 hr \050ref. 11\051. Because no recoveries exist in the) 302.07 556.5 P
(model, a pure Markov model solver is sufficient, although SURE could have been used if desired.) 87 543.5 T
0.22 (Note the validation tasks that have been eliminated by not using reconfiguration in the RCP.  First,) 105 214.34 P
1.19 (it is not necessary to perform fault-injection experiments to measure the recovery time distributions.) 87 201.34 P
0.35 (Second, fault latency is of no concern.  Fault latency is only a concern when detecting and removing a) 87 188.34 P
-0.05 (faulty component because latency merely defers error production, and thus detection.  Third, the logical) 87 175.34 P
-0.27 (complexity of the system is greatly reduced. No reconfiguration process is necessary and the interface to) 87 162.34 P
-0.16 (the sensors and the actuators is static  instead of dynamic.  Hence, fewer design errors must be corrected) 87 149.34 P
1.2 (during the validation process.  The following ASSIST input will generate a model of the RCP for a) 87 136.34 P
(specified value of) 87 123.34 T
7 F
(N) 167.95 123.34 T
3 F
(.) 174.55 123.34 T
7 9.75 Q
(INPUT N;                  \050* Number of processors *\051) 87 105 T
(LAMBDA = 1E-4;            \050* Permanent fault arrival rate *\051) 87 93.09 T
(GAMMA = 10*LAMBDA;        \050* Transient fault arrival rate *\051) 87 81.17 T
("FLUSHTIME = 1E-1 TO* 1E4 by 10;") 87 69.25 T
3 9 Q
(Figure 53.  Probability of failure as function of 1/) 222.41 244.84 T
6 F
(r) 400.4 244.84 T
3 F
(.) 405.34 244.84 T
87 250.84 543 517.83 C
134 261.84 496 517.83 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 113 275 463 531 350 256 140 260.83 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig53.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig53.ps)
%%CreationDate: (4/20/95) (7:31 AM)
%%BoundingBox: 113 275 463 531
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 107.5 239.5 504.5 552.5
%AI3_TemplateFile: hammer510::1945:t-53
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
383 304 m
383 309 l
S
164.75 520.875 m
158.75 520.875 l
158.75 304 l
446.25 304 l
446.25 309 l
S
319 304 m
319 309 l
S
191.5 304 m
191.5 309 l
S
164.75 412.75 m
158.75 412.75 l
S
0 To
1 0 0 1 154.75 518.5 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(10) Tx 
4 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
1 0 0 1 154.75 409 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
1 0 0 1 154.75 300.75 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
1 0 0 1 158.25 291 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
1 0 0 1 191.5 291 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
1 0 0 1 318.75 291 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(0) Tx 
(\r) TX 
TO
0 To
1 0 0 1 382.75 291 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 447.25 291 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.75 277 0 Tp
TP
-80.4606 0 Td
0 Tr
0 Ts
(Mean time to recover from transient fault, hr) Tx 
(\r) TX 
TO
0 To
1 0 0 1 126.75 410.5 0 Tp
TP
-3.999 0 Td
0 Tr
/_Times-Italic 9 Tf
(P) Tx 
-4 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
256 304 m
256 309 l
S
0 To
1 0 0 1 255.75 291 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
(10) Tx 
4 Ts
(\320\62) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
223.5 304 m
223.5 309 l
S
0 To
1 0 0 1 223.5 291 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(\320\63) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
414 304 m
414 309 l
S
350 304 m
350 309 l
S
0 To
1 0 0 1 349.75 291 0 Tp
TP
-6.75 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 413.75 291 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(3) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
287 304 m
287 309 l
S
0 To
1 0 0 1 286.75 291 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(\320\61) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
191.5 392.5 m
255.5 392.5 l
287 400.5 l
318 438 l
353 491.5 l
385 502.5 l
445.5 502.5 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 250.84 543 517.83 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 106
%%Page: "101" 107
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(101) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(SPACE = \050NW: 0..N,            \050* Number of working processors *\051) 87 719.5 T
(NFP: 0..N,                    \050* Active procs. with permanent faults *\051) 87 707.66 T
(NFT: 0..N\051;                   \050* Active procs. with transient faults *\051) 87 695.81 T
(START = \050N, 0, 0\051;) 87 678.97 T
(DEATHIF NFP+NFT >= NW;  \050* Majority of active processors failed *\051) 87 667.13 T
(IF NW>0 THEN) 87 650.28 T
(   TRANTO NW = NW-1, NFP = NFP+1 BY NW*LAMBDA; \050* Permanent fault arrival *\051) 87 638.44 T
(   TRANTO NW = NW-1, NFT= NFT+1 BY NW*GAMMA;   \050* Transient fault arrival *\051) 87 626.59 T
(ENDIF;) 87 609.75 T
(IF NFT > 0 THEN) 87 592.91 T
-0.36 (   TRANTO NFP = NFP+1, NFT = NFT-1 BY NFT*LAMBDA;  \050* transient -> permanent *\051) 87 581.07 P
(   TRANTO NW=NW+1, NFT = NFT-1 BY FAST 1/FLUSHTIME;) 87 569.22 T
(      \050* Transient fault disappearance *\051) 87 557.38 T
(ENDIF;) 87 545.53 T
3 11 Q
0.37 (The model has two) 105 527.86 P
7 F
0.89 (TRANTO) 193.25 527.86 P
3 F
0.37 ( rules that generate fault-arrival transitions\321one) 232.85 527.86 P
7 F
0.89 (TRANTO) 451.96 527.86 P
3 F
0.37 ( rule gener-) 491.56 527.86 P
1.39 (ates permanent fault-arrival transitions and one) 87 514.86 P
7 F
3.34 (TRANTO) 305.53 514.86 P
3 F
1.39 ( rule generates transient fault-arrival transi-) 345.13 514.86 P
-0.06 (tions.  Another) 87 501.86 P
7 F
-0.15 (TRANTO) 155.26 501.86 P
3 F
-0.06 ( rule generates transitions corresponding to flushing of the effects of a transient) 194.86 501.86 P
-0.07 (fault. Note that  this rule increments) 87 488.86 P
7 F
-0.17 (NW) 247.81 488.86 P
3 F
-0.07 (, as well as decrementing) 261.01 488.86 P
7 F
-0.17 (NFT) 374.29 488.86 P
3 F
-0.07 (. Another) 394.09 488.86 P
7 F
-0.17 (TRANTO) 438.24 488.86 P
3 F
-0.07 (rule covers  a) 484.27 488.86 P
0.07 (transiently faulted processor that fails permanently.  A processor that has been upset by a transient phe-) 87 475.86 P
0.03 (nomena is not immune to a permanent failure. The) 87 462.86 P
7 F
0.06 (DEATHIF) 312.71 462.86 P
3 F
0.03 ( statement sums the number of transiently) 358.91 462.86 P
(and permanently faulted processors and the result is compared with the number of working processors.) 87 449.86 T
-0.02 (The probability of system failure as a function of) 105 430.76 P
6 F
-0.02 (r) 323.23 430.76 P
3 F
-0.02 ( \050) 329.27 430.76 P
7 F
-0.06 (1/FLUSHTIME) 335.66 430.76 P
3 F
-0.02 (\051 is given for the) 408.26 430.76 P
7 F
-0.06 (N) 483.6 430.76 P
-0.06 (=) 496.8 430.76 P
-0.06 (3,) 510 430.76 P
-0.06 (5,) 529.8 430.76 P
(and) 87 417.76 T
(7) 113.4 417.76 T
3 F
( processor configurations in figure 54.) 120 417.76 T
(Note that the inflection point of the curve does not vary significantly with variation in) 105 69.67 T
7 F
(N) 485.38 69.67 T
3 F
(.) 491.98 69.67 T
3 9 Q
(Figure 54.  Probability of failure as function of) 225.91 104.09 T
6 F
(r) 396.89 104.09 T
3 F
(.) 401.84 104.09 T
87 110.09 543 396.1 C
134 121.09 496 396.1 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 116 270 466 542 350 272 140 122.1 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig54.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig54.ps)
%%CreationDate: (4/20/95) (7:38 AM)
%%BoundingBox: 116 270 466 542
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 103 255.5 509 536.5
%AI3_TemplateFile: hammer510::1945:t-54
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
391 300.5 m
391 305.5 l
S
167.75 517.375 m
161.75 517.375 l
161.75 300.5 l
449.25 300.5 l
449.25 305.5 l
S
333 300.5 m
333 305.5 l
S
167.75 425.25 m
161.75 425.25 l
S
0 To
1 0 0 1 157.75 515 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(10) Tx 
4 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
1 0 0 1 157.75 421.5 0 Tp
TP
-18 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\66) Tx 
(\r) TX 
TO
0 To
1 0 0 1 157.75 297.25 0 Tp
TP
-22.5 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
1 0 0 1 161.25 287.5 0 Tp
TP
-9 0 Td
0 Tr
0 Ts
1 Ta
(10) Tx 
4 Ts
(\320\61) Tx 
(\r) TX 
TO
0 To
1 0 0 1 332.75 287.5 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 390.75 287.5 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 450.25 287.5 0 Tp
TP
-6.75 0 Td
0 Tr
0 Ts
(10) Tx 
4 Ts
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 304.75 273.5 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(r) Tx 
(\r) TX 
TO
0 To
1 0 0 1 129.75 407 0 Tp
TP
-3.999 0 Td
0 Tr
/_Times-Italic 9 Tf
(P) Tx 
-4 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
276 300.5 m
276 305.5 l
S
0 To
1 0 0 1 275.75 287.5 0 Tp
TP
-6.75 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
(10) Tx 
4 Ts
(1) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
219 300.5 m
219 305.5 l
S
0 To
1 0 0 1 219 287.5 0 Tp
TP
-6.75 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
167.75 456.25 m
161.75 456.25 l
S
0 To
1 0 0 1 157.75 452.5 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
2 Ta
(10) Tx 
4 Ts
(\320\65) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
167.75 486.75 m
161.75 486.75 l
S
0 To
1 0 0 1 157.75 483 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(\320\64) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
167.75 394.75 m
161.75 394.75 l
S
0 To
1 0 0 1 157.75 391 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(\320\67) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
167.75 363.25 m
161.75 363.25 l
S
0 To
1 0 0 1 157.75 359.5 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(\3208) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
167.75 331.75 m
161.75 331.75 l
S
0 To
1 0 0 1 157.75 328 0 Tp
TP
-18 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(10) Tx 
4 Ts
(\3209) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
162 500 m
219.5 485 l
277 473 l
333 471.5 l
391.5 471.5 l
448 471.5 l
S
162 453.5 m
219 425 l
276 399 l
332.5 395.5 l
391.5 394 l
448.5 394 l
S
162.5 409 m
218 366 l
277 325 l
333 319 l
447.5 319 l
S
u
0 O
1 g
224.0962 486.6464 m
219.1464 491.5962 L
214.1967 486.6464 L
219.1464 481.6967 L
224.0962 486.6464 L
b
219.1464 486.6464 m
B
U
u
167.0962 501.1464 m
162.1464 506.0962 L
157.1967 501.1464 L
162.1464 496.1967 L
167.0962 501.1464 L
b
162.1464 501.1464 m
B
U
u
281.8462 474.1464 m
276.8964 479.0962 L
271.9467 474.1464 L
276.8964 469.1967 L
281.8462 474.1464 L
b
276.8964 474.1464 m
B
U
u
338.5962 472.3964 m
333.6464 477.3462 L
328.6967 472.3964 L
333.6464 467.4467 L
338.5962 472.3964 L
b
333.6464 472.3964 m
B
U
u
396.0962 472.1464 m
391.1464 477.0962 L
386.1967 472.1464 L
391.1464 467.1967 L
396.0962 472.1464 L
b
391.1464 472.1464 m
B
U
u
453.5962 472.1464 m
448.6464 477.0962 L
443.6967 472.1464 L
448.6464 467.1967 L
453.5962 472.1464 L
b
448.6464 472.1464 m
B
U
u
161.75 457 m
161.75 449.5 l
S
157.875 453.5 m
165.375 453.5 l
S
U
u
219.25 427.25 m
219.25 419.75 l
S
215.375 423.75 m
222.875 423.75 l
S
U
u
276.5 402.5 m
276.5 395 l
S
272.625 399 m
280.125 399 l
S
U
u
333.25 398.75 m
333.25 391.25 l
S
329.375 395.25 m
336.875 395.25 l
S
U
u
391.25 397.75 m
391.25 390.25 l
S
387.375 394.25 m
394.875 394.25 l
S
U
u
449 397.5 m
449 390 l
S
445.125 394 m
452.625 394 l
S
U
u
0 O
1 g
222.6161 370.5303 m
215.6161 370.5303 L
215.6161 363.5303 L
222.6161 363.5303 L
222.6161 370.5303 L
b
219.1161 367.0303 m
B
U
u
165.3661 412.5303 m
158.3661 412.5303 L
158.3661 405.5303 L
165.3661 405.5303 L
165.3661 412.5303 L
b
161.8661 409.0303 m
B
U
u
280.3661 329.2803 m
273.3661 329.2803 L
273.3661 322.2803 L
280.3661 322.2803 L
280.3661 329.2803 L
b
276.8661 325.7803 m
B
U
u
336.3661 323.5303 m
329.3661 323.5303 L
329.3661 316.5303 L
336.3661 316.5303 L
336.3661 323.5303 L
b
332.8661 320.0303 m
B
U
u
394.3661 323.0303 m
387.3661 323.0303 L
387.3661 316.0303 L
394.3661 316.0303 L
394.3661 323.0303 L
b
390.8661 319.5303 m
B
U
u
451.8661 323.0303 m
444.8661 323.0303 L
444.8661 316.0303 L
451.8661 316.0303 L
451.8661 323.0303 L
b
448.3661 319.5303 m
B
U
u
418.0962 525.6464 m
413.1464 530.5962 L
408.1967 525.6464 L
413.1464 520.6967 L
418.0962 525.6464 L
b
413.1464 525.6464 m
B
U
u
413.25 516.25 m
413.25 508.75 l
S
409.375 512.75 m
416.875 512.75 l
S
U
u
0 O
1 g
416.6161 503.5303 m
409.6161 503.5303 L
409.6161 496.5303 L
416.6161 496.5303 L
416.6161 503.5303 L
b
413.1161 500.0303 m
B
U
0 To
1 0 0 1 430.75 522.75 0 Tp
TP
0 Tr
0 g
1 w
0 Ts
0 Ta
13 0 Tl
(3\r) Tx 
T*
(5\r) Tx 
T*
(7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 432.25 533.75 0 Tp
TP
-3.2487 0 Td
0 Tr
1 Ta
(N) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 110.09 543 396.1 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 107
%%Page: "102" 108
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(102) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15.3. Degradable Quadraplex Subject to T) 105 713 T
(ransient and Permanent Faults) 293.52 713 T
3 11 Q
1.79 (Because transient faults tend to occur at a faster rate than permanent faults, many systems are) 105 695.11 P
0.3 (designed to tolerate transient faults that disappear after a short amount of time.  Because fewer proces-) 87 682.11 P
0.58 (sors are needlessly reconfigured, this design can significantly reduce the number of spare components) 87 669.11 P
-0.05 (needed.  However, the operating system must be able to distinguish between transient faults and perma-) 87 656.11 P
-0.12 (nent faults. Typically, a simple algorithm is used by the operating system to distinguish the two types of) 87 643.11 P
0.74 (faults.  Because this algorithm is not foolproof, a transition in the model that represents the operating) 87 630.11 P
(system incorrectly reconfiguring in the presence of a transient fault must be included.) 87 617.11 T
0.7 (In the SIFT system, significant consideration was given to this problem.  The operating system is) 105 598.05 P
0.89 (faced with conflicting goals.  If the fault is permanent, the system needs to reconfigure as quickly as) 87 585.05 P
0.24 (possible.  If the fault is transient, then the system should not reconfigure.  Typically, the operating sys-) 87 572.05 P
-0.03 (tem delays the reconfiguration process temporarily to see  whether the fault will disappear.  Clearly, the) 87 559.05 P
-0.07 (amount of time the operating system delays has a significant impact on system reliability because of the) 87 546.05 P
0.47 (susceptibility to near-coincident faults.  Only a minimal amount of information resides in the dynamic) 87 533.05 P
0.02 (\050volatile\051 portions of system memory.  The schedule table in SIFT is static, so it could be stored in non-) 87 520.05 P
(volatile read-only memory \050ROM\051. The program code can also be stored in ROM.) 87 507.05 T
(     The ASSIST input file for a SIFT-like system that starts with four processors is) 105 487.99 T
7 9 Q
(NP = 4;                   \050* Number of processors *\051) 87 470.27 T
(LAMBDA = 1E-4;            \050* Permanent fault arrival rate *\051) 87 459.21 T
(GAMMA = 10*LAMBDA;        \050* Transient fault arrival rate *\051) 87 448.15 T
(MU = 1E-4;                \050* Mean permanent fault reconfiguration time *\051) 87 437.09 T
(STD = 2E-4;               \050* Standard dev. of permanent fault reconfig. *\051) 87 426.03 T
(MU_REC = 7.4E-5;          \050* Cond. mean reconfiguration time for transient fault *\051) 87 409.97 T
-0.17 (STD_REC = 8.5E-5;         \050* Cond. standard deviation of transient reconfiguration *\051) 87 398.91 P
(P_REC = .10;              \050* Probability system reconfigures out a transient *\051) 87 387.85 T
("ISVP = 1E-2;"            \050* Period of system rewrite of internal state *\051) 87 376.79 T
-0.14 ("MU_DISAPPEAR = ISVP/2;"             \050* Cond. mean time to transient disappearance *\051) 87 365.74 P
("STD_DISAPPEAR = ISVP/\0502*SQRT\0503\051\051;"  \050* Cond. stan. dev. of disappearance time *\051) 87 354.68 T
(SPACE = \050NW: 0..NP,            \050* Number of working processors *\051) 87 338.62 T
(         NFP: 0..NP,           \050* Active procs. with permanent faults *\051) 87 327.56 T
(         NFT: 0..NP\051;          \050* Active procs. with transient faults *\051) 87 316.5 T
(START = \050NP, 0, 0\051;) 87 305.44 T
(DEATHIF NFP+NFT >= NW;  \050* Majority of active processors failed *\051) 87 288.38 T
(IF NW>0 THEN) 87 271.32 T
(   TRANTO \050NW-1, NFP+1, NFT\051 BY NW*LAMBDA; \050* Permanent fault arrival *\051) 87 260.27 T
(   TRANTO \050NW-1, NFP, NFT+1\051 BY NW*GAMMA;  \050* Transient fault arrival *\051) 87 249.21 T
(ENDIF;) 87 238.15 T
(IF NFT > 0 THEN) 87 221.09 T
(   TRANTO \050NW+1, NFP, NFT-1\051 BY <MU_DISAPPEAR,STD_DISAPPEAR,1-P_REC> ;) 87 210.03 T
(      \050* Transient fault disappearance *\051) 87 198.97 T
(   TRANTO NFT = NFT-1 BY <MU_REC, STD_REC,P_REC>;) 87 187.91 T
(      \050* Transient fault reconfiguration *\051) 87 176.85 T
(ENDIF;) 87 165.79 T
(IF NFP > 0 TRANTO NFP = NFP-1 BY <MU,STD>;) 87 148.73 T
(   \050* Permanent fault reconfiguration *\051) 87 137.68 T
3 11 Q
-0.12 (In this model, the system does not collapse a triad to a simplex. Instead, the triad degrades to a dual.) 105 119.28 P
4 10.5 Q
(15.4. NMR W) 105 94.56 T
(ith Imperfect Recovery Fr) 166.63 94.56 T
(om T) 283.94 94.56 T
(ransient Faults) 306.79 94.56 T
3 11 Q
0.57 (If a system is not designed with a foolproof capability of removing the effects of a transient fault,) 105 76.67 P
0.09 (the fraction of transient faults) 87 63.67 P
7 F
0.23 (R) 220.36 63.67 P
3 F
0.09 ( that are recoverable must be measured.  The effect of a nonrecoverable) 226.96 63.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 108
%%Page: "103" 109
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(103) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.47 (transient fault is the same as a permanent fault. Therefore, this situation can be modeled by increasing) 87 718.67 P
1.08 (the permanent failure rate by \0501) 87 705.67 P
6 F
1.08 (-) 235.19 705.67 P
7 F
2.58 (R) 245.05 705.67 P
3 F
1.08 (\051 times the transient fault rate for each working processor in the) 251.65 705.67 P
(system.) 87 692.67 T
(An ASSIST model for this situation is) 105 673.3 T
7 9.75 Q
(INPUT NP;                 \050* Number of processors *\051) 87 654.77 T
(LAMBDA = 1E-4;            \050* Permanent fault arrival rate *\051) 87 642.66 T
(GAMMA = 10*LAMBDA;        \050* Transient fault arrival rate *\051) 87 630.54 T
(RHO = 1E2;) 87 618.43 T
("R = 0 TO+ 1 BY 0.05;") 87 606.32 T
(SPACE = \050NW: 0..NP,            \050* Number of working processors *\051) 87 589.2 T
(         NFP: 0..NP,           \050* Active procs. with permanent faults *\051) 87 577.09 T
(         NFT: 0..NP\051;          \050* Active procs. with transient faults *\051) 87 564.98 T
(START = \050NP, 0, 0\051;) 87 552.86 T
(DEATHIF NFP+NFT >= NW;  \050* Majority of active processors failed *\051) 87 535.75 T
(IF NW>0 THEN) 87 518.63 T
(    TRANTO \050NW-1, NFP+1, NFT\051 BY NW*LAMBDA + NW*\0501-R\051*GAMMA;) 87 506.52 T
(    TRANTO \050NW-1, NFP, NFT+1\051 BY NW*R*GAMMA;) 87 494.41 T
(ENDIF;) 87 482.29 T
(IF NFT > 0 THEN) 87 465.18 T
(   TRANTO \050NW+1, NFP, NFT-1\051 BY FAST RHO; \050* Transient fault disappearance *\051) 87 453.07 T
(   TRANTO \050NW,NFP+1,NFT-1\051 BY NFT*LAMBDA; \050* Transient -> permanent *\051) 87 440.95 T
(ENDIF;) 87 428.84 T
3 11 Q
0.37 ( The four-processor case is shown in figure 55. Figure 56  shows the probability of system failure.) 105 410.89 P
-0.02 (The effect becomes even more dramatic as the number of processors is increased as shown in figure 57.) 87 397.89 P
4 10.5 Q
(15.5. Degradable NMR W) 105 126.86 T
(ith Perfect T) 221.17 126.86 T
(ransient Fault Recovery) 276.96 126.86 T
3 11 Q
0.45 (In this section, some problems with modeling degradable NMR systems that are subject to perma-) 105 108.67 P
-0.03 (nent and transient faults are explored. The major problem is that many different situations with compet-) 87 95.67 P
0.58 (ing recoveries are possible. To simplify the discussion, 100 percent of the errors produced by a single) 87 82.67 P
1.95 (transient fault are assumed to be flushed by the operating system) 87 69.67 P
7 F
4.69 (R) 395.98 69.67 P
4.69 (=) 409.18 69.67 P
4.69 (1) 422.38 69.67 P
3 F
1.95 (. Each situation involves) 428.98 69.67 P
3 9 Q
(Figure 55.  Markov model of imperfect transient recovery.) 209.77 159.23 T
147.25 165.23 482.75 370.22 C
212.5 176.23 417.5 370.22 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 198 475 391 755 193 280 218.5 176.23 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig55.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig55.ps)
%%CreationDate: (4/20/95) (7:45 AM)
%%BoundingBox: 198 475 391 755
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 210.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
210.25 641.3598 m
215.3267 641.3598 219.4424 645.4756 219.4424 650.5523 c
219.4424 655.6289 215.3267 659.7447 210.25 659.7447 c
205.1733 659.7447 201.0576 655.6289 201.0576 650.5523 c
201.0576 645.4756 205.1733 641.3598 210.25 641.3598 c
s
210.25 650.5523 m
S
U
219.25 650.5523 m
281.75 650.5523 l
S
u
294.25 641.3598 m
299.3267 641.3598 303.4424 645.4756 303.4424 650.5523 c
303.4424 655.6289 299.3267 659.7447 294.25 659.7447 c
289.1733 659.7447 285.0576 655.6289 285.0576 650.5523 c
285.0576 645.4756 289.1733 641.3598 294.25 641.3598 c
s
294.25 650.5523 m
S
U
0 To
1 0 0 1 294.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 251.25 657.0523 0 Tp
TP
-8.7187 0 Td
0 Tr
(4) Tx 
/_Times-Italic 9 Tf
(R) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(t) Tx 
(\r) TX 
TO
u
285.0088 650.5523 m
278.4575 649.0088 l
279.8638 650.5523 L
278.4575 652.0957 l
285.0088 650.5523 L
f
U
0 R
0 G
0.75 w
303.75 650.5523 m
366.25 650.5523 l
S
u
378.75 641.3598 m
383.8267 641.3598 387.9424 645.4756 387.9424 650.5523 c
387.9424 655.6289 383.8267 659.7447 378.75 659.7447 c
373.6733 659.7447 369.5576 655.6289 369.5576 650.5523 c
369.5576 645.4756 373.6733 641.3598 378.75 641.3598 c
s
378.75 650.5523 m
S
U
0 To
1 0 0 1 378.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
(3) Tx 
(\r) TX 
TO
u
369.5088 650.5523 m
362.9575 649.0088 l
364.3638 650.5523 L
362.9575 652.0957 l
369.5088 650.5523 L
f
U
u
0 R
0 G
0.75 w
210.25 559.3598 m
215.3267 559.3598 219.4424 563.4756 219.4424 568.5523 c
219.4424 573.6289 215.3267 577.7447 210.25 577.7447 c
205.1733 577.7447 201.0576 573.6289 201.0576 568.5523 c
201.0576 563.4756 205.1733 559.3598 210.25 559.3598 c
s
210.25 568.5523 m
S
U
0 To
1 0 0 1 210.25 565.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(4) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
210.5 641.3023 m
210.5 581.4273 l
S
u
0 O
0 g
1 w
210.5 578.1685 m
208.9565 584.7198 l
210.5 583.3135 L
212.0435 584.7198 l
210.5 578.1685 L
f
U
0 To
1 0 0 1 332 657.0523 0 Tp
TP
-17.7275 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(t) Tx 
/_Times-Roman 9 Tf
0 Ts
( + 3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
(\r) TX 
TO
0 To
1 0 0 1 276.75 583.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
(\r) TX 
TO
0 To
1 0 0 1 251.25 638.5523 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
0 Ts
(r) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
210.5 559.3023 m
210.5 499.4273 l
S
u
0 O
0 g
1 w
210.5 496.1685 m
208.9565 502.7198 l
210.5 501.3135 L
212.0435 502.7198 l
210.5 496.1685 L
f
U
u
0 R
0 G
0.75 w
210.25 478.1098 m
215.3267 478.1098 219.4424 482.2256 219.4424 487.3023 c
219.4424 492.3789 215.3267 496.4947 210.25 496.4947 c
205.1733 496.4947 201.0576 492.3789 201.0576 487.3023 c
201.0576 482.2256 205.1733 478.1098 210.25 478.1098 c
s
210.25 487.3023 m
S
U
0 To
1 0 0 1 210.25 483.8023 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(5) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
223.3018 567.8219 m
259.2904 573.3154 288.0404 601.5673 293.5683 637.4991 c
294.0683 640.7491 294.125 641.375 y
S
210.5 651 m
S
u
0 O
0 g
1 w
219.4135 567.3632 m
225.6927 569.7866 l
224.5103 568.0656 L
226.1141 566.7286 l
219.4135 567.3632 L
f
U
0 R
0 G
0.75 w
218.9358 642.3641 m
228.5931 637.8304 239.3757 635.2967 250.75 635.2967 c
263.9976 635.2967 276.4426 638.7337 287.2419 644.7646 c
S
u
0 O
0 g
1 w
216.3266 643.6066 m
222.9489 642.4036 l
221.0429 641.5506 L
221.7153 639.5739 l
216.3266 643.6066 L
f
U
0 To
1 0 0 1 232 529.3023 0 Tp
TP
-17.7275 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
/_Times-Roman 9 Tf
0 Ts
( + 3) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(t) Tx 
(\r) TX 
TO
0 To
1 0 0 1 242.25 609.8023 0 Tp
TP
-30.2212 0 Td
0 Tr
/_Times-Roman 9 Tf
0 Ts
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(p) Tx 
/_Times-Roman 9 Tf
0 Ts
( + 4\(1 \320 ) Tx 
/_Times-Italic 9 Tf
(R) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
/_Symbol 9 Tf
(l) Tx 
/_Times-Italic 9 Tf
-4 Ts
(t) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
147.25 165.23 482.75 370.22 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 109
%%Page: "104" 110
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(104) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.65 (different parameters, which must be experimentally measured. To illustrate the problem, a degradable) 87 497.67 P
(6-plex will first be considered.  If the model in section 15.3 is modified by changing the first line to) 87 484.67 T
7 9.75 Q
(NP = 6;) 105 465.02 T
3 11 Q
(the SURE program will object with the following message:) 87 445.95 T
7 9.75 Q
(*** ERROR: SUM OF EXITING PROBABILITIES IS NOT 1 AT 12) 105 427.3 T
3 11 Q
(When the generated model is examined, five transitions are found at state \05012\051:) 105 408.24 T
7 9.75 Q
(48:    12\050* 3,1,1 *\051,    1\050* 2,2,1 *\051 = 3*LAMBDA;) 87 388.58 T
(49:    12\050* 3,1,1 *\051,    1\050* 2,1,2 *\051 = 3*GAMMA;) 87 375.35 T
(50:    12\050* 3,1,1 *\051,    9\050* 4,1,0 *\051 = <MU_DISAPPEAR,STD_DISAPPEAR,1-P_REC>;) 87 362.12 T
(51:    12\050* 3,1,1 *\051,   15\050* 3,1,0 *\051 = <MU_REC,STD_REC,P_REC>;) 87 348.88 T
(52:    12\050* 3,1,1 *\051,   16\050* 3,0,1 *\051 = <MU,STD>;) 87 335.65 T
3 11 Q
0.15 (Three of the five transitions are competing recoveries.  This competition occurs because two active) 105 315.58 P
(faults exist at state \05012\051\321one transient and one permanent.  The three possible outcomes are) 87 302.58 T
(1.) 105 282.1 T
(The permanent fault is reconfigured.) 117 282.1 T
(2.) 105 261.62 T
(The transient fault is reconfigured.) 117 261.62 T
(3.) 105 241.13 T
(The transient fault disappears.) 117 241.13 T
0.82 (The ASSIST model was originally constructed for a quadraplex system where any state with two) 105 220.65 P
0.41 (active faults would be a death state.  However, higher levels of redundancy result in more complexity.) 87 207.65 P
-0.22 (There are several  solutions to this problem.  Unfortunately, the more satisfactory models are more com-) 87 194.65 P
(plex.  We will begin will the simplest model.) 87 181.65 T
0.64 (The simplest solution to the problem is to make all states with two active faults death states. This) 105 161.16 P
0.96 (method is used by programs that are based on the critical-pair approach such as found in CARE and) 87 148.16 P
(HARP \050refs. 16 and 28\051. This method can be used with ASSIST by changing the) 87 135.16 T
7 9.75 Q
(DEATHIF NFT + NFP >= 2;) 105 115.52 T
3 11 Q
0.71 (Although this change results in a conservative answer, the solution is not satisfactory because the) 105 96.45 P
0.34 (model simply ignores all additional redundancy.  Overly conservative results can be obtained with this) 87 83.45 P
(technique.) 87 70.45 T
3 9 Q
(Figure 56.  Probability of system failure as function of) 91.46 541 T
7 11 Q
(R) 289.69 541 T
3 9 Q
(.) 296.29 541 T
-0.14 (Figure 57.  Probability of system failure as function of) 327 541 P
7 11 Q
-0.42 (R) 523.8 541 P
3 9 Q
-0.14 ( for) 530.4 541 P
(5MR and 7MR) 336 530 T
87 547 303 726 C
87 558 303 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 185 318 419 483 234 165 78 558 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig56.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig56.ps)
%%CreationDate: (8/1/95) (9:33 AM)
%%BoundingBox: 185 318 419 483
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.735 w 4 M []0 d
%AI3_Note:
0 D
368.7928 342.0442 m
368.7928 344.9842 l
S
232.2783 472.3602 m
228.7503 472.3602 l
228.7503 342.0442 l
403.0439 342.0442 l
403.0439 344.9842 l
S
333.5618 342.0442 m
333.5618 344.9842 l
S
298.2328 342.0442 m
298.2328 344.9842 l
S
264.1773 342.0442 m
264.1773 344.9842 l
S
232.2783 407.3616 m
228.7503 407.3616 l
S
0 To
0.588 0 0 0.588 226.3982 470.9636 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
0.98 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\63) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 226.3982 404.8626 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 226.3982 340.1332 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 228.4563 331.4601 0 Tp
TP
-3.75 0 Td
0 Tr
0 Ts
1 Ta
(0) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 263.8833 331.4601 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.2) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 298.0858 331.4601 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.4) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 333.5618 331.4601 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.6) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 368.6458 331.4601 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.8) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 403.6319 331.4601 0 Tp
TP
-9.3749 0 Td
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 315.7746 320.7781 0 Tp
TP
-4.4988 0 Td
0 Tr
/_Courier 14.9998 Tf
(R) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 197.9292 406.0384 0 Tp
TP
-6.6649 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.735 w
228.7008 464.6044 m
276.9656 456.5195 308.5704 448.4345 v
340.1753 440.3495 358.5502 431.7746 y
371.5352 425.4046 l
383.2951 417.3196 l
390.6451 411.4397 l
403.385 395.2697 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 547 303 726 C
0 0 612 792 C
327 547 543 726 C
327 559.5 543 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 176 318 409 484 229 166 322.5 559.5 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig57.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig57.ps)
%%CreationDate: (8/1/95) (9:33 AM)
%%BoundingBox: 176 318 409 484
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.735 w 4 M []0 d
%AI3_Note:
0 D
359.2928 342.2392 m
359.2928 345.1792 l
S
222.7783 473.5352 m
219.2503 473.5352 l
219.2503 342.2392 l
393.5439 342.2392 l
393.5439 345.1792 l
S
324.0618 342.2392 m
324.0618 345.1792 l
S
288.7327 342.2392 m
288.7327 345.1792 l
S
254.6773 342.2392 m
254.6773 345.1792 l
S
222.7783 407.5566 m
219.2503 407.5566 l
S
0 To
0.588 0 0 0.588 216.8982 472.1386 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
0.98 w
/_Times-Roman 14.9998 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
2 Ta
0 Tq
14.9998 0 Tl
0 Tc
0 Tw
(10) Tx 
6.6666 Ts
(\320\64) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 216.8982 405.0576 0 Tp
TP
-29.9996 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\67) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 216.8982 340.3282 0 Tp
TP
-37.4995 0 Td
0 Tr
0 Ts
(10) Tx 
6.6666 Ts
(\320\61\60) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 218.9563 331.6551 0 Tp
TP
-3.75 0 Td
0 Tr
0 Ts
1 Ta
(0) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 254.3833 331.6551 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.2) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 288.5857 331.6551 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.4) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 324.0618 331.6551 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.6) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 359.1458 331.6551 0 Tp
TP
-9.3749 0 Td
0 Tr
(0.8) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 394.1319 331.6551 0 Tp
TP
-9.3749 0 Td
0 Tr
(1.0) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 306.2746 320.9731 0 Tp
TP
-4.4988 0 Td
0 Tr
/_Courier 14.9998 Tf
(R) Tx 
(\r) TX 
TO
0 To
0.588 0 0 0.588 189.4092 406.2334 0 Tp
TP
-6.6649 0 Td
0 Tr
/_Times-Italic 14.9998 Tf
(P) Tx 
-6.6666 Ts
(f) Tx 
(\r) TX 
TO
0 R
0 G
0.735 w
222.7783 429.8515 m
219.2503 429.8515 l
S
0 To
0.588 0 0 0.588 216.8982 427.3525 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
0.98 w
/_Times-Roman 14.9998 Tf
0 Ts
2 Ta
(10) Tx 
6.6666 Ts
(\320\66) Tx 
(\r) TX 
TO
0 R
0 G
0.735 w
222.7783 452.3914 m
219.2503 452.3914 l
S
0 To
0.588 0 0 0.588 216.8982 449.8924 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
0.98 w
0 Ts
(10) Tx 
6.6666 Ts
(\320\65) Tx 
(\r) TX 
TO
0 R
0 G
0.735 w
222.7783 386.9767 m
219.2503 386.9767 l
S
0 To
0.588 0 0 0.588 216.8982 384.4777 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
0.98 w
0 Ts
(10) Tx 
6.6666 Ts
(\3208) Tx 
(\r) TX 
TO
0 R
0 G
0.735 w
222.7783 364.9268 m
219.2503 364.9268 l
S
0 To
0.588 0 0 0.588 216.8982 362.4278 0 Tp
TP
-29.9996 0 Td
0 Tr
0 O
0 g
0.98 w
0 Ts
(10) Tx 
6.6666 Ts
(\3209) Tx 
(\r) TX 
TO
0 R
0 G
0.735 w
219.2008 454.5095 m
277.0205 449.8545 312.7904 442.0145 v
348.5602 434.1746 373.5501 429.2746 392.66 409.6747 c
S
[2.94 2.94 ]0 d
219.2008 423.6396 m
273.3455 417.2696 315.9754 403.5497 v
358.6052 389.8298 377.4701 379.5398 393.885 355.7749 c
S
[]0 d
328.7153 462.3494 m
349.2952 462.3494 l
S
[2.94 2.94 ]0 d
328.7153 449.3645 m
349.2952 449.3645 l
S
0 To
0.98 0 0 0.98 354.1952 459.1645 0 Tp
TP
0 Tr
0 O
0 g
0.98 w []0 d
/_Times-Roman 8.9997 Tf
0 Ts
0 Ta
13 0 Tl
(5MR\r) Tx 
T*
(7MR) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
327 547 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 110
%%Page: "105" 111
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(105) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.03 (A second solution to the problem is to model all recovery transitions with exponential distributions.) 105 718.67 P
-0.14 (The SURE program automatically determines all conditional parameters when this method is used.  The) 87 705.67 P
(model  is) 87 692.67 T
7 9.75 Q
(NP = 6;                        \050* Number of processors *\051) 87 674.19 T
(LAMBDA = 1E-4;                 \050* Permanent fault arrival rate *\051) 87 662.12 T
(GAMMA = 10*LAMBDA;             \050* Transient fault arrival rate *\051) 87 650.06 T
(W = .5;                        \050* Transient fault disappearance rate *\051) 87 637.99 T
(DELTA = 3.6E3;                 \050* Reconfiguration rate *\051) 87 625.93 T
(SPACE = \050NW: 0..NP,            \050* Number of working processors *\051) 87 608.87 T
(         NFP: 0..NP,           \050* Active procs. with permanent faults *\051) 87 596.8 T
(         NFT: 0..NP\051;          \050* Active procs. with transient faults *\051) 87 584.74 T
(START = \050NP, 0, 0\051;) 87 572.67 T
(DEATHIF NFP+NFT >= NW;  \050* Majority of active processors failed *\051) 87 555.61 T
(IF NW>0 THEN) 87 538.55 T
(   TRANTO \050NW-1, NFP+1, NFT\051 BY NW*LAMBDA; \050* Permanent fault arrival *\051) 87 526.48 T
(   TRANTO \050NW-1, NFP, NFT+1\051 BY NW*GAMMA;  \050* Transient fault arrival *\051) 87 514.42 T
(ENDIF;) 87 502.36 T
(IF NFT > 0 THEN) 87 485.29 T
(   TRANTO \050NW+1, NFP, NFT-1\051 BY FAST W;   \050* Transient fault disappearance *\051) 87 473.23 T
-0.32 (   TRANTO NFT = NFT-1 BY FAST DELTA;      \050* Transient fault reconfiguration *\051) 87 461.16 P
(ENDIF;) 87 449.1 T
-0.41 (IF NFP > 0 TRANTO NFP = NFP-1 BY FAST DELTA; \050* Permanent f. reconfiguration *\051) 87 431.04 P
3 11 Q
0.33 (This model will work for arbitrary values of) 87 413.14 P
7 F
0.79 (NP) 286.39 413.14 P
3 F
0.33 (.  Unfortunately, this model makes the assumption that) 299.59 413.14 P
(all  recovery distributions are exponentially distributed.) 87 400.14 T
0.2 (The most accurate way to model such systems is to use general recovery distributions.  This model) 105 381.83 P
1.03 (necessitates analysis of each situation where multiple competing recoveries occur.  For a 5-plex or a) 87 368.83 P
(6-) 87 355.83 T
(plex, the following operational states with two active faults exist:) 96.16 355.83 T
0 1 0 0 1 0 1 K
0 0 0 1 0 0 0 K
(1.) 105 336.51 T
(Two permanent faults) 117 336.51 T
(2.) 105 317.2 T
(Two transient faults) 117 317.2 T
(3.) 105 297.88 T
( One transient and  one permanent fault) 117 297.88 T
(The conditional moments for each case must be measured experimentally.) 87 278.57 T
8 10.5 Q
( 15.5.1. T) 105 255.09 T
(wo permanent faults in one state.) 145.15 255.09 T
3 11 Q
0.68 (Because two active permanent faults exist in a state, the) 291.3 255.09 P
0.23 (mean and the standard deviation of the time until the first recovery occurs must be measured.  Because) 87 242.09 P
0.68 (the two processors are identical, it is not necessary to track which processor recovers first or estimate) 87 229.09 P
(the moments of two conditional recovery distributions.  The parameters are) 87 216.09 T
(1.) 105 196.78 T
(MU_2,  mean recovery time of the first of two competing recoveries) 117 196.78 T
(2.) 105 177.46 T
(STD_2 standard deviation of the recovery time of the first of two competing recoveries) 117 177.46 T
8 10.5 Q
( 15.5.2. T) 105 153.98 T
(wo transient faults in one state.) 145.15 153.98 T
3 11 Q
2.6 (The transient fault situation is complicated because the) 283.14 153.98 P
0.42 (transient faults may disappear rather than be reconfigured. Because of symmetry, which transient fault) 87 140.98 P
0.05 (disappears or is reconfigured first need not be recorded.  However, the mean and the standard deviation) 87 127.98 P
0.42 (of the first one to disappear or reconfigure and the ratio of times between these two outcomes must be) 87 114.98 P
(obtained. The parameters are) 87 101.98 T
(1.) 105 82.67 T
0.23 (P_DISAPPEAR_2, probability one of the transient faults disappears before the system reconfig-) 117 82.67 P
(ures one of the transient faults.) 117 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 111
%%Page: "106" 112
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(106) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(2.) 105 718.67 T
(MU_DISAPPEAR_2,  conditional mean time of disappearance of one of two transient faults) 117 718.67 T
(3.) 105 699.66 T
1.57 (STD_DISAPPEAR_2, conditional standard deviation of time of disappearance of one of two) 117 699.66 P
(transient faults) 117 686.66 T
(4.) 105 667.66 T
2.38 (MU_REC_2, conditional mean time to reconfigure one of the transient faults before either) 117 667.66 P
(disappears) 117 654.66 T
(5.) 105 635.66 T
1.26 (STD_REC_2, conditional standard deviation of time to reconfigure one of the transient faults) 117 635.66 P
(before either disappears) 117 622.66 T
8 10.5 Q
(  15.5.3.  One transient and  one permanent fault in one state.) 105 601.99 T
3 11 Q
0.5 (This situation is the most complicated) 373.37 601.99 P
0.24 (because it is not symmetrical\321one processor has a transient fault and the other processor has a perma-) 87 588.99 P
1.05 (nent fault.  Thus, the conditional means and standard deviations must be estimated for each possible) 87 575.99 P
(outcome:) 87 562.99 T
(1.) 105 543.99 T
(The transient fault disappears before the system reconfigures either fault.) 117 543.99 T
(2.) 105 524.99 T
3 (The system reconfigures the transient fault before it disappears or the permanent fault is) 117 524.99 P
(reconfigured.) 117 511.99 T
(3.) 105 492.98 T
3.98 (The system reconfigures the permanent fault before the transient fault disappears or is) 117 492.98 P
(reconfigured.) 117 479.98 T
0.73 (In the design phase, these parameters would be difficult to estimate. However, after the system is) 105 460.98 P
0.38 (built, three histograms could be collected for each outcome and the corresponding means and standard) 87 447.98 P
(deviations could be computed. The parameters are) 87 434.98 T
(1.) 105 415.98 T
1.69 (P_DIS_BEF2, probability the transient fault disappears before the system reconfigures either) 117 415.98 P
(fault) 117 402.98 T
(2.) 105 383.98 T
-0.23 (P_REC_TRAN,  probability the system reconfigures the transient fault before it disappears or the) 117 383.98 P
(permanent fault is reconfigured) 117 370.98 T
(3.) 105 351.97 T
-0.21 (P_REC_PERM, probability the system reconfigures the permanent fault before the transient fault) 117 351.97 P
(disappears or is reconfigured) 117 338.97 T
(4.) 105 319.97 T
0.47 (MU_DIS_3, conditional mean time of disappearance of the transient fault given that it wins the) 117 319.97 P
(3-way race) 117 306.97 T
(5.) 105 287.97 T
1.11 (STD_DIS_3, conditional standard deviation of the time of disappearance of the transient fault) 117 287.97 P
(given that it wins the 3-way race) 117 274.97 T
(6.) 105 255.97 T
-0.23 (MU_REC_3, conditional mean time to reconfigure the transient fault given that it wins the 3-way) 117 255.97 P
(race) 117 242.97 T
(7.) 105 223.97 T
0.29 (STD_REC_3, conditional standard deviation of time to reconfigure the transient fault given that) 117 223.97 P
(it wins the 3-way race) 117 210.97 T
(8.) 105 191.96 T
1.08 (MU_3, conditional mean time to reconfigure the permanent fault given that it wins the 3-way) 117 191.96 P
(race) 117 178.96 T
(9.) 105 159.96 T
1 (STD_3, conditional standard deviation of time to reconfigure the permanent fault given that it) 117 159.96 P
(wins the 3-way race) 117 146.96 T
( The complete model is) 105 127.96 T
7 9.75 Q
(NP = 6;                   \050* Number of processors *\051) 87 109.79 T
(LAMBDA = 1E-4;            \050* Permanent fault arrival rate *\051) 87 98.04 T
(GAMMA = 10*LAMBDA;        \050* Transient fault arrival rate *\051) 87 86.28 T
(\050* ------------ Constants associated with one permanent ----------- *\051) 87 69.53 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 112
%%Page: "107" 113
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(107) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9 Q
(MU = 1E-4;                \050* Mean permanent fault recovery time *\051) 87 720 T
(STD = 2E-4;               \050* Standard deviation permanent fault *\051) 87 708.94 T
(\050* ------------ Constants associated with one transient ----------- *\051) 87 692.88 T
(MU_REC = 7.4E-5;          \050* Mean reconfiguration time from transient  *\051) 87 676.82 T
(STD_REC = 8.5E-5;         \050* Standard deviation of transient reconfiguration *\051) 87 665.76 T
(P_REC = .10;              \050* Probability system reconfigures transient *\051) 87 654.7 T
("ISVP = 1E-2;"              \050* Period of system rewrite of internal state *\051) 87 643.64 T
("MU_DISAPPEAR = ISVP/2;"             \050* Mean time to transient disappearance *\051) 87 632.64 T
("STD_DISAPPEAR = ISVP/\0502*SQRT\0503\051\051;"  \050* Stan. dev. of disappearance time *\051) 87 621.64 T
(\050* ------------ Constants associated with two transients ----------- *\051) 87 604.58 T
(MU_REC_2 = 7.4E-5;        \050* Mean reconfiguration time from transient  *\051) 87 587.52 T
(STD_REC_2 = 8.5E-5;       \050* Standard deviation of transient reconfiguration *\051) 87 576.46 T
(P_DISAPPEAR_2 = .92;      \050* Probability system reconfigures transient *\051) 87 565.4 T
("MU_DISAPPEAR_2 = 5E-3;"  \050* Mean time to transient disappearance *\051) 87 554.34 T
("STD_DISAPPEAR_2 = 3E-3;" \050* Stan. dev. of disappearance time *\051) 87 543.28 T
(\050* ------------ Constants associated with two permanents ----------- *\051) 87 526.22 T
(MU_2 = 1E-4;              \050* Mean permanent fault recovery time *\051) 87 509.16 T
(STD_2 = 2E-4;             \050* Standard deviation permanent fault *\051) 87 498.1 T
(\050* --- constants associated with states with a permanent and a transient --- *\051) 87 481.04 T
("P_DIS_BEF2 = .3;"      \050* Probability the transient disappears *\051) 87 463.98 T
("P_REC_TRAN = .3;"      \050* Probability the transient is reconfigured *\051) 87 452.92 T
("P_REC_PERM = 1-\050P_DIS_BEF2+P_REC_TRAN\051;" \050* Prob. permanent is reconfigured *\051) 87 441.86 T
("MU_DIS_3 = 1E-4;"      \050* Conditional mean time of disappearance of) 87 430.8 T
(                          transient given that it wins the 3-way race. *\051) 87 419.74 T
("STD_DIS_3 = 1E-4;"     \050* Conditional standard time of disappearance of) 87 408.68 T
(                          the transient given that it wins the 3-way race. *\051) 87 397.62 T
("MU_REC_3 = 1E-4;"      \050* Conditional mean time to reconfigure the) 87 386.56 T
(                          transient given that it wins the 3-way race. *\051) 87 375.5 T
("STD_REC_3 = 1E-4;"     \050* Conditional standard deviation of time to) 87 364.44 T
(                          reconfigure the transient given that it wins *\051) 87 353.38 T
("MU_3 = 1E-4;"          \050* Conditional mean time to reconfigure the) 87 342.32 T
(                          permanent given that it wins. *\051) 87 331.26 T
("STD_3 = 1E-4;"         \050* Conditional standard deviation of time) 87 320.2 T
(                          to reconfigure the permanent given that it wins *\051) 87 309.14 T
(SPACE = \050NW: 0..NP,            \050* Number of working processors *\051) 87 292.08 T
(         NFP: 0..NP,           \050* Active procs. with permanent faults *\051) 87 281.02 T
(         NFT: 0..NP\051;          \050* Active procs. with transient faults *\051) 87 269.96 T
(START = \050NP, 0, 0\051;) 87 258.9 T
(DEATHIF NFP+NFT >= NW;  \050* Majority of active processors failed *\051) 87 241.84 T
(IF NW>0 THEN) 87 224.78 T
(   TRANTO \050NW-1, NFP+1, NFT\051 BY NW*LAMBDA; \050* Permanent fault arrival *\051) 87 213.72 T
(   TRANTO \050NW-1, NFP, NFT+1\051 BY NW*GAMMA;  \050* Transient fault arrival *\051) 87 202.66 T
(ENDIF;) 87 191.6 T
(IF NFT + NFP = 1 THEN   \050* 1 active fault *\051) 87 174.54 T
(   IF NFT > 0 THEN) 87 163.48 T
(      TRANTO \050NW+1, NFP, NFT-1\051 BY <MU_DISAPPEAR,STD_DISAPPEAR,1-P_REC> ;) 87 152.42 T
(        \050* Transient fault disappearance *\051) 87 141.36 T
(      TRANTO NFT = NFT-1 BY <MU_REC, STD_REC,P_REC>;) 87 130.3 T
(         \050* Transient fault reconfiguration *\051) 87 119.24 T
(   ENDIF;) 87 108.18 T
(   IF NFP > 0 TRANTO NFP = NFP-1 BY <MU,STD>; \050* Perm. f. reconfiguration *\051) 87 91.12 T
(ENDIF;) 87 80.06 T
(IF NFP = 2      \050* Case 1: Two permanents *\051) 87 69 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 113
%%Page: "108" 114
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(108) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9 Q
(   TRANTO NFP = NFP-1 BY <MU_2,STD_2>;  \050* Permanent fault reconfiguration *\051) 87 720 T
(IF NFT = 2 THEN \050* Case 2: Two transients *\051) 87 708.5 T
(   TRANTO \050NW+1, NFP, NFT-1\051) 87 697 T
(     BY <MU_DISAPPEAR_2,STD_DISAPPEAR_2,P_DISAPPEAR_2> ;) 87 685.5 T
(         \050* Transient fault disappearance *\051) 87 674 T
(    TRANTO NFT = NFT-1 BY <MU_REC_2, STD_REC_2,1-P_DISAPPEAR_2>;) 87 662.5 T
(          \050* Transient fault reconfiguration *\051) 87 651 T
(ENDIF;) 87 639.5 T
(IF \050NFT = 1\051 AND \050NFP = 1\051 THEN   \050* 1 transient and 1 permanent *\051) 87 622 T
(   TRANTO \050NW+1, NFP, NFT-1\051 \050* Transient fault disappearance *\051) 87 610.5 T
(      BY <MU_DIS_3,STD_DIS_3,P_DIS_BEF2> ;) 87 599 T
(   TRANTO NFT = NFT-1        \050* Transient fault reconfiguration *\051) 87 587.5 T
(      BY <MU_REC_3, STD_REC_3,P_REC_TRAN>;) 87 576 T
(   TRANTO NFP = NFP-1        \050* Permanent fault reconfiguration *\051) 87 564.5 T
(      BY <MU_3,STD_3,P_REC_PERM>;) 87 553 T
(ENDIF;) 87 541.5 T
3 11 Q
0.1 (Obviously, a rough sensitivity analysis should be performed to determine how sensitive a system is) 105 522.67 P
(to transient faults before developing such a complex model and measuring so many parameters.) 87 509.67 T
4 10.5 Q
(15.6. Fault-T) 105 488.5 T
(olerant Pr) 162.08 488.5 T
(ocessor) 207.67 488.5 T
3 11 Q
0.56 (The strategy used in the fault-tolerant processor \050FTP\051 of the Charles Stark Draper Laboratory for) 105 470.17 P
2.33 (handling transient faults is different from that used in earlier fault-tolerant systems such as SIFT) 87 457.17 P
-0.25 (\050ref.) 87 444.17 P
-0.25 (29\051.  In these systems, reconfiguration was deferred until the system was reasonably certain that the) 108.37 444.17 P
0.12 (fault was permanent.  Once a processor was removed, it was never reinstated.  In FTP, a different strat-) 87 431.17 P
-0 (egy is used.  Upon the first detection of an error, the faulty processor is removed.  The system then exe-) 87 418.17 P
0.93 (cutes a self test on the removed processor.  If the processor passes the test, the system diagnoses the) 87 405.17 P
0.07 (problem as a transient fault and reinstates the processor.  If the processor fails the self-test program, the) 87 392.17 P
0.32 (fault is diagnosed as permanent and the processor is permanently removed.  Thus, a transient fault that) 87 379.17 P
(does not disappear in time will be diagnosed as permanent.) 87 366.17 T
0.12 (A partial model for the FTP is shown in figure 58.  In this model, each state is described by a triple) 105 346.67 P
-0.23 (\050) 87 333.67 P
7 F
-0.56 (NW,NFA,NFT) 90.66 333.67 P
3 F
-0.23 (\051 where) 156.66 333.67 P
7 F
-0.56 (NW) 192.24 333.67 P
3 F
-0.23 ( is the number of working processors,) 205.43 333.67 P
7 F
-0.56 (NFA) 372.45 333.67 P
3 F
-0.23 ( is the number of faulty processors) 392.25 333.67 P
(\050both transient and permanent\051, and) 87 320.67 T
7 F
(NFT) 246.47 320.67 T
3 F
( is the number of processors undergoing self test.) 266.27 320.67 T
3 9 Q
(Figure 58.  Partial model of FTP.) 255.25 69 T
87 75 543 311 C
191.5 86 438.5 311 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 109 366 345 588 236 222 196.5 87 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig58.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig58.ps)
%%CreationDate: (7/27/95) (8:35 AM)
%%BoundingBox: 109 366 345 588
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
122.5 566.6098 m
117.4233 566.6098 113.3076 570.7256 113.3076 575.8023 c
113.3076 580.8789 117.4233 584.9947 122.5 584.9947 c
133.75 584.9947 l
138.8267 584.9947 142.9424 580.8789 142.9424 575.8023 c
142.9424 570.7256 138.8267 566.6098 133.75 566.6098 c
122.5 566.6098 l
s
128 575.8023 m
S
142.75 575.8023 m
175.75 575.8023 l
S
0 To
1 0 0 1 159.5 578.8023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(4) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
179.0088 575.8023 m
172.4575 574.2588 l
173.8638 575.8023 L
172.4575 577.3457 l
179.0088 575.8023 L
f
U
0 To
1 0 0 1 128 572.3023 0 Tp
TP
-9 0 Td
0 Tr
/_Times-Roman 9 Tf
(4,0,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
188.5 566.6098 m
183.4233 566.6098 179.3076 570.7256 179.3076 575.8023 c
179.3076 580.8789 183.4233 584.9947 188.5 584.9947 c
199.75 584.9947 l
204.8267 584.9947 208.9424 580.8789 208.9424 575.8023 c
208.9424 570.7256 204.8267 566.6098 199.75 566.6098 c
188.5 566.6098 l
s
194 575.8023 m
S
0 To
1 0 0 1 194 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(3,1,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
209 575.8023 m
242 575.8023 l
S
0 To
1 0 0 1 223.75 578.8023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
245.2588 575.8023 m
238.7075 574.2588 l
240.1138 575.8023 L
238.7075 577.3457 l
245.2588 575.8023 L
f
U
0 R
0 G
0.75 w
254.75 566.6098 m
249.6733 566.6098 245.5576 570.7256 245.5576 575.8023 c
245.5576 580.8789 249.6733 584.9947 254.75 584.9947 c
266 584.9947 l
271.0767 584.9947 275.1924 580.8789 275.1924 575.8023 c
275.1924 570.7256 271.0767 566.6098 266 566.6098 c
254.75 566.6098 l
s
260.25 575.8023 m
S
0 To
1 0 0 1 260.25 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2,2,0) Tx 
(\r) TX 
TO
u
138.5206 567.7932 m
143.9448 563.8082 l
141.8579 563.8774 L
141.5954 561.8059 l
138.5206 567.7932 L
f
U
0 R
0 G
0.75 w
194.5523 566.625 m
194.5523 515.375 l
S
u
0 O
0 g
1 w
194.5523 512.1162 m
193.0088 518.6675 l
194.5523 517.2612 L
196.0957 518.6675 l
194.5523 512.1162 L
f
U
0 To
1 0 0 1 149.25 538.5523 0 Tp
TP
-10.4963 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(pass) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
188.5 493.1098 m
183.4233 493.1098 179.3076 497.2256 179.3076 502.3023 c
179.3076 507.3789 183.4233 511.4947 188.5 511.4947 c
199.75 511.4947 l
204.8267 511.4947 208.9424 507.3789 208.9424 502.3023 c
208.9424 497.2256 204.8267 493.1098 199.75 493.1098 c
188.5 493.1098 l
s
194 502.3023 m
S
208.75 502.3023 m
241.75 502.3023 l
S
0 To
1 0 0 1 222.5 505.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
245.0088 502.3023 m
238.4575 500.7588 l
239.8638 502.3023 L
238.4575 503.8457 l
245.0088 502.3023 L
f
U
0 To
1 0 0 1 194 498.8023 0 Tp
TP
-9 0 Td
0 Tr
/_Times-Roman 9 Tf
(3,0,1) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
254.5 493.1098 m
249.4233 493.1098 245.3076 497.2256 245.3076 502.3023 c
245.3076 507.3789 249.4233 511.4947 254.5 511.4947 c
265.75 511.4947 l
270.8267 511.4947 274.9424 507.3789 274.9424 502.3023 c
274.9424 497.2256 270.8267 493.1098 265.75 493.1098 c
254.5 493.1098 l
s
260 502.3023 m
S
0 To
1 0 0 1 260 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(2,1,1) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
275 502.3023 m
308 502.3023 l
S
0 To
1 0 0 1 290.75 505.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
311.2588 502.3023 m
304.7075 500.7588 l
306.1138 502.3023 L
304.7075 503.8457 l
311.2588 502.3023 L
f
U
0 R
0 G
0.75 w
320.75 493.1098 m
315.6733 493.1098 311.5576 497.2256 311.5576 502.3023 c
311.5576 507.3789 315.6733 511.4947 320.75 511.4947 c
332 511.4947 l
337.0767 511.4947 341.1924 507.3789 341.1924 502.3023 c
341.1924 497.2256 337.0767 493.1098 332 493.1098 c
320.75 493.1098 l
s
326.25 502.3023 m
S
0 To
1 0 0 1 326.25 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1,2,1) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
194.5523 493.125 m
194.5523 441.875 l
S
u
0 O
0 g
1 w
194.5523 438.6162 m
193.0088 445.1675 l
194.5523 443.7612 L
196.0957 445.1675 l
194.5523 438.6162 L
f
U
0 R
0 G
0.75 w
260.5523 493.125 m
260.5523 441.875 l
S
u
0 O
0 g
1 w
260.5523 438.6162 m
259.0088 445.1675 l
260.5523 443.7612 L
262.0957 445.1675 l
260.5523 438.6162 L
f
U
0 To
1 0 0 1 205.5 465.0523 0 Tp
TP
-8.744 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(fail) Tx 
(\r) TX 
TO
0 To
1 0 0 1 272.25 465.0523 0 Tp
TP
-8.744 0 Td
0 Tr
/_Times-Italic 9 Tf
0 Ts
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(fail) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
188.5 419.6098 m
183.4233 419.6098 179.3076 423.7256 179.3076 428.8023 c
179.3076 433.8789 183.4233 437.9947 188.5 437.9947 c
199.75 437.9947 l
204.8267 437.9947 208.9424 433.8789 208.9424 428.8023 c
208.9424 423.7256 204.8267 419.6098 199.75 419.6098 c
188.5 419.6098 l
s
0 To
1 0 0 1 194 425.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3,0,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
254.5 419.6098 m
249.4233 419.6098 245.3076 423.7256 245.3076 428.8023 c
245.3076 433.8789 249.4233 437.9947 254.5 437.9947 c
265.75 437.9947 l
270.8267 437.9947 274.9424 433.8789 274.9424 428.8023 c
274.9424 423.7256 270.8267 419.6098 265.75 419.6098 c
254.5 419.6098 l
s
0 To
1 0 0 1 260 425.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(2,1,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
187.9087 511.4193 m
141.1559 564.722 l
S
u
0 O
0 g
1 w
204.5206 567.7932 m
209.9448 563.8082 l
207.8579 563.8774 L
207.5954 561.8059 l
204.5206 567.7932 L
f
U
0 R
0 G
0.75 w
254.1407 511.1548 m
207.1559 564.722 l
S
u
0 O
0 g
1 w
205.2706 495.2932 m
210.6948 491.3082 l
208.6079 491.3774 L
208.3454 489.3059 l
205.2706 495.2932 L
f
U
0 R
0 G
0.75 w
255.6048 437.8406 m
207.9059 492.222 l
S
0 To
1 0 0 1 202.5 538.5523 0 Tp
TP
-4.4989 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Italic 9 Tf
(F) Tx 
-4 Ts
(s) Tx 
(\r) TX 
TO
0 To
1 0 0 1 237.75 549.0523 0 Tp
TP
-10.4963 0 Td
0 Tr
0 Ts
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(pass) Tx 
(\r) TX 
TO
0 To
1 0 0 1 234 479.8023 0 Tp
TP
-10.4963 0 Td
0 Tr
/_Times-Italic 9 Tf
0 Ts
(F) Tx 
/_Times-Roman 9 Tf
-4 Ts
(pass) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
274.875 428.3023 m
307.875 428.3023 l
S
u
0 O
0 g
1 w
311.1338 428.3023 m
304.5825 426.7588 l
305.9888 428.3023 L
304.5825 429.8457 l
311.1338 428.3023 L
f
U
0 R
0 G
0.75 w
260.5523 419.375 m
260.5523 385.625 l
S
u
0 O
0 g
1 w
260.5523 382.3662 m
259.0088 388.9175 l
260.5523 387.5112 L
262.0957 388.9175 l
260.5523 382.3662 L
f
U
u
260.5 377.7929 m
260.8905 377.7929 261.2071 378.1095 261.2071 378.5 c
261.2071 378.8905 260.8905 379.2071 260.5 379.2071 c
260.1095 379.2071 259.7929 378.8905 259.7929 378.5 c
259.7929 378.1095 260.1095 377.7929 260.5 377.7929 c
f
260.5 378.5 m
F
U
u
260.5 372.7929 m
260.8905 372.7929 261.2071 373.1095 261.2071 373.5 c
261.2071 373.8905 260.8905 374.2071 260.5 374.2071 c
260.1095 374.2071 259.7929 373.8905 259.7929 373.5 c
259.7929 373.1095 260.1095 372.7929 260.5 372.7929 c
f
260.5 373.5 m
F
U
u
260.5 367.7929 m
260.8905 367.7929 261.2071 368.1095 261.2071 368.5 c
261.2071 368.8905 260.8905 369.2071 260.5 369.2071 c
260.1095 369.2071 259.7929 368.8905 259.7929 368.5 c
259.7929 368.1095 260.1095 367.7929 260.5 367.7929 c
f
260.5 368.5 m
F
U
u
316.3321 428.5 m
316.3321 428.8905 316.0155 429.2071 315.625 429.2071 c
315.2345 429.2071 314.9179 428.8905 314.9179 428.5 c
314.9179 428.1095 315.2345 427.7929 315.625 427.7929 c
316.0155 427.7929 316.3321 428.1095 316.3321 428.5 c
f
315.625 428.5 m
F
U
u
321.3321 428.5 m
321.3321 428.8905 321.0155 429.2071 320.625 429.2071 c
320.2345 429.2071 319.9179 428.8905 319.9179 428.5 c
319.9179 428.1095 320.2345 427.7929 320.625 427.7929 c
321.0155 427.7929 321.3321 428.1095 321.3321 428.5 c
f
320.625 428.5 m
F
U
u
326.3321 428.5 m
326.3321 428.8905 326.0155 429.2071 325.625 429.2071 c
325.2345 429.2071 324.9179 428.8905 324.9179 428.5 c
324.9179 428.1095 325.2345 427.7929 325.625 427.7929 c
326.0155 427.7929 326.3321 428.1095 326.3321 428.5 c
f
325.625 428.5 m
F
U
0 R
0 G
0.75 w
208.75 428.3023 m
241.75 428.3023 l
S
0 To
1 0 0 1 222.5 431.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
0 Ts
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
245.0088 428.3023 m
238.4575 426.7588 l
239.8638 428.3023 L
238.4575 429.8457 l
245.0088 428.3023 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 75 543 311 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 114
%%Page: "109" 115
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(109) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.08 (The transition from state \0504,0,0\051 to state \0503,1,0\051 represents the failure of any processor in the config-) 105 718.67 P
0.46 (uration.  The transition from state \0503,1,0\051 to state \0503,0,1\051 represents the detection of a fault, the tempo-) 87 705.67 P
0.44 (rary removal of the processor from the active configuration, and the initiation of the self-test program.) 87 692.67 P
-0.13 (If the processor passes the self test, the processor is returned to the active configuration by the transition) 87 679.67 P
0.38 (from state \0503,0,1\051 back to state \0504,0,0\051.  If the processor fails the self test, the processor is permanently) 87 666.67 P
-0.17 (removed from the configuration.  This removal occurs in the model in the transition from state \0503,0,1\051 to) 87 653.67 P
-0.22 (state \0503,0,0\051.  Note that while the self-test program is in progress \050i.e., in state \0503,0,1\051\051, that a second fail-) 87 640.67 P
-0.18 (ure does not lead to system failure.  This  situation occurs because the outputs from the removed proces-) 87 627.67 P
2.45 (sor are not considered in the voting, thus the majority of the outputs being voted are nonfaulty.) 87 614.67 P
(Therefore, state \0502,1,1\051 is not a death state. The complete SURE model is) 87 601.67 T
7 9.75 Q
(F_P = 1E-6 TO* 1 BY 10;) 87 583.43 T
(F_T = 1.0-F_P;) 87 571.61 T
(LAMBDA = 1E-4;) 87 559.79 T
(DET = 1E-7;) 87 547.97 T
(SIGDET = 10*DET;) 87 536.16 T
(TESTTIME = 1E-3;) 87 524.34 T
(SIGTEST = 2*TESTTIME;) 87 512.52 T
(     2\050* 4,0,0 *\051,    3\050* 3,1,0 *\051 = 4*LAMBDA;) 87 489.7 T
(     3\050* 3,1,0 *\051,    1\050* 2,2,0 *\051 = 3*LAMBDA;) 87 477.88 T
(     3\050* 3,1,0 *\051,    4\050* 3,0,1 *\051 = <DET,SIGDET>;) 87 466.06 T
(     4\050* 3,0,1 *\051,    5\050* 2,1,1 *\051 = 3*LAMBDA;) 87 454.24 T
(     4\050* 3,0,1 *\051,    2\050* 4,0,0 *\051 = <TESTTIME,SIGTEST,F_T>;) 87 442.42 T
(     4\050* 3,0,1 *\051,    6\050* 3,0,0 *\051 = <TESTTIME,SIGTEST,1-F_T>;) 87 430.61 T
(     5\050* 2,1,1 *\051,    1\050* 1,2,1 *\051 = 2*LAMBDA;) 87 418.79 T
(     5\050* 2,1,1 *\051,    3\050* 3,1,0 *\051 = <TESTTIME,SIGTEST,F_T>;) 87 406.97 T
(     5\050* 2,1,1 *\051,    7\050* 2,1,0 *\051 = <TESTTIME,SIGTEST,1-F_T>;) 87 395.15 T
(     6\050* 3,0,0 *\051,    7\050* 2,1,0 *\051 = 3*LAMBDA;) 87 383.33 T
(     7\050* 2,1,0 *\051,    1\050* 1,2,0 *\051 = 2*LAMBDA;) 87 371.51 T
(     7\050* 2,1,0 *\051,    8\050* 2,0,1 *\051 = <DET,SIGDET>;) 87 359.69 T
(     8\050* 2,0,1 *\051,    1\050* 1,1,1 *\051 = 2*LAMBDA;) 87 347.88 T
(     8\050* 2,0,1 *\051,    6\050* 3,0,0 *\051 = <TESTTIME,SIGTEST,F_T>;) 87 336.06 T
(     8\050* 2,0,1 *\051,    9\050* 2,0,0 *\051 = <TESTTIME,SIGTEST,1-F_T>;) 87 324.24 T
(     9\050* 2,0,0 *\051,    1\050* 1,1,0 *\051 = 2*LAMBDA;) 87 312.42 T
3 11 Q
(This model was generated with the ASSIST input given below.) 105 294.77 T
7 9.75 Q
(SPACE = \050NW: 0..4,        \050* number of working processors *\051) 87 276.53 T
(         NFA: 0..4,       \050* number of faulty active processors *\051) 87 264.71 T
(         NFT: 0..4\051;      \050* number of processors undergoing self test *\051) 87 252.89 T
(START = \0504,0,0\051;) 87 235.08 T
(LAMBDA = 1E-4;          \050* Arrival rate of failures -- perm. or transient *\051) 87 217.26 T
(DET = 1E-7;             \050* Mean time to detect and remove proc. with fault *\051) 87 205.44 T
(SIGDET = 10*DET;        \050* Stan. dev. time to detect and remove processor *\051) 87 193.62 T
(TESTTIME = 1E-3;        \050* Mean time to execute self test *\051) 87 181.8 T
(SIGTEST = 2*TESTTIME;   \050* Stan. dev. of time to execute self test *\051) 87 169.98 T
("F_P = 1E-6 TO* 1 BY 10;" \050* Probability failure was permanent *\051) 87 152.16 T
("F_T = 1.0-F_P;"          \050* Probability failure was transient *\051) 87 140.34 T
(   \050* Fault arrival *\051) 87 122.53 T
(IF NW > 0 TRANTO NW=NW-1, NFA = NFA + 1 BY NW*LAMBDA;) 87 110.71 T
(   \050* Detection of fault and removal of processor for self test *\051) 87 98.89 T
(IF \050NFA > 0\051 AND \050NFT = 0\051 TRANTO NFT=NFT+1, NFA = NFA - 1 BY <DET,SIGDET>;) 87 87.07 T
(IF NFT > 0 THEN) 87 69.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 115
%%Page: "110" 116
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(10) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(      \050* Reinstatement of processor after transient fault *\051) 87 719.5 T
(   TRANTO NFT=NFT-1, NW = NW+1 BY <TESTTIME,SIGTEST,F_T>;) 87 707.19 T
(      \050* Permanent removal of processor with permanent fault *\051) 87 694.88 T
(   TRANTO NFT=NFT-1 BY <TESTTIME,SIGTEST,1-F_T>;) 87 682.58 T
(ENDIF;) 87 670.27 T
(  \050* System failure occurs if majority of outputs sent to voter are faulty *\051) 87 651.96 T
(DEATHIF NFA >= NW;) 87 639.65 T
3 11 Q
0.28 (In this model, the FTP is assumed to not allow a second processor to undergo self test while a first) 105 620.51 P
0.54 (processor is undergoing self test. Note that the) 87 607.51 P
7 F
1.29 (IF) 298.14 607.51 P
3 F
0.54 ( expression, which governs the generation of transi-) 311.34 607.51 P
3.75 (tions that remove a processor from the active configuration for self test, is) 87 594.51 P
7 F
8.99 (IF) 463.8 594.51 P
8.99 (\050NFA) 483.6 594.51 P
8.99 (>) 516.6 594.51 P
8.99 (0\051) 529.8 594.51 P
0.46 (AND) 87 581.51 P
0.46 (\050NFT) 113.4 581.51 P
0.46 (=) 146.4 581.51 P
0.46 (0\051) 159.6 581.51 P
3 F
0.19 (.  The second term prevents the generation of a self-test transition when a processor) 172.8 581.51 P
(is already under self test.) 87 568.51 T
0.72 (Most models containing transient faults require the estimation of the disappearance rates for tran-) 105 548.96 P
1.91 (sient faults. Virtually no experimental values are available for this parameter because it cannot be) 87 535.95 P
(directly measured on operational equipment or through fault-injection experiments.) 87 522.95 T
1.03 (This parameter was not used explicitly in the model of the FTP system in this section.  The dis-) 105 503.4 P
1.01 (appearance rate of short transient faults does not matter because the FTP operating system masks all) 87 490.4 P
0.32 (outputs after the first erroneous output until the self test is complete.  However, if a transient fault per-) 87 477.4 P
0.36 (sists long enough for a processor to fail the self test, then the fault is assumed to be permanent and the) 87 464.4 P
0.32 (processor is permanently removed.  Thus, the true transient fault disappearance rate affects the ratio of) 87 451.4 P
0.08 (transient to permanent faults.  This ratio, which is unknown, can play an important part in assessing the) 87 438.4 P
(FTP strategy of reinstating processors.) 87 425.4 T
4 10.5 Q
(15.7. Modeling Intermittent Faults) 105 400.17 T
3 11 Q
1.35 (Before a solution technique was developed by White, the solution of semi-Markov models with) 105 381.78 P
-0.11 (nonexponential recovery transitions was extremely difficult. To circumvent the need for a semi-Markov) 87 368.78 P
0.3 (model, the recovery process can be represented with a submodel of states that decompose the recovery) 87 355.78 P
-0.05 (into a series of smaller steps. This procedure is often referred to as the method of stages.  The CARE III) 87 342.78 P
0.01 (single fault model is an example of the method of stages \050ref. 16\051.  This multistep process was designed) 87 329.78 P
0.44 (to provide a more accurate representation of the reconfiguration process than could be obtained with a) 87 316.78 P
-0.25 (single exponential process.  However, many of these multistep models have used parameters that are not) 87 303.78 P
0.93 (directly observable or measurable.  For example, while the overall time of reconfiguration is directly) 87 290.78 P
0.79 (observable, the individual times required to detect, isolate, and recover from a fault can be extremely) 87 277.78 P
(difficult to measure accurately.) 87 264.78 T
-0.23 (A remnant of the multistep recovery model approach is the concept that separate states must be used) 105 245.22 P
0.48 (to represent the active and the inactive states of an intermittent fault. Therefore, models are frequently) 87 232.22 P
-0.2 (constructed that resemble the partial model shown in figure 59. In this partial model of a triplex-simplex) 87 219.22 P
0.27 (system subject to intermittent faults, the states are described with a triple \050) 87 206.22 P
7 F
0.65 (NW,NFA,NFB) 416.86 206.22 P
3 F
0.27 (\051 where) 482.86 206.22 P
7 F
0.65 (NW) 519.44 206.22 P
3 F
0.27 ( is) 532.64 206.22 P
0.47 (the number of working processors,) 87 193.22 P
7 F
1.12 (NFA) 245.14 193.22 P
3 F
0.47 ( is the number of processors with active faults, and) 264.94 193.22 P
7 F
1.12 (NFB) 495.99 193.22 P
3 F
0.47 ( is the) 515.79 193.22 P
(number of processors with benign faults.) 87 180.22 T
0.47 ( When a processor fails, the fault is initially benign.  At some rate A the fault becomes active.  At) 105 160.67 P
0.01 (some rate B  the active intermittent fault returns to the benign state.  While the fault is benign, no errors) 87 147.67 P
0.8 (are produced that would enable the system to detect the fault.  The question of whether benign faults) 87 134.67 P
0.42 (cause near-coincident failure must be addressed.  One conservative approach is to assume that they do) 87 121.67 P
1.26 (cause near-coincident failure.  In this case, intermittent faults behave identically to permanent faults) 87 108.67 P
0.3 (except that intermittent faults are reconfigured at a different rate than permanent faults.  If faults in the) 87 95.67 P
0.58 (benign state are assumed to not cause near-coincident failure, then many additional states, which con-) 87 82.67 P
1.33 (tain benign faults, exist in the model.  For example, states \0501,0,2\051, \0501,0,3\051, and \0502,0,2\051 contain more) 87 69.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 116
%%Page: "111" 117
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 299.4 46 T
(1) 304.08 46 T
(1) 308.75 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
0.19 (faulty benign processors than good processors, yet these states are operational.  The following ASSIST) 87 501.67 P
(input could be used to generate the complete model for a triplex system) 87 488.67 T
7 9.75 Q
(SPACE = \050NW: 0..3,        \050* Number of working processors *\051) 87 470.39 T
(         NFA: 0..3,       \050* Number of processors with active int. faults *\051) 87 458.53 T
(         NFB: 0..3\051;      \050* Number of processors with benign int. faults *\051) 87 446.67 T
(START = \0503,0,0\051;) 87 428.81 T
(L = 1E-4;                 \050* Rate of arrival of intermittent faults *\051) 87 410.95 T
(REC = 1E4;                \050* Mean rate of reconfiguration *\051) 87 399.09 T
(A = 1E2;                  \050* Rate benign intermittent fault goes active *\051) 87 387.23 T
(B = 1E2;                  \050* Rate active intermittent fault goes benign *\051) 87 375.37 T
(   \050* Arrival of intermittent fault -- assumed to start out benign *\051) 87 357.51 T
(IF NW > 0 TRANTO NW = NW-1, NFB = NFB + 1 BY NW*L;) 87 345.65 T
(   \050* Benign intermittent fault becomes active *\051) 87 333.79 T
(IF NFB > 0 TRANTO NFB = NFB - 1, NFA = NFA + 1 BY FAST A;) 87 321.93 T
(IF NFA > 0 THEN) 87 304.07 T
(      \050* Active intermittent fault becomes benign *\051) 87 292.21 T
(   TRANTO NFB = NFB + 1, NFA = NFA - 1 BY FAST B;) 87 280.35 T
-0.02 (      \050* Processor with active intermittent fault reconfigured -- 2 cases: *\051) 87 268.49 P
(         \050* Reconfigure to simplex working processor *\051) 87 256.63 T
(   IF NW > 0 TRANTO \0501,0,0\051 BY FAST \050NW/\050NW+NFB\051\051*REC;) 87 244.77 T
(         \050* Reconfigure to simplex with benign intermittent fault *\051) 87 232.91 T
(   IF NFB > 0 TRANTO \0500,0,1\051 BY FAST \050NFB/\050NW+NFB\051\051*REC;) 87 221.05 T
(ENDIF;) 87 209.19 T
(  \050* System failure occurs when majority of processors have active fault *\051) 87 197.33 T
(DEATHIF NFA >= \050NW+NFB\051;) 87 185.47 T
3 11 Q
-0.16 (The recovery rule generates two competing recoveries.  This rule is necessary because the operating) 105 166.78 P
2.31 (system makes an arbitrary choice among the processors that do not contain active faults when it) 87 153.78 P
-0.03 (degrades to a simplex.  The probability that a processor with a benign fault becomes the remaining sim-) 87 140.78 P
(plex processor is) 87 127.78 T
7 F
(NFB/\050NW+NFB\051) 163.68 127.78 T
3 F
(.) 242.88 127.78 T
0.15 (The problem with this model is that the on-off cycles of the intermittent fault must be modeled and) 105 108.67 P
0.75 (the associated parameters must be measured.  Realistic intermittent faults are difficult to create in the) 87 95.67 P
-0.02 (laboratory, and the rates at which they become active and benign are difficult to measure.  Even if these) 87 82.67 P
1.29 (parameters could be accurately measured, a semi-Markov model may not have enough generality to) 87 69.67 P
3 9 Q
(Figure 59.  Detailed intermittent fault submodel.) 227.75 534 T
87 540 543 726 C
215 551 415 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 110 417 298 588 188 171 221 552 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig59.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig59.ps)
%%CreationDate: (4/21/95) (1:46 PM)
%%BoundingBox: 110 417 298 588
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
122.5 566.6098 m
117.4233 566.6098 113.3076 570.7256 113.3076 575.8023 c
113.3076 580.8789 117.4233 584.9947 122.5 584.9947 c
133.75 584.9947 l
138.8267 584.9947 142.9424 580.8789 142.9424 575.8023 c
142.9424 570.7256 138.8267 566.6098 133.75 566.6098 c
122.5 566.6098 l
s
128 575.8023 m
S
142.75 575.8023 m
175.75 575.8023 l
S
0 To
1 0 0 1 159.5 578.8023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
179.0088 575.8023 m
172.4575 574.2588 l
173.8638 575.8023 L
172.4575 577.3457 l
179.0088 575.8023 L
f
U
0 To
1 0 0 1 128 572.3023 0 Tp
TP
-9 0 Td
0 Tr
/_Times-Roman 9 Tf
(3,0,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
188.5 566.6098 m
183.4233 566.6098 179.3076 570.7256 179.3076 575.8023 c
179.3076 580.8789 183.4233 584.9947 188.5 584.9947 c
199.75 584.9947 l
204.8267 584.9947 208.9424 580.8789 208.9424 575.8023 c
208.9424 570.7256 204.8267 566.6098 199.75 566.6098 c
188.5 566.6098 l
s
194 575.8023 m
S
0 To
1 0 0 1 194 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(2,0,1) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
209 575.8023 m
242 575.8023 l
S
0 To
1 0 0 1 223.75 578.8023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
245.2588 575.8023 m
238.7075 574.2588 l
240.1138 575.8023 L
238.7075 577.3457 l
245.2588 575.8023 L
f
U
0 R
0 G
0.75 w
254.75 566.6098 m
249.6733 566.6098 245.5576 570.7256 245.5576 575.8023 c
245.5576 580.8789 249.6733 584.9947 254.75 584.9947 c
266 584.9947 l
271.0767 584.9947 275.1924 580.8789 275.1924 575.8023 c
275.1924 570.7256 271.0767 566.6098 266 566.6098 c
254.75 566.6098 l
s
260.25 575.8023 m
S
0 To
1 0 0 1 260.25 572.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(1,0,2) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
188.5 493.1098 m
183.4233 493.1098 179.3076 497.2256 179.3076 502.3023 c
179.3076 507.3789 183.4233 511.4947 188.5 511.4947 c
199.75 511.4947 l
204.8267 511.4947 208.9424 507.3789 208.9424 502.3023 c
208.9424 497.2256 204.8267 493.1098 199.75 493.1098 c
188.5 493.1098 l
s
194 502.3023 m
S
208.75 502.3023 m
241.75 502.3023 l
S
0 To
1 0 0 1 222.5 505.3023 0 Tp
TP
-4.7197 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
245.0088 502.3023 m
238.4575 500.7588 l
239.8638 502.3023 L
238.4575 503.8457 l
245.0088 502.3023 L
f
U
0 To
1 0 0 1 194 498.8023 0 Tp
TP
-9 0 Td
0 Tr
/_Times-Roman 9 Tf
(2,1,0) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
254.5 493.1098 m
249.4233 493.1098 245.3076 497.2256 245.3076 502.3023 c
245.3076 507.3789 249.4233 511.4947 254.5 511.4947 c
265.75 511.4947 l
270.8267 511.4947 274.9424 507.3789 274.9424 502.3023 c
274.9424 497.2256 270.8267 493.1098 265.75 493.1098 c
254.5 493.1098 l
s
260 502.3023 m
S
0 To
1 0 0 1 260 498.8023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(1,1,1) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
254.5 419.6098 m
249.4233 419.6098 245.3076 423.7256 245.3076 428.8023 c
245.3076 433.8789 249.4233 437.9947 254.5 437.9947 c
265.75 437.9947 l
270.8267 437.9947 274.9424 433.8789 274.9424 428.8023 c
274.9424 423.7256 270.8267 419.6098 265.75 419.6098 c
254.5 419.6098 l
s
0 To
1 0 0 1 260 425.3023 0 Tp
TP
-9 0 Td
0 Tr
0 O
0 g
1 w
(1,0,0) Tx 
(\r) TX 
TO
u
255.4794 437.7068 m
250.0552 441.6918 l
252.1421 441.6226 L
252.4046 443.6941 l
255.4794 437.7068 L
f
U
0 R
0 G
0.75 w
205.1452 495.1594 m
252.8441 440.778 l
S
u
0 O
0 g
1 w
182.1207 569.1394 m
179.3761 562.9937 l
179.0012 565.0479 L
176.9213 564.8654 l
182.1207 569.1394 L
f
U
u
206.1616 509.036 m
208.5689 515.3215 l
209.0545 513.2907 L
211.1216 513.5857 l
206.1616 509.036 L
f
U
0 To
1 0 0 1 169.75 537.0523 0 Tp
TP
-3.0015 0 Td
0 Tr
(B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 220 537.0523 0 Tp
TP
-3.2487 0 Td
0 Tr
(A) Tx 
(\r) TX 
TO
0 To
1 0 0 1 235.5 537.0523 0 Tp
TP
-3.0015 0 Td
0 Tr
(B) Tx 
(\r) TX 
TO
0 To
1 0 0 1 285.75 537.0523 0 Tp
TP
-3.2487 0 Td
0 Tr
(A) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
180.0298 566.887 m
175.8808 560.1754 173.2868 550.6127 173.2868 540 c
173.2868 527.2821 177.012 516.0721 182.6743 509.4696 c
S
207.9935 511.6269 m
212.7081 518.371 215.7132 528.5773 215.7132 540 c
215.7132 552.372 212.1878 563.317 206.7833 569.9815 c
S
u
0 O
0 g
1 w
248.1207 569.1394 m
245.3761 562.9937 l
245.0012 565.0479 L
242.9213 564.8654 l
248.1207 569.1394 L
f
U
u
272.1616 509.036 m
274.5689 515.3215 l
275.0545 513.2907 L
277.1216 513.5857 l
272.1616 509.036 L
f
U
0 R
0 G
0.75 w
246.0298 566.887 m
241.8808 560.1754 239.2868 550.6127 239.2868 540 c
239.2868 527.2821 243.012 516.0721 248.6743 509.4696 c
S
273.9935 511.6269 m
278.7081 518.371 281.7132 528.5773 281.7132 540 c
281.7132 552.372 278.1878 563.317 272.7833 569.9815 c
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 540 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 117
%%Page: "112" 118
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(12) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
-0.08 (accurately represent the behavior of the  oscillations between active and benign. It is preferable to inject) 87 718.67 P
0.79 (intermittent faults and observe the impact on the system.  The system recovery time will probably be) 87 705.67 P
1.92 (longer for intermittent faults than for transient faults.  The resulting model is shown in figure 60.) 87 692.67 P
1.36 (Although this model is considerably simpler, it can be much more accurate than the detailed model) 87 679.67 P
0.33 (given in figure 59 because it relies only on directly observable parameters.  Note that this method uses) 87 666.67 P
0.43 (the conservative approach of assuming that intermittent faults can cause near-coincident failure during) 87 653.67 P
(their benign phase.) 87 640.67 T
0.25 (The SURE program has difficulty solving models with fast loops, that is, loops containing no slow) 105 473.3 P
-0.12 (transitions.  The SURE program can solve the model generated by the ASSIST input above.  The output) 87 460.3 P
(is) 87 447.3 T
7 9.75 Q
($ sure) 87 427.77 T
( SURE V7.4   NASA Langley Research Center) 87 414.65 T
( 1? read0 intm) 87 396.53 T
(      0.20 SECS. TO READ MODEL FILE) 87 378.42 T
(35? run) 87 365.3 T
(MODEL FILE = intm.mod                    SURE V7.4 24 Jan 90   14:17:49) 87 347.18 T
(                LOWERBOUND    UPPERBOUND     COMMENTS          RUN #1) 87 323.06 T
( -----------   -----------   -----------    --------------------------) 87 309.94 T
(               1.38175e-06   1.50309e-06    <prune 8.9e-13>) 87 296.83 T
(64 PATH\050S\051 TO DEATH STATES 54 PATH\050S\051 PRUNED) 87 278.71 T
(HIGHEST PRUNE LEVEL =  6.18304e-13) 87 265.59 T
(1.650 SECS. CPU TIME UTILIZED) 87 252.47 T
(36? exit) 87 239.35 T
3 11 Q
1.13 (However for some parameter regions, the program may require large amounts of CPU time. For) 105 220.4 P
1.08 (example, if the value of) 87 207.4 P
7 F
2.59 (B) 199.32 207.4 P
3 F
1.08 ( is changed to) 205.92 207.4 P
7 F
2.59 (1E5) 273.79 207.4 P
3 F
1.08 (, the SURE program will require 3458 sec to solve the) 293.59 207.4 P
-0.14 (model. As) 87 194.4 P
7 F
-0.34 (B) 134.68 194.4 P
3 F
-0.14 ( approaches infinity, the execution time approaches infinity. If the SURE program is unable) 141.28 194.4 P
0.04 (to solve the model in a reasonable amount of time, the PAWS or STEM programs may be used to solve) 87 181.4 P
(the model.  However, these programs assume that all recoveries are exponentially distributed.) 87 168.4 T
4 12 Q
(16. Sequences of Reliability Models) 87 141.37 T
3 11 Q
0.83 (The SURE program provides the user with the capability to calculate and store the probability of) 105 121.67 P
0.03 (terminating in each operational state of the model, as well as the death state probabilities.  The program) 87 108.67 P
0.05 (also allows the user to initialize a model by using these same operational state probabilities.  These fea-) 87 95.67 P
0.2 (tures support the use of sequences of reliability models to model systems with phased missions or non-) 87 82.67 P
(constant failure rates.) 87 69.67 T
3 9 Q
(Figure 60.  Model of triplex to simplex system subject to intermittent faults.) 178.25 509 T
87 515 543 613 C
212.5 526 417.5 613 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 164 435 357 517 193 82 218.5 528 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig60.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig60.ps)
%%CreationDate: (4/20/95) (11:19 AM)
%%BoundingBox: 164 435 357 517
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 176.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
176.5 493.8076 m
181.5767 493.8076 185.6924 497.9233 185.6924 503 c
185.6924 508.0767 181.5767 512.1924 176.5 512.1924 c
171.4233 512.1924 167.3076 508.0767 167.3076 503 c
167.3076 497.9233 171.4233 493.8076 176.5 493.8076 c
s
176.5 503 m
S
U
185.5 503 m
248 503 l
S
u
260.5 493.8076 m
265.5767 493.8076 269.6924 497.9233 269.6924 503 c
269.6924 508.0767 265.5767 512.1924 260.5 512.1924 c
255.4233 512.1924 251.3076 508.0767 251.3076 503 c
251.3076 497.9233 255.4233 493.8076 260.5 493.8076 c
s
260.5 503 m
S
U
0 To
1 0 0 1 260.5 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.5 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(3) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
251.2588 503 m
244.7075 501.4565 l
246.1138 503 L
244.7075 504.5435 l
251.2588 503 L
f
U
0 R
0 G
0.75 w
270 503 m
332.5 503 l
S
u
345 493.8076 m
350.0767 493.8076 354.1924 497.9233 354.1924 503 c
354.1924 508.0767 350.0767 512.1924 345 512.1924 c
339.9233 512.1924 335.8076 508.0767 335.8076 503 c
335.8076 497.9233 339.9233 493.8076 345 493.8076 c
s
345 503 m
S
U
0 To
1 0 0 1 345 499.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 302 507 0 Tp
TP
-4.7197 0 Td
0 Tr
(2) Tx 
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.7588 503 m
329.2075 501.4565 l
330.6138 503 L
329.2075 504.5435 l
335.7588 503 L
f
U
0 R
0 G
0.75 w
260.25 493.75 m
260.25 459.875 l
S
u
0 O
0 g
1 w
260.25 456.6162 m
258.7065 463.1675 l
260.25 461.7612 L
261.7935 463.1675 l
260.25 456.6162 L
f
U
0 To
1 0 0 1 272.25 477.25 0 Tp
TP
-9.2439 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
/_Times-Roman 9 Tf
(*) Tx 
(\() Tx 
/_Times-Italic 9 Tf
(t) Tx 
/_Times-Roman 9 Tf
(\)) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
260.5 437.8076 m
265.5767 437.8076 269.6924 441.9233 269.6924 447 c
269.6924 452.0767 265.5767 456.1924 260.5 456.1924 c
255.4233 456.1924 251.3076 452.0767 251.3076 447 c
251.3076 441.9233 255.4233 437.8076 260.5 437.8076 c
s
260.5 447 m
S
U
269.5 447 m
332 447 l
S
u
344.5 437.8076 m
349.5767 437.8076 353.6924 441.9233 353.6924 447 c
353.6924 452.0767 349.5767 456.1924 344.5 456.1924 c
339.4233 456.1924 335.3076 452.0767 335.3076 447 c
335.3076 441.9233 339.4233 437.8076 344.5 437.8076 c
s
344.5 447 m
S
U
0 To
1 0 0 1 344.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 301.5 451 0 Tp
TP
-2.4697 0 Td
0 Tr
/_Symbol 9 Tf
(l) Tx 
(\r) TX 
TO
u
335.2588 447 m
328.7075 445.4565 l
330.1138 447 L
328.7075 448.5435 l
335.2588 447 L
f
U
0 To
1 0 0 1 260.5 445 0 Tp
TP
0 Tr
/_Times-Italic 9 Tf
(\r) Tx 
TO
0 To
1 0 0 1 260.5 443.5 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 515 543 613 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 118
%%Page: "113" 119
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(13) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16.1. Phased Missions) 105 719 T
3 11 Q
1.74 ( Many systems exhibit different failure behaviors or operational characteristics during different) 105 700.71 P
0.28 (phases of a mission.  For example, a spacecraft may experience considerably higher component failure) 87 687.71 P
-0.2 (rates during lift-off than in the weightless, benign environment of space.  Also, the failure of a particular) 87 674.71 P
0.05 (component may be catastrophic only during a specific phase, such as the 3-min landing phase of an air-) 87 661.71 P
-0.04 (craft.  In a phased-mission solution, a model is solved for the first phase of the mission.  The final prob-) 87 648.71 P
0.41 (abilities of the operational states are used to calculate the initial state probabilities for a second model.) 87 635.71 P
-0.13 (\050The second model usually differs from the first model in some manner.\051 This process is repeated for all) 87 622.71 P
(phases in the mission.) 87 609.71 T
0.43 (The SURE program reports upper and lower bounds on the operational states, just as for the death) 105 590.26 P
0.61 (states.  The bounds of the operational states are not as close as the death state bounds, but are usually) 87 577.26 P
-0.27 (acceptable. The upper and lower bounds on recovery states \050states with fast transitions leaving them\051 are) 87 564.26 P
1.02 (usually not very close together. Fortunately, recovery states usually have operational bounds that are) 87 551.26 P
0.32 (several orders of magnitude lower than the other states in the model because systems typically spend a) 87 538.26 P
2.25 (very small percentage of their operational time performing recoveries. Thus, the crudeness of the) 87 525.26 P
0.01 (bounds for the recovery states in early phases does not lead to an excessive separation of the final death) 87 512.26 P
-0.25 (state bounds. In other words, the crude operational recovery state probabilities will usually result in only) 87 499.26 P
0.86 (a small separation of the final bounds obtained in phased-mission calculations.  Although the bounds) 87 486.26 P
(may sometimes be unacceptably far apart, they will always be mathematically correct.) 87 473.26 T
1.09 (Suppose we have a system that operates in two basic phases\321cruise and landing. The system is) 105 453.8 P
0.09 (implemented with a triad of processors and two warm spares.  For simplicity, perfect detection of spare) 87 440.8 P
-0.21 (failure is assumed.  During the cruise phase, which lasts for 2 hr, the system reconfigures by sparing and) 87 427.8 P
0.62 (degradation.  After the cruise phase, the system goes into a landing phase, which lasts 3 min.  During) 87 414.8 P
0.12 (the landing phase, the workload on the machines is so high that the additional processing that would be) 87 401.8 P
-0.06 (needed to perform reconfiguration cannot be tolerated.  Therefore, the system is designed to turn off the) 87 388.8 P
(reconfiguration processes during this phase.) 87 375.8 T
0.15 (To model this two-phased mission, a different models must be created for each phase.  The follow-) 105 356.35 P
(ing ASSIST input describes a model for the cruise phase:) 87 343.35 T
7 9.75 Q
(NSI = 2;) 87 324.73 T
(\050* Number of spares initially *\051) 261 324.73 T
(LAMBDA = 1E-4;) 87 312.52 T
(\050* Failure rate of active processors *\051) 261 312.52 T
(GAMMA = 1E-6;) 87 300.32 T
(\050* Failure rate of spares *\051) 261 300.32 T
(TIME = 2.0;) 87 288.11 T
(\050* Mission time *\051) 261 288.11 T
(MU = 7.9E-5;) 87 269.91 T
(\050* Mean time to replace with spare *\051) 261 269.91 T
(SIGMA = 2.56E-5;) 87 257.71 T
(\050* Stan. dev. of time to replace with spare *\051) 261 257.71 T
(MU_DEG = 6.3E-5;) 87 239.5 T
(\050* Mean time to degrade to simplex *\051) 261 239.5 T
(SIGMA_DEG = 1.74E-5;) 87 227.3 T
(\050* Stan. dev. of time to degrade to simplex *\051) 261 227.3 T
(SPACE = \050NW: 0..3,) 87 209.09 T
(\050* Number of working processors *\051) 261 209.09 T
(         NF: 0..3,) 87 196.89 T
(\050* Number of failed active procssors *\051) 261 196.89 T
(         NS: 0..NSI\051;) 87 184.68 T
(\050* Number of spares *\051) 261 184.68 T
(START = \0503,0,NSI\051;) 87 166.48 T
(LIST=3;) 87 148.27 T
(IF NW > 0                               \050* A processor can fail *\051) 87 130.07 T
(   TRANTO \050NW-1,NF+1,NS\051 BY NW*LAMBDA;) 87 117.86 T
(IF \050NF > 0\051 AND \050NS > 0\051                \050* A spare becomes active *\051) 87 99.66 T
(   TRANTO \050NW+1,NF-1,NS-1\051 BY <MU,SIGMA>;) 87 87.46 T
-0.4 (IF \050NF > 0\051 AND \050NS = 0\051                \050* No more spares, degrade to simplex *\051) 87 69.25 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 119
%%Page: "114" 120
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(14) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(   TRANTO \0501,0,0\051 BY <MU_DEG,SIGMA_DEG>;) 87 719.5 T
(IF NS > 0                               \050* A spare fails and is detected *\051) 87 701.39 T
(   TRANTO \050NW,NF,NS-1\051 BY NS*GAMMA;) 87 689.27 T
(DEATHIF NF >= NW;) 87 671.16 T
3 11 Q
(The ASSIST program generates the following SURE model.) 105 652.21 T
7 9.75 Q
(NSI = 2;) 87 633.68 T
(LAMBDA = 1E-4;) 87 621.57 T
(GAMMA = 1E-6;) 87 609.45 T
(TIME = 2.0;) 87 597.34 T
(MU = 7.9E-5;) 87 585.22 T
(SIGMA = 2.56E-5;) 87 573.11 T
(MU_DEG = 6.3E-5;) 87 560.99 T
(SIGMA_DEG = 1.74E-5;) 87 548.88 T
(LIST = 3;) 87 536.77 T
(      2\050* 3,0,2 *\051,     3\050* 2,1,2 *\051        = 3*LAMBDA;) 87 513.65 T
(      2\050* 3,0,2 *\051,     4\050* 3,0,1 *\051        = 2*GAMMA;) 87 501.54 T
(      3\050* 2,1,2 *\051,     4\050* 3,0,1 *\051        = <MU,SIGMA>;) 87 489.42 T
(      3\050* 2,1,2 *\051,     1\050* 1,2,2 DEATH  *\051 = 2*LAMBDA;) 87 477.31 T
(      3\050* 2,1,2 *\051,     5\050* 2,1,1 *\051        = 2*GAMMA;) 87 465.2 T
(      4\050* 3,0,1 *\051,     5\050* 2,1,1 *\051        = 3*LAMBDA;) 87 453.08 T
(      4\050* 3,0,1 *\051,     6\050* 3,0,0 *\051        = 1*GAMMA;) 87 440.97 T
(      5\050* 2,1,1 *\051,     6\050* 3,0,0 *\051        = <MU,SIGMA>;) 87 428.85 T
(      5\050* 2,1,1 *\051,     1\050* 1,2,1 DEATH  *\051 = 2*LAMBDA;) 87 416.74 T
(      5\050* 2,1,1 *\051,     7\050* 2,1,0 *\051        = 1*GAMMA;) 87 404.62 T
(      6\050* 3,0,0 *\051,     7\050* 2,1,0 *\051        = 3*LAMBDA;) 87 392.51 T
(      7\050* 2,1,0 *\051,     8\050* 1,0,0 *\051        = <MU_DEG,SIGMA_DEG>;) 87 380.4 T
(      7\050* 2,1,0 *\051,     1\050* 1,2,0 DEATH  *\051 = 2*LAMBDA;) 87 368.28 T
(      8\050* 1,0,0 *\051,     1\050* 0,1,0 DEATH  *\051 = 1*LAMBDA;) 87 356.17 T
(\050* NUMBER OF STATES IN MODEL = 8 *\051) 87 339.05 T
(\050* NUMBER OF TRANSITIONS IN MODEL = 14 *\051) 87 326.94 T
(\050* 4 DEATH STATES AGGREGATED INTO STATE 1 *\051) 87 314.83 T
3 11 Q
0.6 (The model for the second phase \050) 105 296.88 P
7 F
1.43 (phaz2.mod) 255.21 296.88 P
3 F
0.6 (\051 is easily created with a text editor by deleting the) 314.61 296.88 P
(reconfiguration transitions and changing the mission time to 0.05 hr.  The resulting file is) 87 283.88 T
7 9.75 Q
(NSI = 2;) 87 265.35 T
(LAMBDA = 1E-4;) 87 253.23 T
(GAMMA = 1E-6; TIME = 2.0; LIST = 3;) 87 241.12 T
(      2\050* 3,0,2 *\051,     3\050* 2,1,2 *\051        = 3*LAMBDA;) 87 229.01 T
(      2\050* 3,0,2 *\051,     4\050* 3,0,1 *\051        = 2*GAMMA;) 87 216.89 T
(      3\050* 2,1,2 *\051,     1\050* 1,2,2 DEATH  *\051 = 2*LAMBDA;) 87 199.78 T
(      3\050* 2,1,2 *\051,     5\050* 2,1,1 *\051        = 2*GAMMA;) 87 187.66 T
(      4\050* 3,0,1 *\051,     5\050* 2,1,1 *\051        = 3*LAMBDA;) 87 175.55 T
(      4\050* 3,0,1 *\051,     6\050* 3,0,0 *\051        = 1*GAMMA;) 87 163.43 T
(      5\050* 2,1,1 *\051,     1\050* 1,2,1 DEATH  *\051 = 2*LAMBDA;) 87 146.32 T
(      5\050* 2,1,1 *\051,     7\050* 2,1,0 *\051        = 1*GAMMA;) 87 134.21 T
(      6\050* 3,0,0 *\051,     7\050* 2,1,0 *\051        = 3*LAMBDA;) 87 122.09 T
(      7\050* 2,1,0 *\051,     1\050* 1,2,0 DEATH  *\051 = 2*LAMBDA;) 87 104.98 T
(      8\050* 1,0,0 *\051,     1\050* 0,1,0 DEATH  *\051 = 1*LAMBDA;) 87 92.86 T
(\050* NUMBER OF STATES IN MODEL = 8 *\051) 87 75.75 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 120
%%Page: "115" 121
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(15) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(\050* NUMBER OF TRANSITIONS IN MODEL = 14 *\051) 87 719.5 T
(\050* 4 DEATH STATES AGGREGATED INTO STATE 1 *\051) 87 707.44 T
3 11 Q
1.12 (The SURE program is then executed on the first model \050stored in file) 105 689.54 P
7 F
2.69 (phaz.mod) 426.64 689.54 P
3 F
1.12 (\051 by using the) 479.44 689.54 P
7 F
0.77 (LIST) 87 676.54 P
0.77 (=) 120 676.54 P
0.77 (3) 133.2 676.54 P
3 F
0.32 ( option.  This operation causes the SURE program to output all operational state probabili-) 139.8 676.54 P
(ties, as well as the death state probabilities. This output is) 87 663.54 T
7 9.75 Q
(SURE V7.2   NASA Langley Research Center) 99.6 645.07 T
(  1? read0 phaz) 87 628.01 T
( 31? run) 87 610.95 T
( MODEL FILE = phaz.mod                     SURE V7.2 11 Jan 90   13:56:49) 87 593.89 T
(DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS                 RUN #1) 87 570.07 T
(----------   -----------   -----------    ---------------------------------) 87 558.01 T
(     1       9.35692e-12   9.48468e-12) 87 545.95 T
(TOTAL        9.35692e-12   9.48468e-12) 87 533.89 T
(OPER-STATE    LOWERBOUND    UPPERBOUND) 87 510.08 T
(----------   -----------   -----------) 87 498.02 T
(      2       9.99396e-01   9.99396e-01) 87 485.96 T
(      3       0.00000e+00   1.53952e-06) 87 473.9 T
(      4       6.02277e-04   6.03819e-04) 87 461.84 T
(      5       0.00000e+00   1.43291e-09) 87 449.78 T
(      6       1.80332e-07   1.81768e-07) 87 437.72 T
(      7       0.00000e+00   5.59545e-13) 87 425.66 T
(      8       3.57995e-11   3.63591e-11) 87 413.6 T
(20 PATH\050S\051 PROCESSED) 87 389.78 T
(0.617 SECS. CPU TIME UTILIZED) 87 377.72 T
(32? exit) 87 365.66 T
3 11 Q
-0.03 (The SURE program also creates a file containing these operational and death state probabilities in a) 105 346.77 P
1.01 (format that can be used to initialize the states for the next phase. The SURE program names the file) 87 333.77 P
7 F
0.9 (phaz.ini) 87 320.77 P
3 F
0.38 (, that is, it adds) 139.8 320.77 P
7 F
0.9 (.ini) 211.04 320.77 P
3 F
0.38 ( to the file name.  The contents of this file generated by the previous) 237.44 320.77 P
(run  is) 87 307.77 T
7 9.75 Q
(INITIAL_PROBS\050) 87 289.29 T
(    1: \050 9.35692e-12, 9.48468e-12\051,) 87 277.23 T
(    2: \050 9.99396e-01, 9.99396e-01\051,) 87 265.17 T
(    3: \050 0.00000e+00, 1.53952e-06\051,) 87 253.11 T
(    4: \050 6.02277e-04, 6.03819e-04\051,) 87 241.05 T
(    5: \050 0.00000e+00, 1.43291e-09\051,) 87 228.99 T
(    6: \050 1.80332e-07, 1.81768e-07\051,) 87 216.93 T
(    7: \050 0.00000e+00, 5.59545e-13\051,) 87 204.86 T
(    8: \050 3.57995e-11, 3.63591e-11\051) 87 192.8 T
( \051;) 87 180.74 T
3 11 Q
0.6 ( Next, the SURE program is executed on the second model.  The state probabilities are initialized) 105 162.85 P
0.69 (with the SURE) 87 149.85 P
7 F
1.64 (INITIAL_PROBS) 158.42 149.85 P
3 F
0.69 ( command.  The second model must number its states in a manner) 244.22 149.85 P
-0.2 (equivalent to the first model.  Note that the output of the) 87 136.85 P
7 F
-0.49 (.ini) 335.42 136.85 P
3 F
-0.2 ( file is in the correct format for the SURE) 361.82 136.85 P
(program.) 87 123.85 T
7 9.75 Q
($ sure) 87 105.37 T
(  SURE V7.2   NASA Langley Research Center) 87 87.31 T
(  1? read0 phaz2) 87 69.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 121
%%Page: "116" 122
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(16) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
( 31? read phaz.ini) 87 719.5 T
( 32: INITIAL_PROBS\050) 87 701.46 T
( 33:     1: \050 9.35692e-12, 9.48468e-12\051,) 87 689.41 T
( 34:     2: \050 9.99396e-01, 9.99396e-01\051,) 87 677.36 T
( 35:     3: \050 0.00000e+00, 1.53952e-06\051,) 87 665.32 T
( 36:     4: \050 6.02277e-04, 6.03819e-04\051,) 87 653.28 T
( 37:     5: \050 0.00000e+00, 1.43291e-09\051,) 87 641.23 T
( 38:     6: \050 1.80332e-07, 1.81768e-07\051,) 87 629.19 T
( 39:     7: \050 0.00000e+00, 5.59545e-13\051,) 87 617.14 T
( 40:     8: \050 3.57995e-11, 3.63591e-11\051) 87 605.1 T
( 41:   \051;) 87 593.05 T
( 42? run) 87 575.01 T
( MODEL FILE = phaz.ini                    SURE V7.2 11 Jan 90   13:58:12) 87 556.96 T
(DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS                 RUN #1) 87 532.92 T
(----------   -----------   -----------    ---------------------------------) 87 520.87 T
(     1       8.43564e-11   9.98944e-11) 87 508.83 T
(TOTAL        8.43564e-11   9.98944e-11) 87 496.78 T
(OPER-STATE    LOWERBOUND    UPPERBOUND) 87 472.74 T
(----------   -----------   -----------) 87 460.69 T
(     2       9.99381e-01   9.99381e-01) 87 448.65 T
(     3       1.49908e-05   1.65304e-05) 87 436.6 T
(     4       6.02368e-04   6.03910e-04) 87 424.56 T
(     5       9.03554e-09   1.04918e-08) 87 412.51 T
(     6       1.80359e-07   1.81795e-07) 87 400.47 T
(     7       2.70540e-12   3.28658e-12) 87 388.42 T
(     8       3.57993e-11   3.63589e-11) 87 376.38 T
( 9 PATH\050S\051 PRUNED AT LEVEL  1.49540e-16) 87 352.33 T
( SUM OF PRUNED STATES PROBABILITY <  5.04017e-18) 87 340.29 T
(9 PATH\050S\051 PROCESSED) 87 322.24 T
(0.417 SECS. CPU TIME UTILIZED) 87 310.2 T
(43?) 87 298.15 T
4 10.5 Q
(16.2. Nonconstant Failur) 105 273.61 T
(e Rates) 215.65 273.61 T
3 11 Q
0.54 (In section 16.1, a two-phased mission that required different models for each phase was analyzed.) 105 255.48 P
-0.03 (A related situation occurs when the structure of the model remains the same, but some parameters, such) 87 242.48 P
(as the failure rates, change from one phase to another.) 87 229.48 T
0.32 (Consider a triad with warm spares \050see section 9.2\051 that experiences different failure rates for each) 105 210.19 P
(phase.) 87 197.19 T
(1.) 105 177.89 T
(Phase 1: 6 min,) 117 177.89 T
6 F
(l) 187.59 177.89 T
3 F
( = 2) 193.63 177.89 T
6 F
(\264) 213.58 177.89 T
3 F
( 10) 219.62 177.89 T
6 8.8 Q
(-) 233.37 182.29 T
3 F
(4) 238.2 182.29 T
3 11 Q
(,) 242.6 177.89 T
6 F
(g) 253.6 177.89 T
3 F
( = 10) 258.12 177.89 T
6 8.8 Q
(-) 280.83 182.29 T
3 F
(4) 285.66 182.29 T
3 11 Q
(2.) 105 158.6 T
(Phase 2: 2 hr,) 117 158.6 T
6 F
(l) 179.63 158.6 T
3 F
( = 10) 185.67 158.6 T
6 8.8 Q
(-) 208.38 163 T
3 F
(4) 213.21 163 T
3 11 Q
(,) 217.61 158.6 T
6 F
(g) 228.61 158.6 T
3 F
(= 10) 235.88 158.6 T
6 8.8 Q
(-) 255.83 163 T
3 F
(5) 260.66 163 T
3 11 Q
(3.) 105 139.3 T
(Phase 3: 3 min,) 117 139.3 T
6 F
(l) 187.59 139.3 T
3 F
( = 10) 193.63 139.3 T
6 8.8 Q
(-) 216.33 143.7 T
3 F
(3) 221.16 143.7 T
3 11 Q
(,) 225.56 139.3 T
6 F
(g) 236.56 139.3 T
3 F
(= 10) 243.83 139.3 T
6 8.8 Q
(-) 263.79 143.7 T
3 F
(4) 268.62 143.7 T
3 11 Q
(Immediate detection of spare failure will be assumed for simplicity.) 105 120.01 T
0.47 (The same SURE model can be used for all phases and the user can be prompted for the parameter) 105 100.71 P
(values by using the SURE) 87 87.71 T
7 F
(INPUT) 205.25 87.71 T
3 F
( command:) 238.25 87.71 T
7 9.75 Q
(INPUT LAMBDA, GAMMA, TIME;) 105 69.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 122
%%Page: "117" 123
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(17) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(The full SURE model, which is stored in file) 105 718.67 T
7 F
(phase.mod) 304.83 718.67 T
3 F
(, is) 364.23 718.67 T
7 9.75 Q
(INPUT LAMBDA, GAMMA, TIME;) 87 700.48 T
(NSI = 2;) 87 688.71 T
(MU = 7.9E-5;) 87 676.95 T
(SIGMA = 2.56E-5;) 87 665.18 T
(MU_DEG = 6.3E-5;) 87 653.41 T
(SIGMA_DE = 1.74E-5;) 87 641.64 T
(LIST = 3;) 87 629.88 T
(QTCALC = 1;) 87 618.11 T
(    2\050* 3,0,2 *\051,    3\050* 2,1,2 *\051 = 3*LAMBDA;) 87 595.34 T
(    2\050* 3,0,2 *\051,    4\050* 3,0,1 *\051 = 2*GAMMA;) 87 583.57 T
(    3\050* 2,1,2 *\051,    1\050* 1,2,2 *\051 = 2*LAMBDA;) 87 571.8 T
(    3\050* 2,1,2 *\051,    4\050* 3,0,1 *\051 = <MU,SIGMA>;) 87 560.04 T
(    3\050* 2,1,2 *\051,    5\050* 2,1,1 *\051 = 2*GAMMA;) 87 548.27 T
(    4\050* 3,0,1 *\051,    5\050* 2,1,1 *\051 = 3*LAMBDA;) 87 536.5 T
(    4\050* 3,0,1 *\051,    6\050* 3,0,0 *\051 = 1*GAMMA;) 87 524.73 T
(    5\050* 2,1,1 *\051,    1\050* 1,2,1 *\051 = 2*LAMBDA;) 87 512.96 T
(    5\050* 2,1,1 *\051,    6\050* 3,0,0 *\051 = <MU,SIGMA>;) 87 501.2 T
(    5\050* 2,1,1 *\051,    7\050* 2,1,0 *\051 = 1*GAMMA;) 87 489.43 T
(    6\050* 3,0,0 *\051,    7\050* 2,1,0 *\051 = 3*LAMBDA;) 87 477.66 T
(    7\050* 2,1,0 *\051,    1\050* 1,2,0 *\051 = 2*LAMBDA;) 87 465.89 T
(    7\050* 2,1,0 *\051,    8\050* 1,0,0 *\051 = <MU_DEG,SIGMA_DEG>;) 87 454.12 T
(    8\050* 1,0,0 *\051,    1\050* 0,1,0 *\051 = 1*LAMBDA;) 87 442.36 T
3 11 Q
0.02 (The) 105 424.76 P
7 F
0.04 (QTCALC) 124.87 424.76 P
0.04 (=) 171.07 424.76 P
0.04 (1) 184.27 424.76 P
3 F
0.02 ( command causes the SURE program to use more accurate \050but slower\051 numeri-) 190.87 424.76 P
2.72 (cal routines.  This increased accuracy is often necessary when analyzing phased missions.  The) 87 411.76 P
(interactive session follows:) 87 398.76 T
7 9.75 Q
( SURE V7.2   NASA Langley Research Center) 87 380.57 T
(  1? read0 phase) 87 362.8 T
(     LAMBDA? 2e-4) 87 345.04 T
(     GAMMA? 1e-4) 87 327.27 T
(     TIME? .1) 87 309.5 T
( 30? run) 87 291.73 T
( MODEL FILE = phase.mod                   SURE V7.2 12 Jan 90   09:35:50) 87 273.97 T
( TIME =  1.000e-01,  GAMMA =  1.000e-04,  LAMBDA =  2.000e-04,) 87 250.2 T
( DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS                 RUN #1) 87 226.43 T
( ----------   -----------   -----------    ---------------------------------) 87 214.66 T
(      1       1.78562e-12   1.89600e-12    <ExpMat>) 87 202.89 T
( TOTAL        1.78562e-12   1.89600e-12    <ExpMat - 14,14>) 87 185.12 T
( OPER-STATE    LOWERBOUND    UPPERBOUND) 87 161.36 T
( ----------   -----------   -----------) 87 149.59 T
(      2       9.99920e-01   9.99920e-01    <ExpMat>) 87 137.82 T
(      3       0.00000e+00   9.98043e-07    <ExpMat>) 87 126.05 T
(      4       7.89960e-05   7.99941e-05    <ExpMat>) 87 114.29 T
(      5       0.00000e+00   1.14966e-10    <ExpMat>) 87 102.52 T
(      6       2.67751e-09   2.80076e-09    <ExpMat>) 87 90.75 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 123
%%Page: "118" 124
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(18) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(      7       0.00000e+00   5.17358e-15    <ExpMat>) 87 719.5 T
(      8       5.08706e-14   5.60442e-14    <ExpMat>) 87 707.72 T
(  10 PATH\050S\051 PRUNED AT LEVEL  4.75740e-20) 87 683.93 T
(  SUM OF PRUNED STATES PROBABILITY <  6.11113e-20) 87 672.15 T
(  Q\050T\051 ACCURACY >= 14 DIGITS) 87 660.37 T
( 10 PATH\050S\051 PROCESSED) 87 642.58 T
( 2.867 SECS. CPU TIME UTILIZED) 87 630.8 T
( 31? read0 phase) 87 619.02 T
(     LAMBDA? 1e-4) 87 601.23 T
(     GAMMA? 1e-5) 87 583.45 T
(     TIME? 2.0) 87 565.67 T
( 60? read phase.ini) 87 547.88 T
( 61: INITIAL_PROBS\050) 87 530.1 T
( 62:     1: \050 1.78562e-12, 1.89600e-12\051,) 87 518.32 T
( 63:     2: \050 9.99920e-01, 9.99920e-01\051,) 87 506.53 T
( 64:     3: \050 0.00000e+00, 9.98043e-07\051,) 87 494.75 T
( 65:     4: \050 7.89960e-05, 7.99941e-05\051,) 87 482.97 T
( 66:     5: \050 0.00000e+00, 1.14966e-10\051,) 87 471.18 T
( 67:     6: \050 2.67751e-09, 2.80076e-09\051,) 87 459.4 T
( 68:     7: \050 0.00000e+00, 5.17358e-15\051,) 87 447.62 T
( 69:     8: \050 5.08706e-14, 5.60442e-14\051) 87 435.83 T
( 70:   \051;) 87 424.05 T
(       0.07 SECS. TO READ MODEL FILE  71? run) 87 406.27 T
( MODEL FILE = phase.ini                   SURE V7.2 12 Jan 90   09:36:19) 87 388.48 T
( TIME =  2.000e+00,  GAMMA =  1.000e-05,  LAMBDA =  1.000e-04,) 87 364.7 T
( DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS                 RUN #2) 87 340.92 T
( ----------   -----------   -----------    ---------------------------------) 87 329.13 T
(      1       1.11438e-11   1.13950e-11    <ExpMat>) 87 317.35 T
( TOTAL        1.11438e-11   1.13950e-11    <ExpMat - 14,14>) 87 299.57 T
( OPER-STATE    LOWERBOUND    UPPERBOUND) 87 275.78 T
( ----------   -----------   -----------) 87 264 T
(      2       9.99280e-01   9.99280e-01    <ExpMat>) 87 252.22 T
(      3       0.00000e+00   2.35621e-06    <ExpMat>) 87 240.43 T
(      4       7.17134e-04   7.20490e-04    <ExpMat>) 87 228.65 T
(      5       0.00000e+00   2.82024e-09    <ExpMat>) 87 216.87 T
(      6       2.48355e-07   2.51362e-07    <ExpMat>) 87 205.08 T
(      7       0.00000e+00   1.19806e-12    <ExpMat>) 87 193.3 T
(      8       5.53210e-11   5.65243e-11    <ExpMat>) 87 181.52 T
(  30 PATH\050S\051 PRUNED AT LEVEL  4.61326e-19) 87 169.73 T
(  SUM OF PRUNED STATES PROBABILITY <  1.15985e-18) 87 157.95 T
(  Q\050T\051 ACCURACY >= 14 DIGITS) 87 146.17 T
( 19 PATH\050S\051 PROCESSED) 87 128.38 T
( 4.267 SECS. CPU TIME UTILIZED) 87 116.6 T
( 72? read0 phase) 87 104.82 T
(     LAMBDA? 1e-3) 87 87.03 T
(     GAMMA? 1e-4) 87 69.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 124
%%Page: "119" 125
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 298.83 46 T
(19) 303.5 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9.75 Q
(     TIME? 0.05) 87 719.5 T
(101? read phase.ini) 87 701.22 T
(102: INITIAL_PROBS\050) 87 682.94 T
(103:     1: \050 1.11438e-11, 1.13950e-11\051,) 87 670.67 T
(104:     2: \050 9.99280e-01, 9.99280e-01\051,) 87 658.39 T
(105:     3: \050 0.00000e+00, 2.35621e-06\051,) 87 646.11 T
(106:     4: \050 7.17134e-04, 7.20490e-04\051,) 87 633.83 T
(107:     5: \050 0.00000e+00, 2.82024e-09\051,) 87 621.55 T
(108:     6: \050 2.48355e-07, 2.51362e-07\051,) 87 609.28 T
(109:     7: \050 0.00000e+00, 1.19806e-12\051,) 87 597 T
(110:     8: \050 5.53210e-11, 5.65243e-11\051) 87 584.72 T
(111:   \051;) 87 572.44 T
(112? run) 87 554.17 T
( MODEL FILE = phase.ini                   SURE V7.2 12 Jan 90   09:36:57) 87 535.89 T
( TIME =  5.000e-02,  GAMMA =  1.000e-04,  LAMBDA =  1.000e-03,) 87 517.61 T
( DEATHSTATE    LOWERBOUND    UPPERBOUND    COMMENTS                 RUN #3) 87 493.33 T
( ----------   -----------   -----------    ---------------------------------) 87 481.05 T
(      1       3.29083e-11   3.54718e-11    <ExpMat>) 87 468.78 T
( TOTAL        3.29083e-11   3.54718e-11    <ExpMat - 14,14>) 87 450.5 T
( OPER-STATE    LOWERBOUND    UPPERBOUND) 87 426.22 T
( ----------   -----------   -----------) 87 413.94 T
(      2       9.99120e-01   9.99120e-01    <ExpMat>) 87 401.67 T
(      3       0.00000e+00   6.30518e-06    <ExpMat>) 87 389.39 T
(      4       8.72933e-04   8.82595e-04    <ExpMat>) 87 377.11 T
(      5       0.00000e+00   7.50836e-09    <ExpMat>) 87 364.83 T
(      6       3.68000e-07   3.78561e-07    <ExpMat>) 87 352.55 T
(      7       0.00000e+00   3.72751e-12    <ExpMat>) 87 340.28 T
(      8       9.99350e-11   1.04866e-10    <ExpMat>) 87 328 T
(  33 PATH\050S\051 PRUNED AT LEVEL  8.23385e-18) 87 303.72 T
(  SUM OF PRUNED STATES PROBABILITY <  3.35190e-17) 87 291.44 T
(  Q\050T\051 ACCURACY >= 14 DIGITS) 87 279.17 T
( 13 PATH\050S\051 PROCESSED) 87 260.89 T
( 3.350 SECS. CPU TIME UTILIZED) 87 248.61 T
(113? exit) 87 236.33 T
3 11 Q
-0.21 (As in section 16.2, the results of each previous phase are loaded by reading the) 105 217.22 P
7 F
-0.51 (.ini) 451.57 217.22 P
3 F
-0.21 ( file created by) 477.97 217.22 P
1.65 (the previous run.  The) 87 204.22 P
7 F
3.96 (<ExpMat>) 194.84 204.22 P
3 F
1.65 ( output in the) 247.64 204.22 P
7 F
3.96 (COMMENTS) 315.35 204.22 P
3 F
1.65 ( field indicates that the more accurate) 368.15 204.22 P
7 F
(QTCALC=1) 87 191.22 T
3 F
( numerical routines were utilized.) 139.8 191.22 T
4 10.5 Q
(16.3. Continuously V) 105 166.03 T
(arying Failur) 197.97 166.03 T
(e Rates) 257.58 166.03 T
3 11 Q
0.78 (Suppose that the failure rates change continuously with time as shown in figure 61.  This type of) 105 147.67 P
-0.16 (failure rate is called a decreasing failure rate. The SURE program cannot handle this failure rate directly) 87 134.67 P
-0.17 (because it leads to nonhomogenous or nonstationary Markov models.  Nonhomogenous Markov models) 87 121.67 P
-0.1 (are more general than pure Markov models in that they allow the transition rates to vary as a function of) 87 108.67 P
0.01 (global time.  This generalization is different from the semi-Markov model first discussed in section 4.1.) 87 95.67 P
1.35 (However, good results can be obtained by using the phased-mission approach on a linearized upper) 87 82.67 P
(bound as shown in figure 62.) 87 69.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 125
%%Page: "120" 126
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(120) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.93 (The solution of the linearized model requires nine steps, but is quite easy with the use of the) 105 541.67 P
7 F
1.8 (.ini) 87 528.67 P
3 F
0.75 (files.  Because an upper bound is used for the failure rate, the result will be conservative.  The) 116.15 528.67 P
0.93 (problem can then be solved again by using a consistently lower bound on the failure rate function to) 87 515.67 P
(obtain a lower bound on the system failure probability.) 87 502.67 T
4 12 Q
(17. Concluding Remarks) 87 476.67 T
3 11 Q
1.81 ( This paper is intended to serve as a tutorial for reliability engineers who are learning how to) 105 458 P
1.26 (develop Markov models of fault-tolerant systems. A number of techniques for developing reliability) 87 445 P
1.72 (models of fault-tolerant systems have been presented. Various modeling techniques have been pre-) 87 432 P
1.06 (sented in a systematic way, building from simple systems to more complicated ones. Techniques for) 87 419 P
-0.09 (modeling specific aspects, such as single-point failures, near-coincident failures, transient fault recover-) 87 406 P
-0.04 (ies, and cold spares have been discussed. However, it must be recognized that there is no \322right\323 way to) 87 393 P
-0.19 (model a system. Many valid ways to model a given system exist, and choosing which method will result) 87 380 P
(in an efficient, informative model is sometimes more of an art than a science.) 87 367 T
-0.25 (Including every minute detail in a reliability model of a complex system is impossible, because such) 105 347.67 P
0.45 (a model would be exorbitantly large. It is not even possible to completely understand and measure the) 87 334.67 P
0.48 (reliability behavior of a system in minute detail.  Therefore, the reliability engineer must make certain) 87 321.67 P
-0.19 (assumptions about the behavior of a system. Some of these assumptions are immediately obvious; while) 87 308.67 P
(others must be demonstrated or proven correct.) 87 295.67 T
0.46 (Markov modeling can be a very powerful reliability analysis tool for three reasons.  First, Markov) 105 276.34 P
-0.01 (models provide the reliability engineer the flexibility to include a variety of assumptions and behaviors.) 87 263.34 P
0.99 (Second, the reliability engineer is fully aware of the assumptions being made because they are made) 87 250.34 P
-0.17 (explicitly. And third, the reliability engineer can estimate the effects of those assumptions on the system) 87 237.34 P
(failure probability calculations.) 87 224.34 T
0.77 (However, reliability analysis requires a certain level of expertise that cannot be easily automated.) 105 205 P
0.44 (The use of an automated tool that makes implicit assumptions can be dangerous.  Even if the engineer) 87 192 P
0.34 (completely understands what implicit assumptions a tool can make,  these assumptions are likely to be) 87 179 P
1.27 (forgotten if they are not made visible. For this reason, the ASSIST program is designed to generate) 87 166 P
1.15 (exactly the model described in the input language and to not make any implicit assumptions.  Thus,) 87 153 P
1.52 (ASSIST includes all the flexibility of Markov models.  It also requires the same level of modeling) 87 140 P
(expertise.) 87 127 T
3 9 Q
(NASA Langley Research Center) 87 91 T
(Hampton, V) 87 80 T
(A 23681-0001) 130.34 80 T
(April 21, 1995) 87 69 T
(Figure 61.  Decreasing failure rate function.) 116.02 576 T
(Figure 62.  Upper bound on failure rate functions.) 345.27 576 T
87 582 303 726 C
87 593 303 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 184 344 407 454 223 110 79 594 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig61.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig61.ps)
%%CreationDate: (8/1/95) (11:23 AM)
%%BoundingBox: 184 344 407 454
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.7425 w 4 M []0 d
%AI3_Note:
0 D
214.1468 451.4459 m
214.1468 358.0382 l
403.9075 358.0382 l
S
219.4063 437.9817 m
223.8242 437.9817 l
228.8732 435.4572 l
234.1327 431.0392 l
245.7035 425.5695 l
248.0176 423.2553 l
259.7988 419.0477 l
270.9487 410.4223 l
291.145 402.2175 l
305.03 391.4882 l
316.6008 385.8081 l
331.7479 384.1251 l
348.9989 375.9203 l
366.4602 373.6062 l
382.8697 369.8194 l
402.0141 366.8741 l
S
0 To
0.8415 0 0 0.8415 306.713 346.4674 0 Tp
TP
-16.1666 0 Td
0 Tr
0 O
0 g
0.99 w
/_Times-Roman 10.5882 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
10.5882 0 Tl
0 Tc
0 Tw
(Time\() Tx 
/_Times-Italic 10.5882 Tf
(t) Tx 
/_Times-Roman 10.5882 Tf
(\)) Tx 
(\r) TX 
TO
0 To
0.8415 0 0 0.8415 200.9796 404.3213 0 Tp
TP
-7.8998 0 Td
0 Tr
/_Symbol 10.5882 Tf
(l) Tx 
/_Times-Roman 10.5882 Tf
(\() Tx 
/_Times-Italic 10.5882 Tf
(t) Tx 
/_Times-Roman 10.5882 Tf
(\)) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 582 303 726 C
0 0 612 792 C
327 582 543 726 C
327 593.5 543 726 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 182 344 405 454 223 110 321.5 595 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/fig62.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (fig62.ps)
%%CreationDate: (8/1/95) (11:23 AM)
%%BoundingBox: 182 344 405 454
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.7425 w 4 M []0 d
%AI3_Note:
0 D
211.9151 451.2574 m
211.9151 357.8497 l
401.6757 357.8497 l
S
217.1745 437.7933 m
221.5924 437.7933 l
226.6415 435.2688 l
231.9009 431.2715 l
238.8434 427.6951 l
245.7858 423.0668 l
256.9359 418.8593 l
268.0859 410.4442 l
288.7029 401.6083 l
302.7982 390.6687 l
314.369 385.6196 l
328.2539 383.3054 l
346.7672 375.7318 l
363.8078 372.7865 l
380.638 369.6309 l
399.3615 365.8441 l
S
0 To
0.8415 0 0 0.8415 304.4812 346.2789 0 Tp
TP
-16.1666 0 Td
0 Tr
0 O
0 g
0.99 w
/_Times-Roman 10.5882 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
10.5882 0 Tl
0 Tc
0 Tw
(Time\() Tx 
/_Times-Italic 10.5882 Tf
(t) Tx 
/_Times-Roman 10.5882 Tf
(\)) Tx 
(\r) TX 
TO
0 To
0.8415 0 0 0.8415 198.7479 404.1328 0 Tp
TP
-7.8998 0 Td
0 Tr
/_Symbol 10.5882 Tf
(l) Tx 
/_Times-Roman 10.5882 Tf
(\() Tx 
/_Times-Italic 10.5882 Tf
(t) Tx 
/_Times-Roman 10.5882 Tf
(\)) Tx 
(\r) TX 
TO
0 R
0 G
0.7425 w [2.97 2.97 ]0 d
216.9641 439.6867 m
230.849 439.6867 l
230.849 433.165 l
247.8896 433.165 l
247.8896 423.4876 l
264.5095 423.4876 l
264.5095 416.1243 l
278.6048 416.1243 l
278.6048 406.2367 l
294.5935 406.2367 l
294.5935 399.9253 l
311.2133 399.9253 l
311.2133 387.9337 l
337.0898 387.9337 l
337.0898 380.9913 l
365.7011 380.9913 l
365.7011 373.4177 l
396.837 373.4177 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
327 582 543 726 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 126
%%Page: "121" 127
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(121) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
(Appendix) 87 718 T
(Additional SURE Mathematics) 87 689.07 T
3 11 Q
0.19 (In this appendix, additional important aspects of the SURE mathematical foundation are presented.) 105 667.81 P
2.7 (The methods described in this section were not published in reference 1, but were discussed in) 87 654.81 P
(reference) 87 641.81 T
(9.) 130.66 641.81 T
4 12 Q
(A1.  T) 87 613.21 T
(echnique for Solving Models W) 117.56 613.21 T
(ith Loops Using SURE) 278.03 613.21 T
3 11 Q
0.58 (Although the bounding theorem of White is only concerned with paths that do not contain a loop,) 105 591.95 P
-0.21 (the SURE program uses a strategy based upon pruning to solve models with loops.   A model containing) 87 578.95 P
1.16 (loops \050its graph structure contains a circuit\051 has an infinite number of paths.  Consider the model in) 87 565.95 P
(figure A1. Unfolding the loop produces an infinite sequence of paths as shown in figure A2.) 87 552.95 T
1.49 (However, the situation is not intractable because the resulting sequence consists of increasingly) 105 199.01 P
-0.16 (longer paths.  The death state probabilities of the paths decrease rapidly like a Taylor\325s series.  A typical) 87 186.01 P
(sequence of probabilities would be) 87 173.01 T
0.19 (The series can be truncated at a point where the sum of all subsequent probabilities becomes negli-) 105 121.67 P
1.02 (gible.  The SURE program accomplishes this truncation in a manner that enables a calculation of an) 87 108.67 P
0.02 (upper and a lower bound on the truncation error.  The technique is based on  a model with a loop that is) 87 95.67 P
0.69 (equivalent to a finite sequence of paths where only the last path in the sequence contains a loop.  For) 87 82.67 P
1.12 (example, the model shown in figure A1 can be reduced to the three paths shown in figure A3.  The) 87 69.67 P
3 9 Q
(Figure A1.  Model with loop.) 262.12 474.28 T
(Figure A2.  Infinite sequence of paths.) 245.76 236.28 T
87 480.28 543 525.28 C
232 491.28 398 525.28 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 213 631 367 663 154 32 238 491.28 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/figA1.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (figA1.ps)
%%CreationDate: (4/20/95) (12:09 PM)
%%BoundingBox: 213 631 367 663
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 225.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 641.3598 m
230.3267 641.3598 234.4424 645.4756 234.4424 650.5523 c
234.4424 655.6289 230.3267 659.7447 225.25 659.7447 c
220.1733 659.7447 216.0576 655.6289 216.0576 650.5523 c
216.0576 645.4756 220.1733 641.3598 225.25 641.3598 c
s
225.25 650.5523 m
S
U
234.25 650.5523 m
255.75 650.5523 l
S
u
268.25 641.3598 m
273.3267 641.3598 277.4424 645.4756 277.4424 650.5523 c
277.4424 655.6289 273.3267 659.7447 268.25 659.7447 c
263.1733 659.7447 259.0576 655.6289 259.0576 650.5523 c
259.0576 645.4756 263.1733 641.3598 268.25 641.3598 c
s
268.25 650.5523 m
S
U
0 To
1 0 0 1 268.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 654.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 650.5523 m
252.4575 649.0088 l
253.8638 650.5523 L
252.4575 652.0957 l
259.0088 650.5523 L
f
U
0 R
0 G
0.75 w
277.75 650.5523 m
299.25 650.5523 l
S
u
311.75 641.3598 m
316.8267 641.3598 320.9424 645.4756 320.9424 650.5523 c
320.9424 655.6289 316.8267 659.7447 311.75 659.7447 c
306.6733 659.7447 302.5576 655.6289 302.5576 650.5523 c
302.5576 645.4756 306.6733 641.3598 311.75 641.3598 c
s
311.75 650.5523 m
S
U
0 To
1 0 0 1 311.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 654.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 650.5523 m
295.9575 649.0088 l
297.3638 650.5523 L
295.9575 652.0957 l
302.5088 650.5523 L
f
U
0 R
0 G
0.75 w
275.465 639.5128 m
276.95 636.4329 280.1019 634.3076 283.75 634.3076 c
296.5 634.3076 l
300.0987 634.3076 303.0874 636.4428 304.7237 639.3881 c
305.3487 640.5131 306 643.375 y
S
u
0 O
0 g
1 w
274.443 643.469 m
275.04 636.7649 l
276.0624 638.5855 L
277.9701 637.7365 l
274.443 643.469 L
f
U
0 To
1 0 0 1 290.75 636.3023 0 Tp
TP
-2.7488 0 Td
0 Tr
(F) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
321.25 650.5523 m
342.75 650.5523 l
S
u
355.25 641.3598 m
360.3267 641.3598 364.4424 645.4756 364.4424 650.5523 c
364.4424 655.6289 360.3267 659.7447 355.25 659.7447 c
350.1733 659.7447 346.0576 655.6289 346.0576 650.5523 c
346.0576 645.4756 350.1733 641.3598 355.25 641.3598 c
s
355.25 650.5523 m
S
U
0 To
1 0 0 1 355.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 654.5523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
346.0088 650.5523 m
339.4575 649.0088 l
340.8638 650.5523 L
339.4575 652.0957 l
346.0088 650.5523 L
f
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 480.28 543 525.28 C
0 0 612 792 C
87 242.27 543 447.28 C
145 253.27 485 447.28 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 213 472 541 663 328 191 151 253.28 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/figA2.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (figA2.ps)
%%CreationDate: (4/20/95) (12:12 PM)
%%BoundingBox: 213 472 541 663
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 225.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 641.3598 m
230.3267 641.3598 234.4424 645.4756 234.4424 650.5523 c
234.4424 655.6289 230.3267 659.7447 225.25 659.7447 c
220.1733 659.7447 216.0576 655.6289 216.0576 650.5523 c
216.0576 645.4756 220.1733 641.3598 225.25 641.3598 c
s
225.25 650.5523 m
S
U
234.25 650.5523 m
255.75 650.5523 l
S
u
268.25 641.3598 m
273.3267 641.3598 277.4424 645.4756 277.4424 650.5523 c
277.4424 655.6289 273.3267 659.7447 268.25 659.7447 c
263.1733 659.7447 259.0576 655.6289 259.0576 650.5523 c
259.0576 645.4756 263.1733 641.3598 268.25 641.3598 c
s
268.25 650.5523 m
S
U
0 To
1 0 0 1 268.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 654.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 650.5523 m
252.4575 649.0088 l
253.8638 650.5523 L
252.4575 652.0957 l
259.0088 650.5523 L
f
U
0 R
0 G
0.75 w
277.75 650.5523 m
299.25 650.5523 l
S
u
311.75 641.3598 m
316.8267 641.3598 320.9424 645.4756 320.9424 650.5523 c
320.9424 655.6289 316.8267 659.7447 311.75 659.7447 c
306.6733 659.7447 302.5576 655.6289 302.5576 650.5523 c
302.5576 645.4756 306.6733 641.3598 311.75 641.3598 c
s
311.75 650.5523 m
S
U
0 To
1 0 0 1 311.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 654.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 650.5523 m
295.9575 649.0088 l
297.3638 650.5523 L
295.9575 652.0957 l
302.5088 650.5523 L
f
U
0 R
0 G
0.75 w
321.25 650.5523 m
342.75 650.5523 l
S
u
355.25 641.3598 m
360.3267 641.3598 364.4424 645.4756 364.4424 650.5523 c
364.4424 655.6289 360.3267 659.7447 355.25 659.7447 c
350.1733 659.7447 346.0576 655.6289 346.0576 650.5523 c
346.0576 645.4756 350.1733 641.3598 355.25 641.3598 c
s
355.25 650.5523 m
S
U
0 To
1 0 0 1 355.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 654.5523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
346.0088 650.5523 m
339.4575 649.0088 l
340.8638 650.5523 L
339.4575 652.0957 l
346.0088 650.5523 L
f
U
0 To
1 0 0 1 225.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 583.8598 m
230.3267 583.8598 234.4424 587.9756 234.4424 593.0523 c
234.4424 598.1289 230.3267 602.2447 225.25 602.2447 c
220.1733 602.2447 216.0576 598.1289 216.0576 593.0523 c
216.0576 587.9756 220.1733 583.8598 225.25 583.8598 c
s
225.25 593.0523 m
S
U
234.25 593.0523 m
255.75 593.0523 l
S
u
268.25 583.8598 m
273.3267 583.8598 277.4424 587.9756 277.4424 593.0523 c
277.4424 598.1289 273.3267 602.2447 268.25 602.2447 c
263.1733 602.2447 259.0576 598.1289 259.0576 593.0523 c
259.0576 587.9756 263.1733 583.8598 268.25 583.8598 c
s
268.25 593.0523 m
S
U
0 To
1 0 0 1 268.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 593.0523 m
252.4575 591.5088 l
253.8638 593.0523 L
252.4575 594.5957 l
259.0088 593.0523 L
f
U
0 R
0 G
0.75 w
277.75 593.0523 m
299.25 593.0523 l
S
u
311.75 583.8598 m
316.8267 583.8598 320.9424 587.9756 320.9424 593.0523 c
320.9424 598.1289 316.8267 602.2447 311.75 602.2447 c
306.6733 602.2447 302.5576 598.1289 302.5576 593.0523 c
302.5576 587.9756 306.6733 583.8598 311.75 583.8598 c
s
311.75 593.0523 m
S
U
0 To
1 0 0 1 311.75 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 593.0523 m
295.9575 591.5088 l
297.3638 593.0523 L
295.9575 594.5957 l
302.5088 593.0523 L
f
U
0 R
0 G
0.75 w
321.25 593.0523 m
342.75 593.0523 l
S
u
355.25 583.8598 m
360.3267 583.8598 364.4424 587.9756 364.4424 593.0523 c
364.4424 598.1289 360.3267 602.2447 355.25 602.2447 c
350.1733 602.2447 346.0576 598.1289 346.0576 593.0523 c
346.0576 587.9756 350.1733 583.8598 355.25 583.8598 c
s
355.25 593.0523 m
S
U
0 To
1 0 0 1 355.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 597.0523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
346.0088 593.0523 m
339.4575 591.5088 l
340.8638 593.0523 L
339.4575 594.5957 l
346.0088 593.0523 L
f
U
0 To
1 0 0 1 225.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 526.3598 m
230.3267 526.3598 234.4424 530.4756 234.4424 535.5523 c
234.4424 540.6289 230.3267 544.7447 225.25 544.7447 c
220.1733 544.7447 216.0576 540.6289 216.0576 535.5523 c
216.0576 530.4756 220.1733 526.3598 225.25 526.3598 c
s
225.25 535.5523 m
S
U
234.25 535.5523 m
255.75 535.5523 l
S
u
268.25 526.3598 m
273.3267 526.3598 277.4424 530.4756 277.4424 535.5523 c
277.4424 540.6289 273.3267 544.7447 268.25 544.7447 c
263.1733 544.7447 259.0576 540.6289 259.0576 535.5523 c
259.0576 530.4756 263.1733 526.3598 268.25 526.3598 c
s
268.25 535.5523 m
S
U
0 To
1 0 0 1 268.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 535.5523 m
252.4575 534.0088 l
253.8638 535.5523 L
252.4575 537.0957 l
259.0088 535.5523 L
f
U
0 R
0 G
0.75 w
277.75 535.5523 m
299.25 535.5523 l
S
u
311.75 526.3598 m
316.8267 526.3598 320.9424 530.4756 320.9424 535.5523 c
320.9424 540.6289 316.8267 544.7447 311.75 544.7447 c
306.6733 544.7447 302.5576 540.6289 302.5576 535.5523 c
302.5576 530.4756 306.6733 526.3598 311.75 526.3598 c
s
311.75 535.5523 m
S
U
0 To
1 0 0 1 311.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 535.5523 m
295.9575 534.0088 l
297.3638 535.5523 L
295.9575 537.0957 l
302.5088 535.5523 L
f
U
0 R
0 G
0.75 w
321.25 535.5523 m
342.75 535.5523 l
S
u
355.25 526.3598 m
360.3267 526.3598 364.4424 530.4756 364.4424 535.5523 c
364.4424 540.6289 360.3267 544.7447 355.25 544.7447 c
350.1733 544.7447 346.0576 540.6289 346.0576 535.5523 c
346.0576 530.4756 350.1733 526.3598 355.25 526.3598 c
s
355.25 535.5523 m
S
U
0 To
1 0 0 1 355.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 539.5523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
346.0088 535.5523 m
339.4575 534.0088 l
340.8638 535.5523 L
339.4575 537.0957 l
346.0088 535.5523 L
f
U
0 R
0 G
0.75 w
364.25 593.0523 m
385.75 593.0523 l
S
u
398.25 583.8598 m
403.3267 583.8598 407.4424 587.9756 407.4424 593.0523 c
407.4424 598.1289 403.3267 602.2447 398.25 602.2447 c
393.1733 602.2447 389.0576 598.1289 389.0576 593.0523 c
389.0576 587.9756 393.1733 583.8598 398.25 583.8598 c
s
398.25 593.0523 m
S
U
0 To
1 0 0 1 398.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 375.25 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
389.0088 593.0523 m
382.4575 591.5088 l
383.8638 593.0523 L
382.4575 594.5957 l
389.0088 593.0523 L
f
U
0 R
0 G
0.75 w
407.75 593.0523 m
429.25 593.0523 l
S
u
441.75 583.8598 m
446.8267 583.8598 450.9424 587.9756 450.9424 593.0523 c
450.9424 598.1289 446.8267 602.2447 441.75 602.2447 c
436.6733 602.2447 432.5576 598.1289 432.5576 593.0523 c
432.5576 587.9756 436.6733 583.8598 441.75 583.8598 c
s
441.75 593.0523 m
S
U
0 To
1 0 0 1 441.75 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 417.25 597.0523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
432.5088 593.0523 m
425.9575 591.5088 l
427.3638 593.0523 L
425.9575 594.5957 l
432.5088 593.0523 L
f
U
0 R
0 G
0.75 w
364.25 535.5523 m
385.75 535.5523 l
S
0 To
1 0 0 1 373.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(b) Tx 
(\r) TX 
TO
u
389.0088 535.5523 m
382.4575 534.0088 l
383.8638 535.5523 L
382.4575 537.0957 l
389.0088 535.5523 L
f
U
u
0 R
0 G
0.75 w
398.75 526.3598 m
403.8267 526.3598 407.9424 530.4756 407.9424 535.5523 c
407.9424 540.6289 403.8267 544.7447 398.75 544.7447 c
393.6733 544.7447 389.5576 540.6289 389.5576 535.5523 c
389.5576 530.4756 393.6733 526.3598 398.75 526.3598 c
s
398.75 535.5523 m
S
U
407.75 535.5523 m
429.25 535.5523 l
S
u
441.75 526.3598 m
446.8267 526.3598 450.9424 530.4756 450.9424 535.5523 c
450.9424 540.6289 446.8267 544.7447 441.75 544.7447 c
436.6733 544.7447 432.5576 540.6289 432.5576 535.5523 c
432.5576 530.4756 436.6733 526.3598 441.75 526.3598 c
s
441.75 535.5523 m
S
U
0 To
1 0 0 1 441.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 417.25 539.5523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
432.5088 535.5523 m
425.9575 534.0088 l
427.3638 535.5523 L
425.9575 537.0957 l
432.5088 535.5523 L
f
U
0 R
0 G
0.75 w
451.25 535.5523 m
472.75 535.5523 l
S
u
485.25 526.3598 m
490.3267 526.3598 494.4424 530.4756 494.4424 535.5523 c
494.4424 540.6289 490.3267 544.7447 485.25 544.7447 c
480.1733 544.7447 476.0576 540.6289 476.0576 535.5523 c
476.0576 530.4756 480.1733 526.3598 485.25 526.3598 c
s
485.25 535.5523 m
S
U
0 To
1 0 0 1 485.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 462.25 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
476.0088 535.5523 m
469.4575 534.0088 l
470.8638 535.5523 L
469.4575 537.0957 l
476.0088 535.5523 L
f
U
0 R
0 G
0.75 w
494.75 535.5523 m
516.25 535.5523 l
S
u
528.75 526.3598 m
533.8267 526.3598 537.9424 530.4756 537.9424 535.5523 c
537.9424 540.6289 533.8267 544.7447 528.75 544.7447 c
523.6733 544.7447 519.5576 540.6289 519.5576 535.5523 c
519.5576 530.4756 523.6733 526.3598 528.75 526.3598 c
s
528.75 535.5523 m
S
U
0 To
1 0 0 1 528.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 504.25 539.5523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
519.5088 535.5523 m
512.9575 534.0088 l
514.3638 535.5523 L
512.9575 537.0957 l
519.5088 535.5523 L
f
U
0 To
1 0 0 1 288 623.5 0 Tp
TP
-2.5378 0 Td
0 Tr
/_Times-Roman 9 Tf
(+) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288 564.5 0 Tp
TP
-2.5378 0 Td
0 Tr
(+) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288 508.5 0 Tp
TP
-2.5378 0 Td
0 Tr
(+) Tx 
(\r) TX 
TO
u
288 496.8572 m
288.9763 496.8572 289.7678 497.6487 289.7678 498.625 c
289.7678 499.6013 288.9763 500.3928 288 500.3928 c
287.0237 500.3928 286.2322 499.6013 286.2322 498.625 c
286.2322 497.6487 287.0237 496.8572 288 496.8572 c
f
288 498.625 m
F
U
u
288 485.3572 m
288.9763 485.3572 289.7678 486.1487 289.7678 487.125 c
289.7678 488.1013 288.9763 488.8928 288 488.8928 c
287.0237 488.8928 286.2322 488.1013 286.2322 487.125 c
286.2322 486.1487 287.0237 485.3572 288 485.3572 c
f
288 487.125 m
F
U
u
288 473.8572 m
288.9763 473.8572 289.7678 474.6487 289.7678 475.625 c
289.7678 476.6013 288.9763 477.3928 288 477.3928 c
287.0237 477.3928 286.2322 476.6013 286.2322 475.625 c
286.2322 474.6487 287.0237 473.8572 288 473.8572 c
f
288 475.625 m
F
U
0 To
1 0 0 1 398.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
(3) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 242.27 543 447.28 C
0 0 612 792 C
237.32 139.93 392.68 158.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10.5 Q
0 X
0 0 0 1 0 0 0 K
(1) 238.32 144.55 T
(0) 243.57 144.55 T
3 8.5 Q
(6) 253.79 151.04 T
(\320) 249.22 151.04 T
3 10.5 Q
(1) 263.29 144.55 T
(0) 268.54 144.55 T
3 8.5 Q
(1) 278.77 151.04 T
(0) 283.02 151.04 T
(\320) 274.19 151.04 T
3 10.5 Q
(1) 292.51 144.55 T
(0) 297.76 144.55 T
3 8.5 Q
(1) 307.99 151.04 T
(4) 312.24 151.04 T
(\320) 303.41 151.04 T
3 10.5 Q
(1) 321.74 144.55 T
(0) 326.99 144.55 T
3 8.5 Q
(1) 337.21 151.04 T
(8) 341.46 151.04 T
(\320) 332.64 151.04 T
3 10.5 Q
(1) 350.96 144.55 T
(0) 356.21 144.55 T
3 8.5 Q
(2) 366.43 151.04 T
(2) 370.68 151.04 T
(\320) 361.86 151.04 T
6 10.5 Q
(\274) 380.18 144.55 T
(,) 258.04 144.55 T
(,) 287.27 144.55 T
(,) 316.49 144.55 T
(,) 345.71 144.55 T
(,) 374.93 144.55 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 127
%%Page: "122" 128
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(122) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
1.2 (probability of entering the death state of the original path is equal to the sum of the probabilities of) 87 718.67 P
(entering the death state of the three new paths.) 87 705.67 T
0.08 (If the third path is pruned before the loop, then an upper bound can be obtained.  Consequently, the) 105 454 P
0.11 (sum of the three paths shown in figure A4 provides an upper bound on the original model of figure A1.) 87 441 P
0.22 (Thus, a finite unfolding of a loop in conjunction with pruning can be used to solve a model with loops.) 87 428 P
(This is precisely the technique implemented in the SURE program.) 87 415 T
4 12 Q
( A2. Solving Models W) 87 186.66 T
(ith Distributed Initial State Pr) 203.8 186.66 T
(obabilities) 358.25 186.66 T
3 11 Q
0.44 (Suppose that we need to solve a model, whose initial state is not exactly determined, needed to be) 105 162.67 P
0.05 (solved.  Suppose, for example, that the probability that the system is in state \0501\051 at time 0 = 0.5 and that) 87 149.67 P
0.64 (the initial probabilities for states \0502\051 and \0503\051 are 0.3 and 0.2, respectively.  The SURE program solves) 87 136.67 P
0.03 (this model with the following strategy.  The model is solved three times\321first with state \0501\051 as the start) 87 123.67 P
0.21 (state, then with state \0502\051 as the start state, and finally with state \0503\051 as the start state.  Each  preliminary) 87 110.67 P
1.99 (result is multiplied by the  initial probability of its start state, then the resulting values are added) 87 97.67 P
(together.) 87 84.67 T
3 9 Q
(Figure A3.  Reduction to finite set of paths.) 236.75 494 T
(Figure A4.  Model after pruning and reduction.) 230.14 227.33 T
87 500 543 678 C
145 511 485 678 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 213 499 541 663 328 164 151 512 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/figA3.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (figA3.ps)
%%CreationDate: (4/20/95) (12:16 PM)
%%BoundingBox: 213 499 541 663
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 225.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 641.3598 m
230.3267 641.3598 234.4424 645.4756 234.4424 650.5523 c
234.4424 655.6289 230.3267 659.7447 225.25 659.7447 c
220.1733 659.7447 216.0576 655.6289 216.0576 650.5523 c
216.0576 645.4756 220.1733 641.3598 225.25 641.3598 c
s
225.25 650.5523 m
S
U
234.25 650.5523 m
255.75 650.5523 l
S
u
268.25 641.3598 m
273.3267 641.3598 277.4424 645.4756 277.4424 650.5523 c
277.4424 655.6289 273.3267 659.7447 268.25 659.7447 c
263.1733 659.7447 259.0576 655.6289 259.0576 650.5523 c
259.0576 645.4756 263.1733 641.3598 268.25 641.3598 c
s
268.25 650.5523 m
S
U
0 To
1 0 0 1 268.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 654.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 650.5523 m
252.4575 649.0088 l
253.8638 650.5523 L
252.4575 652.0957 l
259.0088 650.5523 L
f
U
0 R
0 G
0.75 w
277.75 650.5523 m
299.25 650.5523 l
S
u
311.75 641.3598 m
316.8267 641.3598 320.9424 645.4756 320.9424 650.5523 c
320.9424 655.6289 316.8267 659.7447 311.75 659.7447 c
306.6733 659.7447 302.5576 655.6289 302.5576 650.5523 c
302.5576 645.4756 306.6733 641.3598 311.75 641.3598 c
s
311.75 650.5523 m
S
U
0 To
1 0 0 1 311.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 654.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 650.5523 m
295.9575 649.0088 l
297.3638 650.5523 L
295.9575 652.0957 l
302.5088 650.5523 L
f
U
0 R
0 G
0.75 w
321.25 650.5523 m
342.75 650.5523 l
S
u
355.25 641.3598 m
360.3267 641.3598 364.4424 645.4756 364.4424 650.5523 c
364.4424 655.6289 360.3267 659.7447 355.25 659.7447 c
350.1733 659.7447 346.0576 655.6289 346.0576 650.5523 c
346.0576 645.4756 350.1733 641.3598 355.25 641.3598 c
s
355.25 650.5523 m
S
U
0 To
1 0 0 1 355.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 654.5523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
346.0088 650.5523 m
339.4575 649.0088 l
340.8638 650.5523 L
339.4575 652.0957 l
346.0088 650.5523 L
f
U
0 To
1 0 0 1 225.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 583.8598 m
230.3267 583.8598 234.4424 587.9756 234.4424 593.0523 c
234.4424 598.1289 230.3267 602.2447 225.25 602.2447 c
220.1733 602.2447 216.0576 598.1289 216.0576 593.0523 c
216.0576 587.9756 220.1733 583.8598 225.25 583.8598 c
s
225.25 593.0523 m
S
U
234.25 593.0523 m
255.75 593.0523 l
S
u
268.25 583.8598 m
273.3267 583.8598 277.4424 587.9756 277.4424 593.0523 c
277.4424 598.1289 273.3267 602.2447 268.25 602.2447 c
263.1733 602.2447 259.0576 598.1289 259.0576 593.0523 c
259.0576 587.9756 263.1733 583.8598 268.25 583.8598 c
s
268.25 593.0523 m
S
U
0 To
1 0 0 1 268.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 593.0523 m
252.4575 591.5088 l
253.8638 593.0523 L
252.4575 594.5957 l
259.0088 593.0523 L
f
U
0 R
0 G
0.75 w
277.75 593.0523 m
299.25 593.0523 l
S
u
311.75 583.8598 m
316.8267 583.8598 320.9424 587.9756 320.9424 593.0523 c
320.9424 598.1289 316.8267 602.2447 311.75 602.2447 c
306.6733 602.2447 302.5576 598.1289 302.5576 593.0523 c
302.5576 587.9756 306.6733 583.8598 311.75 583.8598 c
s
311.75 593.0523 m
S
U
0 To
1 0 0 1 311.75 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 593.0523 m
295.9575 591.5088 l
297.3638 593.0523 L
295.9575 594.5957 l
302.5088 593.0523 L
f
U
0 R
0 G
0.75 w
321.25 593.0523 m
342.75 593.0523 l
S
u
355.25 583.8598 m
360.3267 583.8598 364.4424 587.9756 364.4424 593.0523 c
364.4424 598.1289 360.3267 602.2447 355.25 602.2447 c
350.1733 602.2447 346.0576 598.1289 346.0576 593.0523 c
346.0576 587.9756 350.1733 583.8598 355.25 583.8598 c
s
355.25 593.0523 m
S
U
0 To
1 0 0 1 355.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 597.0523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
346.0088 593.0523 m
339.4575 591.5088 l
340.8638 593.0523 L
339.4575 594.5957 l
346.0088 593.0523 L
f
U
0 To
1 0 0 1 225.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 526.3598 m
230.3267 526.3598 234.4424 530.4756 234.4424 535.5523 c
234.4424 540.6289 230.3267 544.7447 225.25 544.7447 c
220.1733 544.7447 216.0576 540.6289 216.0576 535.5523 c
216.0576 530.4756 220.1733 526.3598 225.25 526.3598 c
s
225.25 535.5523 m
S
U
234.25 535.5523 m
255.75 535.5523 l
S
u
268.25 526.3598 m
273.3267 526.3598 277.4424 530.4756 277.4424 535.5523 c
277.4424 540.6289 273.3267 544.7447 268.25 544.7447 c
263.1733 544.7447 259.0576 540.6289 259.0576 535.5523 c
259.0576 530.4756 263.1733 526.3598 268.25 526.3598 c
s
268.25 535.5523 m
S
U
0 To
1 0 0 1 268.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 535.5523 m
252.4575 534.0088 l
253.8638 535.5523 L
252.4575 537.0957 l
259.0088 535.5523 L
f
U
0 R
0 G
0.75 w
277.75 535.5523 m
299.25 535.5523 l
S
u
311.75 526.3598 m
316.8267 526.3598 320.9424 530.4756 320.9424 535.5523 c
320.9424 540.6289 316.8267 544.7447 311.75 544.7447 c
306.6733 544.7447 302.5576 540.6289 302.5576 535.5523 c
302.5576 530.4756 306.6733 526.3598 311.75 526.3598 c
s
311.75 535.5523 m
S
U
0 To
1 0 0 1 311.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 535.5523 m
295.9575 534.0088 l
297.3638 535.5523 L
295.9575 537.0957 l
302.5088 535.5523 L
f
U
0 R
0 G
0.75 w
321.25 535.5523 m
342.75 535.5523 l
S
u
355.25 526.3598 m
360.3267 526.3598 364.4424 530.4756 364.4424 535.5523 c
364.4424 540.6289 360.3267 544.7447 355.25 544.7447 c
350.1733 544.7447 346.0576 540.6289 346.0576 535.5523 c
346.0576 530.4756 350.1733 526.3598 355.25 526.3598 c
s
355.25 535.5523 m
S
U
0 To
1 0 0 1 355.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 539.5523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
346.0088 535.5523 m
339.4575 534.0088 l
340.8638 535.5523 L
339.4575 537.0957 l
346.0088 535.5523 L
f
U
0 R
0 G
0.75 w
364.25 593.0523 m
385.75 593.0523 l
S
u
398.25 583.8598 m
403.3267 583.8598 407.4424 587.9756 407.4424 593.0523 c
407.4424 598.1289 403.3267 602.2447 398.25 602.2447 c
393.1733 602.2447 389.0576 598.1289 389.0576 593.0523 c
389.0576 587.9756 393.1733 583.8598 398.25 583.8598 c
s
398.25 593.0523 m
S
U
0 To
1 0 0 1 398.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 375.25 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
389.0088 593.0523 m
382.4575 591.5088 l
383.8638 593.0523 L
382.4575 594.5957 l
389.0088 593.0523 L
f
U
0 R
0 G
0.75 w
407.75 593.0523 m
429.25 593.0523 l
S
u
441.75 583.8598 m
446.8267 583.8598 450.9424 587.9756 450.9424 593.0523 c
450.9424 598.1289 446.8267 602.2447 441.75 602.2447 c
436.6733 602.2447 432.5576 598.1289 432.5576 593.0523 c
432.5576 587.9756 436.6733 583.8598 441.75 583.8598 c
s
441.75 593.0523 m
S
U
0 To
1 0 0 1 441.75 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 417.25 597.0523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
432.5088 593.0523 m
425.9575 591.5088 l
427.3638 593.0523 L
425.9575 594.5957 l
432.5088 593.0523 L
f
U
0 R
0 G
0.75 w
364.25 535.5523 m
385.75 535.5523 l
S
0 To
1 0 0 1 373.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(b) Tx 
(\r) TX 
TO
u
389.0088 535.5523 m
382.4575 534.0088 l
383.8638 535.5523 L
382.4575 537.0957 l
389.0088 535.5523 L
f
U
u
0 R
0 G
0.75 w
398.75 526.3598 m
403.8267 526.3598 407.9424 530.4756 407.9424 535.5523 c
407.9424 540.6289 403.8267 544.7447 398.75 544.7447 c
393.6733 544.7447 389.5576 540.6289 389.5576 535.5523 c
389.5576 530.4756 393.6733 526.3598 398.75 526.3598 c
s
398.75 535.5523 m
S
U
407.75 535.5523 m
429.25 535.5523 l
S
u
441.75 526.3598 m
446.8267 526.3598 450.9424 530.4756 450.9424 535.5523 c
450.9424 540.6289 446.8267 544.7447 441.75 544.7447 c
436.6733 544.7447 432.5576 540.6289 432.5576 535.5523 c
432.5576 530.4756 436.6733 526.3598 441.75 526.3598 c
s
441.75 535.5523 m
S
U
0 To
1 0 0 1 441.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 417.25 539.5523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
432.5088 535.5523 m
425.9575 534.0088 l
427.3638 535.5523 L
425.9575 537.0957 l
432.5088 535.5523 L
f
U
0 R
0 G
0.75 w
451.25 535.5523 m
472.75 535.5523 l
S
u
485.25 526.3598 m
490.3267 526.3598 494.4424 530.4756 494.4424 535.5523 c
494.4424 540.6289 490.3267 544.7447 485.25 544.7447 c
480.1733 544.7447 476.0576 540.6289 476.0576 535.5523 c
476.0576 530.4756 480.1733 526.3598 485.25 526.3598 c
s
485.25 535.5523 m
S
U
0 To
1 0 0 1 485.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 462.25 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
476.0088 535.5523 m
469.4575 534.0088 l
470.8638 535.5523 L
469.4575 537.0957 l
476.0088 535.5523 L
f
U
0 R
0 G
0.75 w
494.75 535.5523 m
516.25 535.5523 l
S
u
528.75 526.3598 m
533.8267 526.3598 537.9424 530.4756 537.9424 535.5523 c
537.9424 540.6289 533.8267 544.7447 528.75 544.7447 c
523.6733 544.7447 519.5576 540.6289 519.5576 535.5523 c
519.5576 530.4756 523.6733 526.3598 528.75 526.3598 c
s
528.75 535.5523 m
S
U
0 To
1 0 0 1 528.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 504.25 539.5523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
519.5088 535.5523 m
512.9575 534.0088 l
514.3638 535.5523 L
512.9575 537.0957 l
519.5088 535.5523 L
f
U
0 To
1 0 0 1 288 623.5 0 Tp
TP
-2.5378 0 Td
0 Tr
/_Times-Roman 9 Tf
(+) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288 564.5 0 Tp
TP
-2.5378 0 Td
0 Tr
(+) Tx 
(\r) TX 
TO
u
467.4676 561.4782 m
468.2807 560.9378 469.3779 561.1588 469.9183 561.9719 c
470.4588 562.785 470.2377 563.8822 469.4247 564.4226 c
468.6116 564.9631 467.5143 564.742 466.9739 563.929 c
466.4335 563.1159 466.6545 562.0186 467.4676 561.4782 c
f
468.4461 562.9504 m
F
U
u
461.1019 551.9008 m
461.915 551.3604 463.0122 551.5814 463.5526 552.3945 c
464.0931 553.2076 463.872 554.3048 463.059 554.8453 c
462.2459 555.3857 461.1486 555.1646 460.6082 554.3516 c
460.0678 553.5385 460.2888 552.4412 461.1019 551.9008 c
f
462.0804 553.373 m
F
U
u
454.7362 542.3234 m
455.5493 541.783 456.6465 542.004 457.1869 542.8171 c
457.7274 543.6302 457.5063 544.7274 456.6932 545.2678 c
455.8802 545.8083 454.7829 545.5872 454.2425 544.7742 c
453.7021 543.9611 453.9231 542.8638 454.7362 542.3234 c
f
455.7147 543.7956 m
F
U
0 To
1 0 0 1 398.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
(3) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
448.715 523.8602 m
450.2 520.7803 453.3519 518.655 457 518.655 c
469.75 518.655 l
473.3487 518.655 476.3374 520.7902 477.9737 523.7355 c
478.5987 524.8605 479.25 527.7224 y
S
u
0 O
0 g
1 w
447.693 527.8164 m
448.29 521.1123 l
449.3124 522.9329 L
451.2201 522.0839 l
447.693 527.8164 L
f
U
0 To
1 0 0 1 464 520.6497 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
439.8731 519.9615 m
440.6862 519.4211 441.7835 519.6421 442.3239 520.4552 c
442.8643 521.2682 442.6432 522.3655 441.8302 522.9059 c
441.0171 523.4463 439.9199 523.2253 439.3795 522.4122 c
438.839 521.5991 439.0601 520.5019 439.8731 519.9615 c
f
440.8517 521.4337 m
F
U
u
433.5074 510.384 m
434.3205 509.8437 435.4178 510.0647 435.9582 510.8778 c
436.4986 511.6908 436.2776 512.7881 435.4645 513.3285 c
434.6514 513.8689 433.5542 513.6479 433.0137 512.8348 c
432.4733 512.0217 432.6944 510.9245 433.5074 510.384 c
f
434.486 511.8563 m
F
U
u
427.1417 500.8067 m
427.9548 500.2663 429.0521 500.4873 429.5925 501.3004 c
430.1329 502.1134 429.9119 503.2107 429.0988 503.7511 c
428.2857 504.2915 427.1885 504.0705 426.6481 503.2574 c
426.1076 502.4443 426.3287 501.3471 427.1417 500.8067 c
f
428.1203 502.2789 m
F
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 500 543 678 C
0 0 612 792 C
87 233.33 543 387.33 C
188.5 244.33 441.5 387.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 213 523 454 663 241 140 194.5 245.33 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/figA4.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (figA4.ps)
%%CreationDate: (4/20/95) (12:17 PM)
%%BoundingBox: 213 523 454 663
%%DocumentProcessColors: Black
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 To
1 0 0 1 225.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 641.3598 m
230.3267 641.3598 234.4424 645.4756 234.4424 650.5523 c
234.4424 655.6289 230.3267 659.7447 225.25 659.7447 c
220.1733 659.7447 216.0576 655.6289 216.0576 650.5523 c
216.0576 645.4756 220.1733 641.3598 225.25 641.3598 c
s
225.25 650.5523 m
S
U
234.25 650.5523 m
255.75 650.5523 l
S
u
268.25 641.3598 m
273.3267 641.3598 277.4424 645.4756 277.4424 650.5523 c
277.4424 655.6289 273.3267 659.7447 268.25 659.7447 c
263.1733 659.7447 259.0576 655.6289 259.0576 650.5523 c
259.0576 645.4756 263.1733 641.3598 268.25 641.3598 c
s
268.25 650.5523 m
S
U
0 To
1 0 0 1 268.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 654.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 650.5523 m
252.4575 649.0088 l
253.8638 650.5523 L
252.4575 652.0957 l
259.0088 650.5523 L
f
U
0 R
0 G
0.75 w
277.75 650.5523 m
299.25 650.5523 l
S
u
311.75 641.3598 m
316.8267 641.3598 320.9424 645.4756 320.9424 650.5523 c
320.9424 655.6289 316.8267 659.7447 311.75 659.7447 c
306.6733 659.7447 302.5576 655.6289 302.5576 650.5523 c
302.5576 645.4756 306.6733 641.3598 311.75 641.3598 c
s
311.75 650.5523 m
S
U
0 To
1 0 0 1 311.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 654.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 650.5523 m
295.9575 649.0088 l
297.3638 650.5523 L
295.9575 652.0957 l
302.5088 650.5523 L
f
U
0 R
0 G
0.75 w
321.25 650.5523 m
342.75 650.5523 l
S
u
355.25 641.3598 m
360.3267 641.3598 364.4424 645.4756 364.4424 650.5523 c
364.4424 655.6289 360.3267 659.7447 355.25 659.7447 c
350.1733 659.7447 346.0576 655.6289 346.0576 650.5523 c
346.0576 645.4756 350.1733 641.3598 355.25 641.3598 c
s
355.25 650.5523 m
S
U
0 To
1 0 0 1 355.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 654.5523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
346.0088 650.5523 m
339.4575 649.0088 l
340.8638 650.5523 L
339.4575 652.0957 l
346.0088 650.5523 L
f
U
0 To
1 0 0 1 225.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 583.8598 m
230.3267 583.8598 234.4424 587.9756 234.4424 593.0523 c
234.4424 598.1289 230.3267 602.2447 225.25 602.2447 c
220.1733 602.2447 216.0576 598.1289 216.0576 593.0523 c
216.0576 587.9756 220.1733 583.8598 225.25 583.8598 c
s
225.25 593.0523 m
S
U
234.25 593.0523 m
255.75 593.0523 l
S
u
268.25 583.8598 m
273.3267 583.8598 277.4424 587.9756 277.4424 593.0523 c
277.4424 598.1289 273.3267 602.2447 268.25 602.2447 c
263.1733 602.2447 259.0576 598.1289 259.0576 593.0523 c
259.0576 587.9756 263.1733 583.8598 268.25 583.8598 c
s
268.25 593.0523 m
S
U
0 To
1 0 0 1 268.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 593.0523 m
252.4575 591.5088 l
253.8638 593.0523 L
252.4575 594.5957 l
259.0088 593.0523 L
f
U
0 R
0 G
0.75 w
277.75 593.0523 m
299.25 593.0523 l
S
u
311.75 583.8598 m
316.8267 583.8598 320.9424 587.9756 320.9424 593.0523 c
320.9424 598.1289 316.8267 602.2447 311.75 602.2447 c
306.6733 602.2447 302.5576 598.1289 302.5576 593.0523 c
302.5576 587.9756 306.6733 583.8598 311.75 583.8598 c
s
311.75 593.0523 m
S
U
0 To
1 0 0 1 311.75 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 593.0523 m
295.9575 591.5088 l
297.3638 593.0523 L
295.9575 594.5957 l
302.5088 593.0523 L
f
U
0 R
0 G
0.75 w
321.25 593.0523 m
342.75 593.0523 l
S
u
355.25 583.8598 m
360.3267 583.8598 364.4424 587.9756 364.4424 593.0523 c
364.4424 598.1289 360.3267 602.2447 355.25 602.2447 c
350.1733 602.2447 346.0576 598.1289 346.0576 593.0523 c
346.0576 587.9756 350.1733 583.8598 355.25 583.8598 c
s
355.25 593.0523 m
S
U
0 To
1 0 0 1 355.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 597.0523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
346.0088 593.0523 m
339.4575 591.5088 l
340.8638 593.0523 L
339.4575 594.5957 l
346.0088 593.0523 L
f
U
0 To
1 0 0 1 225.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(1) Tx 
(\r) TX 
TO
u
0 R
0 G
0.75 w
225.25 526.3598 m
230.3267 526.3598 234.4424 530.4756 234.4424 535.5523 c
234.4424 540.6289 230.3267 544.7447 225.25 544.7447 c
220.1733 544.7447 216.0576 540.6289 216.0576 535.5523 c
216.0576 530.4756 220.1733 526.3598 225.25 526.3598 c
s
225.25 535.5523 m
S
U
234.25 535.5523 m
255.75 535.5523 l
S
u
268.25 526.3598 m
273.3267 526.3598 277.4424 530.4756 277.4424 535.5523 c
277.4424 540.6289 273.3267 544.7447 268.25 544.7447 c
263.1733 544.7447 259.0576 540.6289 259.0576 535.5523 c
259.0576 530.4756 263.1733 526.3598 268.25 526.3598 c
s
268.25 535.5523 m
S
U
0 To
1 0 0 1 268.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(a) Tx 
(\r) TX 
TO
u
259.0088 535.5523 m
252.4575 534.0088 l
253.8638 535.5523 L
252.4575 537.0957 l
259.0088 535.5523 L
f
U
0 R
0 G
0.75 w
277.75 535.5523 m
299.25 535.5523 l
S
u
311.75 526.3598 m
316.8267 526.3598 320.9424 530.4756 320.9424 535.5523 c
320.9424 540.6289 316.8267 544.7447 311.75 544.7447 c
306.6733 544.7447 302.5576 540.6289 302.5576 535.5523 c
302.5576 530.4756 306.6733 526.3598 311.75 526.3598 c
s
311.75 535.5523 m
S
U
0 To
1 0 0 1 311.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
302.5088 535.5523 m
295.9575 534.0088 l
297.3638 535.5523 L
295.9575 537.0957 l
302.5088 535.5523 L
f
U
0 R
0 G
0.75 w
321.25 535.5523 m
342.75 535.5523 l
S
u
355.25 526.3598 m
360.3267 526.3598 364.4424 530.4756 364.4424 535.5523 c
364.4424 540.6289 360.3267 544.7447 355.25 544.7447 c
350.1733 544.7447 346.0576 540.6289 346.0576 535.5523 c
346.0576 530.4756 350.1733 526.3598 355.25 526.3598 c
s
355.25 535.5523 m
S
U
0 To
1 0 0 1 355.25 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 330.75 539.5523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
346.0088 535.5523 m
339.4575 534.0088 l
340.8638 535.5523 L
339.4575 537.0957 l
346.0088 535.5523 L
f
U
0 R
0 G
0.75 w
364.25 593.0523 m
385.75 593.0523 l
S
u
398.25 583.8598 m
403.3267 583.8598 407.4424 587.9756 407.4424 593.0523 c
407.4424 598.1289 403.3267 602.2447 398.25 602.2447 c
393.1733 602.2447 389.0576 598.1289 389.0576 593.0523 c
389.0576 587.9756 393.1733 583.8598 398.25 583.8598 c
s
398.25 593.0523 m
S
U
0 To
1 0 0 1 398.25 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 375.25 597.0523 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Italic 9 Tf
(b) Tx 
(\r) TX 
TO
u
389.0088 593.0523 m
382.4575 591.5088 l
383.8638 593.0523 L
382.4575 594.5957 l
389.0088 593.0523 L
f
U
0 R
0 G
0.75 w
407.75 593.0523 m
429.25 593.0523 l
S
u
441.75 583.8598 m
446.8267 583.8598 450.9424 587.9756 450.9424 593.0523 c
450.9424 598.1289 446.8267 602.2447 441.75 602.2447 c
436.6733 602.2447 432.5576 598.1289 432.5576 593.0523 c
432.5576 587.9756 436.6733 583.8598 441.75 583.8598 c
s
441.75 593.0523 m
S
U
0 To
1 0 0 1 441.75 589.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 417.25 597.0523 0 Tp
TP
-1.9973 0 Td
0 Tr
/_Times-Italic 9 Tf
(c) Tx 
(\r) TX 
TO
u
432.5088 593.0523 m
425.9575 591.5088 l
427.3638 593.0523 L
425.9575 594.5957 l
432.5088 593.0523 L
f
U
0 R
0 G
0.75 w
364.25 535.5523 m
385.75 535.5523 l
S
0 To
1 0 0 1 373.75 539.5523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(b) Tx 
(\r) TX 
TO
u
389.0088 535.5523 m
382.4575 534.0088 l
383.8638 535.5523 L
382.4575 537.0957 l
389.0088 535.5523 L
f
U
u
0 R
0 G
0.75 w
398.75 526.3598 m
403.8267 526.3598 407.9424 530.4756 407.9424 535.5523 c
407.9424 540.6289 403.8267 544.7447 398.75 544.7447 c
393.6733 544.7447 389.5576 540.6289 389.5576 535.5523 c
389.5576 530.4756 393.6733 526.3598 398.75 526.3598 c
s
398.75 535.5523 m
S
U
407.75 535.5523 m
429.25 535.5523 l
S
u
441.75 526.3598 m
446.8267 526.3598 450.9424 530.4756 450.9424 535.5523 c
450.9424 540.6289 446.8267 544.7447 441.75 544.7447 c
436.6733 544.7447 432.5576 540.6289 432.5576 535.5523 c
432.5576 530.4756 436.6733 526.3598 441.75 526.3598 c
s
441.75 535.5523 m
S
U
0 To
1 0 0 1 441.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 417.25 539.5523 0 Tp
TP
-2.7488 0 Td
0 Tr
/_Times-Italic 9 Tf
(F) Tx 
(\r) TX 
TO
u
432.5088 535.5523 m
425.9575 534.0088 l
427.3638 535.5523 L
425.9575 537.0957 l
432.5088 535.5523 L
f
U
0 To
1 0 0 1 288 623.5 0 Tp
TP
-2.5378 0 Td
0 Tr
/_Times-Roman 9 Tf
(+) Tx 
(\r) TX 
TO
0 To
1 0 0 1 288 564.5 0 Tp
TP
-2.5378 0 Td
0 Tr
(+) Tx 
(\r) TX 
TO
0 To
1 0 0 1 398.75 532.0523 0 Tp
TP
-2.25 0 Td
0 Tr
(3) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 233.33 543 387.33 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 128
%%Page: "123" 129
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(123) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 11 Q
(The SURE input language contains an) 105 718.67 T
7 F
(INITIAL_P) 276.09 718.67 T
3 F
( statement for initializing states.  For example,) 335.49 718.67 T
7 F
(INITIAL_P\0501: 0.3, 2: 0.7\051;) 105 697.19 T
3 F
-0.2 (assigns an initial probability of 0.3 to state \0501\051 and an initial probability of 0.7 to state \0502\051.  The user may) 87 675.71 P
(also specify upper and lower bounds on the initial state probabilities:) 87 662.71 T
7 F
(INITIAL_P\0501: \0500.27,0.31\051, 2: \0500.69,0.71\051\051;) 105 642.23 T
4 12 Q
( A3. Operational State Pr) 87 614.09 T
(obabilities) 217.1 614.09 T
3 11 Q
1.22 (The SURE program can also specify the bound of the operational state probabilities.  Given the) 105 593.28 P
1.2 (model shown in figure A5, the program first calculates the death state probabilities) 87 580.28 P
5 F
1.2 (p) 469.79 580.28 P
3 8.8 Q
0.96 (8) 475.29 577.53 P
3 11 Q
1.2 (\050) 479.69 580.28 P
5 F
1.2 (T) 483.35 580.28 P
3 F
1.2 (\051 and) 489.47 580.28 P
5 F
1.2 (p) 516.91 580.28 P
3 8.8 Q
0.96 (9) 522.41 577.53 P
3 11 Q
1.2 (\050) 526.81 580.28 P
5 F
1.2 (T) 530.47 580.28 P
3 F
1.2 (\051.) 536.59 580.28 P
(Next, the program solves the reduced model shown in figure A6, obtaining) 87 567.28 T
5 F
(p) 419.4 567.28 T
3 8.8 Q
(7) 424.9 564.53 T
5 F
(') 429.3 564.53 T
3 11 Q
(\050) 433.18 567.28 T
5 F
(T) 436.84 567.28 T
3 F
(\051.) 442.96 567.28 T
-0.25 (The probability of being in the operational state \0507\051,) 105 389.8 P
5 F
-0.25 (p) 333.75 389.8 P
3 8.8 Q
-0.2 (7) 339.25 387.05 P
3 11 Q
-0.25 (\050) 343.65 389.8 P
5 F
-0.25 (T) 347.31 389.8 P
3 F
-0.25 (\051 in the original model, can be calculated as) 353.43 389.8 P
(follows:) 87 376.8 T
0.03 (Although this process might seem to be laborious, it is efficiently implemented in SURE.  All basic) 105 327.67 P
1.19 (probabilities are calculated while SURE is traversing the graph structure of the model.  Because the) 87 314.67 P
0.81 (bounds are algebraic, the calculations are not costly.  The subtractions are performed as SURE backs) 87 301.67 P
0.86 (out of the recursions after reaching a death state.  Of course, the calculations are performed by using) 87 288.67 P
1.34 (bounds rather than exact probabilities.  The bounds on the operational states are not as close as the) 87 275.67 P
0.59 (bounds on the death states, but are usually close enough to be useful for the solution of a sequence of) 87 262.67 P
1.2 (semi-Markov models used for phased missions.  The closer a state is to a death state, the closer the) 87 249.67 P
(bounds are.) 87 236.67 T
3 9 Q
1.66 (Figure A5.  Model of SURE calculations for operational) 87 436.61 P
(state probabilities.) 99 426.61 T
(Figure A6.  Reduced model.) 384.01 436.61 T
87 442.61 303 539.61 C
87.5 453.61 302.5 539.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 190 608 393 694 203 86 93.5 453.61 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/figA5.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (figA5.ps)
%%CreationDate: (4/20/95) (1:34 PM)
%%BoundingBox: 190 608 393 694
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
218.25 650.5523 m
255.75 650.5523 l
S
u
268.25 641.3598 m
273.3267 641.3598 277.4424 645.4756 277.4424 650.5523 c
277.4424 655.6289 273.3267 659.7447 268.25 659.7447 c
263.1733 659.7447 259.0576 655.6289 259.0576 650.5523 c
259.0576 645.4756 263.1733 641.3598 268.25 641.3598 c
s
268.25 650.5523 m
S
U
0 To
1 0 0 1 268.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(6) Tx 
(\r) TX 
TO
u
259.0088 650.5523 m
252.4575 649.0088 l
253.8638 650.5523 L
252.4575 652.0957 l
259.0088 650.5523 L
f
U
0 R
0 G
0.75 w
277.75 650.5523 m
315.25 650.5523 l
S
u
327.75 641.3598 m
332.8267 641.3598 336.9424 645.4756 336.9424 650.5523 c
336.9424 655.6289 332.8267 659.7447 327.75 659.7447 c
322.6733 659.7447 318.5576 655.6289 318.5576 650.5523 c
318.5576 645.4756 322.6733 641.3598 327.75 641.3598 c
s
327.75 650.5523 m
S
U
0 To
1 0 0 1 327.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 296.25 654.5523 0 Tp
TP
-2.8389 0 Td
0 Tr
/_Symbol 9 Tf
(a) Tx 
(\r) TX 
TO
u
318.5088 650.5523 m
311.9575 649.0088 l
313.3638 650.5523 L
311.9575 652.0957 l
318.5088 650.5523 L
f
U
0 To
1 0 0 1 352.5 669.3023 0 Tp
TP
-2.4697 0 Td
0 Tr
(b) Tx 
(\r) TX 
TO
0 R
0 G
0.75 w
336.2346 655.2373 m
368.7107 673.9873 l
S
u
384.1323 672.2763 m
388.5288 674.8146 390.0352 680.4369 387.4969 684.8335 c
384.9586 689.2299 379.3364 690.7365 374.9398 688.1981 c
370.5432 685.6598 369.0368 680.0375 371.5751 675.6411 c
374.1135 671.2445 379.7357 669.738 384.1323 672.2763 c
s
379.536 680.2373 m
S
U
u
0 O
0 g
1 w
371.5329 675.6167 m
366.631 671.0043 l
367.0771 673.0442 L
365.0876 673.6776 l
371.5329 675.6167 L
f
U
0 R
0 G
0.75 w
336.3539 646.1033 m
368.8299 627.3533 l
S
u
375.059 613.1423 m
379.4556 610.604 385.0778 612.1105 387.6161 616.5071 c
390.1544 620.9036 388.648 626.5258 384.2515 629.0642 c
379.8549 631.6025 374.2327 630.096 371.6944 625.6995 c
369.156 621.3029 370.6624 615.6807 375.059 613.1423 c
s
379.6553 621.1033 m
S
U
u
0 O
0 g
1 w
371.6521 625.7239 m
365.2068 627.6628 l
367.1964 628.2964 L
366.7502 630.3362 l
371.6521 625.7239 L
f
U
0 To
1 0 0 1 379.25 676.8023 0 Tp
TP
-2.25 0 Td
0 Tr
/_Times-Roman 9 Tf
(8) Tx 
(\r) TX 
TO
0 To
1 0 0 1 379.25 617.8023 0 Tp
TP
-2.25 0 Td
0 Tr
(9) Tx 
(\r) TX 
TO
0 To
1 0 0 1 358 639.3023 0 Tp
TP
-1.849 0 Td
0 Tr
/_Symbol 9 Tf
(g) Tx 
(\r) TX 
TO
u
209.8964 648.9028 m
210.7095 648.3624 211.8069 648.5834 212.3473 649.3965 c
212.8876 650.2095 212.6667 651.3068 211.8535 651.8472 c
211.0404 652.3876 209.9432 652.1666 209.4028 651.3535 c
208.8623 650.5404 209.0834 649.4432 209.8964 648.9028 c
f
210.875 650.375 m
F
U
u
201.3964 648.9028 m
202.2095 648.3624 203.3069 648.5834 203.8473 649.3965 c
204.3876 650.2095 204.1667 651.3068 203.3535 651.8472 c
202.5404 652.3876 201.4432 652.1666 200.9028 651.3535 c
200.3623 650.5404 200.5834 649.4432 201.3964 648.9028 c
f
202.375 650.375 m
F
U
u
192.8964 648.9028 m
193.7095 648.3624 194.8069 648.5834 195.3473 649.3965 c
195.8876 650.2095 195.6667 651.3068 194.8535 651.8472 c
194.0404 652.3876 192.9432 652.1666 192.4028 651.3535 c
191.8623 650.5404 192.0834 649.4432 192.8964 648.9028 c
f
193.875 650.375 m
F
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
87 442.61 303 539.61 C
0 0 612 792 C
327 442.61 543 539.61 C
353.5 454.11 516.5 539.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 189 638 340 664 151 26 359.5 454.11 FMBEGINEPSF
%%BeginDocument: /home/working/Formals/Butler425/figA6.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (deesteb) (NASA/LaRC/RIAD/TEB)
%%Title: (figA6.ps)
%%CreationDate: (4/20/95) (1:35 PM)
%%BoundingBox: 189 638 340 664
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup
0 A
0 R
0 G
0 i 0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
218.25 650.5523 m
255.75 650.5523 l
S
u
268.25 641.3598 m
273.3267 641.3598 277.4424 645.4756 277.4424 650.5523 c
277.4424 655.6289 273.3267 659.7447 268.25 659.7447 c
263.1733 659.7447 259.0576 655.6289 259.0576 650.5523 c
259.0576 645.4756 263.1733 641.3598 268.25 641.3598 c
s
268.25 650.5523 m
S
U
0 To
1 0 0 1 268.25 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
/_Times-Roman 9 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(6) Tx 
(\r) TX 
TO
u
259.0088 650.5523 m
252.4575 649.0088 l
253.8638 650.5523 L
252.4575 652.0957 l
259.0088 650.5523 L
f
U
0 R
0 G
0.75 w
277.75 650.5523 m
315.25 650.5523 l
S
u
327.75 641.3598 m
332.8267 641.3598 336.9424 645.4756 336.9424 650.5523 c
336.9424 655.6289 332.8267 659.7447 327.75 659.7447 c
322.6733 659.7447 318.5576 655.6289 318.5576 650.5523 c
318.5576 645.4756 322.6733 641.3598 327.75 641.3598 c
s
327.75 650.5523 m
S
U
0 To
1 0 0 1 327.75 647.0523 0 Tp
TP
-2.25 0 Td
0 Tr
0 O
0 g
1 w
(7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 296.25 654.5523 0 Tp
TP
-2.8389 0 Td
0 Tr
/_Symbol 9 Tf
(a) Tx 
(\r) TX 
TO
u
318.5088 650.5523 m
311.9575 649.0088 l
313.3638 650.5523 L
311.9575 652.0957 l
318.5088 650.5523 L
f
U
u
208.2714 649.0278 m
209.0845 648.4874 210.1819 648.7084 210.7223 649.5215 c
211.2626 650.3345 211.0417 651.4318 210.2285 651.9722 c
209.4154 652.5126 208.3182 652.2916 207.7778 651.4785 c
207.2373 650.6654 207.4584 649.5682 208.2714 649.0278 c
f
209.25 650.5 m
F
U
u
199.7714 649.0278 m
200.5845 648.4874 201.6819 648.7084 202.2223 649.5215 c
202.7626 650.3345 202.5417 651.4318 201.7285 651.9722 c
200.9154 652.5126 199.8182 652.2916 199.2778 651.4785 c
198.7373 650.6654 198.9584 649.5682 199.7714 649.0278 c
f
200.75 650.5 m
F
U
u
191.2714 649.0278 m
192.0845 648.4874 193.1819 648.7084 193.7223 649.5215 c
194.2626 650.3345 194.0417 651.4318 193.2285 651.9722 c
192.4154 652.5126 191.3182 652.2916 190.7778 651.4785 c
190.2373 650.6654 190.4584 649.5682 191.2714 649.0278 c
f
192.25 650.5 m
F
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
327 442.61 543 539.61 C
0 0 612 792 C
228.81 345.48 401.19 362.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10.5 Q
0 X
0 0 0 1 0 0 0 K
(p) 233.39 353.78 T
3 8.5 Q
(7) 239.04 349.6 T
5 10.5 Q
(T) 250.16 353.78 T
6 F
(\050) 245.66 353.78 T
(\051) 256.49 353.78 T
5 F
(p) 278.16 353.78 T
3 8.5 Q
(7) 283.81 349.6 T
6 F
(\242) 288.71 349.6 T
5 10.5 Q
(T) 297.69 353.78 T
6 F
(\050) 293.18 353.78 T
(\051) 304.01 353.78 T
5 F
(p) 326.02 353.78 T
3 8.5 Q
(8) 331.66 349.6 T
5 10.5 Q
(T) 342.79 353.78 T
6 F
(\050) 338.29 353.78 T
(\051) 349.11 353.78 T
5 F
(p) 365.53 353.78 T
3 8.5 Q
(9) 371.18 349.6 T
5 10.5 Q
(T) 382.31 353.78 T
6 F
(\050) 377.8 353.78 T
(\051) 388.63 353.78 T
3 F
(+) 356.98 353.78 T
6 F
([) 321.51 353.78 T
(]) 394.36 353.78 T
3 F
(\320) 311.88 353.78 T
(=) 266.98 353.78 T
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 129
%%Page: "124" 130
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(124) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 12 Q
(Refer) 87 718 T
(ences) 115.43 718 T
3 9 Q
(1.) 91.8 700.31 T
(Butler) 102 700.31 T
(, Ricky W) 124.14 700.31 T
(.; and White, Allan L.:) 160.06 700.31 T
5 F
(SURE Reliability Analysis\321Pr) 245.8 700.31 T
(ogram and Mathematics) 356.97 700.31 T
3 F
(.  NASA TP-2764, 1988.) 444.96 700.31 T
(2.) 91.8 682.62 T
(Henley) 102 682.62 T
(, Ernest J.; and Kumamoto, Hiromitsu:) 127.41 682.62 T
5 F
(Reliability Engineering and Risk Assessment) 271.41 682.62 T
3 F
(.  Prentice-Hall, Inc., 1981.) 432.4 682.62 T
(3.) 91.8 664.93 T
2.06 (Butler) 102 664.93 P
2.06 (, Ricky W) 124.14 664.93 P
2.06 (.; and Martensen, Anna L.:) 164.18 664.93 P
5 F
2.06 (The Fault-T) 277.76 664.93 P
2.06 (r) 322.58 664.93 P
2.06 (ee Compiler \050FTC\051\321Pr) 325.74 664.93 P
2.06 (ogram and Mathematics) 415.52 664.93 P
3 F
2.06 (.  NASA) 507.63 664.93 P
(TP-) 102 653.93 T
(2915, 1989.) 115.5 653.93 T
(4.) 91.8 636.24 T
(Ross, Sheldon M.:) 102 636.24 T
5 F
(Applied Pr) 173.01 636.24 T
(obability Models W) 211.93 636.24 T
(ith Optimization Applications) 281.93 636.24 T
3 F
(.  Holden-Day) 388.44 636.24 T
(, 1970.) 439.1 636.24 T
(5.) 91.8 618.55 T
(U.S. Department of Defense:) 102 618.55 T
5 F
(Reliability Pr) 211.22 618.55 T
(ediction of Electr) 259.64 618.55 T
(onic Equipment) 321.81 618.55 T
3 F
(. MIL-HDBK-217F) 378.55 618.55 T
(, Apr) 448.82 618.55 T
(. 1979.) 466.82 618.55 T
(6.) 91.8 600.86 T
(Siewiorek, Daniel P) 102 600.86 T
(.; and Swarz, Robert S.:) 173.24 600.86 T
5 F
(The Theory and Practice of Reliable System Design) 263.49 600.86 T
3 F
(.  Digital Press, 1982.) 449.71 600.86 T
(7.) 91.8 583.17 T
0.72 (T) 102 583.17 P
0.72 (rivedi, Kishor Shridharbhai:) 107.18 583.17 P
5 F
0.72 (Pr) 215.82 583.17 P
0.72 (obability and Statistics W) 224.48 583.17 P
0.72 (ith Reliability) 318.42 583.17 P
0.72 (, Queuing, and Computer Science Applications) 367.9 583.17 P
3 F
0.72 (.) 540.75 583.17 P
(Prentice-Hall, Inc., 1982.) 102 572.17 T
(8.) 91.8 554.48 T
0.75 (Krishna, C. M.; Shin, K. G.; and Butler) 102 554.48 P
0.75 (, R. W) 248.65 554.48 P
0.75 (.:  Synchronization and Fault-Masking in Redundant Real-T) 272.82 554.48 P
0.75 (ime Systems.) 494.24 554.48 P
5 F
(Pr) 102 543.48 T
(oceedings of the Fourteenth International Confer) 110.67 543.48 T
(ence on Fault-T) 288.08 543.48 T
(olerant Computing) 344.74 543.48 T
3 F
(, IEEE, 1984, pp. 152\320157.) 412.99 543.48 T
(9.) 91.8 525.79 T
0.14 (Butler) 102 525.79 P
0.14 (,  Ricky  W) 124.14 525.79 P
0.14 (.:   The  SURE  Approach  to  Reliability  Analysis.) 165.14 525.79 P
5 F
0.14 (IEEE  T) 359.46 525.79 P
0.14 (rans.  Reliab) 388.26 525.79 P
3 F
0.14 (.,  vol. 41,  no. 2,  June  1992,) 434.8 525.79 P
(pp.) 102 514.79 T
(210\320218.) 115.5 514.79 T
(10.) 87 497.1 T
(White, Allan L.:) 102 497.1 T
5 F
(Synthetic Bounds for Semi-Markov Reliability Models) 165.49 497.1 T
3 F
(.  NASA CR-178008, 1985.) 359.72 497.1 T
(1) 87 479.41 T
(1.) 91.17 479.41 T
0.72 (Butler) 102 479.41 P
0.72 (, Ricky W) 124.14 479.41 P
0.72 (.; and Stevenson, Philip H.:) 161.5 479.41 P
5 F
0.72 (The P) 269.09 479.41 P
0.72 (A) 289.9 479.41 P
0.72 (WS and STEM Reliability Analysis Pr) 295.06 479.41 P
0.72 (ograms) 434.59 479.41 P
3 F
0.72 (.  NASA TM-100572,) 461.59 479.41 P
(1988.) 102 468.41 T
(12.) 87 450.72 T
1.56 (White, Allan L.:  Reliability Estimation for Recon\336gurable Systems W) 102 450.72 P
1.56 (ith Fast Recovery) 371.41 450.72 P
1.56 (.) 437.44 450.72 P
5 F
1.56 (Micr) 447.31 450.72 P
1.56 (oelectr) 464.47 450.72 P
1.56 (on. & Reliab) 489.13 450.72 P
3 F
1.56 (.,) 538.5 450.72 P
(vol.) 102 439.72 T
(26, no. 6, 1986, pp. 1) 118 439.72 T
(1) 194.17 439.72 T
(1) 198.34 439.72 T
(1\3201) 202.5 439.72 T
(120.) 215.67 439.72 T
(13.) 87 422.03 T
1.07 (White, Allan L.:) 102 422.03 P
5 F
1.07 (Upper and Lower Bounds for Semi-Markov Reliability Models of Recon\336gurable Systems) 173.1 422.03 P
3 F
1.07 (.   NASA) 506.29 422.03 P
(CR-) 102 411.03 T
(172340, 1984.) 117 411.03 T
(14.) 87 393.34 T
0.52 (Goldber) 102 393.34 P
0.52 (g, Jack; Kautz, W) 131.33 393.34 P
0.52 (illiam H.; Melliar) 196.76 393.34 P
0.52 (-Smith, P) 260.88 393.34 P
0.52 (. Michael; Green, Milton W) 294.41 393.34 P
0.52 (.; Levitt, Karl N.; Schwartz, Richard L.;) 396.15 393.34 P
0.99 (and W) 102 382.34 P
0.99 (einstock, Charles B.:) 126.02 382.34 P
5 F
0.99 (Development and Analysis of the Softwar) 206.25 382.34 P
0.99 (e Implemented Fault-T) 359.63 382.34 P
0.99 (olerance \050SIFT\051 Computer) 443.27 382.34 P
3 F
0.99 (.) 540.75 382.34 P
(NASA CR-172146, 1984.) 102 371.34 T
(15.) 87 353.65 T
1.01 (McGough, John G.; and Swern, Fred L.:) 102 353.65 P
5 F
1.01 (Measur) 260.06 353.65 P
1.01 (ement of Fault Latency in a Digital A) 287.23 353.65 P
1.01 (vionic Mini Pr) 428.55 353.65 P
1.01 (ocessor) 482.73 353.65 P
3 F
1.01 (.  NASA) 509.73 353.65 P
(CR-) 102 342.65 T
(3462, 1981.) 117 342.65 T
(16.) 87 324.96 T
-0.07 (Bavuso, S. J.; and Petersen, P) 102 324.96 P
-0.07 (. L.:) 207.41 324.96 P
5 F
-0.07 (CARE III Model Overview and User) 226.45 324.96 P
-0.07 (\325) 357.66 324.96 P
-0.07 (s Guide \050First Revision\051) 359.49 324.96 P
3 F
-0.07 (.  NASA TM-86404, 1985.) 446.03 324.96 P
(17.) 87 307.27 T
(Johnson, S. C.:) 102 307.27 T
5 F
(ASSIST User Manual) 160.76 307.27 T
3 F
(.  NASA TM-4592, 1994.) 237.76 307.27 T
(18.) 87 289.58 T
0.77 (Johnson, Sally C.:  Reliability Analysis of Lar) 102 289.58 P
0.77 (ge, Complex Systems Using ASSIST) 273.51 289.58 P
0.77 (.) 410.19 289.58 P
5 F
0.77 (A Collection of T) 418.49 289.58 P
0.77 (echnical Papers,) 481.74 289.58 P
(AIAA/IEEE 8th Digital A) 102 278.58 T
(vionics Systems Confer) 192.25 278.58 T
(ence) 275.41 278.58 T
3 F
(, Part 1, Oct. 1988, pp. 227\320234.  \050A) 291.9 278.58 T
(vailable as AIAA-88-3898-CP) 422.72 278.58 T
(.\051) 531.71 278.58 T
(19.) 87 260.89 T
(Feller) 102 260.89 T
(, W) 122.64 260.89 T
(illiam:) 135.27 260.89 T
5 F
(An Intr) 163.28 260.89 T
(oduction to Pr) 188.7 260.89 T
(obability Theory and Its Applications, V) 240.37 260.89 T
(olume II) 383.87 260.89 T
3 F
(.  John W) 414.11 260.89 T
(iley & Sons, Inc., 1966.) 448.25 260.89 T
(20.) 87 243.2 T
1.62 (Pease, M.; Shostak, R.; and Lamport, L.:  Reaching Agreement in the Presence of Faults.) 102 243.2 P
5 F
1.62 (J. ACM) 453.15 243.2 P
3 F
1.62 (, vol. 27, no. 2,) 482.26 243.2 P
(Apr) 102 232.2 T
(.) 115.5 232.2 T
(1980, pp. 228\320234.) 120 232.2 T
(21.) 87 214.51 T
-0.13 (Lamport, Leslie; Shostak, Robert; and Pease, Marshall:  The Byzantine Generals Problem.) 102 214.51 P
5 F
-0.13 (ACM T) 430.57 214.51 P
-0.13 (rans. Pr) 456.2 214.51 P
-0.13 (ogram. Lang. &) 485.25 214.51 P
(Syst) 102 203.51 T
3 F
(., vol. 4, no. 3, July 1982, pp. 382\320401.) 116.5 203.51 T
(22.) 87 185.82 T
0.26 (Azadmanesh, A.; and Kieckhafer) 102 185.82 P
0.26 (, R.:  The General Conver) 222.12 185.82 P
0.26 (gence Problem:  A Uni\336cation of Synchronous and Asynchro-) 316.47 185.82 P
-0.08 (nous Systems.) 102 174.82 P
5 F
-0.08 (Fourth International W) 157.77 174.82 P
-0.08 (orking Confer) 241.28 174.82 P
-0.08 (ence on Dependable Computing for Critical Applications) 291.62 174.82 P
3 F
-0.08 (, IFIP W) 497.64 174.82 P
-0.08 (ork-) 528.01 174.82 P
(ing Group, Jan. 1994, pp. 168\320182.) 102 163.82 T
(23.) 87 146.13 T
2.62 (Hopkins, Albert L., Jr) 102 146.13 P
2.62 (.; Smith, T) 188.36 146.13 P
2.62 (. Basil, III; and Lala, Jaynarayan H.: FTMP\321A Highly Reliable Fault-T) 231.45 146.13 P
2.62 (olerant) 518.01 146.13 P
(Multiprocessor for Aircraft.) 102 135.13 T
5 F
(Pr) 206.72 135.13 T
(oc. IEEE) 215.39 135.13 T
3 F
(, vol. 66, no. 10, Oct. 1978, pp. 1221\3201239.) 247.88 135.13 T
(24.) 87 117.44 T
0.39 (White, Allan L.; and Palumbo, Daniel L.:) 102 117.44 P
5 F
0.39 (Model Reduction by T) 259.11 117.44 P
0.39 (rimming for a Class of Semi-Markov Reliability Models) 339.52 117.44 P
(and the Corr) 102 106.44 T
(esponding Err) 148.17 106.44 T
(or Bound) 199.59 106.44 T
3 F
(.  NASA TP-3089, 1991.) 233.34 106.44 T
(25.) 87 88.75 T
0.41 (White, Allan L.; and Palumbo, Daniel L.:  State Reduction for Semi-Markov Reliability Models.) 102 88.75 P
5 F
0.41 (Annual Reliability and) 460.67 88.75 P
(Maintainability Symposium\3211990 Pr) 102 77.75 T
(oceedings) 238.17 77.75 T
3 F
(, IEEE, 1990, pp. 280\320285.) 274.16 77.75 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 130
%%Page: "125" 131
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
4 10.5 Q
0 X
0 0 0 1 0 0 0 K
(125) 298.25 46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
(26.) 87 720 T
0.68 (Butler) 102 720 P
0.68 (, Ricky W) 124.14 720 P
0.68 (.; and Elks, Carl R.:) 161.42 720 P
5 F
0.68 (A Pr) 241.27 720 P
0.68 (eliminary T) 258.37 720 P
0.68 (ransient-Fault Experiment on the SIFT Computer System) 300.31 720 P
3 F
0.68 (.  NASA) 510.39 720 P
(TM-89058, 1987.) 102 709 T
(27.) 87 691.67 T
0.08 (DiV) 102 691.67 P
0.08 (ito, Ben L.; Butler) 116.96 691.67 P
0.08 (, Ricky W) 182.59 691.67 P
0.08 (.; and Caldwell, James L.:) 218.66 691.67 P
5 F
0.08 (Formal Design and V) 317.38 691.67 P
0.08 (eri\336cation of a Reliable Computing Plat-) 394.86 691.67 P
(form for Real-T) 102 680.67 T
(ime Contr) 158.01 680.67 T
(ols, Phase 1:  Results) 193.93 680.67 T
3 F
(.  NASA TM-102716, 1990.) 271.17 680.67 T
(28.) 87 663.34 T
-0.09 (Dugan, J. B.; T) 102 663.34 P
-0.09 (rivedi, K. S.; Smotherman, M. K.; and Geist, R. M.:  The Hybrid Automated Reliability Predictor) 156.41 663.34 P
-0.09 (.) 505.53 663.34 P
5 F
-0.09 (J. Guid.,) 512.1 663.34 P
(Contr) 102 652.34 T
(ol, & Dyn) 122.67 652.34 T
3 F
(., vol. 9, May\320June 1986, pp. 319\320331.) 158.42 652.34 T
(29.) 87 635 T
0.56 (Lala, J. H.; Alger) 102 635 P
0.56 (, L. S.; Gauthier) 165.82 635 P
0.56 (, R. J.; and Dzwonczyk, M. J.:) 225.15 635 P
5 F
0.56 (A Fault T) 345.96 635 P
0.56 (olerant Pr) 380.76 635 P
0.56 (ocessor T) 418.25 635 P
0.56 (o Meet Rigor) 452.73 635 P
0.56 (ous Failur) 501.02 635 P
0.56 (e) 539 635 P
(Requir) 102 624 T
(ements) 126.17 624 T
3 F
(.   CSDL-P-2705, Charles Stark Draper Lab., Inc., July 1986.) 151.16 624 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 131
%%Page: "1" 132
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
68 75 542 743.03 R
7 X
0 0 0 1 0 0 0 K
V
1.5 H
2 Z
0 X
N
435.45 722.27 540.01 740.68 R
7 X
V
10 6.5 Q
0 X
(Form Approved) 435.45 733.35 T
(OMB No. 0704-0188) 435.45 723.85 T
69.77 691 539.45 717.11 R
7 X
V
0 5.9 Q
0 X
0.21 (Public reporting burden for this collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources,) 69.77 713.18 P
0.17 (gathering and maintaining the data needed, and completing and reviewing the collection of information.  Send comments regarding this burden estimate or any other aspect of this) 69.77 706.28 P
0.19 (collection of information, including suggestions for reducing this burden, to W) 69.77 699.38 P
0.19 (ashington Headquarters Services, Directorate for Information Operations and Reports, 1215 Jef) 272.09 699.38 P
0.19 (ferson) 523.06 699.38 P
(Davis Highway) 69.77 692.48 T
(, Suite 1204, Arlington, V) 108.35 692.48 T
(A 22202-4302, and to the Of) 173.17 692.48 T
(\336ce of Management and Budget, Paperwork Reduction Project \0500704-0188\051, W) 247.53 692.48 T
(ashington, DC 20503.) 453.25 692.48 T
70.32 679.06 193.14 685.84 R
7 X
V
11 7 Q
0 X
(1.) 70.32 681.17 T
(AGENCY USE ONL) 79.32 681.17 T
(Y) 141.69 681.17 T
10 F
(\050Leave blank\051) 148.3 681.17 T
197.56 679.06 310.97 685.84 R
7 X
V
11 F
0 X
(2.) 197.56 681.17 T
(REPORT DA) 206.56 681.17 T
(TE) 247.27 681.17 T
315.4 679.06 540.01 685.84 R
7 X
V
0 X
(3.) 315.4 681.17 T
(REPORT TYPE AND DA) 324.4 681.17 T
(TES COVERED) 402.44 681.17 T
70.32 656.37 387.87 662.67 R
7 X
V
0 X
(4.) 70.32 658 T
(TITLE AND SUBTITLE) 79.32 658 T
392.85 654.89 540.01 662.67 R
7 X
V
0 X
(5.) 392.85 658 T
(FUNDING NUMBERS) 401.85 658 T
69.77 612.21 387.32 618.78 R
7 X
V
0 X
(6.) 69.77 614.11 T
(AUTHOR\050S\051) 78.77 614.11 T
70.32 568.27 387.87 574.62 R
7 X
V
0 X
(7.) 70.32 569.95 T
(PERFORMING ORGANIZA) 79.32 569.95 T
(TION NAME\050S\051 AND ADDRESS\050ES\051) 165.53 569.95 T
70.32 500.28 387.87 508.06 R
7 X
V
0 X
(9.) 70.32 503.39 T
(SPONSORING/MONIT) 79.32 503.39 T
(ORING AGENCY NAME\050S\051 AND ADDRESS\050ES\051) 151.15 503.39 T
70.32 432.55 540.01 438.9 R
7 X
V
0 X
(1) 70.32 434.24 T
(1.) 73.83 434.24 T
(SUPPLEMENT) 82.32 434.24 T
(AR) 129.64 434.24 T
(Y NOTES) 139.49 434.24 T
392.85 558.62 540.01 573.62 R
7 X
V
0 X
(8.) 392.85 568.95 T
(PERFORMING ORGANIZA) 401.85 568.95 T
(TION) 488.06 568.95 T
(REPORT NUMBER) 401.85 560.95 T
392.85 493.06 540.01 508.06 R
7 X
V
0 X
(10.) 392.85 503.39 T
(SPONSORING/MONIT) 404.85 503.39 T
(ORING) 476.68 503.39 T
(AGENCY REPORT NUMBER) 404.85 495.39 T
70.32 384.17 387.32 391.95 R
7 X
V
0 X
(12a.) 70.32 387.28 T
(DISTRIBUTION/A) 86.32 387.28 T
(V) 142.58 387.28 T
(AILABILITY ST) 146.73 387.28 T
(A) 195.61 387.28 T
(TEMENT) 200.14 387.28 T
392.85 384.17 540.01 391.95 R
7 X
V
0 X
(12b.) 392.85 387.28 T
(DISTRIBUTION CODE) 408.85 387.28 T
69.77 325.2 539.45 331 R
7 X
V
0 X
(13.) 69.77 326.33 T
(ABSTRACT) 81.77 326.33 T
10 F
(\050Maximum 200 words\051) 122.21 326.33 T
70.32 143.95 428.26 149.11 R
7 X
V
11 F
0 X
(14.) 70.32 144.45 T
(SUBJECT TERMS) 82.32 144.45 T
70.32 91.95 192.59 105.84 R
7 X
V
0 X
(17.) 70.32 101.17 T
(SECURITY CLASSIFICA) 82.32 101.17 T
(TION) 161.14 101.17 T
(OF REPORT) 82.32 93.17 T
197.56 91.95 309.31 105.84 R
7 X
V
0 X
(18.) 197.56 101.17 T
(SECURITY CLASSIFICA) 209.56 101.17 T
(TION) 288.38 101.17 T
(OF THIS P) 209.56 93.17 T
(AGE) 243.28 93.17 T
314.29 91.95 428.26 105.84 R
7 X
V
0 X
(19.) 314.29 101.17 T
(SECURITY CLASSIFICA) 326.29 101.17 T
(TION) 405.11 101.17 T
(OF ABSTRACT) 326.29 93.17 T
433.24 91.95 539.45 105.84 R
7 X
V
0 X
(20.) 433.24 101.17 T
(LIMIT) 445.24 101.17 T
(A) 462.99 101.17 T
(TION) 467.53 101.17 T
(OF ABSTRACT) 445.24 93.17 T
433.24 143.32 539.45 148.4 R
7 X
V
0 X
(15.) 433.24 143.73 T
(NUMBER OF P) 445.24 143.73 T
(AGES) 493.72 143.73 T
433.24 122.15 539.45 128.5 R
7 X
V
0 X
(16.) 433.24 123.84 T
(PRICE CODE) 445.24 123.84 T
68.11 52.5 541.67 72.5 R
7 X
V
0 X
(NSN 7540-01-280-5500) 68.11 67.84 T
(Standard Form 298 \050Rev) 434.11 67.84 T
(. 2-89\051) 514.11 67.84 T
0 6 Q
(Prescribed by ANSI Std. Z39-18) 434.11 60.5 T
(298-102) 434.11 53.5 T
69.22 722.27 390.09 740.86 R
7 X
V
11 10.5 Q
0 X
(REPORT DOCUMENT) 144.48 726.86 T
(A) 251.03 726.86 T
(TION P) 257.84 726.86 T
(AGE) 292.07 726.86 T
68 719.46 542 719.46 2 L
N
68 688.64 542 688.64 2 L
N
68 665.05 542 665.05 2 L
N
68 620.93 389.64 620.93 2 L
N
68 576.42 542 576.42 2 L
N
68 441.32 542 441.32 2 L
N
68 394.62 542 394.62 2 L
N
68 333.38 542 333.38 2 L
N
68 108.55 542 108.55 2 L
N
392.21 743 392.21 719.66 2 L
N
195.54 688.44 195.54 665.05 2 L
N
313.17 688.44 313.17 665.05 2 L
N
390.22 665.05 390.22 441.5 2 L
N
390.22 394.45 390.22 333.37 2 L
N
431.23 150.88 431.23 75.51 2 L
N
432.46 130.37 540.86 130.37 2 L
N
195.08 106.95 195.08 76.02 2 L
N
311.92 106.95 311.92 76.02 2 L
N
68 510.96 542 510.96 2 L
N
68 150.92 542 150.92 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
79.61 668.06 193.14 677.13 R
7 X
V
205.32 668.06 311 677.13 R
V
3 10 Q
0 X
(September 1995) 205.32 670.46 T
322.54 668.06 540.01 677.13 R
7 X
V
0 X
(Reference Publication) 322.54 670.46 T
79.61 623.24 387.87 654.65 R
7 X
V
0 X
0.53 (T) 79.61 647.98 P
0.53 (echniques for Modeling the Reliability of Fault-T) 85.02 647.98 P
0.53 (olerant Systems W) 285.84 647.98 P
0.53 (ith the) 362.06 647.98 P
(Markov State-Space Approach) 79.61 637.48 T
402.14 579.17 540.01 646.24 R
7 X
V
0 X
(WU 505-64-10-07) 402.14 639.57 T
78.34 578.36 387.32 610.21 R
7 X
V
0 X
(Ricky W) 78.34 603.54 T
(. Butler and Sally C. Johnson) 113.25 603.54 T
402.85 514.33 540.01 550.6 R
7 X
V
0 X
(L-17425) 402.85 543.93 T
404.28 444.49 540.01 483.78 R
7 X
V
0 X
(NASA RP-1348) 404.28 477.11 T
81.75 397.48 540.01 430.33 R
7 X
V
407.85 336.32 540.01 374.09 R
V
80.49 153.85 539.45 323.2 R
V
0 X
-0.01 (This paper presents a step-by-step tutorial of the methods and the tools that were used for the reliability analysis of) 80.49 316.53 P
0.58 (fault-tolerant systems. The approach used in this paper is the Markov \050or semi-Markov\051 state-space method. The) 80.49 306.03 P
0.13 (paper is intended for design engineers with a basic understanding of computer architecture and fault tolerance, but) 80.49 295.53 P
1.34 (little knowledge of reliability modeling. The representation of architectural features in mathematical models is) 80.49 285.03 P
2.03 (emphasized. This paper does not present details of the mathematical solution of complex reliability models.) 80.49 274.53 P
1.88 (Instead, it describes the use of several recently developed computer programs\321SURE, ASSIST) 80.49 264.03 P
1.88 (, STEM, and) 484.58 264.03 P
(P) 80.49 253.53 T
(A) 85.12 253.53 T
(WS\321that automate the generation and the solution of these models.) 91.54 253.53 T
81.04 111.61 428.26 142.78 R
7 X
V
0 X
(Reliability modeling; Markov models; Reliability analysis; Fault tolerance) 81.04 136.11 T
443.95 132.14 529.89 140.33 R
7 X
V
0 X
(130) 479.42 133.66 T
443.95 110.65 530.57 119.72 R
7 X
V
0 X
(A07) 478.65 113.05 T
443.24 77.66 539.45 89.41 R
7 X
V
78.18 512.55 387.87 566.55 R
V
0 X
(NASA Langley Research Center) 78.18 549.38 T
(Hampton, V) 78.18 538.88 T
(A 23681-0001) 126.33 538.88 T
78.18 443.86 387.87 498.06 R
7 X
V
0 X
(National Aeronautics and Space Administration) 78.18 480.89 T
(W) 78.18 470.39 T
(ashington, DC 20546-0001) 86.82 470.39 T
86.04 336.32 387.32 374.09 R
7 X
V
0 X
(Unclassi\336ed\320Unlimited) 86.04 367.43 T
(Subject Category 62) 86.04 356.93 T
(A) 86.04 346.43 T
(vailability: NASA CASI \050301\051 621-0390) 92.52 346.43 T
80.32 77.66 192.59 89.41 R
7 X
V
0 X
(Unclassi\336ed) 80.32 82.74 T
207.57 77.66 309.32 89.41 R
7 X
V
0 X
(Unclassi\336ed) 207.57 82.74 T
325.01 77.66 428.26 89.41 R
7 X
V
0 X
(Unclassi\336ed) 325.01 82.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 132
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 132
%%DocumentFonts: Helvetica
%%+ Palatino-Roman
%%+ Palatino-Italic
%%+ Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Symbol
%%+ Courier
%%+ Times-BoldItalic
%%+ ZapfDingbats
%%+ Helvetica-Oblique
%%+ Helvetica-Bold
%%EOF
